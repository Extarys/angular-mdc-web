(function () {
'use strict';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = Object.setPrototypeOf ||
    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};





function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

// CommonJS / Node have global context exposed as "global" variable.
// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake
// the global "global" var for now.
var __window$1 = typeof window !== 'undefined' && window;
var __self$1 = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&
    self instanceof WorkerGlobalScope && self;
var __global$1 = typeof commonjsGlobal !== 'undefined' && commonjsGlobal;
var _root = __window$1 || __global$1 || __self$1;
var root_1 = _root;
// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.
// This is needed when used with angular/tsickle which inserts a goog.module statement.
// Wrap in IIFE
(function () {
    if (!_root) {
        throw new Error('RxJS could not find any global context (window, self, global)');
    }
})();


var root = {
	root: root_1
};

function isFunction(x) {
    return typeof x === 'function';
}
var isFunction_2 = isFunction;


var isFunction_1 = {
	isFunction: isFunction_2
};

var isArray_1 = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });


var isArray = {
	isArray: isArray_1
};

function isObject(x) {
    return x != null && typeof x === 'object';
}
var isObject_2 = isObject;


var isObject_1 = {
	isObject: isObject_2
};

// typeof any so that it we don't have to cast when comparing a result to the error object
var errorObject_1 = { e: {} };


var errorObject = {
	errorObject: errorObject_1
};

var tryCatchTarget;
function tryCatcher() {
    try {
        return tryCatchTarget.apply(this, arguments);
    }
    catch (e) {
        errorObject.errorObject.e = e;
        return errorObject.errorObject;
    }
}
function tryCatch(fn) {
    tryCatchTarget = fn;
    return tryCatcher;
}
var tryCatch_2 = tryCatch;



var tryCatch_1 = {
	tryCatch: tryCatch_2
};

var __extends$2 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * An error thrown when one or more errors have occurred during the
 * `unsubscribe` of a {@link Subscription}.
 */
var UnsubscriptionError = (function (_super) {
    __extends$2(UnsubscriptionError, _super);
    function UnsubscriptionError(errors) {
        _super.call(this);
        this.errors = errors;
        var err = Error.call(this, errors ?
            errors.length + " errors occurred during unsubscription:\n  " + errors.map(function (err, i) { return ((i + 1) + ") " + err.toString()); }).join('\n  ') : '');
        this.name = err.name = 'UnsubscriptionError';
        this.stack = err.stack;
        this.message = err.message;
    }
    return UnsubscriptionError;
}(Error));
var UnsubscriptionError_2 = UnsubscriptionError;


var UnsubscriptionError_1 = {
	UnsubscriptionError: UnsubscriptionError_2
};

/**
 * Represents a disposable resource, such as the execution of an Observable. A
 * Subscription has one important method, `unsubscribe`, that takes no argument
 * and just disposes the resource held by the subscription.
 *
 * Additionally, subscriptions may be grouped together through the `add()`
 * method, which will attach a child Subscription to the current Subscription.
 * When a Subscription is unsubscribed, all its children (and its grandchildren)
 * will be unsubscribed as well.
 *
 * @class Subscription
 */
var Subscription = (function () {
    /**
     * @param {function(): void} [unsubscribe] A function describing how to
     * perform the disposal of resources when the `unsubscribe` method is called.
     */
    function Subscription(unsubscribe) {
        /**
         * A flag to indicate whether this Subscription has already been unsubscribed.
         * @type {boolean}
         */
        this.closed = false;
        this._parent = null;
        this._parents = null;
        this._subscriptions = null;
        if (unsubscribe) {
            this._unsubscribe = unsubscribe;
        }
    }
    /**
     * Disposes the resources held by the subscription. May, for instance, cancel
     * an ongoing Observable execution or cancel any other type of work that
     * started when the Subscription was created.
     * @return {void}
     */
    Subscription.prototype.unsubscribe = function () {
        var hasErrors = false;
        var errors;
        if (this.closed) {
            return;
        }
        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
        this.closed = true;
        this._parent = null;
        this._parents = null;
        // null out _subscriptions first so any child subscriptions that attempt
        // to remove themselves from this subscription will noop
        this._subscriptions = null;
        var index = -1;
        var len = _parents ? _parents.length : 0;
        // if this._parent is null, then so is this._parents, and we
        // don't have to remove ourselves from any parent subscriptions.
        while (_parent) {
            _parent.remove(this);
            // if this._parents is null or index >= len,
            // then _parent is set to null, and the loop exits
            _parent = ++index < len && _parents[index] || null;
        }
        if (isFunction_1.isFunction(_unsubscribe)) {
            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
            if (trial === errorObject.errorObject) {
                hasErrors = true;
                errors = errors || (errorObject.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?
                    flattenUnsubscriptionErrors(errorObject.errorObject.e.errors) : [errorObject.errorObject.e]);
            }
        }
        if (isArray.isArray(_subscriptions)) {
            index = -1;
            len = _subscriptions.length;
            while (++index < len) {
                var sub = _subscriptions[index];
                if (isObject_1.isObject(sub)) {
                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
                    if (trial === errorObject.errorObject) {
                        hasErrors = true;
                        errors = errors || [];
                        var err = errorObject.errorObject.e;
                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));
                        }
                        else {
                            errors.push(err);
                        }
                    }
                }
            }
        }
        if (hasErrors) {
            throw new UnsubscriptionError_1.UnsubscriptionError(errors);
        }
    };
    /**
     * Adds a tear down to be called during the unsubscribe() of this
     * Subscription.
     *
     * If the tear down being added is a subscription that is already
     * unsubscribed, is the same reference `add` is being called on, or is
     * `Subscription.EMPTY`, it will not be added.
     *
     * If this subscription is already in an `closed` state, the passed
     * tear down logic will be executed immediately.
     *
     * @param {TeardownLogic} teardown The additional logic to execute on
     * teardown.
     * @return {Subscription} Returns the Subscription used or created to be
     * added to the inner subscriptions list. This Subscription can be used with
     * `remove()` to remove the passed teardown logic from the inner subscriptions
     * list.
     */
    Subscription.prototype.add = function (teardown) {
        if (!teardown || (teardown === Subscription.EMPTY)) {
            return Subscription.EMPTY;
        }
        if (teardown === this) {
            return this;
        }
        var subscription = teardown;
        switch (typeof teardown) {
            case 'function':
                subscription = new Subscription(teardown);
            case 'object':
                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {
                    return subscription;
                }
                else if (this.closed) {
                    subscription.unsubscribe();
                    return subscription;
                }
                else if (typeof subscription._addParent !== 'function' /* quack quack */) {
                    var tmp = subscription;
                    subscription = new Subscription();
                    subscription._subscriptions = [tmp];
                }
                break;
            default:
                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
        }
        var subscriptions = this._subscriptions || (this._subscriptions = []);
        subscriptions.push(subscription);
        subscription._addParent(this);
        return subscription;
    };
    /**
     * Removes a Subscription from the internal list of subscriptions that will
     * unsubscribe during the unsubscribe process of this Subscription.
     * @param {Subscription} subscription The subscription to remove.
     * @return {void}
     */
    Subscription.prototype.remove = function (subscription) {
        var subscriptions = this._subscriptions;
        if (subscriptions) {
            var subscriptionIndex = subscriptions.indexOf(subscription);
            if (subscriptionIndex !== -1) {
                subscriptions.splice(subscriptionIndex, 1);
            }
        }
    };
    Subscription.prototype._addParent = function (parent) {
        var _a = this, _parent = _a._parent, _parents = _a._parents;
        if (!_parent || _parent === parent) {
            // If we don't have a parent, or the new parent is the same as the
            // current parent, then set this._parent to the new parent.
            this._parent = parent;
        }
        else if (!_parents) {
            // If there's already one parent, but not multiple, allocate an Array to
            // store the rest of the parent Subscriptions.
            this._parents = [parent];
        }
        else if (_parents.indexOf(parent) === -1) {
            // Only add the new parent to the _parents list if it's not already there.
            _parents.push(parent);
        }
    };
    Subscription.EMPTY = (function (empty) {
        empty.closed = true;
        return empty;
    }(new Subscription()));
    return Subscription;
}());
var Subscription_2 = Subscription;
function flattenUnsubscriptionErrors(errors) {
    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);
}


var Subscription_1 = {
	Subscription: Subscription_2
};

var empty = {
    closed: true,
    next: function (value) { },
    error: function (err) { throw err; },
    complete: function () { }
};


var Observer = {
	empty: empty
};

var rxSubscriber = createCommonjsModule(function (module, exports) {
"use strict";

var Symbol = root.root.Symbol;
exports.rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?
    Symbol.for('rxSubscriber') : '@@rxSubscriber';
/**
 * @deprecated use rxSubscriber instead
 */
exports.$$rxSubscriber = exports.rxSubscriber;

});

var __extends$1 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};




/**
 * Implements the {@link Observer} interface and extends the
 * {@link Subscription} class. While the {@link Observer} is the public API for
 * consuming the values of an {@link Observable}, all Observers get converted to
 * a Subscriber, in order to provide Subscription-like capabilities such as
 * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for
 * implementing operators, but it is rarely used as a public API.
 *
 * @class Subscriber<T>
 */
var Subscriber = (function (_super) {
    __extends$1(Subscriber, _super);
    /**
     * @param {Observer|function(value: T): void} [destinationOrNext] A partially
     * defined Observer or a `next` callback function.
     * @param {function(e: ?any): void} [error] The `error` callback of an
     * Observer.
     * @param {function(): void} [complete] The `complete` callback of an
     * Observer.
     */
    function Subscriber(destinationOrNext, error, complete) {
        _super.call(this);
        this.syncErrorValue = null;
        this.syncErrorThrown = false;
        this.syncErrorThrowable = false;
        this.isStopped = false;
        switch (arguments.length) {
            case 0:
                this.destination = Observer.empty;
                break;
            case 1:
                if (!destinationOrNext) {
                    this.destination = Observer.empty;
                    break;
                }
                if (typeof destinationOrNext === 'object') {
                    if (destinationOrNext instanceof Subscriber) {
                        this.destination = destinationOrNext;
                        this.destination.add(this);
                    }
                    else {
                        this.syncErrorThrowable = true;
                        this.destination = new SafeSubscriber(this, destinationOrNext);
                    }
                    break;
                }
            default:
                this.syncErrorThrowable = true;
                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
                break;
        }
    }
    Subscriber.prototype[rxSubscriber.rxSubscriber] = function () { return this; };
    /**
     * A static factory for a Subscriber, given a (potentially partial) definition
     * of an Observer.
     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.
     * @param {function(e: ?any): void} [error] The `error` callback of an
     * Observer.
     * @param {function(): void} [complete] The `complete` callback of an
     * Observer.
     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)
     * Observer represented by the given arguments.
     */
    Subscriber.create = function (next, error, complete) {
        var subscriber = new Subscriber(next, error, complete);
        subscriber.syncErrorThrowable = false;
        return subscriber;
    };
    /**
     * The {@link Observer} callback to receive notifications of type `next` from
     * the Observable, with a value. The Observable may call this method 0 or more
     * times.
     * @param {T} [value] The `next` value.
     * @return {void}
     */
    Subscriber.prototype.next = function (value) {
        if (!this.isStopped) {
            this._next(value);
        }
    };
    /**
     * The {@link Observer} callback to receive notifications of type `error` from
     * the Observable, with an attached {@link Error}. Notifies the Observer that
     * the Observable has experienced an error condition.
     * @param {any} [err] The `error` exception.
     * @return {void}
     */
    Subscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            this.isStopped = true;
            this._error(err);
        }
    };
    /**
     * The {@link Observer} callback to receive a valueless notification of type
     * `complete` from the Observable. Notifies the Observer that the Observable
     * has finished sending push-based notifications.
     * @return {void}
     */
    Subscriber.prototype.complete = function () {
        if (!this.isStopped) {
            this.isStopped = true;
            this._complete();
        }
    };
    Subscriber.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.isStopped = true;
        _super.prototype.unsubscribe.call(this);
    };
    Subscriber.prototype._next = function (value) {
        this.destination.next(value);
    };
    Subscriber.prototype._error = function (err) {
        this.destination.error(err);
        this.unsubscribe();
    };
    Subscriber.prototype._complete = function () {
        this.destination.complete();
        this.unsubscribe();
    };
    Subscriber.prototype._unsubscribeAndRecycle = function () {
        var _a = this, _parent = _a._parent, _parents = _a._parents;
        this._parent = null;
        this._parents = null;
        this.unsubscribe();
        this.closed = false;
        this.isStopped = false;
        this._parent = _parent;
        this._parents = _parents;
        return this;
    };
    return Subscriber;
}(Subscription_1.Subscription));
var Subscriber_2 = Subscriber;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SafeSubscriber = (function (_super) {
    __extends$1(SafeSubscriber, _super);
    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {
        _super.call(this);
        this._parentSubscriber = _parentSubscriber;
        var next;
        var context = this;
        if (isFunction_1.isFunction(observerOrNext)) {
            next = observerOrNext;
        }
        else if (observerOrNext) {
            next = observerOrNext.next;
            error = observerOrNext.error;
            complete = observerOrNext.complete;
            if (observerOrNext !== Observer.empty) {
                context = Object.create(observerOrNext);
                if (isFunction_1.isFunction(context.unsubscribe)) {
                    this.add(context.unsubscribe.bind(context));
                }
                context.unsubscribe = this.unsubscribe.bind(this);
            }
        }
        this._context = context;
        this._next = next;
        this._error = error;
        this._complete = complete;
    }
    SafeSubscriber.prototype.next = function (value) {
        if (!this.isStopped && this._next) {
            var _parentSubscriber = this._parentSubscriber;
            if (!_parentSubscriber.syncErrorThrowable) {
                this.__tryOrUnsub(this._next, value);
            }
            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            if (this._error) {
                if (!_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(this._error, err);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, this._error, err);
                    this.unsubscribe();
                }
            }
            else if (!_parentSubscriber.syncErrorThrowable) {
                this.unsubscribe();
                throw err;
            }
            else {
                _parentSubscriber.syncErrorValue = err;
                _parentSubscriber.syncErrorThrown = true;
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.complete = function () {
        var _this = this;
        if (!this.isStopped) {
            var _parentSubscriber = this._parentSubscriber;
            if (this._complete) {
                var wrappedComplete = function () { return _this._complete.call(_this._context); };
                if (!_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(wrappedComplete);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);
                    this.unsubscribe();
                }
            }
            else {
                this.unsubscribe();
            }
        }
    };
    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            this.unsubscribe();
            throw err;
        }
    };
    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            parent.syncErrorValue = err;
            parent.syncErrorThrown = true;
            return true;
        }
        return false;
    };
    SafeSubscriber.prototype._unsubscribe = function () {
        var _parentSubscriber = this._parentSubscriber;
        this._context = null;
        this._parentSubscriber = null;
        _parentSubscriber.unsubscribe();
    };
    return SafeSubscriber;
}(Subscriber));


var Subscriber_1 = {
	Subscriber: Subscriber_2
};

function toSubscriber(nextOrObserver, error, complete) {
    if (nextOrObserver) {
        if (nextOrObserver instanceof Subscriber_1.Subscriber) {
            return nextOrObserver;
        }
        if (nextOrObserver[rxSubscriber.rxSubscriber]) {
            return nextOrObserver[rxSubscriber.rxSubscriber]();
        }
    }
    if (!nextOrObserver && !error && !complete) {
        return new Subscriber_1.Subscriber(Observer.empty);
    }
    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
}
var toSubscriber_2 = toSubscriber;


var toSubscriber_1 = {
	toSubscriber: toSubscriber_2
};

var observable = createCommonjsModule(function (module, exports) {
"use strict";

function getSymbolObservable(context) {
    var $$observable;
    var Symbol = context.Symbol;
    if (typeof Symbol === 'function') {
        if (Symbol.observable) {
            $$observable = Symbol.observable;
        }
        else {
            $$observable = Symbol('observable');
            Symbol.observable = $$observable;
        }
    }
    else {
        $$observable = '@@observable';
    }
    return $$observable;
}
exports.getSymbolObservable = getSymbolObservable;
exports.observable = getSymbolObservable(root.root);
/**
 * @deprecated use observable instead
 */
exports.$$observable = exports.observable;

});

/**
 * A representation of any set of values over any amount of time. This the most basic building block
 * of RxJS.
 *
 * @class Observable<T>
 */
var Observable = (function () {
    /**
     * @constructor
     * @param {Function} subscribe the function that is  called when the Observable is
     * initially subscribed to. This function is given a Subscriber, to which new values
     * can be `next`ed, or an `error` method can be called to raise an error, or
     * `complete` can be called to notify of a successful completion.
     */
    function Observable(subscribe) {
        this._isScalar = false;
        if (subscribe) {
            this._subscribe = subscribe;
        }
    }
    /**
     * Creates a new Observable, with this Observable as the source, and the passed
     * operator defined as the new observable's operator.
     * @method lift
     * @param {Operator} operator the operator defining the operation to take on the observable
     * @return {Observable} a new observable with the Operator applied
     */
    Observable.prototype.lift = function (operator) {
        var observable$$1 = new Observable();
        observable$$1.source = this;
        observable$$1.operator = operator;
        return observable$$1;
    };
    /**
     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.
     *
     * <span class="informal">Use it when you have all these Observables, but still nothing is happening.</span>
     *
     * `subscribe` is not a regular operator, but a method that calls Observables internal `subscribe` function. It
     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is
     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling
     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often
     * thought.
     *
     * Apart from starting the execution of an Observable, this method allows you to listen for values
     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two
     * following ways.
     *
     * The first way is creating an object that implements {@link Observer} interface. It should have methods
     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create
     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do
     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also
     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't
     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will
     * be left uncaught.
     *
     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.
     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent
     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,
     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,
     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes
     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.
     *
     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.
     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean
     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback
     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.
     *
     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.
     * It is an Observable itself that decides when these functions will be called. For example {@link of}
     * by default emits all its values synchronously. Always check documentation for how given Observable
     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.
     *
     * @example <caption>Subscribe with an Observer</caption>
     * const sumObserver = {
     *   sum: 0,
     *   next(value) {
     *     console.log('Adding: ' + value);
     *     this.sum = this.sum + value;
     *   },
     *   error() { // We actually could just remote this method,
     *   },        // since we do not really care about errors right now.
     *   complete() {
     *     console.log('Sum equals: ' + this.sum);
     *   }
     * };
     *
     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.
     * .subscribe(sumObserver);
     *
     * // Logs:
     * // "Adding: 1"
     * // "Adding: 2"
     * // "Adding: 3"
     * // "Sum equals: 6"
     *
     *
     * @example <caption>Subscribe with functions</caption>
     * let sum = 0;
     *
     * Rx.Observable.of(1, 2, 3)
     * .subscribe(
     *   function(value) {
     *     console.log('Adding: ' + value);
     *     sum = sum + value;
     *   },
     *   undefined,
     *   function() {
     *     console.log('Sum equals: ' + sum);
     *   }
     * );
     *
     * // Logs:
     * // "Adding: 1"
     * // "Adding: 2"
     * // "Adding: 3"
     * // "Sum equals: 6"
     *
     *
     * @example <caption>Cancel a subscription</caption>
     * const subscription = Rx.Observable.interval(1000).subscribe(
     *   num => console.log(num),
     *   undefined,
     *   () => console.log('completed!') // Will not be called, even
     * );                                // when cancelling subscription
     *
     *
     * setTimeout(() => {
     *   subscription.unsubscribe();
     *   console.log('unsubscribed!');
     * }, 2500);
     *
     * // Logs:
     * // 0 after 1s
     * // 1 after 2s
     * // "unsubscribed!" after 2,5s
     *
     *
     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,
     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed
     *  Observable.
     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,
     *  the error will be thrown as unhandled.
     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.
     * @return {ISubscription} a subscription reference to the registered handlers
     * @method subscribe
     */
    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
        var operator = this.operator;
        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
        if (operator) {
            operator.call(sink, this.source);
        }
        else {
            sink.add(this.source ? this._subscribe(sink) : this._trySubscribe(sink));
        }
        if (sink.syncErrorThrowable) {
            sink.syncErrorThrowable = false;
            if (sink.syncErrorThrown) {
                throw sink.syncErrorValue;
            }
        }
        return sink;
    };
    Observable.prototype._trySubscribe = function (sink) {
        try {
            return this._subscribe(sink);
        }
        catch (err) {
            sink.syncErrorThrown = true;
            sink.syncErrorValue = err;
            sink.error(err);
        }
    };
    /**
     * @method forEach
     * @param {Function} next a handler for each value emitted by the observable
     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise
     * @return {Promise} a promise that either resolves on observable completion or
     *  rejects with the handled error
     */
    Observable.prototype.forEach = function (next, PromiseCtor) {
        var _this = this;
        if (!PromiseCtor) {
            if (root.root.Rx && root.root.Rx.config && root.root.Rx.config.Promise) {
                PromiseCtor = root.root.Rx.config.Promise;
            }
            else if (root.root.Promise) {
                PromiseCtor = root.root.Promise;
            }
        }
        if (!PromiseCtor) {
            throw new Error('no Promise impl found');
        }
        return new PromiseCtor(function (resolve, reject) {
            // Must be declared in a separate statement to avoid a RefernceError when
            // accessing subscription below in the closure due to Temporal Dead Zone.
            var subscription;
            subscription = _this.subscribe(function (value) {
                if (subscription) {
                    // if there is a subscription, then we can surmise
                    // the next handling is asynchronous. Any errors thrown
                    // need to be rejected explicitly and unsubscribe must be
                    // called manually
                    try {
                        next(value);
                    }
                    catch (err) {
                        reject(err);
                        subscription.unsubscribe();
                    }
                }
                else {
                    // if there is NO subscription, then we're getting a nexted
                    // value synchronously during subscription. We can just call it.
                    // If it errors, Observable's `subscribe` will ensure the
                    // unsubscription logic is called, then synchronously rethrow the error.
                    // After that, Promise will trap the error and send it
                    // down the rejection path.
                    next(value);
                }
            }, reject, resolve);
        });
    };
    Observable.prototype._subscribe = function (subscriber) {
        return this.source.subscribe(subscriber);
    };
    /**
     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
     * @method Symbol.observable
     * @return {Observable} this instance of the observable
     */
    Observable.prototype[observable.observable] = function () {
        return this;
    };
    // HACK: Since TypeScript inherits static properties too, we have to
    // fight against TypeScript here so Subject can have a different static create signature
    /**
     * Creates a new cold Observable by calling the Observable constructor
     * @static true
     * @owner Observable
     * @method create
     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
     * @return {Observable} a new cold observable
     */
    Observable.create = function (subscribe) {
        return new Observable(subscribe);
    };
    return Observable;
}());
var Observable_2 = Observable;


var Observable_1 = {
	Observable: Observable_2
};

var __extends$4 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var ScalarObservable = (function (_super) {
    __extends$4(ScalarObservable, _super);
    function ScalarObservable(value, scheduler) {
        _super.call(this);
        this.value = value;
        this.scheduler = scheduler;
        this._isScalar = true;
        if (scheduler) {
            this._isScalar = false;
        }
    }
    ScalarObservable.create = function (value, scheduler) {
        return new ScalarObservable(value, scheduler);
    };
    ScalarObservable.dispatch = function (state) {
        var done = state.done, value = state.value, subscriber = state.subscriber;
        if (done) {
            subscriber.complete();
            return;
        }
        subscriber.next(value);
        if (subscriber.closed) {
            return;
        }
        state.done = true;
        this.schedule(state);
    };
    ScalarObservable.prototype._subscribe = function (subscriber) {
        var value = this.value;
        var scheduler = this.scheduler;
        if (scheduler) {
            return scheduler.schedule(ScalarObservable.dispatch, 0, {
                done: false, value: value, subscriber: subscriber
            });
        }
        else {
            subscriber.next(value);
            if (!subscriber.closed) {
                subscriber.complete();
            }
        }
    };
    return ScalarObservable;
}(Observable_1.Observable));
var ScalarObservable_2 = ScalarObservable;


var ScalarObservable_1 = {
	ScalarObservable: ScalarObservable_2
};

var __extends$5 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var EmptyObservable = (function (_super) {
    __extends$5(EmptyObservable, _super);
    function EmptyObservable(scheduler) {
        _super.call(this);
        this.scheduler = scheduler;
    }
    /**
     * Creates an Observable that emits no items to the Observer and immediately
     * emits a complete notification.
     *
     * <span class="informal">Just emits 'complete', and nothing else.
     * </span>
     *
     * <img src="./img/empty.png" width="100%">
     *
     * This static operator is useful for creating a simple Observable that only
     * emits the complete notification. It can be used for composing with other
     * Observables, such as in a {@link mergeMap}.
     *
     * @example <caption>Emit the number 7, then complete.</caption>
     * var result = Rx.Observable.empty().startWith(7);
     * result.subscribe(x => console.log(x));
     *
     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>
     * var interval = Rx.Observable.interval(1000);
     * var result = interval.mergeMap(x =>
     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()
     * );
     * result.subscribe(x => console.log(x));
     *
     * // Results in the following to the console:
     * // x is equal to the count on the interval eg(0,1,2,3,...)
     * // x will occur every 1000ms
     * // if x % 2 is equal to 1 print abc
     * // if x % 2 is not equal to 1 nothing will be output
     *
     * @see {@link create}
     * @see {@link never}
     * @see {@link of}
     * @see {@link throw}
     *
     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
     * the emission of the complete notification.
     * @return {Observable} An "empty" Observable: emits only the complete
     * notification.
     * @static true
     * @name empty
     * @owner Observable
     */
    EmptyObservable.create = function (scheduler) {
        return new EmptyObservable(scheduler);
    };
    EmptyObservable.dispatch = function (arg) {
        var subscriber = arg.subscriber;
        subscriber.complete();
    };
    EmptyObservable.prototype._subscribe = function (subscriber) {
        var scheduler = this.scheduler;
        if (scheduler) {
            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });
        }
        else {
            subscriber.complete();
        }
    };
    return EmptyObservable;
}(Observable_1.Observable));
var EmptyObservable_2 = EmptyObservable;


var EmptyObservable_1 = {
	EmptyObservable: EmptyObservable_2
};

function isScheduler(value) {
    return value && typeof value.schedule === 'function';
}
var isScheduler_2 = isScheduler;


var isScheduler_1 = {
	isScheduler: isScheduler_2
};

var __extends$3 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};




/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var ArrayObservable = (function (_super) {
    __extends$3(ArrayObservable, _super);
    function ArrayObservable(array, scheduler) {
        _super.call(this);
        this.array = array;
        this.scheduler = scheduler;
        if (!scheduler && array.length === 1) {
            this._isScalar = true;
            this.value = array[0];
        }
    }
    ArrayObservable.create = function (array, scheduler) {
        return new ArrayObservable(array, scheduler);
    };
    /**
     * Creates an Observable that emits some values you specify as arguments,
     * immediately one after the other, and then emits a complete notification.
     *
     * <span class="informal">Emits the arguments you provide, then completes.
     * </span>
     *
     * <img src="./img/of.png" width="100%">
     *
     * This static operator is useful for creating a simple Observable that only
     * emits the arguments given, and the complete notification thereafter. It can
     * be used for composing with other Observables, such as with {@link concat}.
     * By default, it uses a `null` IScheduler, which means the `next`
     * notifications are sent synchronously, although with a different IScheduler
     * it is possible to determine when those notifications will be delivered.
     *
     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>
     * var numbers = Rx.Observable.of(10, 20, 30);
     * var letters = Rx.Observable.of('a', 'b', 'c');
     * var interval = Rx.Observable.interval(1000);
     * var result = numbers.concat(letters).concat(interval);
     * result.subscribe(x => console.log(x));
     *
     * @see {@link create}
     * @see {@link empty}
     * @see {@link never}
     * @see {@link throw}
     *
     * @param {...T} values Arguments that represent `next` values to be emitted.
     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling
     * the emissions of the `next` notifications.
     * @return {Observable<T>} An Observable that emits each given input value.
     * @static true
     * @name of
     * @owner Observable
     */
    ArrayObservable.of = function () {
        var array = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            array[_i - 0] = arguments[_i];
        }
        var scheduler = array[array.length - 1];
        if (isScheduler_1.isScheduler(scheduler)) {
            array.pop();
        }
        else {
            scheduler = null;
        }
        var len = array.length;
        if (len > 1) {
            return new ArrayObservable(array, scheduler);
        }
        else if (len === 1) {
            return new ScalarObservable_1.ScalarObservable(array[0], scheduler);
        }
        else {
            return new EmptyObservable_1.EmptyObservable(scheduler);
        }
    };
    ArrayObservable.dispatch = function (state) {
        var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;
        if (index >= count) {
            subscriber.complete();
            return;
        }
        subscriber.next(array[index]);
        if (subscriber.closed) {
            return;
        }
        state.index = index + 1;
        this.schedule(state);
    };
    ArrayObservable.prototype._subscribe = function (subscriber) {
        var index = 0;
        var array = this.array;
        var count = array.length;
        var scheduler = this.scheduler;
        if (scheduler) {
            return scheduler.schedule(ArrayObservable.dispatch, 0, {
                array: array, index: index, count: count, subscriber: subscriber
            });
        }
        else {
            for (var i = 0; i < count && !subscriber.closed; i++) {
                subscriber.next(array[i]);
            }
            subscriber.complete();
        }
    };
    return ArrayObservable;
}(Observable_1.Observable));
var ArrayObservable_2 = ArrayObservable;


var ArrayObservable_1 = {
	ArrayObservable: ArrayObservable_2
};

var __extends$7 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var OuterSubscriber = (function (_super) {
    __extends$7(OuterSubscriber, _super);
    function OuterSubscriber() {
        _super.apply(this, arguments);
    }
    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    };
    OuterSubscriber.prototype.notifyError = function (error, innerSub) {
        this.destination.error(error);
    };
    OuterSubscriber.prototype.notifyComplete = function (innerSub) {
        this.destination.complete();
    };
    return OuterSubscriber;
}(Subscriber_1.Subscriber));
var OuterSubscriber_2 = OuterSubscriber;


var OuterSubscriber_1 = {
	OuterSubscriber: OuterSubscriber_2
};

var isArrayLike_1 = (function (x) { return x && typeof x.length === 'number'; });


var isArrayLike = {
	isArrayLike: isArrayLike_1
};

function isPromise$1(value) {
    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
}
var isPromise_2 = isPromise$1;


var isPromise_1 = {
	isPromise: isPromise_2
};

var iterator = createCommonjsModule(function (module, exports) {
"use strict";

function symbolIteratorPonyfill(root$$2) {
    var Symbol = root$$2.Symbol;
    if (typeof Symbol === 'function') {
        if (!Symbol.iterator) {
            Symbol.iterator = Symbol('iterator polyfill');
        }
        return Symbol.iterator;
    }
    else {
        // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)
        var Set_1 = root$$2.Set;
        if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {
            return '@@iterator';
        }
        var Map_1 = root$$2.Map;
        // required for compatability with es6-shim
        if (Map_1) {
            var keys = Object.getOwnPropertyNames(Map_1.prototype);
            for (var i = 0; i < keys.length; ++i) {
                var key = keys[i];
                // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.
                if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {
                    return key;
                }
            }
        }
        return '@@iterator';
    }
}
exports.symbolIteratorPonyfill = symbolIteratorPonyfill;
exports.iterator = symbolIteratorPonyfill(root.root);
/**
 * @deprecated use iterator instead
 */
exports.$$iterator = exports.iterator;

});

var __extends$8 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var InnerSubscriber = (function (_super) {
    __extends$8(InnerSubscriber, _super);
    function InnerSubscriber(parent, outerValue, outerIndex) {
        _super.call(this);
        this.parent = parent;
        this.outerValue = outerValue;
        this.outerIndex = outerIndex;
        this.index = 0;
    }
    InnerSubscriber.prototype._next = function (value) {
        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
    };
    InnerSubscriber.prototype._error = function (error) {
        this.parent.notifyError(error, this);
        this.unsubscribe();
    };
    InnerSubscriber.prototype._complete = function () {
        this.parent.notifyComplete(this);
        this.unsubscribe();
    };
    return InnerSubscriber;
}(Subscriber_1.Subscriber));
var InnerSubscriber_2 = InnerSubscriber;


var InnerSubscriber_1 = {
	InnerSubscriber: InnerSubscriber_2
};

function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
    var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);
    if (destination.closed) {
        return null;
    }
    if (result instanceof Observable_1.Observable) {
        if (result._isScalar) {
            destination.next(result.value);
            destination.complete();
            return null;
        }
        else {
            return result.subscribe(destination);
        }
    }
    else if (isArrayLike.isArrayLike(result)) {
        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {
            destination.next(result[i]);
        }
        if (!destination.closed) {
            destination.complete();
        }
    }
    else if (isPromise_1.isPromise(result)) {
        result.then(function (value) {
            if (!destination.closed) {
                destination.next(value);
                destination.complete();
            }
        }, function (err) { return destination.error(err); })
            .then(null, function (err) {
            // Escaping the Promise trap: globally throw unhandled errors
            root.root.setTimeout(function () { throw err; });
        });
        return destination;
    }
    else if (result && typeof result[iterator.iterator] === 'function') {
        var iterator$$1 = result[iterator.iterator]();
        do {
            var item = iterator$$1.next();
            if (item.done) {
                destination.complete();
                break;
            }
            destination.next(item.value);
            if (destination.closed) {
                break;
            }
        } while (true);
    }
    else if (result && typeof result[observable.observable] === 'function') {
        var obs = result[observable.observable]();
        if (typeof obs.subscribe !== 'function') {
            destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));
        }
        else {
            return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));
        }
    }
    else {
        var value = isObject_1.isObject(result) ? 'an invalid object' : "'" + result + "'";
        var msg = ("You provided " + value + " where a stream was expected.")
            + ' You can provide an Observable, Promise, Array, or Iterable.';
        destination.error(new TypeError(msg));
    }
    return null;
}
var subscribeToResult_2 = subscribeToResult;


var subscribeToResult_1 = {
	subscribeToResult: subscribeToResult_2
};

var __extends$6 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};


/**
 * Converts a higher-order Observable into a first-order Observable which
 * concurrently delivers all values that are emitted on the inner Observables.
 *
 * <span class="informal">Flattens an Observable-of-Observables.</span>
 *
 * <img src="./img/mergeAll.png" width="100%">
 *
 * `mergeAll` subscribes to an Observable that emits Observables, also known as
 * a higher-order Observable. Each time it observes one of these emitted inner
 * Observables, it subscribes to that and delivers all the values from the
 * inner Observable on the output Observable. The output Observable only
 * completes once all inner Observables have completed. Any error delivered by
 * a inner Observable will be immediately emitted on the output Observable.
 *
 * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
 * var firstOrder = higherOrder.mergeAll();
 * firstOrder.subscribe(x => console.log(x));
 *
 * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));
 * var firstOrder = higherOrder.mergeAll(2);
 * firstOrder.subscribe(x => console.log(x));
 *
 * @see {@link combineAll}
 * @see {@link concatAll}
 * @see {@link exhaust}
 * @see {@link merge}
 * @see {@link mergeMap}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 * @see {@link switch}
 * @see {@link zipAll}
 *
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits values coming from all the
 * inner Observables emitted by the source Observable.
 * @method mergeAll
 * @owner Observable
 */
function mergeAll(concurrent) {
    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
    return this.lift(new MergeAllOperator(concurrent));
}
var mergeAll_2 = mergeAll;
var MergeAllOperator = (function () {
    function MergeAllOperator(concurrent) {
        this.concurrent = concurrent;
    }
    MergeAllOperator.prototype.call = function (observer, source) {
        return source.subscribe(new MergeAllSubscriber(observer, this.concurrent));
    };
    return MergeAllOperator;
}());
var MergeAllOperator_1 = MergeAllOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MergeAllSubscriber = (function (_super) {
    __extends$6(MergeAllSubscriber, _super);
    function MergeAllSubscriber(destination, concurrent) {
        _super.call(this, destination);
        this.concurrent = concurrent;
        this.hasCompleted = false;
        this.buffer = [];
        this.active = 0;
    }
    MergeAllSubscriber.prototype._next = function (observable) {
        if (this.active < this.concurrent) {
            this.active++;
            this.add(subscribeToResult_1.subscribeToResult(this, observable));
        }
        else {
            this.buffer.push(observable);
        }
    };
    MergeAllSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            this.destination.complete();
        }
    };
    MergeAllSubscriber.prototype.notifyComplete = function (innerSub) {
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        }
        else if (this.active === 0 && this.hasCompleted) {
            this.destination.complete();
        }
    };
    return MergeAllSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
var MergeAllSubscriber_1 = MergeAllSubscriber;


var mergeAll_1 = {
	mergeAll: mergeAll_2,
	MergeAllOperator: MergeAllOperator_1,
	MergeAllSubscriber: MergeAllSubscriber_1
};

/* tslint:enable:max-line-length */
/**
 * Creates an output Observable which concurrently emits all values from every
 * given input Observable.
 *
 * <span class="informal">Flattens multiple Observables together by blending
 * their values into one Observable.</span>
 *
 * <img src="./img/merge.png" width="100%">
 *
 * `merge` subscribes to each given input Observable (either the source or an
 * Observable given as argument), and simply forwards (without doing any
 * transformation) all the values from all the input Observables to the output
 * Observable. The output Observable only completes once all input Observables
 * have completed. Any error delivered by an input Observable will be immediately
 * emitted on the output Observable.
 *
 * @example <caption>Merge together two Observables: 1s interval and clicks</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var timer = Rx.Observable.interval(1000);
 * var clicksOrTimer = clicks.merge(timer);
 * clicksOrTimer.subscribe(x => console.log(x));
 *
 * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>
 * var timer1 = Rx.Observable.interval(1000).take(10);
 * var timer2 = Rx.Observable.interval(2000).take(6);
 * var timer3 = Rx.Observable.interval(500).take(10);
 * var concurrent = 2; // the argument
 * var merged = timer1.merge(timer2, timer3, concurrent);
 * merged.subscribe(x => console.log(x));
 *
 * @see {@link mergeAll}
 * @see {@link mergeMap}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 *
 * @param {ObservableInput} other An input Observable to merge with the source
 * Observable. More than one input Observables may be given as argument.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @param {Scheduler} [scheduler=null] The IScheduler to use for managing
 * concurrency of input Observables.
 * @return {Observable} An Observable that emits items that are the result of
 * every input Observable.
 * @method merge
 * @owner Observable
 */
function merge$2() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    return this.lift.call(mergeStatic.apply(void 0, [this].concat(observables)));
}
var merge_2$1 = merge$2;
/* tslint:enable:max-line-length */
/**
 * Creates an output Observable which concurrently emits all values from every
 * given input Observable.
 *
 * <span class="informal">Flattens multiple Observables together by blending
 * their values into one Observable.</span>
 *
 * <img src="./img/merge.png" width="100%">
 *
 * `merge` subscribes to each given input Observable (as arguments), and simply
 * forwards (without doing any transformation) all the values from all the input
 * Observables to the output Observable. The output Observable only completes
 * once all input Observables have completed. Any error delivered by an input
 * Observable will be immediately emitted on the output Observable.
 *
 * @example <caption>Merge together two Observables: 1s interval and clicks</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var timer = Rx.Observable.interval(1000);
 * var clicksOrTimer = Rx.Observable.merge(clicks, timer);
 * clicksOrTimer.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // timer will emit ascending values, one every second(1000ms) to console
 * // clicks logs MouseEvents to console everytime the "document" is clicked
 * // Since the two streams are merged you see these happening
 * // as they occur.
 *
 * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>
 * var timer1 = Rx.Observable.interval(1000).take(10);
 * var timer2 = Rx.Observable.interval(2000).take(6);
 * var timer3 = Rx.Observable.interval(500).take(10);
 * var concurrent = 2; // the argument
 * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);
 * merged.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // - First timer1 and timer2 will run concurrently
 * // - timer1 will emit a value every 1000ms for 10 iterations
 * // - timer2 will emit a value every 2000ms for 6 iterations
 * // - after timer1 hits it's max iteration, timer2 will
 * //   continue, and timer3 will start to run concurrently with timer2
 * // - when timer2 hits it's max iteration it terminates, and
 * //   timer3 will continue to emit a value every 500ms until it is complete
 *
 * @see {@link mergeAll}
 * @see {@link mergeMap}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 *
 * @param {...ObservableInput} observables Input Observables to merge together.
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @param {Scheduler} [scheduler=null] The IScheduler to use for managing
 * concurrency of input Observables.
 * @return {Observable} an Observable that emits items that are the result of
 * every input Observable.
 * @static true
 * @name merge
 * @owner Observable
 */
function mergeStatic() {
    var observables = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        observables[_i - 0] = arguments[_i];
    }
    var concurrent = Number.POSITIVE_INFINITY;
    var scheduler = null;
    var last = observables[observables.length - 1];
    if (isScheduler_1.isScheduler(last)) {
        scheduler = observables.pop();
        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
            concurrent = observables.pop();
        }
    }
    else if (typeof last === 'number') {
        concurrent = observables.pop();
    }
    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_1.Observable) {
        return observables[0];
    }
    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new mergeAll_1.MergeAllOperator(concurrent));
}
var mergeStatic_1 = mergeStatic;


var merge_1 = {
	merge: merge_2$1,
	mergeStatic: mergeStatic_1
};

var merge_2 = merge_1.mergeStatic;

var __extends$11 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * An error thrown when an action is invalid because the object has been
 * unsubscribed.
 *
 * @see {@link Subject}
 * @see {@link BehaviorSubject}
 *
 * @class ObjectUnsubscribedError
 */
var ObjectUnsubscribedError = (function (_super) {
    __extends$11(ObjectUnsubscribedError, _super);
    function ObjectUnsubscribedError() {
        var err = _super.call(this, 'object unsubscribed');
        this.name = err.name = 'ObjectUnsubscribedError';
        this.stack = err.stack;
        this.message = err.message;
    }
    return ObjectUnsubscribedError;
}(Error));
var ObjectUnsubscribedError_2 = ObjectUnsubscribedError;


var ObjectUnsubscribedError_1 = {
	ObjectUnsubscribedError: ObjectUnsubscribedError_2
};

var __extends$12 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};

/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var SubjectSubscription = (function (_super) {
    __extends$12(SubjectSubscription, _super);
    function SubjectSubscription(subject, subscriber) {
        _super.call(this);
        this.subject = subject;
        this.subscriber = subscriber;
        this.closed = false;
    }
    SubjectSubscription.prototype.unsubscribe = function () {
        if (this.closed) {
            return;
        }
        this.closed = true;
        var subject = this.subject;
        var observers = subject.observers;
        this.subject = null;
        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
            return;
        }
        var subscriberIndex = observers.indexOf(this.subscriber);
        if (subscriberIndex !== -1) {
            observers.splice(subscriberIndex, 1);
        }
    };
    return SubjectSubscription;
}(Subscription_1.Subscription));
var SubjectSubscription_2 = SubjectSubscription;


var SubjectSubscription_1 = {
	SubjectSubscription: SubjectSubscription_2
};

var __extends$10 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};






/**
 * @class SubjectSubscriber<T>
 */
var SubjectSubscriber = (function (_super) {
    __extends$10(SubjectSubscriber, _super);
    function SubjectSubscriber(destination) {
        _super.call(this, destination);
        this.destination = destination;
    }
    return SubjectSubscriber;
}(Subscriber_1.Subscriber));
var SubjectSubscriber_1 = SubjectSubscriber;
/**
 * @class Subject<T>
 */
var Subject = (function (_super) {
    __extends$10(Subject, _super);
    function Subject() {
        _super.call(this);
        this.observers = [];
        this.closed = false;
        this.isStopped = false;
        this.hasError = false;
        this.thrownError = null;
    }
    Subject.prototype[rxSubscriber.rxSubscriber] = function () {
        return new SubjectSubscriber(this);
    };
    Subject.prototype.lift = function (operator) {
        var subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
    };
    Subject.prototype.next = function (value) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        if (!this.isStopped) {
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].next(value);
            }
        }
    };
    Subject.prototype.error = function (err) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        this.hasError = true;
        this.thrownError = err;
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].error(err);
        }
        this.observers.length = 0;
    };
    Subject.prototype.complete = function () {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        this.isStopped = true;
        var observers = this.observers;
        var len = observers.length;
        var copy = observers.slice();
        for (var i = 0; i < len; i++) {
            copy[i].complete();
        }
        this.observers.length = 0;
    };
    Subject.prototype.unsubscribe = function () {
        this.isStopped = true;
        this.closed = true;
        this.observers = null;
    };
    Subject.prototype._trySubscribe = function (subscriber) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        else {
            return _super.prototype._trySubscribe.call(this, subscriber);
        }
    };
    Subject.prototype._subscribe = function (subscriber) {
        if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        else if (this.hasError) {
            subscriber.error(this.thrownError);
            return Subscription_1.Subscription.EMPTY;
        }
        else if (this.isStopped) {
            subscriber.complete();
            return Subscription_1.Subscription.EMPTY;
        }
        else {
            this.observers.push(subscriber);
            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);
        }
    };
    Subject.prototype.asObservable = function () {
        var observable = new Observable_1.Observable();
        observable.source = this;
        return observable;
    };
    Subject.create = function (destination, source) {
        return new AnonymousSubject(destination, source);
    };
    return Subject;
}(Observable_1.Observable));
var Subject_2 = Subject;
/**
 * @class AnonymousSubject<T>
 */
var AnonymousSubject = (function (_super) {
    __extends$10(AnonymousSubject, _super);
    function AnonymousSubject(destination, source) {
        _super.call(this);
        this.destination = destination;
        this.source = source;
    }
    AnonymousSubject.prototype.next = function (value) {
        var destination = this.destination;
        if (destination && destination.next) {
            destination.next(value);
        }
    };
    AnonymousSubject.prototype.error = function (err) {
        var destination = this.destination;
        if (destination && destination.error) {
            this.destination.error(err);
        }
    };
    AnonymousSubject.prototype.complete = function () {
        var destination = this.destination;
        if (destination && destination.complete) {
            this.destination.complete();
        }
    };
    AnonymousSubject.prototype._subscribe = function (subscriber) {
        var source = this.source;
        if (source) {
            return this.source.subscribe(subscriber);
        }
        else {
            return Subscription_1.Subscription.EMPTY;
        }
    };
    return AnonymousSubject;
}(Subject));
var AnonymousSubject_1 = AnonymousSubject;


var Subject_1 = {
	SubjectSubscriber: SubjectSubscriber_1,
	Subject: Subject_2,
	AnonymousSubject: AnonymousSubject_1
};

var __extends$9 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};




/**
 * @class ConnectableObservable<T>
 */
var ConnectableObservable = (function (_super) {
    __extends$9(ConnectableObservable, _super);
    function ConnectableObservable(source, subjectFactory) {
        _super.call(this);
        this.source = source;
        this.subjectFactory = subjectFactory;
        this._refCount = 0;
        this._isComplete = false;
    }
    ConnectableObservable.prototype._subscribe = function (subscriber) {
        return this.getSubject().subscribe(subscriber);
    };
    ConnectableObservable.prototype.getSubject = function () {
        var subject = this._subject;
        if (!subject || subject.isStopped) {
            this._subject = this.subjectFactory();
        }
        return this._subject;
    };
    ConnectableObservable.prototype.connect = function () {
        var connection = this._connection;
        if (!connection) {
            this._isComplete = false;
            connection = this._connection = new Subscription_1.Subscription();
            connection.add(this.source
                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
            if (connection.closed) {
                this._connection = null;
                connection = Subscription_1.Subscription.EMPTY;
            }
            else {
                this._connection = connection;
            }
        }
        return connection;
    };
    ConnectableObservable.prototype.refCount = function () {
        return this.lift(new RefCountOperator(this));
    };
    return ConnectableObservable;
}(Observable_1.Observable));
var ConnectableObservable_2 = ConnectableObservable;
var connectableProto = ConnectableObservable.prototype;
var connectableObservableDescriptor = {
    operator: { value: null },
    _refCount: { value: 0, writable: true },
    _subject: { value: null, writable: true },
    _connection: { value: null, writable: true },
    _subscribe: { value: connectableProto._subscribe },
    _isComplete: { value: connectableProto._isComplete, writable: true },
    getSubject: { value: connectableProto.getSubject },
    connect: { value: connectableProto.connect },
    refCount: { value: connectableProto.refCount }
};
var ConnectableSubscriber = (function (_super) {
    __extends$9(ConnectableSubscriber, _super);
    function ConnectableSubscriber(destination, connectable) {
        _super.call(this, destination);
        this.connectable = connectable;
    }
    ConnectableSubscriber.prototype._error = function (err) {
        this._unsubscribe();
        _super.prototype._error.call(this, err);
    };
    ConnectableSubscriber.prototype._complete = function () {
        this.connectable._isComplete = true;
        this._unsubscribe();
        _super.prototype._complete.call(this);
    };
    ConnectableSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (connectable) {
            this.connectable = null;
            var connection = connectable._connection;
            connectable._refCount = 0;
            connectable._subject = null;
            connectable._connection = null;
            if (connection) {
                connection.unsubscribe();
            }
        }
    };
    return ConnectableSubscriber;
}(Subject_1.SubjectSubscriber));
var RefCountOperator = (function () {
    function RefCountOperator(connectable) {
        this.connectable = connectable;
    }
    RefCountOperator.prototype.call = function (subscriber, source) {
        var connectable = this.connectable;
        connectable._refCount++;
        var refCounter = new RefCountSubscriber(subscriber, connectable);
        var subscription = source.subscribe(refCounter);
        if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
        }
        return subscription;
    };
    return RefCountOperator;
}());
var RefCountSubscriber = (function (_super) {
    __extends$9(RefCountSubscriber, _super);
    function RefCountSubscriber(destination, connectable) {
        _super.call(this, destination);
        this.connectable = connectable;
    }
    RefCountSubscriber.prototype._unsubscribe = function () {
        var connectable = this.connectable;
        if (!connectable) {
            this.connection = null;
            return;
        }
        this.connectable = null;
        var refCount = connectable._refCount;
        if (refCount <= 0) {
            this.connection = null;
            return;
        }
        connectable._refCount = refCount - 1;
        if (refCount > 1) {
            this.connection = null;
            return;
        }
        ///
        // Compare the local RefCountSubscriber's connection Subscription to the
        // connection Subscription on the shared ConnectableObservable. In cases
        // where the ConnectableObservable source synchronously emits values, and
        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,
        // execution continues to here before the RefCountOperator has a chance to
        // supply the RefCountSubscriber with the shared connection Subscription.
        // For example:
        // ```
        // Observable.range(0, 10)
        //   .publish()
        //   .refCount()
        //   .take(5)
        //   .subscribe();
        // ```
        // In order to account for this case, RefCountSubscriber should only dispose
        // the ConnectableObservable's shared connection Subscription if the
        // connection Subscription exists, *and* either:
        //   a. RefCountSubscriber doesn't have a reference to the shared connection
        //      Subscription yet, or,
        //   b. RefCountSubscriber's connection Subscription reference is identical
        //      to the shared connection Subscription
        ///
        var connection = this.connection;
        var sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) {
            sharedConnection.unsubscribe();
        }
    };
    return RefCountSubscriber;
}(Subscriber_1.Subscriber));


var ConnectableObservable_1 = {
	ConnectableObservable: ConnectableObservable_2,
	connectableObservableDescriptor: connectableObservableDescriptor
};

/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits the results of invoking a specified selector on items
 * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.
 *
 * <img src="./img/multicast.png" width="100%">
 *
 * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through
 * which the source sequence's elements will be multicast to the selector function
 * or Subject to push source elements into.
 * @param {Function} [selector] - Optional selector function that can use the multicasted source stream
 * as many times as needed, without causing multiple subscriptions to the source stream.
 * Subscribers to the given source will receive all notifications of the source from the
 * time of the subscription forward.
 * @return {Observable} An Observable that emits the results of invoking the selector
 * on the items emitted by a `ConnectableObservable` that shares a single subscription to
 * the underlying stream.
 * @method multicast
 * @owner Observable
 */
function multicast(subjectOrSubjectFactory, selector) {
    var subjectFactory;
    if (typeof subjectOrSubjectFactory === 'function') {
        subjectFactory = subjectOrSubjectFactory;
    }
    else {
        subjectFactory = function subjectFactory() {
            return subjectOrSubjectFactory;
        };
    }
    if (typeof selector === 'function') {
        return this.lift(new MulticastOperator(subjectFactory, selector));
    }
    var connectable = Object.create(this, ConnectableObservable_1.connectableObservableDescriptor);
    connectable.source = this;
    connectable.subjectFactory = subjectFactory;
    return connectable;
}
var multicast_2 = multicast;
var MulticastOperator = (function () {
    function MulticastOperator(subjectFactory, selector) {
        this.subjectFactory = subjectFactory;
        this.selector = selector;
    }
    MulticastOperator.prototype.call = function (subscriber, source) {
        var selector = this.selector;
        var subject = this.subjectFactory();
        var subscription = selector(subject).subscribe(subscriber);
        subscription.add(source.subscribe(subject));
        return subscription;
    };
    return MulticastOperator;
}());
var MulticastOperator_1 = MulticastOperator;


var multicast_1 = {
	multicast: multicast_2,
	MulticastOperator: MulticastOperator_1
};

function shareSubjectFactory() {
    return new Subject_1.Subject();
}
/**
 * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one
 * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will
 * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.
 * This is an alias for .publish().refCount().
 *
 * <img src="./img/share.png" width="100%">
 *
 * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.
 * @method share
 * @owner Observable
 */
function share() {
    return multicast_1.multicast.call(this, shareSubjectFactory).refCount();
}
var share_2 = share;

/**
 * @license Angular v4.3.3
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 */
/**
 * Creates a token that can be used in a DI Provider.
 *
 * ### Example ([live demo](http://plnkr.co/edit/Ys9ezXpj2Mnoy3Uc8KBp?p=preview))
 *
 * ```typescript
 * var t = new OpaqueToken("value");
 *
 * var injector = Injector.resolveAndCreate([
 *   {provide: t, useValue: "bindingValue"}
 * ]);
 *
 * expect(injector.get(t)).toEqual("bindingValue");
 * ```
 *
 * Using an `OpaqueToken` is preferable to using strings as tokens because of possible collisions
 * caused by multiple providers using the same string as two different tokens.
 *
 * Using an `OpaqueToken` is preferable to using an `Object` as tokens because it provides better
 * error messages.
 * @deprecated since v4.0.0 because it does not support type information, use `InjectionToken<?>`
 * instead.
 */
var OpaqueToken = (function () {
    /**
     * @param {?} _desc
     */
    function OpaqueToken(_desc) {
        this._desc = _desc;
    }
    /**
     * @return {?}
     */
    OpaqueToken.prototype.toString = function () { return "Token " + this._desc; };
    return OpaqueToken;
}());
/**
 * Creates a token that can be used in a DI Provider.
 *
 * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a
 * runtime representation) such as when injecting an interface, callable type, array or
 * parametrized type.
 *
 * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by
 * the `Injector`. This provides additional level of type safety.
 *
 * ```
 * interface MyInterface {...}
 * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));
 * // myInterface is inferred to be MyInterface.
 * ```
 *
 * ### Example
 *
 * {\@example core/di/ts/injector_spec.ts region='InjectionToken'}
 *
 * \@stable
 */
var InjectionToken = (function (_super) {
    __extends(InjectionToken, _super);
    /**
     * @param {?} desc
     */
    function InjectionToken(desc) {
        return _super.call(this, desc) || this;
    }
    /**
     * @return {?}
     */
    InjectionToken.prototype.toString = function () { return "InjectionToken " + this._desc; };
    return InjectionToken;
}(OpaqueToken));
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __window = typeof window !== 'undefined' && window;
var __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&
    self instanceof WorkerGlobalScope && self;
var __global = typeof global !== 'undefined' && global;
var _global = __window || __global || __self;
var _symbolIterator = null;
/**
 * @return {?}
 */
function getSymbolIterator() {
    if (!_symbolIterator) {
        var /** @type {?} */ Symbol = _global['Symbol'];
        if (Symbol && Symbol.iterator) {
            _symbolIterator = Symbol.iterator;
        }
        else {
            // es6-shim specific logic
            var /** @type {?} */ keys = Object.getOwnPropertyNames(Map.prototype);
            for (var /** @type {?} */ i = 0; i < keys.length; ++i) {
                var /** @type {?} */ key = keys[i];
                if (key !== 'entries' && key !== 'size' &&
                    ((Map)).prototype[key] === Map.prototype['entries']) {
                    _symbolIterator = key;
                }
            }
        }
    }
    return _symbolIterator;
}
/**
 * @param {?} fn
 * @return {?}
 */
function scheduleMicroTask(fn) {
    Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function looseIdentical(a, b) {
    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
}
/**
 * @param {?} token
 * @return {?}
 */
function stringify(token) {
    if (typeof token === 'string') {
        return token;
    }
    if (token == null) {
        return '' + token;
    }
    if (token.overriddenName) {
        return "" + token.overriddenName;
    }
    if (token.name) {
        return "" + token.name;
    }
    var /** @type {?} */ res = token.toString();
    if (res == null) {
        return '' + res;
    }
    var /** @type {?} */ newLineIndex = res.indexOf('\n');
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var _nextClassId = 0;
var Reflect$1 = _global['Reflect'];
/**
 * @param {?} annotation
 * @return {?}
 */
function extractAnnotation(annotation) {
    if (typeof annotation === 'function' && annotation.hasOwnProperty('annotation')) {
        // it is a decorator, extract annotation
        annotation = annotation.annotation;
    }
    return annotation;
}
/**
 * @param {?} fnOrArray
 * @param {?} key
 * @return {?}
 */
function applyParams(fnOrArray, key) {
    if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function ||
        fnOrArray === Number || fnOrArray === Array) {
        throw new Error("Can not use native " + stringify(fnOrArray) + " as constructor");
    }
    if (typeof fnOrArray === 'function') {
        return fnOrArray;
    }
    if (Array.isArray(fnOrArray)) {
        var /** @type {?} */ annotations = (fnOrArray);
        var /** @type {?} */ annoLength = annotations.length - 1;
        var /** @type {?} */ fn = fnOrArray[annoLength];
        if (typeof fn !== 'function') {
            throw new Error("Last position of Class method array must be Function in key " + key + " was '" + stringify(fn) + "'");
        }
        if (annoLength != fn.length) {
            throw new Error("Number of annotations (" + annoLength + ") does not match number of arguments (" + fn.length + ") in the function: " + stringify(fn));
        }
        var /** @type {?} */ paramsAnnotations = [];
        for (var /** @type {?} */ i = 0, /** @type {?} */ ii = annotations.length - 1; i < ii; i++) {
            var /** @type {?} */ paramAnnotations = [];
            paramsAnnotations.push(paramAnnotations);
            var /** @type {?} */ annotation = annotations[i];
            if (Array.isArray(annotation)) {
                for (var /** @type {?} */ j = 0; j < annotation.length; j++) {
                    paramAnnotations.push(extractAnnotation(annotation[j]));
                }
            }
            else if (typeof annotation === 'function') {
                paramAnnotations.push(extractAnnotation(annotation));
            }
            else {
                paramAnnotations.push(annotation);
            }
        }
        Reflect$1.defineMetadata('parameters', paramsAnnotations, fn);
        return fn;
    }
    throw new Error("Only Function or Array is supported in Class definition for key '" + key + "' is '" + stringify(fnOrArray) + "'");
}
/**
 * Provides a way for expressing ES6 classes with parameter annotations in ES5.
 *
 * ## Basic Example
 *
 * ```
 * var Greeter = ng.Class({
 *   constructor: function(name) {
 *     this.name = name;
 *   },
 *
 *   greet: function() {
 *     alert('Hello ' + this.name + '!');
 *   }
 * });
 * ```
 *
 * is equivalent to ES6:
 *
 * ```
 * class Greeter {
 *   constructor(name) {
 *     this.name = name;
 *   }
 *
 *   greet() {
 *     alert('Hello ' + this.name + '!');
 *   }
 * }
 * ```
 *
 * or equivalent to ES5:
 *
 * ```
 * var Greeter = function (name) {
 *   this.name = name;
 * }
 *
 * Greeter.prototype.greet = function () {
 *   alert('Hello ' + this.name + '!');
 * }
 * ```
 *
 * ### Example with parameter annotations
 *
 * ```
 * var MyService = ng.Class({
 *   constructor: [String, [new Optional(), Service], function(name, myService) {
 *     ...
 *   }]
 * });
 * ```
 *
 * is equivalent to ES6:
 *
 * ```
 * class MyService {
 *   constructor(name: string, \@Optional() myService: Service) {
 *     ...
 *   }
 * }
 * ```
 *
 * ### Example with inheritance
 *
 * ```
 * var Shape = ng.Class({
 *   constructor: (color) {
 *     this.color = color;
 *   }
 * });
 *
 * var Square = ng.Class({
 *   extends: Shape,
 *   constructor: function(color, size) {
 *     Shape.call(this, color);
 *     this.size = size;
 *   }
 * });
 * ```
 * @suppress {globalThis}
 * \@stable
 * @param {?} clsDef
 * @return {?}
 */
function Class(clsDef) {
    var /** @type {?} */ constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');
    var /** @type {?} */ proto = constructor.prototype;
    if (clsDef.hasOwnProperty('extends')) {
        if (typeof clsDef.extends === 'function') {
            ((constructor)).prototype = proto =
                Object.create(((clsDef.extends)).prototype);
        }
        else {
            throw new Error("Class definition 'extends' property must be a constructor function was: " + stringify(clsDef.extends));
        }
    }
    for (var /** @type {?} */ key in clsDef) {
        if (key !== 'extends' && key !== 'prototype' && clsDef.hasOwnProperty(key)) {
            proto[key] = applyParams(clsDef[key], key);
        }
    }
    if (this && this.annotations instanceof Array) {
        Reflect$1.defineMetadata('annotations', this.annotations, constructor);
    }
    var /** @type {?} */ constructorName = constructor['name'];
    if (!constructorName || constructorName === 'constructor') {
        ((constructor))['overriddenName'] = "class" + _nextClassId++;
    }
    return (constructor);
}
/**
 * @suppress {globalThis}
 * @param {?} name
 * @param {?=} props
 * @param {?=} parentClass
 * @param {?=} chainFn
 * @return {?}
 */
function makeDecorator(name, props, parentClass, chainFn) {
    var /** @type {?} */ metaCtor = makeMetadataCtor(props);
    /**
     * @param {?} objOrType
     * @return {?}
     */
    function DecoratorFactory(objOrType) {
        if (!(Reflect$1 && Reflect$1.getOwnMetadata)) {
            throw 'reflect-metadata shim is required when using class decorators';
        }
        if (this instanceof DecoratorFactory) {
            metaCtor.call(this, objOrType);
            return this;
        }
        var /** @type {?} */ annotationInstance = new ((DecoratorFactory))(objOrType);
        var /** @type {?} */ chainAnnotation = typeof this === 'function' && Array.isArray(this.annotations) ? this.annotations : [];
        chainAnnotation.push(annotationInstance);
        var /** @type {?} */ TypeDecorator = (function TypeDecorator(cls) {
            var /** @type {?} */ annotations = Reflect$1.getOwnMetadata('annotations', cls) || [];
            annotations.push(annotationInstance);
            Reflect$1.defineMetadata('annotations', annotations, cls);
            return cls;
        });
        TypeDecorator.annotations = chainAnnotation;
        TypeDecorator.Class = Class;
        if (chainFn)
            chainFn(TypeDecorator);
        return TypeDecorator;
    }
    if (parentClass) {
        DecoratorFactory.prototype = Object.create(parentClass.prototype);
    }
    DecoratorFactory.prototype.toString = function () { return "@" + name; };
    ((DecoratorFactory)).annotationCls = DecoratorFactory;
    return DecoratorFactory;
}
/**
 * @param {?=} props
 * @return {?}
 */
function makeMetadataCtor(props) {
    return function ctor() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (props) {
            var /** @type {?} */ values = props.apply(void 0, args);
            for (var /** @type {?} */ propName in values) {
                this[propName] = values[propName];
            }
        }
    };
}
/**
 * @param {?} name
 * @param {?=} props
 * @param {?=} parentClass
 * @return {?}
 */
function makeParamDecorator(name, props, parentClass) {
    var /** @type {?} */ metaCtor = makeMetadataCtor(props);
    /**
     * @param {...?} args
     * @return {?}
     */
    function ParamDecoratorFactory() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (this instanceof ParamDecoratorFactory) {
            metaCtor.apply(this, args);
            return this;
        }
        var /** @type {?} */ annotationInstance = new (((ParamDecoratorFactory)).bind.apply(((ParamDecoratorFactory)), [void 0].concat(args)))();
        ((ParamDecorator)).annotation = annotationInstance;
        return ParamDecorator;
        /**
         * @param {?} cls
         * @param {?} unusedKey
         * @param {?} index
         * @return {?}
         */
        function ParamDecorator(cls, unusedKey, index) {
            var /** @type {?} */ parameters = Reflect$1.getOwnMetadata('parameters', cls) || [];
            // there might be gaps if some in between parameters do not have annotations.
            // we pad with nulls.
            while (parameters.length <= index) {
                parameters.push(null);
            }
            parameters[index] = parameters[index] || []; /** @type {?} */
            ((parameters[index])).push(annotationInstance);
            Reflect$1.defineMetadata('parameters', parameters, cls);
            return cls;
        }
    }
    if (parentClass) {
        ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
    }
    ParamDecoratorFactory.prototype.toString = function () { return "@" + name; };
    ((ParamDecoratorFactory)).annotationCls = ParamDecoratorFactory;
    return ParamDecoratorFactory;
}
/**
 * @param {?} name
 * @param {?=} props
 * @param {?=} parentClass
 * @return {?}
 */
function makePropDecorator(name, props, parentClass) {
    var /** @type {?} */ metaCtor = makeMetadataCtor(props);
    /**
     * @param {...?} args
     * @return {?}
     */
    function PropDecoratorFactory() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (this instanceof PropDecoratorFactory) {
            metaCtor.apply(this, args);
            return this;
        }
        var /** @type {?} */ decoratorInstance = new (((PropDecoratorFactory)).bind.apply(((PropDecoratorFactory)), [void 0].concat(args)))();
        return function PropDecorator(target, name) {
            var /** @type {?} */ meta = Reflect$1.getOwnMetadata('propMetadata', target.constructor) || {};
            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];
            meta[name].unshift(decoratorInstance);
            Reflect$1.defineMetadata('propMetadata', meta, target.constructor);
        };
    }
    if (parentClass) {
        PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
    }
    PropDecoratorFactory.prototype.toString = function () { return "@" + name; };
    ((PropDecoratorFactory)).annotationCls = PropDecoratorFactory;
    return PropDecoratorFactory;
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * This token can be used to create a virtual provider that will populate the
 * `entryComponents` fields of components and ng modules based on its `useValue`.
 * All components that are referenced in the `useValue` value (either directly
 * or in a nested array or map) will be added to the `entryComponents` property.
 *
 * ### Example
 * The following example shows how the router can populate the `entryComponents`
 * field of an NgModule based on the router configuration which refers
 * to components.
 *
 * ```typescript
 * // helper function inside the router
 * function provideRoutes(routes) {
 *   return [
 *     {provide: ROUTES, useValue: routes},
 *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}
 *   ];
 * }
 *
 * // user code
 * let routes = [
 *   {path: '/root', component: RootComp},
 *   {path: '/teams', component: TeamsComp}
 * ];
 *
 * \@NgModule({
 *   providers: [provideRoutes(routes)]
 * })
 * class ModuleWithRoutes {}
 * ```
 *
 * \@experimental
 */
var ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken('AnalyzeForEntryComponents');
/**
 * Attribute decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var Attribute = makeParamDecorator('Attribute', function (attributeName) { return ({ attributeName: attributeName }); });
/**
 * Base class for query metadata.
 *
 * See {\@link ContentChildren}, {\@link ContentChild}, {\@link ViewChildren}, {\@link ViewChild} for
 * more information.
 *
 * \@stable
 * @abstract
 */
var Query = (function () {
    function Query() {
    }
    return Query;
}());
/**
 * ContentChildren decorator and metadata.
 *
 *  \@stable
 *  \@Annotation
 */
var ContentChildren = makePropDecorator('ContentChildren', function (selector, data) {
    if (data === void 0) { data = {}; }
    return (Object.assign({ selector: selector, first: false, isViewQuery: false, descendants: false }, data));
}, Query);
/**
 * ContentChild decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var ContentChild = makePropDecorator('ContentChild', function (selector, data) {
    if (data === void 0) { data = {}; }
    return (Object.assign({ selector: selector, first: true, isViewQuery: false, descendants: true }, data));
}, Query);
/**
 * ViewChildren decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var ViewChildren = makePropDecorator('ViewChildren', function (selector, data) {
    if (data === void 0) { data = {}; }
    return (Object.assign({ selector: selector, first: false, isViewQuery: true, descendants: true }, data));
}, Query);
/**
 * ViewChild decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var ViewChild = makePropDecorator('ViewChild', function (selector, data) { return (Object.assign({ selector: selector, first: true, isViewQuery: true, descendants: true }, data)); }, Query);
var ChangeDetectionStrategy = {};
ChangeDetectionStrategy.OnPush = 0;
ChangeDetectionStrategy.Default = 1;
ChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = "OnPush";
ChangeDetectionStrategy[ChangeDetectionStrategy.Default] = "Default";
var ChangeDetectorStatus = {};
ChangeDetectorStatus.CheckOnce = 0;
ChangeDetectorStatus.Checked = 1;
ChangeDetectorStatus.CheckAlways = 2;
ChangeDetectorStatus.Detached = 3;
ChangeDetectorStatus.Errored = 4;
ChangeDetectorStatus.Destroyed = 5;
ChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = "CheckOnce";
ChangeDetectorStatus[ChangeDetectorStatus.Checked] = "Checked";
ChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = "CheckAlways";
ChangeDetectorStatus[ChangeDetectorStatus.Detached] = "Detached";
ChangeDetectorStatus[ChangeDetectorStatus.Errored] = "Errored";
ChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = "Destroyed";
/**
 * @param {?} changeDetectionStrategy
 * @return {?}
 */
function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
    return changeDetectionStrategy == null ||
        changeDetectionStrategy === ChangeDetectionStrategy.Default;
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Directive decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var Directive = makeDecorator('Directive', function (dir) {
    if (dir === void 0) { dir = {}; }
    return dir;
});
/**
 * Component decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var Component = makeDecorator('Component', function (c) {
    if (c === void 0) { c = {}; }
    return (Object.assign({ changeDetection: ChangeDetectionStrategy.Default }, c));
}, Directive);
/**
 * Pipe decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var Pipe = makeDecorator('Pipe', function (p) { return (Object.assign({ pure: true }, p)); });
/**
 * Input decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var Input = makePropDecorator('Input', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); });
/**
 * Output decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var Output = makePropDecorator('Output', function (bindingPropertyName) { return ({ bindingPropertyName: bindingPropertyName }); });
/**
 * HostBinding decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var HostBinding = makePropDecorator('HostBinding', function (hostPropertyName) { return ({ hostPropertyName: hostPropertyName }); });
/**
 * HostListener decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var HostListener = makePropDecorator('HostListener', function (eventName, args) { return ({ eventName: eventName, args: args }); });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Defines a schema that will allow:
 * - any non-Angular elements with a `-` in their name,
 * - any properties on elements with a `-` in their name which is the common rule for custom
 * elements.
 *
 * \@stable
 */
var CUSTOM_ELEMENTS_SCHEMA = {
    name: 'custom-elements'
};
/**
 * Defines a schema that will allow any property on any element.
 *
 * \@experimental
 */
var NO_ERRORS_SCHEMA = {
    name: 'no-errors-schema'
};
/**
 * NgModule decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var NgModule = makeDecorator('NgModule', function (ngModule) { return ngModule; });
var ViewEncapsulation = {};
ViewEncapsulation.Emulated = 0;
ViewEncapsulation.Native = 1;
ViewEncapsulation.None = 2;
ViewEncapsulation[ViewEncapsulation.Emulated] = "Emulated";
ViewEncapsulation[ViewEncapsulation.Native] = "Native";
ViewEncapsulation[ViewEncapsulation.None] = "None";
/**
 * Metadata properties available for configuring Views.
 *
 * For details on the `\@Component` annotation, see {\@link Component}.
 *
 * ### Example
 *
 * ```
 * \@Component({
 *   selector: 'greet',
 *   template: 'Hello {{name}}!',
 * })
 * class Greet {
 *   name: string;
 *
 *   constructor() {
 *     this.name = 'World';
 *   }
 * }
 * ```
 *
 * @deprecated Use Component instead.
 *
 * {\@link Component}
 */
var ViewMetadata = (function () {
    /**
     * @param {?=} opts
     */
    function ViewMetadata(opts) {
        if (opts === void 0) { opts = {}; }
        this.templateUrl = opts.templateUrl;
        this.template = opts.template;
        this.styleUrls = opts.styleUrls;
        this.styles = opts.styles;
        this.encapsulation = opts.encapsulation;
        this.animations = opts.animations;
        this.interpolation = opts.interpolation;
    }
    return ViewMetadata;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@whatItDoes Represents the version of Angular
 *
 * \@stable
 */
var Version = (function () {
    /**
     * @param {?} full
     */
    function Version(full) {
        this.full = full;
    }
    Object.defineProperty(Version.prototype, "major", {
        /**
         * @return {?}
         */
        get: function () { return this.full.split('.')[0]; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Version.prototype, "minor", {
        /**
         * @return {?}
         */
        get: function () { return this.full.split('.')[1]; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Version.prototype, "patch", {
        /**
         * @return {?}
         */
        get: function () { return this.full.split('.').slice(2).join('.'); },
        enumerable: true,
        configurable: true
    });
    return Version;
}());
/**
 * \@stable
 */
var VERSION = new Version('4.3.3');
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Inject decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var Inject = makeParamDecorator('Inject', function (token) { return ({ token: token }); });
/**
 * Optional decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var Optional = makeParamDecorator('Optional');
/**
 * Injectable decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var Injectable = makeDecorator('Injectable');
/**
 * Self decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var Self = makeParamDecorator('Self');
/**
 * SkipSelf decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var SkipSelf = makeParamDecorator('SkipSelf');
/**
 * Host decorator and metadata.
 *
 * \@stable
 * \@Annotation
 */
var Host = makeParamDecorator('Host');
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Allows to refer to references which are not yet defined.
 *
 * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of
 * DI is declared,
 * but not yet defined. It is also used when the `token` which we use when creating a query is not
 * yet defined.
 *
 * ### Example
 * {\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}
 * \@experimental
 * @param {?} forwardRefFn
 * @return {?}
 */
function forwardRef(forwardRefFn) {
    ((forwardRefFn)).__forward_ref__ = forwardRef;
    ((forwardRefFn)).toString = function () { return stringify(this()); };
    return (((forwardRefFn)));
}
/**
 * Lazily retrieves the reference value from a forwardRef.
 *
 * Acts as the identity function when given a non-forward-ref value.
 *
 * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))
 *
 * {\@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}
 *
 * See: {\@link forwardRef}
 * \@experimental
 * @param {?} type
 * @return {?}
 */
function resolveForwardRef(type) {
    if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') &&
        type.__forward_ref__ === forwardRef) {
        return ((type))();
    }
    else {
        return type;
    }
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var _THROW_IF_NOT_FOUND = new Object();
var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
var _NullInjector = (function () {
    function _NullInjector() {
    }
    /**
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */
    _NullInjector.prototype.get = function (token, notFoundValue) {
        if (notFoundValue === void 0) { notFoundValue = _THROW_IF_NOT_FOUND; }
        if (notFoundValue === _THROW_IF_NOT_FOUND) {
            throw new Error("No provider for " + stringify(token) + "!");
        }
        return notFoundValue;
    };
    return _NullInjector;
}());
/**
 * \@whatItDoes Injector interface
 * \@howToUse
 * ```
 * const injector: Injector = ...;
 * injector.get(...);
 * ```
 *
 * \@description
 * For more details, see the {\@linkDocs guide/dependency-injection "Dependency Injection Guide"}.
 *
 * ### Example
 *
 * {\@example core/di/ts/injector_spec.ts region='Injector'}
 *
 * `Injector` returns itself when given `Injector` as a token:
 * {\@example core/di/ts/injector_spec.ts region='injectInjector'}
 *
 * \@stable
 * @abstract
 */
var Injector = (function () {
    function Injector() {
    }
    /**
     * Retrieves an instance from the injector based on the provided token.
     * If not found:
     * - Throws an error if no `notFoundValue` that is not equal to
     * Injector.THROW_IF_NOT_FOUND is given
     * - Returns the `notFoundValue` otherwise
     * @abstract
     * @template T
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */
    Injector.prototype.get = function (token, notFoundValue) { };
    /**
     * @deprecated from v4.0.0 use Type<T> or InjectionToken<T>
     * @suppress {duplicate}
     * @abstract
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */
    Injector.prototype.get = function (token, notFoundValue) { };
    return Injector;
}());
Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
Injector.NULL = new _NullInjector();
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ERROR_COMPONENT_TYPE = 'ngComponentType';
var ERROR_DEBUG_CONTEXT = 'ngDebugContext';
var ERROR_ORIGINAL_ERROR = 'ngOriginalError';
var ERROR_LOGGER = 'ngErrorLogger';
/**
 * @param {?} error
 * @return {?}
 */
/**
 * @param {?} error
 * @return {?}
 */
function getDebugContext(error) {
    return ((error))[ERROR_DEBUG_CONTEXT];
}
/**
 * @param {?} error
 * @return {?}
 */
function getOriginalError(error) {
    return ((error))[ERROR_ORIGINAL_ERROR];
}
/**
 * @param {?} error
 * @return {?}
 */
function getErrorLogger(error) {
    return ((error))[ERROR_LOGGER] || defaultErrorLogger;
}
/**
 * @param {?} console
 * @param {...?} values
 * @return {?}
 */
function defaultErrorLogger(console) {
    var values = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        values[_i - 1] = arguments[_i];
    }
    console.error.apply(console, values);
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@whatItDoes Provides a hook for centralized exception handling.
 *
 * \@description
 *
 * The default implementation of `ErrorHandler` prints error messages to the `console`. To
 * intercept error handling, write a custom exception handler that replaces this default as
 * appropriate for your app.
 *
 * ### Example
 *
 * ```
 * class MyErrorHandler implements ErrorHandler {
 *   handleError(error) {
 *     // do something with the exception
 *   }
 * }
 *
 * \@NgModule({
 *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]
 * })
 * class MyModule {}
 * ```
 *
 * \@stable
 */
var ErrorHandler = (function () {
    /**
     * @param {?=} deprecatedParameter
     */
    function ErrorHandler(
        /**
         * @deprecated since v4.0 parameter no longer has an effect, as ErrorHandler will never
         * rethrow.
         */
        deprecatedParameter) {
        /**
         * \@internal
         */
        this._console = console;
    }
    /**
     * @param {?} error
     * @return {?}
     */
    ErrorHandler.prototype.handleError = function (error) {
        var /** @type {?} */ originalError = this._findOriginalError(error);
        var /** @type {?} */ context = this._findContext(error);
        // Note: Browser consoles show the place from where console.error was called.
        // We can use this to give users additional information about the error.
        var /** @type {?} */ errorLogger = getErrorLogger(error);
        errorLogger(this._console, "ERROR", error);
        if (originalError) {
            errorLogger(this._console, "ORIGINAL ERROR", originalError);
        }
        if (context) {
            errorLogger(this._console, 'ERROR CONTEXT', context);
        }
    };
    /**
     * \@internal
     * @param {?} error
     * @return {?}
     */
    ErrorHandler.prototype._findContext = function (error) {
        if (error) {
            return getDebugContext(error) ? getDebugContext(error) :
                this._findContext(getOriginalError(error));
        }
        return null;
    };
    /**
     * \@internal
     * @param {?} error
     * @return {?}
     */
    ErrorHandler.prototype._findOriginalError = function (error) {
        var /** @type {?} */ e = getOriginalError(error);
        while (e && getOriginalError(e)) {
            e = getOriginalError(e);
        }
        return e;
    };
    return ErrorHandler;
}());
/**
 * @param {?} message
 * @param {?} originalError
 * @return {?}
 */
function wrappedError(message, originalError) {
    var /** @type {?} */ msg = message + " caused by: " + (originalError instanceof Error ? originalError.message : originalError);
    var /** @type {?} */ error = Error(msg);
    ((error))[ERROR_ORIGINAL_ERROR] = originalError;
    return error;
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} keys
 * @return {?}
 */
function findFirstClosedCycle(keys) {
    var /** @type {?} */ res = [];
    for (var /** @type {?} */ i = 0; i < keys.length; ++i) {
        if (res.indexOf(keys[i]) > -1) {
            res.push(keys[i]);
            return res;
        }
        res.push(keys[i]);
    }
    return res;
}
/**
 * @param {?} keys
 * @return {?}
 */
function constructResolvingPath(keys) {
    if (keys.length > 1) {
        var /** @type {?} */ reversed = findFirstClosedCycle(keys.slice().reverse());
        var /** @type {?} */ tokenStrs = reversed.map(function (k) { return stringify(k.token); });
        return ' (' + tokenStrs.join(' -> ') + ')';
    }
    return '';
}
/**
 * @param {?} injector
 * @param {?} key
 * @param {?} constructResolvingMessage
 * @param {?=} originalError
 * @return {?}
 */
function injectionError(injector, key, constructResolvingMessage, originalError) {
    var /** @type {?} */ keys = [key];
    var /** @type {?} */ errMsg = constructResolvingMessage(keys);
    var /** @type {?} */ error = ((originalError ? wrappedError(errMsg, originalError) : Error(errMsg)));
    error.addKey = addKey;
    error.keys = keys;
    error.injectors = [injector];
    error.constructResolvingMessage = constructResolvingMessage;
    ((error))[ERROR_ORIGINAL_ERROR] = originalError;
    return error;
}
/**
 * @this {?}
 * @param {?} injector
 * @param {?} key
 * @return {?}
 */
function addKey(injector, key) {
    this.injectors.push(injector);
    this.keys.push(key);
    // Note: This updated message won't be reflected in the `.stack` property
    this.message = this.constructResolvingMessage(this.keys);
}
/**
 * Thrown when trying to retrieve a dependency by key from {\@link Injector}, but the
 * {\@link Injector} does not have a {\@link Provider} for the given key.
 *
 * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))
 *
 * ```typescript
 * class A {
 *   constructor(b:B) {}
 * }
 *
 * expect(() => Injector.resolveAndCreate([A])).toThrowError();
 * ```
 * @param {?} injector
 * @param {?} key
 * @return {?}
 */
function noProviderError(injector, key) {
    return injectionError(injector, key, function (keys) {
        var /** @type {?} */ first = stringify(keys[0].token);
        return "No provider for " + first + "!" + constructResolvingPath(keys);
    });
}
/**
 * Thrown when dependencies form a cycle.
 *
 * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))
 *
 * ```typescript
 * var injector = Injector.resolveAndCreate([
 *   {provide: "one", useFactory: (two) => "two", deps: [[new Inject("two")]]},
 *   {provide: "two", useFactory: (one) => "one", deps: [[new Inject("one")]]}
 * ]);
 *
 * expect(() => injector.get("one")).toThrowError();
 * ```
 *
 * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.
 * @param {?} injector
 * @param {?} key
 * @return {?}
 */
function cyclicDependencyError(injector, key) {
    return injectionError(injector, key, function (keys) {
        return "Cannot instantiate cyclic dependency!" + constructResolvingPath(keys);
    });
}
/**
 * Thrown when a constructing type returns with an Error.
 *
 * The `InstantiationError` class contains the original error plus the dependency graph which caused
 * this object to be instantiated.
 *
 * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))
 *
 * ```typescript
 * class A {
 *   constructor() {
 *     throw new Error('message');
 *   }
 * }
 *
 * var injector = Injector.resolveAndCreate([A]);
 * try {
 *   injector.get(A);
 * } catch (e) {
 *   expect(e instanceof InstantiationError).toBe(true);
 *   expect(e.originalException.message).toEqual("message");
 *   expect(e.originalStack).toBeDefined();
 * }
 * ```
 * @param {?} injector
 * @param {?} originalException
 * @param {?} originalStack
 * @param {?} key
 * @return {?}
 */
function instantiationError(injector, originalException, originalStack, key) {
    return injectionError(injector, key, function (keys) {
        var /** @type {?} */ first = stringify(keys[0].token);
        return originalException.message + ": Error during instantiation of " + first + "!" + constructResolvingPath(keys) + ".";
    }, originalException);
}
/**
 * Thrown when an object other then {\@link Provider} (or `Type`) is passed to {\@link Injector}
 * creation.
 *
 * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))
 *
 * ```typescript
 * expect(() => Injector.resolveAndCreate(["not a type"])).toThrowError();
 * ```
 * @param {?} provider
 * @return {?}
 */
function invalidProviderError(provider) {
    return Error("Invalid provider - only instances of Provider and Type are allowed, got: " + provider);
}
/**
 * Thrown when the class has no annotation information.
 *
 * Lack of annotation information prevents the {\@link Injector} from determining which dependencies
 * need to be injected into the constructor.
 *
 * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))
 *
 * ```typescript
 * class A {
 *   constructor(b) {}
 * }
 *
 * expect(() => Injector.resolveAndCreate([A])).toThrowError();
 * ```
 *
 * This error is also thrown when the class not marked with {\@link Injectable} has parameter types.
 *
 * ```typescript
 * class B {}
 *
 * class A {
 *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.
 * }
 *
 * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();
 * ```
 * \@stable
 * @param {?} typeOrFunc
 * @param {?} params
 * @return {?}
 */
function noAnnotationError(typeOrFunc, params) {
    var /** @type {?} */ signature = [];
    for (var /** @type {?} */ i = 0, /** @type {?} */ ii = params.length; i < ii; i++) {
        var /** @type {?} */ parameter = params[i];
        if (!parameter || parameter.length == 0) {
            signature.push('?');
        }
        else {
            signature.push(parameter.map(stringify).join(' '));
        }
    }
    return Error('Cannot resolve all parameters for \'' + stringify(typeOrFunc) + '\'(' +
        signature.join(', ') + '). ' +
        'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \'' +
        stringify(typeOrFunc) + '\' is decorated with Injectable.');
}
/**
 * Thrown when getting an object by index.
 *
 * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))
 *
 * ```typescript
 * class A {}
 *
 * var injector = Injector.resolveAndCreate([A]);
 *
 * expect(() => injector.getAt(100)).toThrowError();
 * ```
 * \@stable
 * @param {?} index
 * @return {?}
 */
function outOfBoundsError(index) {
    return Error("Index " + index + " is out-of-bounds.");
}
/**
 * Thrown when a multi provider and a regular provider are bound to the same token.
 *
 * ### Example
 *
 * ```typescript
 * expect(() => Injector.resolveAndCreate([
 *   { provide: "Strings", useValue: "string1", multi: true},
 *   { provide: "Strings", useValue: "string2", multi: false}
 * ])).toThrowError();
 * ```
 * @param {?} provider1
 * @param {?} provider2
 * @return {?}
 */
function mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
    return Error("Cannot mix multi providers and regular providers, got: " + provider1 + " " + provider2);
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A unique object used for retrieving items from the {\@link ReflectiveInjector}.
 *
 * Keys have:
 * - a system-wide unique `id`.
 * - a `token`.
 *
 * `Key` is used internally by {\@link ReflectiveInjector} because its system-wide unique `id` allows
 * the
 * injector to store created objects in a more efficient way.
 *
 * `Key` should not be created directly. {\@link ReflectiveInjector} creates keys automatically when
 * resolving
 * providers.
 * \@experimental
 */
var ReflectiveKey = (function () {
    /**
     * Private
     * @param {?} token
     * @param {?} id
     */
    function ReflectiveKey(token, id) {
        this.token = token;
        this.id = id;
        if (!token) {
            throw new Error('Token must be defined!');
        }
    }
    Object.defineProperty(ReflectiveKey.prototype, "displayName", {
        /**
         * Returns a stringified token.
         * @return {?}
         */
        get: function () { return stringify(this.token); },
        enumerable: true,
        configurable: true
    });
    /**
     * Retrieves a `Key` for a token.
     * @param {?} token
     * @return {?}
     */
    ReflectiveKey.get = function (token) {
        return _globalKeyRegistry.get(resolveForwardRef(token));
    };
    Object.defineProperty(ReflectiveKey, "numberOfKeys", {
        /**
         * @return {?} the number of keys registered in the system.
         */
        get: function () { return _globalKeyRegistry.numberOfKeys; },
        enumerable: true,
        configurable: true
    });
    return ReflectiveKey;
}());
/**
 * \@internal
 */
var KeyRegistry = (function () {
    function KeyRegistry() {
        this._allKeys = new Map();
    }
    /**
     * @param {?} token
     * @return {?}
     */
    KeyRegistry.prototype.get = function (token) {
        if (token instanceof ReflectiveKey)
            return token;
        if (this._allKeys.has(token)) {
            return ((this._allKeys.get(token)));
        }
        var /** @type {?} */ newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);
        this._allKeys.set(token, newKey);
        return newKey;
    };
    Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
        /**
         * @return {?}
         */
        get: function () { return this._allKeys.size; },
        enumerable: true,
        configurable: true
    });
    return KeyRegistry;
}());
var _globalKeyRegistry = new KeyRegistry();
/**
 * \@whatItDoes Represents a type that a Component or other object is instances of.
 *
 * \@description
 *
 * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by
 * the `MyCustomComponent` constructor function.
 *
 * \@stable
 */
var Type = Function;
/**
 * @param {?} v
 * @return {?}
 */
function isType(v) {
    return typeof v === 'function';
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Attention: This regex has to hold even if the code is minified!
 */
var DELEGATE_CTOR = /^function\s+\S+\(\)\s*{[\s\S]+\.apply\(this,\s*arguments\)/;
var ReflectionCapabilities = (function () {
    /**
     * @param {?=} reflect
     */
    function ReflectionCapabilities(reflect) {
        this._reflect = reflect || _global['Reflect'];
    }
    /**
     * @return {?}
     */
    ReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };
    /**
     * @template T
     * @param {?} t
     * @return {?}
     */
    ReflectionCapabilities.prototype.factory = function (t) { return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return new (t.bind.apply(t, [void 0].concat(args)))();
    }; };
    /**
     * \@internal
     * @param {?} paramTypes
     * @param {?} paramAnnotations
     * @return {?}
     */
    ReflectionCapabilities.prototype._zipTypesAndAnnotations = function (paramTypes, paramAnnotations) {
        var /** @type {?} */ result;
        if (typeof paramTypes === 'undefined') {
            result = new Array(paramAnnotations.length);
        }
        else {
            result = new Array(paramTypes.length);
        }
        for (var /** @type {?} */ i = 0; i < result.length; i++) {
            // TS outputs Object for parameters without types, while Traceur omits
            // the annotations. For now we preserve the Traceur behavior to aid
            // migration, but this can be revisited.
            if (typeof paramTypes === 'undefined') {
                result[i] = [];
            }
            else if (paramTypes[i] != Object) {
                result[i] = [paramTypes[i]];
            }
            else {
                result[i] = [];
            }
            if (paramAnnotations && paramAnnotations[i] != null) {
                result[i] = result[i].concat(paramAnnotations[i]);
            }
        }
        return result;
    };
    /**
     * @param {?} type
     * @param {?} parentCtor
     * @return {?}
     */
    ReflectionCapabilities.prototype._ownParameters = function (type, parentCtor) {
        // If we have no decorators, we only have function.length as metadata.
        // In that case, to detect whether a child class declared an own constructor or not,
        // we need to look inside of that constructor to check whether it is
        // just calling the parent.
        // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439
        // that sets 'design:paramtypes' to []
        // if a class inherits from another class but has no ctor declared itself.
        if (DELEGATE_CTOR.exec(type.toString())) {
            return null;
        }
        // Prefer the direct API.
        if (((type)).parameters && ((type)).parameters !== parentCtor.parameters) {
            return ((type)).parameters;
        }
        // API of tsickle for lowering decorators to properties on the class.
        var /** @type {?} */ tsickleCtorParams = ((type)).ctorParameters;
        if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {
            // Newer tsickle uses a function closure
            // Retain the non-function case for compatibility with older tsickle
            var /** @type {?} */ ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;
            var /** @type {?} */ paramTypes = ctorParameters.map(function (ctorParam) { return ctorParam && ctorParam.type; });
            var /** @type {?} */ paramAnnotations = ctorParameters.map(function (ctorParam) { return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators); });
            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
        }
        // API for metadata created by invoking the decorators.
        if (this._reflect != null && this._reflect.getOwnMetadata != null) {
            var /** @type {?} */ paramAnnotations = this._reflect.getOwnMetadata('parameters', type);
            var /** @type {?} */ paramTypes = this._reflect.getOwnMetadata('design:paramtypes', type);
            if (paramTypes || paramAnnotations) {
                return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
            }
        }
        // If a class has no decorators, at least create metadata
        // based on function.length.
        // Note: We know that this is a real constructor as we checked
        // the content of the constructor above.
        return new Array(((type.length))).fill(undefined);
    };
    /**
     * @param {?} type
     * @return {?}
     */
    ReflectionCapabilities.prototype.parameters = function (type) {
        // Note: only report metadata if we have at least one class decorator
        // to stay in sync with the static reflector.
        if (!isType(type)) {
            return [];
        }
        var /** @type {?} */ parentCtor = getParentCtor(type);
        var /** @type {?} */ parameters = this._ownParameters(type, parentCtor);
        if (!parameters && parentCtor !== Object) {
            parameters = this.parameters(parentCtor);
        }
        return parameters || [];
    };
    /**
     * @param {?} typeOrFunc
     * @param {?} parentCtor
     * @return {?}
     */
    ReflectionCapabilities.prototype._ownAnnotations = function (typeOrFunc, parentCtor) {
        // Prefer the direct API.
        if (((typeOrFunc)).annotations && ((typeOrFunc)).annotations !== parentCtor.annotations) {
            var /** @type {?} */ annotations = ((typeOrFunc)).annotations;
            if (typeof annotations === 'function' && annotations.annotations) {
                annotations = annotations.annotations;
            }
            return annotations;
        }
        // API of tsickle for lowering decorators to properties on the class.
        if (((typeOrFunc)).decorators && ((typeOrFunc)).decorators !== parentCtor.decorators) {
            return convertTsickleDecoratorIntoMetadata(((typeOrFunc)).decorators);
        }
        // API for metadata created by invoking the decorators.
        if (this._reflect && this._reflect.getOwnMetadata) {
            return this._reflect.getOwnMetadata('annotations', typeOrFunc);
        }
        return null;
    };
    /**
     * @param {?} typeOrFunc
     * @return {?}
     */
    ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {
        if (!isType(typeOrFunc)) {
            return [];
        }
        var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);
        var /** @type {?} */ ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];
        var /** @type {?} */ parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];
        return parentAnnotations.concat(ownAnnotations);
    };
    /**
     * @param {?} typeOrFunc
     * @param {?} parentCtor
     * @return {?}
     */
    ReflectionCapabilities.prototype._ownPropMetadata = function (typeOrFunc, parentCtor) {
        // Prefer the direct API.
        if (((typeOrFunc)).propMetadata &&
            ((typeOrFunc)).propMetadata !== parentCtor.propMetadata) {
            var /** @type {?} */ propMetadata = ((typeOrFunc)).propMetadata;
            if (typeof propMetadata === 'function' && propMetadata.propMetadata) {
                propMetadata = propMetadata.propMetadata;
            }
            return propMetadata;
        }
        // API of tsickle for lowering decorators to properties on the class.
        if (((typeOrFunc)).propDecorators &&
            ((typeOrFunc)).propDecorators !== parentCtor.propDecorators) {
            var /** @type {?} */ propDecorators_1 = ((typeOrFunc)).propDecorators;
            var /** @type {?} */ propMetadata_1 = ({});
            Object.keys(propDecorators_1).forEach(function (prop) {
                propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);
            });
            return propMetadata_1;
        }
        // API for metadata created by invoking the decorators.
        if (this._reflect && this._reflect.getOwnMetadata) {
            return this._reflect.getOwnMetadata('propMetadata', typeOrFunc);
        }
        return null;
    };
    /**
     * @param {?} typeOrFunc
     * @return {?}
     */
    ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {
        if (!isType(typeOrFunc)) {
            return {};
        }
        var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);
        var /** @type {?} */ propMetadata = {};
        if (parentCtor !== Object) {
            var /** @type {?} */ parentPropMetadata_1 = this.propMetadata(parentCtor);
            Object.keys(parentPropMetadata_1).forEach(function (propName) {
                propMetadata[propName] = parentPropMetadata_1[propName];
            });
        }
        var /** @type {?} */ ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);
        if (ownPropMetadata) {
            Object.keys(ownPropMetadata).forEach(function (propName) {
                var /** @type {?} */ decorators = [];
                if (propMetadata.hasOwnProperty(propName)) {
                    decorators.push.apply(decorators, propMetadata[propName]);
                }
                decorators.push.apply(decorators, ownPropMetadata[propName]);
                propMetadata[propName] = decorators;
            });
        }
        return propMetadata;
    };
    /**
     * @param {?} type
     * @param {?} lcProperty
     * @return {?}
     */
    ReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcProperty) {
        return type instanceof Type && lcProperty in type.prototype;
    };
    /**
     * @param {?} name
     * @return {?}
     */
    ReflectionCapabilities.prototype.getter = function (name) { return (new Function('o', 'return o.' + name + ';')); };
    /**
     * @param {?} name
     * @return {?}
     */
    ReflectionCapabilities.prototype.setter = function (name) {
        return (new Function('o', 'v', 'return o.' + name + ' = v;'));
    };
    /**
     * @param {?} name
     * @return {?}
     */
    ReflectionCapabilities.prototype.method = function (name) {
        var /** @type {?} */ functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
        return (new Function('o', 'args', functionBody));
    };
    /**
     * @param {?} type
     * @return {?}
     */
    ReflectionCapabilities.prototype.importUri = function (type) {
        // StaticSymbol
        if (typeof type === 'object' && type['filePath']) {
            return type['filePath'];
        }
        // Runtime type
        return "./" + stringify(type);
    };
    /**
     * @param {?} type
     * @return {?}
     */
    ReflectionCapabilities.prototype.resourceUri = function (type) { return "./" + stringify(type); };
    /**
     * @param {?} name
     * @param {?} moduleUrl
     * @param {?} members
     * @param {?} runtime
     * @return {?}
     */
    ReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) {
        return runtime;
    };
    /**
     * @param {?} enumIdentifier
     * @param {?} name
     * @return {?}
     */
    ReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) { return enumIdentifier[name]; };
    return ReflectionCapabilities;
}());
/**
 * @param {?} decoratorInvocations
 * @return {?}
 */
function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
    if (!decoratorInvocations) {
        return [];
    }
    return decoratorInvocations.map(function (decoratorInvocation) {
        var /** @type {?} */ decoratorType = decoratorInvocation.type;
        var /** @type {?} */ annotationCls = decoratorType.annotationCls;
        var /** @type {?} */ annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
        return new (annotationCls.bind.apply(annotationCls, [void 0].concat(annotationArgs)))();
    });
}
/**
 * @param {?} ctor
 * @return {?}
 */
function getParentCtor(ctor) {
    var /** @type {?} */ parentProto = Object.getPrototypeOf(ctor.prototype);
    var /** @type {?} */ parentCtor = parentProto ? parentProto.constructor : null;
    // Note: We always use `Object` as the null value
    // to simplify checking later on.
    return parentCtor || Object;
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Provides access to reflection data about symbols. Used internally by Angular
 * to power dependency injection and compilation.
 */
var Reflector = (function () {
    /**
     * @param {?} reflectionCapabilities
     */
    function Reflector(reflectionCapabilities) {
        this.reflectionCapabilities = reflectionCapabilities;
    }
    /**
     * @param {?} caps
     * @return {?}
     */
    Reflector.prototype.updateCapabilities = function (caps) { this.reflectionCapabilities = caps; };
    /**
     * @param {?} type
     * @return {?}
     */
    Reflector.prototype.factory = function (type) { return this.reflectionCapabilities.factory(type); };
    /**
     * @param {?} typeOrFunc
     * @return {?}
     */
    Reflector.prototype.parameters = function (typeOrFunc) {
        return this.reflectionCapabilities.parameters(typeOrFunc);
    };
    /**
     * @param {?} typeOrFunc
     * @return {?}
     */
    Reflector.prototype.annotations = function (typeOrFunc) {
        return this.reflectionCapabilities.annotations(typeOrFunc);
    };
    /**
     * @param {?} typeOrFunc
     * @return {?}
     */
    Reflector.prototype.propMetadata = function (typeOrFunc) {
        return this.reflectionCapabilities.propMetadata(typeOrFunc);
    };
    /**
     * @param {?} type
     * @param {?} lcProperty
     * @return {?}
     */
    Reflector.prototype.hasLifecycleHook = function (type, lcProperty) {
        return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);
    };
    /**
     * @param {?} name
     * @return {?}
     */
    Reflector.prototype.getter = function (name) { return this.reflectionCapabilities.getter(name); };
    /**
     * @param {?} name
     * @return {?}
     */
    Reflector.prototype.setter = function (name) { return this.reflectionCapabilities.setter(name); };
    /**
     * @param {?} name
     * @return {?}
     */
    Reflector.prototype.method = function (name) { return this.reflectionCapabilities.method(name); };
    /**
     * @param {?} type
     * @return {?}
     */
    Reflector.prototype.importUri = function (type) { return this.reflectionCapabilities.importUri(type); };
    /**
     * @param {?} type
     * @return {?}
     */
    Reflector.prototype.resourceUri = function (type) { return this.reflectionCapabilities.resourceUri(type); };
    /**
     * @param {?} name
     * @param {?} moduleUrl
     * @param {?} members
     * @param {?} runtime
     * @return {?}
     */
    Reflector.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) {
        return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);
    };
    /**
     * @param {?} identifier
     * @param {?} name
     * @return {?}
     */
    Reflector.prototype.resolveEnum = function (identifier, name) {
        return this.reflectionCapabilities.resolveEnum(identifier, name);
    };
    return Reflector;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * The {\@link Reflector} used internally in Angular to access metadata
 * about symbols.
 */
var reflector = new Reflector(new ReflectionCapabilities());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * `Dependency` is used by the framework to extend DI.
 * This is internal to Angular and should not be used directly.
 */
var ReflectiveDependency = (function () {
    /**
     * @param {?} key
     * @param {?} optional
     * @param {?} visibility
     */
    function ReflectiveDependency(key, optional, visibility) {
        this.key = key;
        this.optional = optional;
        this.visibility = visibility;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    ReflectiveDependency.fromKey = function (key) {
        return new ReflectiveDependency(key, false, null);
    };
    return ReflectiveDependency;
}());
var _EMPTY_LIST = [];
var ResolvedReflectiveProvider_ = (function () {
    /**
     * @param {?} key
     * @param {?} resolvedFactories
     * @param {?} multiProvider
     */
    function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {
        this.key = key;
        this.resolvedFactories = resolvedFactories;
        this.multiProvider = multiProvider;
    }
    Object.defineProperty(ResolvedReflectiveProvider_.prototype, "resolvedFactory", {
        /**
         * @return {?}
         */
        get: function () { return this.resolvedFactories[0]; },
        enumerable: true,
        configurable: true
    });
    return ResolvedReflectiveProvider_;
}());
/**
 * An internal resolved representation of a factory function created by resolving {\@link
 * Provider}.
 * \@experimental
 */
var ResolvedReflectiveFactory = (function () {
    /**
     * @param {?} factory
     * @param {?} dependencies
     */
    function ResolvedReflectiveFactory(factory, dependencies) {
        this.factory = factory;
        this.dependencies = dependencies;
    }
    return ResolvedReflectiveFactory;
}());
/**
 * Resolve a single provider.
 * @param {?} provider
 * @return {?}
 */
function resolveReflectiveFactory(provider) {
    var /** @type {?} */ factoryFn;
    var /** @type {?} */ resolvedDeps;
    if (provider.useClass) {
        var /** @type {?} */ useClass = resolveForwardRef(provider.useClass);
        factoryFn = reflector.factory(useClass);
        resolvedDeps = _dependenciesFor(useClass);
    }
    else if (provider.useExisting) {
        factoryFn = function (aliasInstance) { return aliasInstance; };
        resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];
    }
    else if (provider.useFactory) {
        factoryFn = provider.useFactory;
        resolvedDeps = constructDependencies(provider.useFactory, provider.deps);
    }
    else {
        factoryFn = function () { return provider.useValue; };
        resolvedDeps = _EMPTY_LIST;
    }
    return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
}
/**
 * Converts the {\@link Provider} into {\@link ResolvedProvider}.
 *
 * {\@link Injector} internally only uses {\@link ResolvedProvider}, {\@link Provider} contains
 * convenience provider syntax.
 * @param {?} provider
 * @return {?}
 */
function resolveReflectiveProvider(provider) {
    return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);
}
/**
 * Resolve a list of Providers.
 * @param {?} providers
 * @return {?}
 */
function resolveReflectiveProviders(providers) {
    var /** @type {?} */ normalized = _normalizeProviders(providers, []);
    var /** @type {?} */ resolved = normalized.map(resolveReflectiveProvider);
    var /** @type {?} */ resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());
    return Array.from(resolvedProviderMap.values());
}
/**
 * Merges a list of ResolvedProviders into a list where
 * each key is contained exactly once and multi providers
 * have been merged.
 * @param {?} providers
 * @param {?} normalizedProvidersMap
 * @return {?}
 */
function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
    for (var /** @type {?} */ i = 0; i < providers.length; i++) {
        var /** @type {?} */ provider = providers[i];
        var /** @type {?} */ existing = normalizedProvidersMap.get(provider.key.id);
        if (existing) {
            if (provider.multiProvider !== existing.multiProvider) {
                throw mixingMultiProvidersWithRegularProvidersError(existing, provider);
            }
            if (provider.multiProvider) {
                for (var /** @type {?} */ j = 0; j < provider.resolvedFactories.length; j++) {
                    existing.resolvedFactories.push(provider.resolvedFactories[j]);
                }
            }
            else {
                normalizedProvidersMap.set(provider.key.id, provider);
            }
        }
        else {
            var /** @type {?} */ resolvedProvider = void 0;
            if (provider.multiProvider) {
                resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);
            }
            else {
                resolvedProvider = provider;
            }
            normalizedProvidersMap.set(provider.key.id, resolvedProvider);
        }
    }
    return normalizedProvidersMap;
}
/**
 * @param {?} providers
 * @param {?} res
 * @return {?}
 */
function _normalizeProviders(providers, res) {
    providers.forEach(function (b) {
        if (b instanceof Type) {
            res.push({ provide: b, useClass: b });
        }
        else if (b && typeof b == 'object' && ((b)).provide !== undefined) {
            res.push(/** @type {?} */ (b));
        }
        else if (b instanceof Array) {
            _normalizeProviders(b, res);
        }
        else {
            throw invalidProviderError(b);
        }
    });
    return res;
}
/**
 * @param {?} typeOrFunc
 * @param {?=} dependencies
 * @return {?}
 */
function constructDependencies(typeOrFunc, dependencies) {
    if (!dependencies) {
        return _dependenciesFor(typeOrFunc);
    }
    else {
        var /** @type {?} */ params_1 = dependencies.map(function (t) { return [t]; });
        return dependencies.map(function (t) { return _extractToken(typeOrFunc, t, params_1); });
    }
}
/**
 * @param {?} typeOrFunc
 * @return {?}
 */
function _dependenciesFor(typeOrFunc) {
    var /** @type {?} */ params = reflector.parameters(typeOrFunc);
    if (!params)
        return [];
    if (params.some(function (p) { return p == null; })) {
        throw noAnnotationError(typeOrFunc, params);
    }
    return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });
}
/**
 * @param {?} typeOrFunc
 * @param {?} metadata
 * @param {?} params
 * @return {?}
 */
function _extractToken(typeOrFunc, metadata, params) {
    var /** @type {?} */ token = null;
    var /** @type {?} */ optional = false;
    if (!Array.isArray(metadata)) {
        if (metadata instanceof Inject) {
            return _createDependency(metadata.token, optional, null);
        }
        else {
            return _createDependency(metadata, optional, null);
        }
    }
    var /** @type {?} */ visibility = null;
    for (var /** @type {?} */ i = 0; i < metadata.length; ++i) {
        var /** @type {?} */ paramMetadata = metadata[i];
        if (paramMetadata instanceof Type) {
            token = paramMetadata;
        }
        else if (paramMetadata instanceof Inject) {
            token = paramMetadata.token;
        }
        else if (paramMetadata instanceof Optional) {
            optional = true;
        }
        else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {
            visibility = paramMetadata;
        }
        else if (paramMetadata instanceof InjectionToken) {
            token = paramMetadata;
        }
    }
    token = resolveForwardRef(token);
    if (token != null) {
        return _createDependency(token, optional, visibility);
    }
    else {
        throw noAnnotationError(typeOrFunc, params);
    }
}
/**
 * @param {?} token
 * @param {?} optional
 * @param {?} visibility
 * @return {?}
 */
function _createDependency(token, optional, visibility) {
    return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Threshold for the dynamic version
var UNDEFINED = new Object();
/**
 * A ReflectiveDependency injection container used for instantiating objects and resolving
 * dependencies.
 *
 * An `Injector` is a replacement for a `new` operator, which can automatically resolve the
 * constructor dependencies.
 *
 * In typical use, application code asks for the dependencies in the constructor and they are
 * resolved by the `Injector`.
 *
 * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))
 *
 * The following example creates an `Injector` configured to create `Engine` and `Car`.
 *
 * ```typescript
 * \@Injectable()
 * class Engine {
 * }
 *
 * \@Injectable()
 * class Car {
 *   constructor(public engine:Engine) {}
 * }
 *
 * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
 * var car = injector.get(Car);
 * expect(car instanceof Car).toBe(true);
 * expect(car.engine instanceof Engine).toBe(true);
 * ```
 *
 * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`
 * resolve all of the object's dependencies automatically.
 *
 * \@stable
 * @abstract
 */
var ReflectiveInjector = (function () {
    function ReflectiveInjector() {
    }
    /**
     * Turns an array of provider definitions into an array of resolved providers.
     *
     * A resolution is a process of flattening multiple nested arrays and converting individual
     * providers into an array of {\@link ResolvedReflectiveProvider}s.
     *
     * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))
     *
     * ```typescript
     * \@Injectable()
     * class Engine {
     * }
     *
     * \@Injectable()
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);
     *
     * expect(providers.length).toEqual(2);
     *
     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);
     * expect(providers[0].key.displayName).toBe("Car");
     * expect(providers[0].dependencies.length).toEqual(1);
     * expect(providers[0].factory).toBeDefined();
     *
     * expect(providers[1].key.displayName).toBe("Engine");
     * });
     * ```
     *
     * See {\@link ReflectiveInjector#fromResolvedProviders} for more info.
     * @param {?} providers
     * @return {?}
     */
    ReflectiveInjector.resolve = function (providers) {
        return resolveReflectiveProviders(providers);
    };
    /**
     * Resolves an array of providers and creates an injector from those providers.
     *
     * The passed-in providers can be an array of `Type`, {\@link Provider},
     * or a recursive array of more providers.
     *
     * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))
     *
     * ```typescript
     * \@Injectable()
     * class Engine {
     * }
     *
     * \@Injectable()
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
     * expect(injector.get(Car) instanceof Car).toBe(true);
     * ```
     *
     * This function is slower than the corresponding `fromResolvedProviders`
     * because it needs to resolve the passed-in providers first.
     * See {\@link ReflectiveInjector#resolve} and {\@link ReflectiveInjector#fromResolvedProviders}.
     * @param {?} providers
     * @param {?=} parent
     * @return {?}
     */
    ReflectiveInjector.resolveAndCreate = function (providers, parent) {
        var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
        return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
    };
    /**
     * Creates an injector from previously resolved providers.
     *
     * This API is the recommended way to construct injectors in performance-sensitive parts.
     *
     * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))
     *
     * ```typescript
     * \@Injectable()
     * class Engine {
     * }
     *
     * \@Injectable()
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var providers = ReflectiveInjector.resolve([Car, Engine]);
     * var injector = ReflectiveInjector.fromResolvedProviders(providers);
     * expect(injector.get(Car) instanceof Car).toBe(true);
     * ```
     * \@experimental
     * @param {?} providers
     * @param {?=} parent
     * @return {?}
     */
    ReflectiveInjector.fromResolvedProviders = function (providers, parent) {
        return new ReflectiveInjector_(providers, parent);
    };
    /**
     * Parent of this injector.
     *
     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
     * -->
     *
     * ### Example ([live demo](http://plnkr.co/edit/eosMGo?p=preview))
     *
     * ```typescript
     * var parent = ReflectiveInjector.resolveAndCreate([]);
     * var child = parent.resolveAndCreateChild([]);
     * expect(child.parent).toBe(parent);
     * ```
     * @abstract
     * @return {?}
     */
    ReflectiveInjector.prototype.parent = function () { };
    /**
     * Resolves an array of providers and creates a child injector from those providers.
     *
     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
     * -->
     *
     * The passed-in providers can be an array of `Type`, {\@link Provider},
     * or a recursive array of more providers.
     *
     * ### Example ([live demo](http://plnkr.co/edit/opB3T4?p=preview))
     *
     * ```typescript
     * class ParentProvider {}
     * class ChildProvider {}
     *
     * var parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);
     * var child = parent.resolveAndCreateChild([ChildProvider]);
     *
     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
     * ```
     *
     * This function is slower than the corresponding `createChildFromResolved`
     * because it needs to resolve the passed-in providers first.
     * See {\@link ReflectiveInjector#resolve} and {\@link ReflectiveInjector#createChildFromResolved}.
     * @abstract
     * @param {?} providers
     * @return {?}
     */
    ReflectiveInjector.prototype.resolveAndCreateChild = function (providers) { };
    /**
     * Creates a child injector from previously resolved providers.
     *
     * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
     * -->
     *
     * This API is the recommended way to construct injectors in performance-sensitive parts.
     *
     * ### Example ([live demo](http://plnkr.co/edit/VhyfjN?p=preview))
     *
     * ```typescript
     * class ParentProvider {}
     * class ChildProvider {}
     *
     * var parentProviders = ReflectiveInjector.resolve([ParentProvider]);
     * var childProviders = ReflectiveInjector.resolve([ChildProvider]);
     *
     * var parent = ReflectiveInjector.fromResolvedProviders(parentProviders);
     * var child = parent.createChildFromResolved(childProviders);
     *
     * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
     * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
     * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
     * ```
     * @abstract
     * @param {?} providers
     * @return {?}
     */
    ReflectiveInjector.prototype.createChildFromResolved = function (providers) { };
    /**
     * Resolves a provider and instantiates an object in the context of the injector.
     *
     * The created object does not get cached by the injector.
     *
     * ### Example ([live demo](http://plnkr.co/edit/yvVXoB?p=preview))
     *
     * ```typescript
     * \@Injectable()
     * class Engine {
     * }
     *
     * \@Injectable()
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var injector = ReflectiveInjector.resolveAndCreate([Engine]);
     *
     * var car = injector.resolveAndInstantiate(Car);
     * expect(car.engine).toBe(injector.get(Engine));
     * expect(car).not.toBe(injector.resolveAndInstantiate(Car));
     * ```
     * @abstract
     * @param {?} provider
     * @return {?}
     */
    ReflectiveInjector.prototype.resolveAndInstantiate = function (provider) { };
    /**
     * Instantiates an object using a resolved provider in the context of the injector.
     *
     * The created object does not get cached by the injector.
     *
     * ### Example ([live demo](http://plnkr.co/edit/ptCImQ?p=preview))
     *
     * ```typescript
     * \@Injectable()
     * class Engine {
     * }
     *
     * \@Injectable()
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var injector = ReflectiveInjector.resolveAndCreate([Engine]);
     * var carProvider = ReflectiveInjector.resolve([Car])[0];
     * var car = injector.instantiateResolved(carProvider);
     * expect(car.engine).toBe(injector.get(Engine));
     * expect(car).not.toBe(injector.instantiateResolved(carProvider));
     * ```
     * @abstract
     * @param {?} provider
     * @return {?}
     */
    ReflectiveInjector.prototype.instantiateResolved = function (provider) { };
    /**
     * @abstract
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */
    ReflectiveInjector.prototype.get = function (token, notFoundValue) { };
    return ReflectiveInjector;
}());
var ReflectiveInjector_ = (function () {
    /**
     * Private
     * @param {?} _providers
     * @param {?=} _parent
     */
    function ReflectiveInjector_(_providers, _parent) {
        /**
         * \@internal
         */
        this._constructionCounter = 0;
        this._providers = _providers;
        this._parent = _parent || null;
        var len = _providers.length;
        this.keyIds = new Array(len);
        this.objs = new Array(len);
        for (var i = 0; i < len; i++) {
            this.keyIds[i] = _providers[i].key.id;
            this.objs[i] = UNDEFINED;
        }
    }
    /**
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */
    ReflectiveInjector_.prototype.get = function (token, notFoundValue) {
        if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
        return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);
    };
    Object.defineProperty(ReflectiveInjector_.prototype, "parent", {
        /**
         * @return {?}
         */
        get: function () { return this._parent; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} providers
     * @return {?}
     */
    ReflectiveInjector_.prototype.resolveAndCreateChild = function (providers) {
        var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
        return this.createChildFromResolved(ResolvedReflectiveProviders);
    };
    /**
     * @param {?} providers
     * @return {?}
     */
    ReflectiveInjector_.prototype.createChildFromResolved = function (providers) {
        var /** @type {?} */ inj = new ReflectiveInjector_(providers);
        inj._parent = this;
        return inj;
    };
    /**
     * @param {?} provider
     * @return {?}
     */
    ReflectiveInjector_.prototype.resolveAndInstantiate = function (provider) {
        return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);
    };
    /**
     * @param {?} provider
     * @return {?}
     */
    ReflectiveInjector_.prototype.instantiateResolved = function (provider) {
        return this._instantiateProvider(provider);
    };
    /**
     * @param {?} index
     * @return {?}
     */
    ReflectiveInjector_.prototype.getProviderAtIndex = function (index) {
        if (index < 0 || index >= this._providers.length) {
            throw outOfBoundsError(index);
        }
        return this._providers[index];
    };
    /**
     * \@internal
     * @param {?} provider
     * @return {?}
     */
    ReflectiveInjector_.prototype._new = function (provider) {
        if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {
            throw cyclicDependencyError(this, provider.key);
        }
        return this._instantiateProvider(provider);
    };
    /**
     * @return {?}
     */
    ReflectiveInjector_.prototype._getMaxNumberOfObjects = function () { return this.objs.length; };
    /**
     * @param {?} provider
     * @return {?}
     */
    ReflectiveInjector_.prototype._instantiateProvider = function (provider) {
        if (provider.multiProvider) {
            var /** @type {?} */ res = new Array(provider.resolvedFactories.length);
            for (var /** @type {?} */ i = 0; i < provider.resolvedFactories.length; ++i) {
                res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
            }
            return res;
        }
        else {
            return this._instantiate(provider, provider.resolvedFactories[0]);
        }
    };
    /**
     * @param {?} provider
     * @param {?} ResolvedReflectiveFactory
     * @return {?}
     */
    ReflectiveInjector_.prototype._instantiate = function (provider, ResolvedReflectiveFactory$$1) {
        var _this = this;
        var /** @type {?} */ factory = ResolvedReflectiveFactory$$1.factory;
        var /** @type {?} */ deps;
        try {
            deps =
                ResolvedReflectiveFactory$$1.dependencies.map(function (dep) { return _this._getByReflectiveDependency(dep); });
        }
        catch (e) {
            if (e.addKey) {
                e.addKey(this, provider.key);
            }
            throw e;
        }
        var /** @type {?} */ obj;
        try {
            obj = factory.apply(void 0, deps);
        }
        catch (e) {
            throw instantiationError(this, e, e.stack, provider.key);
        }
        return obj;
    };
    /**
     * @param {?} dep
     * @return {?}
     */
    ReflectiveInjector_.prototype._getByReflectiveDependency = function (dep) {
        return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);
    };
    /**
     * @param {?} key
     * @param {?} visibility
     * @param {?} notFoundValue
     * @return {?}
     */
    ReflectiveInjector_.prototype._getByKey = function (key, visibility, notFoundValue) {
        if (key === INJECTOR_KEY) {
            return this;
        }
        if (visibility instanceof Self) {
            return this._getByKeySelf(key, notFoundValue);
        }
        else {
            return this._getByKeyDefault(key, notFoundValue, visibility);
        }
    };
    /**
     * @param {?} keyId
     * @return {?}
     */
    ReflectiveInjector_.prototype._getObjByKeyId = function (keyId) {
        for (var /** @type {?} */ i = 0; i < this.keyIds.length; i++) {
            if (this.keyIds[i] === keyId) {
                if (this.objs[i] === UNDEFINED) {
                    this.objs[i] = this._new(this._providers[i]);
                }
                return this.objs[i];
            }
        }
        return UNDEFINED;
    };
    /**
     * \@internal
     * @param {?} key
     * @param {?} notFoundValue
     * @return {?}
     */
    ReflectiveInjector_.prototype._throwOrNull = function (key, notFoundValue) {
        if (notFoundValue !== THROW_IF_NOT_FOUND) {
            return notFoundValue;
        }
        else {
            throw noProviderError(this, key);
        }
    };
    /**
     * \@internal
     * @param {?} key
     * @param {?} notFoundValue
     * @return {?}
     */
    ReflectiveInjector_.prototype._getByKeySelf = function (key, notFoundValue) {
        var /** @type {?} */ obj = this._getObjByKeyId(key.id);
        return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);
    };
    /**
     * \@internal
     * @param {?} key
     * @param {?} notFoundValue
     * @param {?} visibility
     * @return {?}
     */
    ReflectiveInjector_.prototype._getByKeyDefault = function (key, notFoundValue, visibility) {
        var /** @type {?} */ inj;
        if (visibility instanceof SkipSelf) {
            inj = this._parent;
        }
        else {
            inj = this;
        }
        while (inj instanceof ReflectiveInjector_) {
            var /** @type {?} */ inj_ = (inj);
            var /** @type {?} */ obj = inj_._getObjByKeyId(key.id);
            if (obj !== UNDEFINED)
                return obj;
            inj = inj_._parent;
        }
        if (inj !== null) {
            return inj.get(key.token, notFoundValue);
        }
        else {
            return this._throwOrNull(key, notFoundValue);
        }
    };
    Object.defineProperty(ReflectiveInjector_.prototype, "displayName", {
        /**
         * @return {?}
         */
        get: function () {
            var /** @type {?} */ providers = _mapProviders(this, function (b) { return ' "' + b.key.displayName + '" '; })
                .join(', ');
            return "ReflectiveInjector(providers: [" + providers + "])";
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ReflectiveInjector_.prototype.toString = function () { return this.displayName; };
    return ReflectiveInjector_;
}());
var INJECTOR_KEY = ReflectiveKey.get(Injector);
/**
 * @param {?} injector
 * @param {?} fn
 * @return {?}
 */
function _mapProviders(injector, fn) {
    var /** @type {?} */ res = new Array(injector._providers.length);
    for (var /** @type {?} */ i = 0; i < injector._providers.length; ++i) {
        res[i] = fn(injector.getProviderAtIndex(i));
    }
    return res;
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @module
 * @description
 * The `di` module provides dependency injection container services.
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Determine if the argument is shaped like a Promise
 * @param {?} obj
 * @return {?}
 */
function isPromise(obj) {
    // allow any Promise/A+ compliant thenable.
    // It's up to the caller to ensure that obj.then conforms to the spec
    return !!obj && typeof obj.then === 'function';
}
/**
 * Determine if the argument is an Observable
 * @param {?} obj
 * @return {?}
 */
function isObservable(obj) {
    // TODO use Symbol.observable when https://github.com/ReactiveX/rxjs/issues/2415 will be resolved
    return !!obj && typeof obj.subscribe === 'function';
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A function that will be executed when an application is initialized.
 * \@experimental
 */
var APP_INITIALIZER = new InjectionToken('Application Initializer');
/**
 * A class that reflects the state of running {\@link APP_INITIALIZER}s.
 *
 * \@experimental
 */
var ApplicationInitStatus = (function () {
    /**
     * @param {?} appInits
     */
    function ApplicationInitStatus(appInits) {
        var _this = this;
        this.appInits = appInits;
        this.initialized = false;
        this._done = false;
        this._donePromise = new Promise(function (res, rej) {
            _this.resolve = res;
            _this.reject = rej;
        });
    }
    /**
     * \@internal
     * @return {?}
     */
    ApplicationInitStatus.prototype.runInitializers = function () {
        var _this = this;
        if (this.initialized) {
            return;
        }
        var /** @type {?} */ asyncInitPromises = [];
        var /** @type {?} */ complete = function () {
            _this._done = true;
            _this.resolve();
        };
        if (this.appInits) {
            for (var /** @type {?} */ i = 0; i < this.appInits.length; i++) {
                var /** @type {?} */ initResult = this.appInits[i]();
                if (isPromise(initResult)) {
                    asyncInitPromises.push(initResult);
                }
            }
        }
        Promise.all(asyncInitPromises).then(function () { complete(); }).catch(function (e) { _this.reject(e); });
        if (asyncInitPromises.length === 0) {
            complete();
        }
        this.initialized = true;
    };
    Object.defineProperty(ApplicationInitStatus.prototype, "done", {
        /**
         * @return {?}
         */
        get: function () { return this._done; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ApplicationInitStatus.prototype, "donePromise", {
        /**
         * @return {?}
         */
        get: function () { return this._donePromise; },
        enumerable: true,
        configurable: true
    });
    return ApplicationInitStatus;
}());
ApplicationInitStatus.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
ApplicationInitStatus.ctorParameters = function () { return [
    { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional },] },
]; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A DI Token representing a unique string id assigned to the application by Angular and used
 * primarily for prefixing application attributes and CSS styles when
 * {\@link ViewEncapsulation#Emulated} is being used.
 *
 * If you need to avoid randomly generated value to be used as an application id, you can provide
 * a custom value via a DI provider <!-- TODO: provider --> configuring the root {\@link Injector}
 * using this token.
 * \@experimental
 */
var APP_ID = new InjectionToken('AppId');
/**
 * @return {?}
 */
function _appIdRandomProviderFactory() {
    return "" + _randomChar() + _randomChar() + _randomChar();
}
/**
 * Providers that will generate a random APP_ID_TOKEN.
 * \@experimental
 */
var APP_ID_RANDOM_PROVIDER = {
    provide: APP_ID,
    useFactory: _appIdRandomProviderFactory,
    deps: [],
};
/**
 * @return {?}
 */
function _randomChar() {
    return String.fromCharCode(97 + Math.floor(Math.random() * 25));
}
/**
 * A function that will be executed when a platform is initialized.
 * \@experimental
 */
var PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');
/**
 * A token that indicates an opaque platform id.
 * \@experimental
 */
var PLATFORM_ID = new InjectionToken('Platform ID');
/**
 * All callbacks provided via this token will be called for every component that is bootstrapped.
 * Signature of the callback:
 *
 * `(componentRef: ComponentRef) => void`.
 *
 * \@experimental
 */
var APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');
/**
 * A token which indicates the root directory of the application
 * \@experimental
 */
var PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var Console = (function () {
    function Console() {
    }
    /**
     * @param {?} message
     * @return {?}
     */
    Console.prototype.log = function (message) {
        // tslint:disable-next-line:no-console
        console.log(message);
    };
    /**
     * @param {?} message
     * @return {?}
     */
    Console.prototype.warn = function (message) {
        // tslint:disable-next-line:no-console
        console.warn(message);
    };
    return Console;
}());
Console.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
Console.ctorParameters = function () { return []; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Combination of NgModuleFactory and ComponentFactorys.
 *
 * \@experimental
 */
var ModuleWithComponentFactories = (function () {
    /**
     * @param {?} ngModuleFactory
     * @param {?} componentFactories
     */
    function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {
        this.ngModuleFactory = ngModuleFactory;
        this.componentFactories = componentFactories;
    }
    return ModuleWithComponentFactories;
}());
/**
 * @return {?}
 */
function _throwError() {
    throw new Error("Runtime compiler is not loaded");
}
/**
 * Low-level service for running the angular compiler during runtime
 * to create {\@link ComponentFactory}s, which
 * can later be used to create and render a Component instance.
 *
 * Each `\@NgModule` provides an own `Compiler` to its injector,
 * that will use the directives/pipes of the ng module for compilation
 * of components.
 * \@stable
 */
var Compiler = (function () {
    function Compiler() {
    }
    /**
     * Compiles the given NgModule and all of its components. All templates of the components listed
     * in `entryComponents` have to be inlined.
     * @template T
     * @param {?} moduleType
     * @return {?}
     */
    Compiler.prototype.compileModuleSync = function (moduleType) { throw _throwError(); };
    /**
     * Compiles the given NgModule and all of its components
     * @template T
     * @param {?} moduleType
     * @return {?}
     */
    Compiler.prototype.compileModuleAsync = function (moduleType) { throw _throwError(); };
    /**
     * Same as {\@link #compileModuleSync} but also creates ComponentFactories for all components.
     * @template T
     * @param {?} moduleType
     * @return {?}
     */
    Compiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
        throw _throwError();
    };
    /**
     * Same as {\@link #compileModuleAsync} but also creates ComponentFactories for all components.
     * @template T
     * @param {?} moduleType
     * @return {?}
     */
    Compiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
        throw _throwError();
    };
    /**
     * Exposes the CSS-style selectors that have been used in `ngContent` directives within
     * the template of the given component.
     * This is used by the `upgrade` library to compile the appropriate transclude content
     * in the AngularJS wrapper component.
     *
     * @deprecated since v4. Use ComponentFactory.ngContentSelectors instead.
     * @param {?} component
     * @return {?}
     */
    Compiler.prototype.getNgContentSelectors = function (component) { throw _throwError(); };
    /**
     * Clears all caches.
     * @return {?}
     */
    Compiler.prototype.clearCache = function () { };
    /**
     * Clears the cache for the given component/ngModule.
     * @param {?} type
     * @return {?}
     */
    Compiler.prototype.clearCacheFor = function (type) { };
    return Compiler;
}());
Compiler.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
Compiler.ctorParameters = function () { return []; };
/**
 * Token to provide CompilerOptions in the platform injector.
 *
 * \@experimental
 */
var COMPILER_OPTIONS = new InjectionToken('compilerOptions');
/**
 * A factory for creating a Compiler
 *
 * \@experimental
 * @abstract
 */
var CompilerFactory = (function () {
    function CompilerFactory() {
    }
    /**
     * @abstract
     * @param {?=} options
     * @return {?}
     */
    CompilerFactory.prototype.createCompiler = function (options) { };
    return CompilerFactory;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Represents an instance of a Component created via a {\@link ComponentFactory}.
 *
 * `ComponentRef` provides access to the Component Instance as well other objects related to this
 * Component Instance and allows you to destroy the Component Instance via the {\@link #destroy}
 * method.
 * \@stable
 * @abstract
 */
var ComponentRef = (function () {
    function ComponentRef() {
    }
    /**
     * Location of the Host Element of this Component Instance.
     * @abstract
     * @return {?}
     */
    ComponentRef.prototype.location = function () { };
    /**
     * The injector on which the component instance exists.
     * @abstract
     * @return {?}
     */
    ComponentRef.prototype.injector = function () { };
    /**
     * The instance of the Component.
     * @abstract
     * @return {?}
     */
    ComponentRef.prototype.instance = function () { };
    /**
     * The {\@link ViewRef} of the Host View of this Component instance.
     * @abstract
     * @return {?}
     */
    ComponentRef.prototype.hostView = function () { };
    /**
     * The {\@link ChangeDetectorRef} of the Component instance.
     * @abstract
     * @return {?}
     */
    ComponentRef.prototype.changeDetectorRef = function () { };
    /**
     * The component type.
     * @abstract
     * @return {?}
     */
    ComponentRef.prototype.componentType = function () { };
    /**
     * Destroys the component instance and all of the data structures associated with it.
     * @abstract
     * @return {?}
     */
    ComponentRef.prototype.destroy = function () { };
    /**
     * Allows to register a callback that will be called when the component is destroyed.
     * @abstract
     * @param {?} callback
     * @return {?}
     */
    ComponentRef.prototype.onDestroy = function (callback) { };
    return ComponentRef;
}());
/**
 * \@stable
 * @abstract
 */
var ComponentFactory = (function () {
    function ComponentFactory() {
    }
    /**
     * @abstract
     * @return {?}
     */
    ComponentFactory.prototype.selector = function () { };
    /**
     * @abstract
     * @return {?}
     */
    ComponentFactory.prototype.componentType = function () { };
    /**
     * selector for all <ng-content> elements in the component.
     * @abstract
     * @return {?}
     */
    ComponentFactory.prototype.ngContentSelectors = function () { };
    /**
     * the inputs of the component.
     * @abstract
     * @return {?}
     */
    ComponentFactory.prototype.inputs = function () { };
    /**
     * the outputs of the component.
     * @abstract
     * @return {?}
     */
    ComponentFactory.prototype.outputs = function () { };
    /**
     * Creates a new component.
     * @abstract
     * @param {?} injector
     * @param {?=} projectableNodes
     * @param {?=} rootSelectorOrNode
     * @param {?=} ngModule
     * @return {?}
     */
    ComponentFactory.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) { };
    return ComponentFactory;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} component
 * @return {?}
 */
function noComponentFactoryError(component) {
    var /** @type {?} */ error = Error("No component factory found for " + stringify(component) + ". Did you add it to @NgModule.entryComponents?");
    ((error))[ERROR_COMPONENT] = component;
    return error;
}
var ERROR_COMPONENT = 'ngComponent';
/**
 * @param {?} error
 * @return {?}
 */
var _NullComponentFactoryResolver = (function () {
    function _NullComponentFactoryResolver() {
    }
    /**
     * @template T
     * @param {?} component
     * @return {?}
     */
    _NullComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
        throw noComponentFactoryError(component);
    };
    return _NullComponentFactoryResolver;
}());
/**
 * \@stable
 * @abstract
 */
var ComponentFactoryResolver = (function () {
    function ComponentFactoryResolver() {
    }
    /**
     * @abstract
     * @template T
     * @param {?} component
     * @return {?}
     */
    ComponentFactoryResolver.prototype.resolveComponentFactory = function (component) { };
    return ComponentFactoryResolver;
}());
ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();
var CodegenComponentFactoryResolver = (function () {
    /**
     * @param {?} factories
     * @param {?} _parent
     * @param {?} _ngModule
     */
    function CodegenComponentFactoryResolver(factories, _parent, _ngModule) {
        this._parent = _parent;
        this._ngModule = _ngModule;
        this._factories = new Map();
        for (var i = 0; i < factories.length; i++) {
            var factory = factories[i];
            this._factories.set(factory.componentType, factory);
        }
    }
    /**
     * @template T
     * @param {?} component
     * @return {?}
     */
    CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
        var /** @type {?} */ factory = this._factories.get(component);
        if (!factory && this._parent) {
            factory = this._parent.resolveComponentFactory(component);
        }
        if (!factory) {
            throw noComponentFactoryError(component);
        }
        return new ComponentFactoryBoundToModule(factory, this._ngModule);
    };
    return CodegenComponentFactoryResolver;
}());
var ComponentFactoryBoundToModule = (function (_super) {
    __extends(ComponentFactoryBoundToModule, _super);
    /**
     * @param {?} factory
     * @param {?} ngModule
     */
    function ComponentFactoryBoundToModule(factory, ngModule) {
        var _this = _super.call(this) || this;
        _this.factory = factory;
        _this.ngModule = ngModule;
        return _this;
    }
    Object.defineProperty(ComponentFactoryBoundToModule.prototype, "selector", {
        /**
         * @return {?}
         */
        get: function () { return this.factory.selector; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComponentFactoryBoundToModule.prototype, "componentType", {
        /**
         * @return {?}
         */
        get: function () { return this.factory.componentType; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComponentFactoryBoundToModule.prototype, "ngContentSelectors", {
        /**
         * @return {?}
         */
        get: function () { return this.factory.ngContentSelectors; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComponentFactoryBoundToModule.prototype, "inputs", {
        /**
         * @return {?}
         */
        get: function () { return this.factory.inputs; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComponentFactoryBoundToModule.prototype, "outputs", {
        /**
         * @return {?}
         */
        get: function () { return this.factory.outputs; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} injector
     * @param {?=} projectableNodes
     * @param {?=} rootSelectorOrNode
     * @param {?=} ngModule
     * @return {?}
     */
    ComponentFactoryBoundToModule.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {
        return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);
    };
    return ComponentFactoryBoundToModule;
}(ComponentFactory));
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Represents an instance of an NgModule created via a {\@link NgModuleFactory}.
 *
 * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this
 * NgModule Instance.
 *
 * \@stable
 * @abstract
 */
var NgModuleRef = (function () {
    function NgModuleRef() {
    }
    /**
     * The injector that contains all of the providers of the NgModule.
     * @abstract
     * @return {?}
     */
    NgModuleRef.prototype.injector = function () { };
    /**
     * The ComponentFactoryResolver to get hold of the ComponentFactories
     * declared in the `entryComponents` property of the module.
     * @abstract
     * @return {?}
     */
    NgModuleRef.prototype.componentFactoryResolver = function () { };
    /**
     * The NgModule instance.
     * @abstract
     * @return {?}
     */
    NgModuleRef.prototype.instance = function () { };
    /**
     * Destroys the module instance and all of the data structures associated with it.
     * @abstract
     * @return {?}
     */
    NgModuleRef.prototype.destroy = function () { };
    /**
     * Allows to register a callback that will be called when the module is destroyed.
     * @abstract
     * @param {?} callback
     * @return {?}
     */
    NgModuleRef.prototype.onDestroy = function (callback) { };
    return NgModuleRef;
}());
/**
 * \@experimental
 * @abstract
 */
var NgModuleFactory = (function () {
    function NgModuleFactory() {
    }
    /**
     * @abstract
     * @return {?}
     */
    NgModuleFactory.prototype.moduleType = function () { };
    /**
     * @abstract
     * @param {?} parentInjector
     * @return {?}
     */
    NgModuleFactory.prototype.create = function (parentInjector) { };
    return NgModuleFactory;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var trace;
var events;
/**
 * @return {?}
 */
function detectWTF() {
    var /** @type {?} */ wtf = ((_global) /** TODO #9100 */)['wtf'];
    if (wtf) {
        trace = wtf['trace'];
        if (trace) {
            events = trace['events'];
            return true;
        }
    }
    return false;
}
/**
 * @param {?} signature
 * @param {?=} flags
 * @return {?}
 */
function createScope$1(signature, flags) {
    if (flags === void 0) { flags = null; }
    return events.createScope(signature, flags);
}
/**
 * @template T
 * @param {?} scope
 * @param {?=} returnValue
 * @return {?}
 */
function leave(scope, returnValue) {
    trace.leaveScope(scope, returnValue);
    return returnValue;
}
/**
 * @param {?} rangeType
 * @param {?} action
 * @return {?}
 */
function startTimeRange(rangeType, action) {
    return trace.beginTimeRange(rangeType, action);
}
/**
 * @param {?} range
 * @return {?}
 */
function endTimeRange(range) {
    trace.endTimeRange(range);
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * True if WTF is enabled.
 */
var wtfEnabled = detectWTF();
/**
 * @param {?=} arg0
 * @param {?=} arg1
 * @return {?}
 */
function noopScope(arg0, arg1) {
    return null;
}
/**
 * Create trace scope.
 *
 * Scopes must be strictly nested and are analogous to stack frames, but
 * do not have to follow the stack frames. Instead it is recommended that they follow logical
 * nesting. You may want to use
 * [Event
 * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)
 * as they are defined in WTF.
 *
 * Used to mark scope entry. The return value is used to leave the scope.
 *
 *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');
 *
 *     someMethod() {
 *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI
 *        // DO SOME WORK HERE
 *        return wtfLeave(s, 123); // Return value 123
 *     }
 *
 * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can
 * negatively impact the performance of your application. For this reason we recommend that
 * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and
 * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to
 * exception, will produce incorrect trace, but presence of exception signifies logic error which
 * needs to be fixed before the app should be profiled. Add try-finally only when you expect that
 * an exception is expected during normal execution while profiling.
 *
 * \@experimental
 */
var wtfCreateScope = wtfEnabled ? createScope$1 : function (signature, flags) { return noopScope; };
/**
 * Used to mark end of Scope.
 *
 * - `scope` to end.
 * - `returnValue` (optional) to be passed to the WTF.
 *
 * Returns the `returnValue for easy chaining.
 * \@experimental
 */
var wtfLeave = wtfEnabled ? leave : function (s, r) { return r; };
/**
 * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.
 * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been
 * enabled.
 *
 *     someMethod() {
 *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');
 *        var future = new Future.delay(5).then((_) {
 *          wtfEndTimeRange(s);
 *        });
 *     }
 * \@experimental
 */
var wtfStartTimeRange = wtfEnabled ? startTimeRange : function (rangeType, action) { return null; };
/**
 * Ends a async time range operation.
 * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been
 * enabled.
 * \@experimental
 */
var wtfEndTimeRange = wtfEnabled ? endTimeRange : function (r) { return null; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Use by directives and components to emit custom Events.
 *
 * ### Examples
 *
 * In the following example, `Zippy` alternatively emits `open` and `close` events when its
 * title gets clicked:
 *
 * ```
 * \@Component({
 *   selector: 'zippy',
 *   template: `
 *   <div class="zippy">
 *     <div (click)="toggle()">Toggle</div>
 *     <div [hidden]="!visible">
 *       <ng-content></ng-content>
 *     </div>
 *  </div>`})
 * export class Zippy {
 *   visible: boolean = true;
 *   \@Output() open: EventEmitter<any> = new EventEmitter();
 *   \@Output() close: EventEmitter<any> = new EventEmitter();
 *
 *   toggle() {
 *     this.visible = !this.visible;
 *     if (this.visible) {
 *       this.open.emit(null);
 *     } else {
 *       this.close.emit(null);
 *     }
 *   }
 * }
 * ```
 *
 * The events payload can be accessed by the parameter `$event` on the components output event
 * handler:
 *
 * ```
 * <zippy (open)="onOpen($event)" (close)="onClose($event)"></zippy>
 * ```
 *
 * Uses Rx.Observable but provides an adapter to make it work as specified here:
 * https://github.com/jhusain/observable-spec
 *
 * Once a reference implementation of the spec is available, switch to it.
 * \@stable
 */
var EventEmitter = (function (_super) {
    __extends(EventEmitter, _super);
    /**
     * Creates an instance of {\@link EventEmitter}, which depending on `isAsync`,
     * delivers events synchronously or asynchronously.
     *
     * @param {?=} isAsync By default, events are delivered synchronously (default value: `false`).
     * Set to `true` for asynchronous event delivery.
     */
    function EventEmitter(isAsync) {
        if (isAsync === void 0) { isAsync = false; }
        var _this = _super.call(this) || this;
        _this.__isAsync = isAsync;
        return _this;
    }
    /**
     * @param {?=} value
     * @return {?}
     */
    EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };
    /**
     * @param {?=} generatorOrNext
     * @param {?=} error
     * @param {?=} complete
     * @return {?}
     */
    EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {
        var /** @type {?} */ schedulerFn;
        var /** @type {?} */ errorFn = function (err) { return null; };
        var /** @type {?} */ completeFn = function () { return null; };
        if (generatorOrNext && typeof generatorOrNext === 'object') {
            schedulerFn = this.__isAsync ? function (value) {
                setTimeout(function () { return generatorOrNext.next(value); });
            } : function (value) { generatorOrNext.next(value); };
            if (generatorOrNext.error) {
                errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :
                    function (err) { generatorOrNext.error(err); };
            }
            if (generatorOrNext.complete) {
                completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :
                    function () { generatorOrNext.complete(); };
            }
        }
        else {
            schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :
                function (value) { generatorOrNext(value); };
            if (error) {
                errorFn =
                    this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };
            }
            if (complete) {
                completeFn =
                    this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };
            }
        }
        return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
    };
    return EventEmitter;
}(Subject_2));
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * An injectable service for executing work inside or outside of the Angular zone.
 *
 * The most common use of this service is to optimize performance when starting a work consisting of
 * one or more asynchronous tasks that don't require UI updates or error handling to be handled by
 * Angular. Such tasks can be kicked off via {\@link #runOutsideAngular} and if needed, these tasks
 * can reenter the Angular zone via {\@link #run}.
 *
 * <!-- TODO: add/fix links to:
 *   - docs explaining zones and the use of zones in Angular and change-detection
 *   - link to runOutsideAngular/run (throughout this file!)
 *   -->
 *
 * ### Example
 *
 * ```
 * import {Component, NgZone} from '\@angular/core';
 * import {NgIf} from '\@angular/common';
 *
 * \@Component({
 *   selector: 'ng-zone-demo'.
 *   template: `
 *     <h2>Demo: NgZone</h2>
 *
 *     <p>Progress: {{progress}}%</p>
 *     <p *ngIf="progress >= 100">Done processing {{label}} of Angular zone!</p>
 *
 *     <button (click)="processWithinAngularZone()">Process within Angular zone</button>
 *     <button (click)="processOutsideOfAngularZone()">Process outside of Angular zone</button>
 *   `,
 * })
 * export class NgZoneDemo {
 *   progress: number = 0;
 *   label: string;
 *
 *   constructor(private _ngZone: NgZone) {}
 *
 *   // Loop inside the Angular zone
 *   // so the UI DOES refresh after each setTimeout cycle
 *   processWithinAngularZone() {
 *     this.label = 'inside';
 *     this.progress = 0;
 *     this._increaseProgress(() => console.log('Inside Done!'));
 *   }
 *
 *   // Loop outside of the Angular zone
 *   // so the UI DOES NOT refresh after each setTimeout cycle
 *   processOutsideOfAngularZone() {
 *     this.label = 'outside';
 *     this.progress = 0;
 *     this._ngZone.runOutsideAngular(() => {
 *       this._increaseProgress(() => {
 *       // reenter the Angular zone and display done
 *       this._ngZone.run(() => {console.log('Outside Done!') });
 *     }}));
 *   }
 *
 *   _increaseProgress(doneCallback: () => void) {
 *     this.progress += 1;
 *     console.log(`Current progress: ${this.progress}%`);
 *
 *     if (this.progress < 100) {
 *       window.setTimeout(() => this._increaseProgress(doneCallback)), 10)
 *     } else {
 *       doneCallback();
 *     }
 *   }
 * }
 * ```
 *
 * \@experimental
 */
var NgZone = (function () {
    /**
     * @param {?} __0
     */
    function NgZone(_a) {
        var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;
        this.hasPendingMicrotasks = false;
        this.hasPendingMacrotasks = false;
        /**
         * Whether there are no outstanding microtasks or macrotasks.
         */
        this.isStable = true;
        /**
         * Notifies when code enters Angular Zone. This gets fired first on VM Turn.
         */
        this.onUnstable = new EventEmitter(false);
        /**
         * Notifies when there is no more microtasks enqueue in the current VM Turn.
         * This is a hint for Angular to do change detection, which may enqueue more microtasks.
         * For this reason this event can fire multiple times per VM Turn.
         */
        this.onMicrotaskEmpty = new EventEmitter(false);
        /**
         * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which
         * implies we are about to relinquish VM turn.
         * This event gets called just once.
         */
        this.onStable = new EventEmitter(false);
        /**
         * Notifies that an error has been delivered.
         */
        this.onError = new EventEmitter(false);
        if (typeof Zone == 'undefined') {
            throw new Error('Angular requires Zone.js prolyfill.');
        }
        Zone.assertZonePatched();
        var self = this;
        self._nesting = 0;
        self._outer = self._inner = Zone.current;
        if (Zone['wtfZoneSpec']) {
            self._inner = self._inner.fork(Zone['wtfZoneSpec']);
        }
        if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {
            self._inner = self._inner.fork(Zone['longStackTraceZoneSpec']);
        }
        forkInnerZoneWithAngularBehavior(self);
    }
    /**
     * @return {?}
     */
    NgZone.isInAngularZone = function () { return Zone.current.get('isAngularZone') === true; };
    /**
     * @return {?}
     */
    NgZone.assertInAngularZone = function () {
        if (!NgZone.isInAngularZone()) {
            throw new Error('Expected to be in Angular Zone, but it is not!');
        }
    };
    /**
     * @return {?}
     */
    NgZone.assertNotInAngularZone = function () {
        if (NgZone.isInAngularZone()) {
            throw new Error('Expected to not be in Angular Zone, but it is!');
        }
    };
    /**
     * Executes the `fn` function synchronously within the Angular zone and returns value returned by
     * the function.
     *
     * Running functions via `run` allows you to reenter Angular zone from a task that was executed
     * outside of the Angular zone (typically started via {\@link #runOutsideAngular}).
     *
     * Any future tasks or microtasks scheduled from within this function will continue executing from
     * within the Angular zone.
     *
     * If a synchronous error happens it will be rethrown and not reported via `onError`.
     * @param {?} fn
     * @return {?}
     */
    NgZone.prototype.run = function (fn) { return (((this)))._inner.run(fn); };
    /**
     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not
     * rethrown.
     * @param {?} fn
     * @return {?}
     */
    NgZone.prototype.runGuarded = function (fn) { return (((this)))._inner.runGuarded(fn); };
    /**
     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
     * the function.
     *
     * Running functions via {\@link #runOutsideAngular} allows you to escape Angular's zone and do
     * work that
     * doesn't trigger Angular change-detection or is subject to Angular's error handling.
     *
     * Any future tasks or microtasks scheduled from within this function will continue executing from
     * outside of the Angular zone.
     *
     * Use {\@link #run} to reenter the Angular zone and do work that updates the application model.
     * @param {?} fn
     * @return {?}
     */
    NgZone.prototype.runOutsideAngular = function (fn) { return (((this)))._outer.run(fn); };
    return NgZone;
}());
/**
 * @param {?} zone
 * @return {?}
 */
function checkStable(zone) {
    if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {
        try {
            zone._nesting++;
            zone.onMicrotaskEmpty.emit(null);
        }
        finally {
            zone._nesting--;
            if (!zone.hasPendingMicrotasks) {
                try {
                    zone.runOutsideAngular(function () { return zone.onStable.emit(null); });
                }
                finally {
                    zone.isStable = true;
                }
            }
        }
    }
}
/**
 * @param {?} zone
 * @return {?}
 */
function forkInnerZoneWithAngularBehavior(zone) {
    zone._inner = zone._inner.fork({
        name: 'angular',
        properties: /** @type {?} */ ({ 'isAngularZone': true }),
        onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {
            try {
                onEnter(zone);
                return delegate.invokeTask(target, task, applyThis, applyArgs);
            }
            finally {
                onLeave(zone);
            }
        },
        onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {
            try {
                onEnter(zone);
                return delegate.invoke(target, callback, applyThis, applyArgs, source);
            }
            finally {
                onLeave(zone);
            }
        },
        onHasTask: function (delegate, current, target, hasTaskState) {
            delegate.hasTask(target, hasTaskState);
            if (current === target) {
                // We are only interested in hasTask events which originate from our zone
                // (A child hasTask event is not interesting to us)
                if (hasTaskState.change == 'microTask') {
                    zone.hasPendingMicrotasks = hasTaskState.microTask;
                    checkStable(zone);
                }
                else if (hasTaskState.change == 'macroTask') {
                    zone.hasPendingMacrotasks = hasTaskState.macroTask;
                }
            }
        },
        onHandleError: function (delegate, current, target, error) {
            delegate.handleError(target, error);
            zone.runOutsideAngular(function () { return zone.onError.emit(error); });
            return false;
        }
    });
}
/**
 * @param {?} zone
 * @return {?}
 */
function onEnter(zone) {
    zone._nesting++;
    if (zone.isStable) {
        zone.isStable = false;
        zone.onUnstable.emit(null);
    }
}
/**
 * @param {?} zone
 * @return {?}
 */
function onLeave(zone) {
    zone._nesting--;
    checkStable(zone);
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * The Testability service provides testing hooks that can be accessed from
 * the browser and by services such as Protractor. Each bootstrapped Angular
 * application on the page will have an instance of Testability.
 * \@experimental
 */
var Testability = (function () {
    /**
     * @param {?} _ngZone
     */
    function Testability(_ngZone) {
        this._ngZone = _ngZone;
        /**
         * \@internal
         */
        this._pendingCount = 0;
        /**
         * \@internal
         */
        this._isZoneStable = true;
        /**
         * Whether any work was done since the last 'whenStable' callback. This is
         * useful to detect if this could have potentially destabilized another
         * component while it is stabilizing.
         * \@internal
         */
        this._didWork = false;
        /**
         * \@internal
         */
        this._callbacks = [];
        this._watchAngularEvents();
    }
    /**
     * \@internal
     * @return {?}
     */
    Testability.prototype._watchAngularEvents = function () {
        var _this = this;
        this._ngZone.onUnstable.subscribe({
            next: function () {
                _this._didWork = true;
                _this._isZoneStable = false;
            }
        });
        this._ngZone.runOutsideAngular(function () {
            _this._ngZone.onStable.subscribe({
                next: function () {
                    NgZone.assertNotInAngularZone();
                    scheduleMicroTask(function () {
                        _this._isZoneStable = true;
                        _this._runCallbacksIfReady();
                    });
                }
            });
        });
    };
    /**
     * @return {?}
     */
    Testability.prototype.increasePendingRequestCount = function () {
        this._pendingCount += 1;
        this._didWork = true;
        return this._pendingCount;
    };
    /**
     * @return {?}
     */
    Testability.prototype.decreasePendingRequestCount = function () {
        this._pendingCount -= 1;
        if (this._pendingCount < 0) {
            throw new Error('pending async requests below zero');
        }
        this._runCallbacksIfReady();
        return this._pendingCount;
    };
    /**
     * @return {?}
     */
    Testability.prototype.isStable = function () {
        return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;
    };
    /**
     * \@internal
     * @return {?}
     */
    Testability.prototype._runCallbacksIfReady = function () {
        var _this = this;
        if (this.isStable()) {
            // Schedules the call backs in a new frame so that it is always async.
            scheduleMicroTask(function () {
                while (_this._callbacks.length !== 0) {
                    (((_this._callbacks.pop())))(_this._didWork);
                }
                _this._didWork = false;
            });
        }
        else {
            // Not Ready
            this._didWork = true;
        }
    };
    /**
     * @param {?} callback
     * @return {?}
     */
    Testability.prototype.whenStable = function (callback) {
        this._callbacks.push(callback);
        this._runCallbacksIfReady();
    };
    /**
     * @return {?}
     */
    Testability.prototype.getPendingRequestCount = function () { return this._pendingCount; };
    /**
     * @deprecated use findProviders
     * @param {?} using
     * @param {?} provider
     * @param {?} exactMatch
     * @return {?}
     */
    Testability.prototype.findBindings = function (using, provider, exactMatch) {
        // TODO(juliemr): implement.
        return [];
    };
    /**
     * @param {?} using
     * @param {?} provider
     * @param {?} exactMatch
     * @return {?}
     */
    Testability.prototype.findProviders = function (using, provider, exactMatch) {
        // TODO(juliemr): implement.
        return [];
    };
    return Testability;
}());
Testability.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
Testability.ctorParameters = function () { return [
    { type: NgZone, },
]; };
/**
 * A global registry of {\@link Testability} instances for specific elements.
 * \@experimental
 */
var TestabilityRegistry = (function () {
    function TestabilityRegistry() {
        /**
         * \@internal
         */
        this._applications = new Map();
        _testabilityGetter.addToWindow(this);
    }
    /**
     * @param {?} token
     * @param {?} testability
     * @return {?}
     */
    TestabilityRegistry.prototype.registerApplication = function (token, testability) {
        this._applications.set(token, testability);
    };
    /**
     * @param {?} elem
     * @return {?}
     */
    TestabilityRegistry.prototype.getTestability = function (elem) { return this._applications.get(elem) || null; };
    /**
     * @return {?}
     */
    TestabilityRegistry.prototype.getAllTestabilities = function () { return Array.from(this._applications.values()); };
    /**
     * @return {?}
     */
    TestabilityRegistry.prototype.getAllRootElements = function () { return Array.from(this._applications.keys()); };
    /**
     * @param {?} elem
     * @param {?=} findInAncestors
     * @return {?}
     */
    TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) {
        if (findInAncestors === void 0) { findInAncestors = true; }
        return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
    };
    return TestabilityRegistry;
}());
TestabilityRegistry.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
TestabilityRegistry.ctorParameters = function () { return []; };
var _NoopGetTestability = (function () {
    function _NoopGetTestability() {
    }
    /**
     * @param {?} registry
     * @return {?}
     */
    _NoopGetTestability.prototype.addToWindow = function (registry) { };
    /**
     * @param {?} registry
     * @param {?} elem
     * @param {?} findInAncestors
     * @return {?}
     */
    _NoopGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
        return null;
    };
    return _NoopGetTestability;
}());
/**
 * Set the {\@link GetTestability} implementation used by the Angular testing framework.
 * \@experimental
 * @param {?} getter
 * @return {?}
 */
function setTestabilityGetter(getter) {
    _testabilityGetter = getter;
}
var _testabilityGetter = new _NoopGetTestability();
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var _devMode = true;
var _runModeLocked = false;
var _platform;
var ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');
/**
 * Disable Angular's development mode, which turns off assertions and other
 * checks within the framework.
 *
 * One important assertion this disables verifies that a change detection pass
 * does not result in additional changes to any bindings (also known as
 * unidirectional data flow).
 *
 * \@stable
 * @return {?}
 */
function enableProdMode() {
    if (_runModeLocked) {
        throw new Error('Cannot enable prod mode after platform setup.');
    }
    _devMode = false;
}
/**
 * Returns whether Angular is in development mode. After called once,
 * the value is locked and won't change any more.
 *
 * By default, this is true, unless a user calls `enableProdMode` before calling this.
 *
 * \@experimental APIs related to application bootstrap are currently under review.
 * @return {?}
 */
function isDevMode() {
    _runModeLocked = true;
    return _devMode;
}
/**
 * A token for third-party components that can register themselves with NgProbe.
 *
 * \@experimental
 */
var NgProbeToken = (function () {
    /**
     * @param {?} name
     * @param {?} token
     */
    function NgProbeToken(name, token) {
        this.name = name;
        this.token = token;
    }
    return NgProbeToken;
}());
/**
 * Creates a platform.
 * Platforms have to be eagerly created via this function.
 *
 * \@experimental APIs related to application bootstrap are currently under review.
 * @param {?} injector
 * @return {?}
 */
function createPlatform(injector) {
    if (_platform && !_platform.destroyed &&
        !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
        throw new Error('There can be only one platform. Destroy the previous one to create a new one.');
    }
    _platform = injector.get(PlatformRef);
    var /** @type {?} */ inits = injector.get(PLATFORM_INITIALIZER, null);
    if (inits)
        inits.forEach(function (init) { return init(); });
    return _platform;
}
/**
 * Creates a factory for a platform
 *
 * \@experimental APIs related to application bootstrap are currently under review.
 * @param {?} parentPlatformFactory
 * @param {?} name
 * @param {?=} providers
 * @return {?}
 */
function createPlatformFactory(parentPlatformFactory, name, providers) {
    if (providers === void 0) { providers = []; }
    var /** @type {?} */ marker = new InjectionToken("Platform: " + name);
    return function (extraProviders) {
        if (extraProviders === void 0) { extraProviders = []; }
        var /** @type {?} */ platform = getPlatform();
        if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
            if (parentPlatformFactory) {
                parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));
            }
            else {
                createPlatform(ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders).concat({ provide: marker, useValue: true })));
            }
        }
        return assertPlatform(marker);
    };
}
/**
 * Checks that there currently is a platform which contains the given token as a provider.
 *
 * \@experimental APIs related to application bootstrap are currently under review.
 * @param {?} requiredToken
 * @return {?}
 */
function assertPlatform(requiredToken) {
    var /** @type {?} */ platform = getPlatform();
    if (!platform) {
        throw new Error('No platform exists!');
    }
    if (!platform.injector.get(requiredToken, null)) {
        throw new Error('A platform with a different configuration has been created. Please destroy it first.');
    }
    return platform;
}
/**
 * Destroy the existing platform.
 *
 * \@experimental APIs related to application bootstrap are currently under review.
 * @return {?}
 */
function destroyPlatform() {
    if (_platform && !_platform.destroyed) {
        _platform.destroy();
    }
}
/**
 * Returns the current platform.
 *
 * \@experimental APIs related to application bootstrap are currently under review.
 * @return {?}
 */
function getPlatform() {
    return _platform && !_platform.destroyed ? _platform : null;
}
/**
 * The Angular platform is the entry point for Angular on a web page. Each page
 * has exactly one platform, and services (such as reflection) which are common
 * to every Angular application running on the page are bound in its scope.
 *
 * A page's platform is initialized implicitly when a platform is created via a platform factory
 * (e.g. {\@link platformBrowser}), or explicitly by calling the {\@link createPlatform} function.
 *
 * \@stable
 * @abstract
 */
var PlatformRef = (function () {
    function PlatformRef() {
    }
    /**
     * Creates an instance of an `\@NgModule` for the given platform
     * for offline compilation.
     *
     * ## Simple Example
     *
     * ```typescript
     * my_module.ts:
     *
     * \@NgModule({
     *   imports: [BrowserModule]
     * })
     * class MyModule {}
     *
     * main.ts:
     * import {MyModuleNgFactory} from './my_module.ngfactory';
     * import {platformBrowser} from '\@angular/platform-browser';
     *
     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);
     * ```
     *
     * \@experimental APIs related to application bootstrap are currently under review.
     * @abstract
     * @template M
     * @param {?} moduleFactory
     * @return {?}
     */
    PlatformRef.prototype.bootstrapModuleFactory = function (moduleFactory) { };
    /**
     * Creates an instance of an `\@NgModule` for a given platform using the given runtime compiler.
     *
     * ## Simple Example
     *
     * ```typescript
     * \@NgModule({
     *   imports: [BrowserModule]
     * })
     * class MyModule {}
     *
     * let moduleRef = platformBrowser().bootstrapModule(MyModule);
     * ```
     * \@stable
     * @abstract
     * @template M
     * @param {?} moduleType
     * @param {?=} compilerOptions
     * @return {?}
     */
    PlatformRef.prototype.bootstrapModule = function (moduleType, compilerOptions) { };
    /**
     * Register a listener to be called when the platform is disposed.
     * @abstract
     * @param {?} callback
     * @return {?}
     */
    PlatformRef.prototype.onDestroy = function (callback) { };
    /**
     * Retrieve the platform {\@link Injector}, which is the parent injector for
     * every Angular application on the page and provides singleton providers.
     * @abstract
     * @return {?}
     */
    PlatformRef.prototype.injector = function () { };
    /**
     * Destroy the Angular platform and all Angular applications on the page.
     * @abstract
     * @return {?}
     */
    PlatformRef.prototype.destroy = function () { };
    /**
     * @abstract
     * @return {?}
     */
    PlatformRef.prototype.destroyed = function () { };
    return PlatformRef;
}());
/**
 * @param {?} errorHandler
 * @param {?} ngZone
 * @param {?} callback
 * @return {?}
 */
function _callAndReportToErrorHandler(errorHandler, ngZone, callback) {
    try {
        var /** @type {?} */ result = callback();
        if (isPromise(result)) {
            return result.catch(function (e) {
                ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });
                // rethrow as the exception handler might not do it
                throw e;
            });
        }
        return result;
    }
    catch (e) {
        ngZone.runOutsideAngular(function () { return errorHandler.handleError(e); });
        // rethrow as the exception handler might not do it
        throw e;
    }
}
/**
 * workaround https://github.com/angular/tsickle/issues/350
 * @suppress {checkTypes}
 */
var PlatformRef_ = (function (_super) {
    __extends(PlatformRef_, _super);
    /**
     * @param {?} _injector
     */
    function PlatformRef_(_injector) {
        var _this = _super.call(this) || this;
        _this._injector = _injector;
        _this._modules = [];
        _this._destroyListeners = [];
        _this._destroyed = false;
        return _this;
    }
    /**
     * @param {?} callback
     * @return {?}
     */
    PlatformRef_.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };
    Object.defineProperty(PlatformRef_.prototype, "injector", {
        /**
         * @return {?}
         */
        get: function () { return this._injector; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlatformRef_.prototype, "destroyed", {
        /**
         * @return {?}
         */
        get: function () { return this._destroyed; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PlatformRef_.prototype.destroy = function () {
        if (this._destroyed) {
            throw new Error('The platform has already been destroyed!');
        }
        this._modules.slice().forEach(function (module) { return module.destroy(); });
        this._destroyListeners.forEach(function (listener) { return listener(); });
        this._destroyed = true;
    };
    /**
     * @template M
     * @param {?} moduleFactory
     * @return {?}
     */
    PlatformRef_.prototype.bootstrapModuleFactory = function (moduleFactory) {
        return this._bootstrapModuleFactoryWithZone(moduleFactory);
    };
    /**
     * @template M
     * @param {?} moduleFactory
     * @param {?=} ngZone
     * @return {?}
     */
    PlatformRef_.prototype._bootstrapModuleFactoryWithZone = function (moduleFactory, ngZone) {
        var _this = this;
        // Note: We need to create the NgZone _before_ we instantiate the module,
        // as instantiating the module creates some providers eagerly.
        // So we create a mini parent injector that just contains the new NgZone and
        // pass that as parent to the NgModuleFactory.
        if (!ngZone)
            ngZone = new NgZone({ enableLongStackTrace: isDevMode() });
        // Attention: Don't use ApplicationRef.run here,
        // as we want to be sure that all possible constructor calls are inside `ngZone.run`!
        return ngZone.run(function () {
            var /** @type {?} */ ngZoneInjector = ReflectiveInjector.resolveAndCreate([{ provide: NgZone, useValue: ngZone }], _this.injector);
            var /** @type {?} */ moduleRef = (moduleFactory.create(ngZoneInjector));
            var /** @type {?} */ exceptionHandler = moduleRef.injector.get(ErrorHandler, null);
            if (!exceptionHandler) {
                throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');
            }
            moduleRef.onDestroy(function () { return remove(_this._modules, moduleRef); }); /** @type {?} */
            ((ngZone)).runOutsideAngular(function () { return ((ngZone)).onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } }); });
            return _callAndReportToErrorHandler(exceptionHandler, /** @type {?} */ ((ngZone)), function () {
                var /** @type {?} */ initStatus = moduleRef.injector.get(ApplicationInitStatus);
                initStatus.runInitializers();
                return initStatus.donePromise.then(function () {
                    _this._moduleDoBootstrap(moduleRef);
                    return moduleRef;
                });
            });
        });
    };
    /**
     * @template M
     * @param {?} moduleType
     * @param {?=} compilerOptions
     * @return {?}
     */
    PlatformRef_.prototype.bootstrapModule = function (moduleType, compilerOptions) {
        if (compilerOptions === void 0) { compilerOptions = []; }
        return this._bootstrapModuleWithZone(moduleType, compilerOptions);
    };
    /**
     * @template M
     * @param {?} moduleType
     * @param {?=} compilerOptions
     * @param {?=} ngZone
     * @return {?}
     */
    PlatformRef_.prototype._bootstrapModuleWithZone = function (moduleType, compilerOptions, ngZone) {
        var _this = this;
        if (compilerOptions === void 0) { compilerOptions = []; }
        var /** @type {?} */ compilerFactory = this.injector.get(CompilerFactory);
        var /** @type {?} */ compiler = compilerFactory.createCompiler(Array.isArray(compilerOptions) ? compilerOptions : [compilerOptions]);
        return compiler.compileModuleAsync(moduleType)
            .then(function (moduleFactory) { return _this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone); });
    };
    /**
     * @param {?} moduleRef
     * @return {?}
     */
    PlatformRef_.prototype._moduleDoBootstrap = function (moduleRef) {
        var /** @type {?} */ appRef = (moduleRef.injector.get(ApplicationRef));
        if (moduleRef._bootstrapComponents.length > 0) {
            moduleRef._bootstrapComponents.forEach(function (f) { return appRef.bootstrap(f); });
        }
        else if (moduleRef.instance.ngDoBootstrap) {
            moduleRef.instance.ngDoBootstrap(appRef);
        }
        else {
            throw new Error("The module " + stringify(moduleRef.instance.constructor) + " was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. " +
                "Please define one of these.");
        }
        this._modules.push(moduleRef);
    };
    return PlatformRef_;
}(PlatformRef));
PlatformRef_.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
PlatformRef_.ctorParameters = function () { return [
    { type: Injector, },
]; };
/**
 * A reference to an Angular application running on a page.
 *
 * \@stable
 * @abstract
 */
var ApplicationRef = (function () {
    function ApplicationRef() {
    }
    /**
     * Bootstrap a new component at the root level of the application.
     *
     * ### Bootstrap process
     *
     * When bootstrapping a new root component into an application, Angular mounts the
     * specified application component onto DOM elements identified by the [componentType]'s
     * selector and kicks off automatic change detection to finish initializing the component.
     *
     * Optionally, a component can be mounted onto a DOM element that does not match the
     * [componentType]'s selector.
     *
     * ### Example
     * {\@example core/ts/platform/platform.ts region='longform'}
     * @abstract
     * @template C
     * @param {?} componentFactory
     * @param {?=} rootSelectorOrNode
     * @return {?}
     */
    ApplicationRef.prototype.bootstrap = function (componentFactory, rootSelectorOrNode) { };
    /**
     * Invoke this method to explicitly process change detection and its side-effects.
     *
     * In development mode, `tick()` also performs a second change detection cycle to ensure that no
     * further changes are detected. If additional changes are picked up during this second cycle,
     * bindings in the app have side-effects that cannot be resolved in a single change detection
     * pass.
     * In this case, Angular throws an error, since an Angular application can only have one change
     * detection pass during which all change detection must complete.
     * @abstract
     * @return {?}
     */
    ApplicationRef.prototype.tick = function () { };
    /**
     * Get a list of component types registered to this application.
     * This list is populated even before the component is created.
     * @abstract
     * @return {?}
     */
    ApplicationRef.prototype.componentTypes = function () { };
    /**
     * Get a list of components registered to this application.
     * @abstract
     * @return {?}
     */
    ApplicationRef.prototype.components = function () { };
    /**
     * Attaches a view so that it will be dirty checked.
     * The view will be automatically detached when it is destroyed.
     * This will throw if the view is already attached to a ViewContainer.
     * @abstract
     * @param {?} view
     * @return {?}
     */
    ApplicationRef.prototype.attachView = function (view) { };
    /**
     * Detaches a view from dirty checking again.
     * @abstract
     * @param {?} view
     * @return {?}
     */
    ApplicationRef.prototype.detachView = function (view) { };
    /**
     * Returns the number of attached views.
     * @abstract
     * @return {?}
     */
    ApplicationRef.prototype.viewCount = function () { };
    /**
     * Returns an Observable that indicates when the application is stable or unstable.
     * @abstract
     * @return {?}
     */
    ApplicationRef.prototype.isStable = function () { };
    return ApplicationRef;
}());
/**
 * workaround https://github.com/angular/tsickle/issues/350
 * @suppress {checkTypes}
 */
var ApplicationRef_ = (function (_super) {
    __extends(ApplicationRef_, _super);
    /**
     * @param {?} _zone
     * @param {?} _console
     * @param {?} _injector
     * @param {?} _exceptionHandler
     * @param {?} _componentFactoryResolver
     * @param {?} _initStatus
     */
    function ApplicationRef_(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {
        var _this = _super.call(this) || this;
        _this._zone = _zone;
        _this._console = _console;
        _this._injector = _injector;
        _this._exceptionHandler = _exceptionHandler;
        _this._componentFactoryResolver = _componentFactoryResolver;
        _this._initStatus = _initStatus;
        _this._bootstrapListeners = [];
        _this._rootComponents = [];
        _this._rootComponentTypes = [];
        _this._views = [];
        _this._runningTick = false;
        _this._enforceNoNewChanges = false;
        _this._stable = true;
        _this._enforceNoNewChanges = isDevMode();
        _this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });
        var isCurrentlyStable = new Observable_2(function (observer) {
            _this._stable = _this._zone.isStable && !_this._zone.hasPendingMacrotasks &&
                !_this._zone.hasPendingMicrotasks;
            _this._zone.runOutsideAngular(function () {
                observer.next(_this._stable);
                observer.complete();
            });
        });
        var isStable = new Observable_2(function (observer) {
            var stableSub = _this._zone.onStable.subscribe(function () {
                NgZone.assertNotInAngularZone();
                // Check whether there are no pending macro/micro tasks in the next tick
                // to allow for NgZone to update the state.
                scheduleMicroTask(function () {
                    if (!_this._stable && !_this._zone.hasPendingMacrotasks &&
                        !_this._zone.hasPendingMicrotasks) {
                        _this._stable = true;
                        observer.next(true);
                    }
                });
            });
            var unstableSub = _this._zone.onUnstable.subscribe(function () {
                NgZone.assertInAngularZone();
                if (_this._stable) {
                    _this._stable = false;
                    _this._zone.runOutsideAngular(function () { observer.next(false); });
                }
            });
            return function () {
                stableSub.unsubscribe();
                unstableSub.unsubscribe();
            };
        });
        _this._isStable = merge_2(isCurrentlyStable, share_2.call(isStable));
        return _this;
    }
    /**
     * @param {?} viewRef
     * @return {?}
     */
    ApplicationRef_.prototype.attachView = function (viewRef) {
        var /** @type {?} */ view = ((viewRef));
        this._views.push(view);
        view.attachToAppRef(this);
    };
    /**
     * @param {?} viewRef
     * @return {?}
     */
    ApplicationRef_.prototype.detachView = function (viewRef) {
        var /** @type {?} */ view = ((viewRef));
        remove(this._views, view);
        view.detachFromAppRef();
    };
    /**
     * @template C
     * @param {?} componentOrFactory
     * @param {?=} rootSelectorOrNode
     * @return {?}
     */
    ApplicationRef_.prototype.bootstrap = function (componentOrFactory, rootSelectorOrNode) {
        var _this = this;
        if (!this._initStatus.done) {
            throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');
        }
        var /** @type {?} */ componentFactory;
        if (componentOrFactory instanceof ComponentFactory) {
            componentFactory = componentOrFactory;
        }
        else {
            componentFactory = ((this._componentFactoryResolver.resolveComponentFactory(componentOrFactory)));
        }
        this._rootComponentTypes.push(componentFactory.componentType);
        // Create a factory associated with the current module if it's not bound to some other
        var /** @type {?} */ ngModule = componentFactory instanceof ComponentFactoryBoundToModule ?
            null :
            this._injector.get(NgModuleRef);
        var /** @type {?} */ selectorOrNode = rootSelectorOrNode || componentFactory.selector;
        var /** @type {?} */ compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);
        compRef.onDestroy(function () { _this._unloadComponent(compRef); });
        var /** @type {?} */ testability = compRef.injector.get(Testability, null);
        if (testability) {
            compRef.injector.get(TestabilityRegistry)
                .registerApplication(compRef.location.nativeElement, testability);
        }
        this._loadComponent(compRef);
        if (isDevMode()) {
            this._console.log("Angular is running in the development mode. Call enableProdMode() to enable the production mode.");
        }
        return compRef;
    };
    /**
     * @param {?} componentRef
     * @return {?}
     */
    ApplicationRef_.prototype._loadComponent = function (componentRef) {
        this.attachView(componentRef.hostView);
        this.tick();
        this._rootComponents.push(componentRef);
        // Get the listeners lazily to prevent DI cycles.
        var /** @type {?} */ listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);
        listeners.forEach(function (listener) { return listener(componentRef); });
    };
    /**
     * @param {?} componentRef
     * @return {?}
     */
    ApplicationRef_.prototype._unloadComponent = function (componentRef) {
        this.detachView(componentRef.hostView);
        remove(this._rootComponents, componentRef);
    };
    /**
     * @return {?}
     */
    ApplicationRef_.prototype.tick = function () {
        var _this = this;
        if (this._runningTick) {
            throw new Error('ApplicationRef.tick is called recursively');
        }
        var /** @type {?} */ scope = ApplicationRef_._tickScope();
        try {
            this._runningTick = true;
            this._views.forEach(function (view) { return view.detectChanges(); });
            if (this._enforceNoNewChanges) {
                this._views.forEach(function (view) { return view.checkNoChanges(); });
            }
        }
        catch (e) {
            // Attention: Don't rethrow as it could cancel subscriptions to Observables!
            this._zone.runOutsideAngular(function () { return _this._exceptionHandler.handleError(e); });
        }
        finally {
            this._runningTick = false;
            wtfLeave(scope);
        }
    };
    /**
     * @return {?}
     */
    ApplicationRef_.prototype.ngOnDestroy = function () {
        // TODO(alxhub): Dispose of the NgZone.
        this._views.slice().forEach(function (view) { return view.destroy(); });
    };
    Object.defineProperty(ApplicationRef_.prototype, "viewCount", {
        /**
         * @return {?}
         */
        get: function () { return this._views.length; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ApplicationRef_.prototype, "componentTypes", {
        /**
         * @return {?}
         */
        get: function () { return this._rootComponentTypes; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ApplicationRef_.prototype, "components", {
        /**
         * @return {?}
         */
        get: function () { return this._rootComponents; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ApplicationRef_.prototype, "isStable", {
        /**
         * @return {?}
         */
        get: function () { return this._isStable; },
        enumerable: true,
        configurable: true
    });
    return ApplicationRef_;
}(ApplicationRef));
/**
 * \@internal
 */
ApplicationRef_._tickScope = wtfCreateScope('ApplicationRef#tick()');
ApplicationRef_.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
ApplicationRef_.ctorParameters = function () { return [
    { type: NgZone, },
    { type: Console, },
    { type: Injector, },
    { type: ErrorHandler, },
    { type: ComponentFactoryResolver, },
    { type: ApplicationInitStatus, },
]; };
/**
 * @template T
 * @param {?} list
 * @param {?} el
 * @return {?}
 */
function remove(list, el) {
    var /** @type {?} */ index = list.indexOf(el);
    if (index > -1) {
        list.splice(index, 1);
    }
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Public API for Zone
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @deprecated Use `RendererType2` (and `Renderer2`) instead.
 */
var RenderComponentType = (function () {
    /**
     * @param {?} id
     * @param {?} templateUrl
     * @param {?} slotCount
     * @param {?} encapsulation
     * @param {?} styles
     * @param {?} animations
     */
    function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {
        this.id = id;
        this.templateUrl = templateUrl;
        this.slotCount = slotCount;
        this.encapsulation = encapsulation;
        this.styles = styles;
        this.animations = animations;
    }
    return RenderComponentType;
}());
/**
 * @deprecated Debug info is handeled internally in the view engine now.
 * @abstract
 */
var RenderDebugInfo = (function () {
    function RenderDebugInfo() {
    }
    /**
     * @abstract
     * @return {?}
     */
    RenderDebugInfo.prototype.injector = function () { };
    /**
     * @abstract
     * @return {?}
     */
    RenderDebugInfo.prototype.component = function () { };
    /**
     * @abstract
     * @return {?}
     */
    RenderDebugInfo.prototype.providerTokens = function () { };
    /**
     * @abstract
     * @return {?}
     */
    RenderDebugInfo.prototype.references = function () { };
    /**
     * @abstract
     * @return {?}
     */
    RenderDebugInfo.prototype.context = function () { };
    /**
     * @abstract
     * @return {?}
     */
    RenderDebugInfo.prototype.source = function () { };
    return RenderDebugInfo;
}());
/**
 * @deprecated Use the `Renderer2` instead.
 * @abstract
 */
var Renderer = (function () {
    function Renderer() {
    }
    /**
     * @abstract
     * @param {?} selectorOrNode
     * @param {?=} debugInfo
     * @return {?}
     */
    Renderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) { };
    /**
     * @abstract
     * @param {?} parentElement
     * @param {?} name
     * @param {?=} debugInfo
     * @return {?}
     */
    Renderer.prototype.createElement = function (parentElement, name, debugInfo) { };
    /**
     * @abstract
     * @param {?} hostElement
     * @return {?}
     */
    Renderer.prototype.createViewRoot = function (hostElement) { };
    /**
     * @abstract
     * @param {?} parentElement
     * @param {?=} debugInfo
     * @return {?}
     */
    Renderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) { };
    /**
     * @abstract
     * @param {?} parentElement
     * @param {?} value
     * @param {?=} debugInfo
     * @return {?}
     */
    Renderer.prototype.createText = function (parentElement, value, debugInfo) { };
    /**
     * @abstract
     * @param {?} parentElement
     * @param {?} nodes
     * @return {?}
     */
    Renderer.prototype.projectNodes = function (parentElement, nodes) { };
    /**
     * @abstract
     * @param {?} node
     * @param {?} viewRootNodes
     * @return {?}
     */
    Renderer.prototype.attachViewAfter = function (node, viewRootNodes) { };
    /**
     * @abstract
     * @param {?} viewRootNodes
     * @return {?}
     */
    Renderer.prototype.detachView = function (viewRootNodes) { };
    /**
     * @abstract
     * @param {?} hostElement
     * @param {?} viewAllNodes
     * @return {?}
     */
    Renderer.prototype.destroyView = function (hostElement, viewAllNodes) { };
    /**
     * @abstract
     * @param {?} renderElement
     * @param {?} name
     * @param {?} callback
     * @return {?}
     */
    Renderer.prototype.listen = function (renderElement, name, callback) { };
    /**
     * @abstract
     * @param {?} target
     * @param {?} name
     * @param {?} callback
     * @return {?}
     */
    Renderer.prototype.listenGlobal = function (target, name, callback) { };
    /**
     * @abstract
     * @param {?} renderElement
     * @param {?} propertyName
     * @param {?} propertyValue
     * @return {?}
     */
    Renderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) { };
    /**
     * @abstract
     * @param {?} renderElement
     * @param {?} attributeName
     * @param {?} attributeValue
     * @return {?}
     */
    Renderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) { };
    /**
     * Used only in debug mode to serialize property changes to dom nodes as attributes.
     * @abstract
     * @param {?} renderElement
     * @param {?} propertyName
     * @param {?} propertyValue
     * @return {?}
     */
    Renderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };
    /**
     * @abstract
     * @param {?} renderElement
     * @param {?} className
     * @param {?} isAdd
     * @return {?}
     */
    Renderer.prototype.setElementClass = function (renderElement, className, isAdd) { };
    /**
     * @abstract
     * @param {?} renderElement
     * @param {?} styleName
     * @param {?} styleValue
     * @return {?}
     */
    Renderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) { };
    /**
     * @abstract
     * @param {?} renderElement
     * @param {?} methodName
     * @param {?=} args
     * @return {?}
     */
    Renderer.prototype.invokeElementMethod = function (renderElement, methodName, args) { };
    /**
     * @abstract
     * @param {?} renderNode
     * @param {?} text
     * @return {?}
     */
    Renderer.prototype.setText = function (renderNode, text) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} startingStyles
     * @param {?} keyframes
     * @param {?} duration
     * @param {?} delay
     * @param {?} easing
     * @param {?=} previousPlayers
     * @return {?}
     */
    Renderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) { };
    return Renderer;
}());
var Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');
/**
 * Injectable service that provides a low-level interface for modifying the UI.
 *
 * Use this service to bypass Angular's templating and make custom UI changes that can't be
 * expressed declaratively. For example if you need to set a property or an attribute whose name is
 * not statically known, use {\@link Renderer#setElementProperty} or {\@link
 * Renderer#setElementAttribute}
 * respectively.
 *
 * If you are implementing a custom renderer, you must implement this interface.
 *
 * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.
 *
 * @deprecated Use `RendererFactory2` instead.
 * @abstract
 */
var RootRenderer = (function () {
    function RootRenderer() {
    }
    /**
     * @abstract
     * @param {?} componentType
     * @return {?}
     */
    RootRenderer.prototype.renderComponent = function (componentType) { };
    return RootRenderer;
}());
/**
 * \@experimental
 * @abstract
 */
var RendererFactory2 = (function () {
    function RendererFactory2() {
    }
    /**
     * @abstract
     * @param {?} hostElement
     * @param {?} type
     * @return {?}
     */
    RendererFactory2.prototype.createRenderer = function (hostElement, type) { };
    /**
     * @abstract
     * @return {?}
     */
    RendererFactory2.prototype.begin = function () { };
    /**
     * @abstract
     * @return {?}
     */
    RendererFactory2.prototype.end = function () { };
    /**
     * @abstract
     * @return {?}
     */
    RendererFactory2.prototype.whenRenderingDone = function () { };
    return RendererFactory2;
}());
var RendererStyleFlags2 = {};
RendererStyleFlags2.Important = 1;
RendererStyleFlags2.DashCase = 2;
RendererStyleFlags2[RendererStyleFlags2.Important] = "Important";
RendererStyleFlags2[RendererStyleFlags2.DashCase] = "DashCase";
/**
 * \@experimental
 * @abstract
 */
var Renderer2 = (function () {
    function Renderer2() {
    }
    /**
     * This field can be used to store arbitrary data on this renderer instance.
     * This is useful for renderers that delegate to other renderers.
     * @abstract
     * @return {?}
     */
    Renderer2.prototype.data = function () { };
    /**
     * @abstract
     * @return {?}
     */
    Renderer2.prototype.destroy = function () { };
    /**
     * @abstract
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    Renderer2.prototype.createElement = function (name, namespace) { };
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    Renderer2.prototype.createComment = function (value) { };
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    Renderer2.prototype.createText = function (value) { };
    /**
     * @abstract
     * @param {?} parent
     * @param {?} newChild
     * @return {?}
     */
    Renderer2.prototype.appendChild = function (parent, newChild) { };
    /**
     * @abstract
     * @param {?} parent
     * @param {?} newChild
     * @param {?} refChild
     * @return {?}
     */
    Renderer2.prototype.insertBefore = function (parent, newChild, refChild) { };
    /**
     * @abstract
     * @param {?} parent
     * @param {?} oldChild
     * @return {?}
     */
    Renderer2.prototype.removeChild = function (parent, oldChild) { };
    /**
     * @abstract
     * @param {?} selectorOrNode
     * @return {?}
     */
    Renderer2.prototype.selectRootElement = function (selectorOrNode) { };
    /**
     * Attention: On WebWorkers, this will always return a value,
     * as we are asking for a result synchronously. I.e.
     * the caller can't rely on checking whether this is null or not.
     * @abstract
     * @param {?} node
     * @return {?}
     */
    Renderer2.prototype.parentNode = function (node) { };
    /**
     * Attention: On WebWorkers, this will always return a value,
     * as we are asking for a result synchronously. I.e.
     * the caller can't rely on checking whether this is null or not.
     * @abstract
     * @param {?} node
     * @return {?}
     */
    Renderer2.prototype.nextSibling = function (node) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @param {?=} namespace
     * @return {?}
     */
    Renderer2.prototype.setAttribute = function (el, name, value, namespace) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    Renderer2.prototype.removeAttribute = function (el, name, namespace) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    Renderer2.prototype.addClass = function (el, name) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    Renderer2.prototype.removeClass = function (el, name) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} style
     * @param {?} value
     * @param {?=} flags
     * @return {?}
     */
    Renderer2.prototype.setStyle = function (el, style, value, flags) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} style
     * @param {?=} flags
     * @return {?}
     */
    Renderer2.prototype.removeStyle = function (el, style, flags) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    Renderer2.prototype.setProperty = function (el, name, value) { };
    /**
     * @abstract
     * @param {?} node
     * @param {?} value
     * @return {?}
     */
    Renderer2.prototype.setValue = function (node, value) { };
    /**
     * @abstract
     * @param {?} target
     * @param {?} eventName
     * @param {?} callback
     * @return {?}
     */
    Renderer2.prototype.listen = function (target, eventName, callback) { };
    return Renderer2;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Public API for render
var ElementRef = (function () {
    /**
     * @param {?} nativeElement
     */
    function ElementRef(nativeElement) {
        this.nativeElement = nativeElement;
    }
    return ElementRef;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Used to load ng module factories.
 * \@stable
 * @abstract
 */
var NgModuleFactoryLoader = (function () {
    function NgModuleFactoryLoader() {
    }
    /**
     * @abstract
     * @param {?} path
     * @return {?}
     */
    NgModuleFactoryLoader.prototype.load = function (path) { };
    return NgModuleFactoryLoader;
}());
var moduleFactories = new Map();
/**
 * Registers a loaded module. Should only be called from generated NgModuleFactory code.
 * \@experimental
 * @param {?} id
 * @param {?} factory
 * @return {?}
 */
function registerModuleFactory(id, factory) {
    var /** @type {?} */ existing = moduleFactories.get(id);
    if (existing) {
        throw new Error("Duplicate module registered for " + id + " - " + existing.moduleType.name + " vs " + factory.moduleType.name);
    }
    moduleFactories.set(id, factory);
}
/**
 * @return {?}
 */
/**
 * Returns the NgModuleFactory with the given id, if it exists and has been loaded.
 * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module
 * cannot be found.
 * \@experimental
 * @param {?} id
 * @return {?}
 */
function getModuleFactory(id) {
    var /** @type {?} */ factory = moduleFactories.get(id);
    if (!factory)
        throw new Error("No module with ID " + id + " loaded");
    return factory;
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * An unmodifiable list of items that Angular keeps up to date when the state
 * of the application changes.
 *
 * The type of object that {\@link ViewChildren}, {\@link ContentChildren}, and {\@link QueryList}
 * provide.
 *
 * Implements an iterable interface, therefore it can be used in both ES6
 * javascript `for (var i of items)` loops as well as in Angular templates with
 * `*ngFor="let i of myList"`.
 *
 * Changes can be observed by subscribing to the changes `Observable`.
 *
 * NOTE: In the future this class will implement an `Observable` interface.
 *
 * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))
 * ```typescript
 * \@Component({...})
 * class Container {
 *   \@ViewChildren(Item) items:QueryList<Item>;
 * }
 * ```
 * \@stable
 */
var QueryList = (function () {
    function QueryList() {
        this._dirty = true;
        this._results = [];
        this._emitter = new EventEmitter();
    }
    Object.defineProperty(QueryList.prototype, "changes", {
        /**
         * @return {?}
         */
        get: function () { return this._emitter; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryList.prototype, "length", {
        /**
         * @return {?}
         */
        get: function () { return this._results.length; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryList.prototype, "first", {
        /**
         * @return {?}
         */
        get: function () { return this._results[0]; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QueryList.prototype, "last", {
        /**
         * @return {?}
         */
        get: function () { return this._results[this.length - 1]; },
        enumerable: true,
        configurable: true
    });
    /**
     * See
     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
     * @template U
     * @param {?} fn
     * @return {?}
     */
    QueryList.prototype.map = function (fn) { return this._results.map(fn); };
    /**
     * See
     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
     * @param {?} fn
     * @return {?}
     */
    QueryList.prototype.filter = function (fn) {
        return this._results.filter(fn);
    };
    /**
     * See
     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)
     * @param {?} fn
     * @return {?}
     */
    QueryList.prototype.find = function (fn) {
        return this._results.find(fn);
    };
    /**
     * See
     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)
     * @template U
     * @param {?} fn
     * @param {?} init
     * @return {?}
     */
    QueryList.prototype.reduce = function (fn, init) {
        return this._results.reduce(fn, init);
    };
    /**
     * See
     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
     * @param {?} fn
     * @return {?}
     */
    QueryList.prototype.forEach = function (fn) { this._results.forEach(fn); };
    /**
     * See
     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)
     * @param {?} fn
     * @return {?}
     */
    QueryList.prototype.some = function (fn) {
        return this._results.some(fn);
    };
    /**
     * @return {?}
     */
    QueryList.prototype.toArray = function () { return this._results.slice(); };
    /**
     * @return {?}
     */
    QueryList.prototype[getSymbolIterator()] = function () { return ((this._results))[getSymbolIterator()](); };
    /**
     * @return {?}
     */
    QueryList.prototype.toString = function () { return this._results.toString(); };
    /**
     * @param {?} res
     * @return {?}
     */
    QueryList.prototype.reset = function (res) {
        this._results = flatten(res);
        this._dirty = false;
    };
    /**
     * @return {?}
     */
    QueryList.prototype.notifyOnChanges = function () { this._emitter.emit(this); };
    /**
     * internal
     * @return {?}
     */
    QueryList.prototype.setDirty = function () { this._dirty = true; };
    Object.defineProperty(QueryList.prototype, "dirty", {
        /**
         * internal
         * @return {?}
         */
        get: function () { return this._dirty; },
        enumerable: true,
        configurable: true
    });
    return QueryList;
}());
/**
 * @template T
 * @param {?} list
 * @return {?}
 */
function flatten(list) {
    return list.reduce(function (flat, item) {
        var /** @type {?} */ flatItem = Array.isArray(item) ? flatten(item) : item;
        return ((flat)).concat(flatItem);
    }, []);
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var _SEPARATOR = '#';
var FACTORY_CLASS_SUFFIX = 'NgFactory';
/**
 * Configuration for SystemJsNgModuleLoader.
 * token.
 *
 * \@experimental
 * @abstract
 */
var SystemJsNgModuleLoaderConfig = (function () {
    function SystemJsNgModuleLoaderConfig() {
    }
    return SystemJsNgModuleLoaderConfig;
}());
var DEFAULT_CONFIG = {
    factoryPathPrefix: '',
    factoryPathSuffix: '.ngfactory',
};
/**
 * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory
 * \@experimental
 */
var SystemJsNgModuleLoader = (function () {
    /**
     * @param {?} _compiler
     * @param {?=} config
     */
    function SystemJsNgModuleLoader(_compiler, config) {
        this._compiler = _compiler;
        this._config = config || DEFAULT_CONFIG;
    }
    /**
     * @param {?} path
     * @return {?}
     */
    SystemJsNgModuleLoader.prototype.load = function (path) {
        var /** @type {?} */ offlineMode = this._compiler instanceof Compiler;
        return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);
    };
    /**
     * @param {?} path
     * @return {?}
     */
    SystemJsNgModuleLoader.prototype.loadAndCompile = function (path) {
        var _this = this;
        var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];
        if (exportName === undefined) {
            exportName = 'default';
        }
        return System.import(module)
            .then(function (module) { return module[exportName]; })
            .then(function (type) { return checkNotEmpty(type, module, exportName); })
            .then(function (type) { return _this._compiler.compileModuleAsync(type); });
    };
    /**
     * @param {?} path
     * @return {?}
     */
    SystemJsNgModuleLoader.prototype.loadFactory = function (path) {
        var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];
        var /** @type {?} */ factoryClassSuffix = FACTORY_CLASS_SUFFIX;
        if (exportName === undefined) {
            exportName = 'default';
            factoryClassSuffix = '';
        }
        return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)
            .then(function (module) { return module[exportName + factoryClassSuffix]; })
            .then(function (factory) { return checkNotEmpty(factory, module, exportName); });
    };
    return SystemJsNgModuleLoader;
}());
SystemJsNgModuleLoader.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
SystemJsNgModuleLoader.ctorParameters = function () { return [
    { type: Compiler, },
    { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional },] },
]; };
/**
 * @param {?} value
 * @param {?} modulePath
 * @param {?} exportName
 * @return {?}
 */
function checkNotEmpty(value, modulePath, exportName) {
    if (!value) {
        throw new Error("Cannot find '" + exportName + "' in '" + modulePath + "'");
    }
    return value;
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Represents an Embedded Template that can be used to instantiate Embedded Views.
 *
 * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<ng-template>` element
 * (or directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into
 * the constructor of the directive using the `TemplateRef` Token. Alternatively you can query for
 * the `TemplateRef` from a Component or a Directive via {\@link Query}.
 *
 * To instantiate Embedded Views based on a Template, use
 * {\@link ViewContainerRef#createEmbeddedView}, which will create the View and attach it to the
 * View Container.
 * \@stable
 * @abstract
 */
var TemplateRef = (function () {
    function TemplateRef() {
    }
    /**
     * @abstract
     * @return {?}
     */
    TemplateRef.prototype.elementRef = function () { };
    /**
     * @abstract
     * @param {?} context
     * @return {?}
     */
    TemplateRef.prototype.createEmbeddedView = function (context) { };
    return TemplateRef;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Represents a container where one or more Views can be attached.
 *
 * The container can contain two kinds of Views. Host Views, created by instantiating a
 * {\@link Component} via {\@link #createComponent}, and Embedded Views, created by instantiating an
 * {\@link TemplateRef Embedded Template} via {\@link #createEmbeddedView}.
 *
 * The location of the View Container within the containing View is specified by the Anchor
 * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only
 * have a single View Container.
 *
 * Root elements of Views attached to this container become siblings of the Anchor Element in
 * the Rendered View.
 *
 * To access a `ViewContainerRef` of an Element, you can either place a {\@link Directive} injected
 * with `ViewContainerRef` on the Element, or you obtain it via a {\@link ViewChild} query.
 * \@stable
 * @abstract
 */
var ViewContainerRef = (function () {
    function ViewContainerRef() {
    }
    /**
     * Anchor element that specifies the location of this container in the containing View.
     * <!-- TODO: rename to anchorElement -->
     * @abstract
     * @return {?}
     */
    ViewContainerRef.prototype.element = function () { };
    /**
     * @abstract
     * @return {?}
     */
    ViewContainerRef.prototype.injector = function () { };
    /**
     * @abstract
     * @return {?}
     */
    ViewContainerRef.prototype.parentInjector = function () { };
    /**
     * Destroys all Views in this container.
     * @abstract
     * @return {?}
     */
    ViewContainerRef.prototype.clear = function () { };
    /**
     * Returns the {\@link ViewRef} for the View located in this container at the specified index.
     * @abstract
     * @param {?} index
     * @return {?}
     */
    ViewContainerRef.prototype.get = function (index) { };
    /**
     * Returns the number of Views currently attached to this container.
     * @abstract
     * @return {?}
     */
    ViewContainerRef.prototype.length = function () { };
    /**
     * Instantiates an Embedded View based on the {\@link TemplateRef `templateRef`} and inserts it
     * into this container at the specified `index`.
     *
     * If `index` is not specified, the new View will be inserted as the last View in the container.
     *
     * Returns the {\@link ViewRef} for the newly created View.
     * @abstract
     * @template C
     * @param {?} templateRef
     * @param {?=} context
     * @param {?=} index
     * @return {?}
     */
    ViewContainerRef.prototype.createEmbeddedView = function (templateRef, context, index) { };
    /**
     * Instantiates a single {\@link Component} and inserts its Host View into this container at the
     * specified `index`.
     *
     * The component is instantiated using its {\@link ComponentFactory} which can be
     * obtained via {\@link ComponentFactoryResolver#resolveComponentFactory}.
     *
     * If `index` is not specified, the new View will be inserted as the last View in the container.
     *
     * You can optionally specify the {\@link Injector} that will be used as parent for the Component.
     *
     * Returns the {\@link ComponentRef} of the Host View created for the newly instantiated Component.
     * @abstract
     * @template C
     * @param {?} componentFactory
     * @param {?=} index
     * @param {?=} injector
     * @param {?=} projectableNodes
     * @param {?=} ngModule
     * @return {?}
     */
    ViewContainerRef.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModule) { };
    /**
     * Inserts a View identified by a {\@link ViewRef} into the container at the specified `index`.
     *
     * If `index` is not specified, the new View will be inserted as the last View in the container.
     *
     * Returns the inserted {\@link ViewRef}.
     * @abstract
     * @param {?} viewRef
     * @param {?=} index
     * @return {?}
     */
    ViewContainerRef.prototype.insert = function (viewRef, index) { };
    /**
     * Moves a View identified by a {\@link ViewRef} into the container at the specified `index`.
     *
     * Returns the inserted {\@link ViewRef}.
     * @abstract
     * @param {?} viewRef
     * @param {?} currentIndex
     * @return {?}
     */
    ViewContainerRef.prototype.move = function (viewRef, currentIndex) { };
    /**
     * Returns the index of the View, specified via {\@link ViewRef}, within the current container or
     * `-1` if this container doesn't contain the View.
     * @abstract
     * @param {?} viewRef
     * @return {?}
     */
    ViewContainerRef.prototype.indexOf = function (viewRef) { };
    /**
     * Destroys a View attached to this container at the specified `index`.
     *
     * If `index` is not specified, the last View in the container will be removed.
     * @abstract
     * @param {?=} index
     * @return {?}
     */
    ViewContainerRef.prototype.remove = function (index) { };
    /**
     * Use along with {\@link #insert} to move a View within the current container.
     *
     * If the `index` param is omitted, the last {\@link ViewRef} is detached.
     * @abstract
     * @param {?=} index
     * @return {?}
     */
    ViewContainerRef.prototype.detach = function (index) { };
    return ViewContainerRef;
}());
/**
 * \@stable
 * @abstract
 */
var ChangeDetectorRef = (function () {
    function ChangeDetectorRef() {
    }
    /**
     * Marks all {\@link ChangeDetectionStrategy#OnPush} ancestors as to be checked.
     *
     * <!-- TODO: Add a link to a chapter on OnPush components -->
     *
     * ### Example ([live demo](http://plnkr.co/edit/GC512b?p=preview))
     *
     * ```typescript
     * \@Component({
     *   selector: 'cmp',
     *   changeDetection: ChangeDetectionStrategy.OnPush,
     *   template: `Number of ticks: {{numberOfTicks}}`
     * })
     * class Cmp {
     *   numberOfTicks = 0;
     *
     *   constructor(private ref: ChangeDetectorRef) {
     *     setInterval(() => {
     *       this.numberOfTicks ++
     *       // the following is required, otherwise the view will not be updated
     *       this.ref.markForCheck();
     *     }, 1000);
     *   }
     * }
     *
     * \@Component({
     *   selector: 'app',
     *   changeDetection: ChangeDetectionStrategy.OnPush,
     *   template: `
     *     <cmp><cmp>
     *   `,
     * })
     * class App {
     * }
     * ```
     * @abstract
     * @return {?}
     */
    ChangeDetectorRef.prototype.markForCheck = function () { };
    /**
     * Detaches the change detector from the change detector tree.
     *
     * The detached change detector will not be checked until it is reattached.
     *
     * This can also be used in combination with {\@link ChangeDetectorRef#detectChanges} to implement
     * local change
     * detection checks.
     *
     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
     *
     * ### Example
     *
     * The following example defines a component with a large list of readonly data.
     * Imagine the data changes constantly, many times per second. For performance reasons,
     * we want to check and update the list every five seconds. We can do that by detaching
     * the component's change detector and doing a local check every five seconds.
     *
     * ```typescript
     * class DataProvider {
     *   // in a real application the returned data will be different every time
     *   get data() {
     *     return [1,2,3,4,5];
     *   }
     * }
     *
     * \@Component({
     *   selector: 'giant-list',
     *   template: `
     *     <li *ngFor="let d of dataProvider.data">Data {{d}}</lig>
     *   `,
     * })
     * class GiantList {
     *   constructor(private ref: ChangeDetectorRef, private dataProvider:DataProvider) {
     *     ref.detach();
     *     setInterval(() => {
     *       this.ref.detectChanges();
     *     }, 5000);
     *   }
     * }
     *
     * \@Component({
     *   selector: 'app',
     *   providers: [DataProvider],
     *   template: `
     *     <giant-list><giant-list>
     *   `,
     * })
     * class App {
     * }
     * ```
     * @abstract
     * @return {?}
     */
    ChangeDetectorRef.prototype.detach = function () { };
    /**
     * Checks the change detector and its children.
     *
     * This can also be used in combination with {\@link ChangeDetectorRef#detach} to implement local
     * change detection
     * checks.
     *
     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
     *
     * ### Example
     *
     * The following example defines a component with a large list of readonly data.
     * Imagine, the data changes constantly, many times per second. For performance reasons,
     * we want to check and update the list every five seconds.
     *
     * We can do that by detaching the component's change detector and doing a local change detection
     * check
     * every five seconds.
     *
     * See {\@link ChangeDetectorRef#detach} for more information.
     * @abstract
     * @return {?}
     */
    ChangeDetectorRef.prototype.detectChanges = function () { };
    /**
     * Checks the change detector and its children, and throws if any changes are detected.
     *
     * This is used in development mode to verify that running change detection doesn't introduce
     * other changes.
     * @abstract
     * @return {?}
     */
    ChangeDetectorRef.prototype.checkNoChanges = function () { };
    /**
     * Reattach the change detector to the change detector tree.
     *
     * This also marks OnPush ancestors as to be checked. This reattached change detector will be
     * checked during the next change detection run.
     *
     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
     *
     * ### Example ([live demo](http://plnkr.co/edit/aUhZha?p=preview))
     *
     * The following example creates a component displaying `live` data. The component will detach
     * its change detector from the main change detector tree when the component's live property
     * is set to false.
     *
     * ```typescript
     * class DataProvider {
     *   data = 1;
     *
     *   constructor() {
     *     setInterval(() => {
     *       this.data = this.data * 2;
     *     }, 500);
     *   }
     * }
     *
     * \@Component({
     *   selector: 'live-data',
     *   inputs: ['live'],
     *   template: 'Data: {{dataProvider.data}}'
     * })
     * class LiveData {
     *   constructor(private ref: ChangeDetectorRef, private dataProvider:DataProvider) {}
     *
     *   set live(value) {
     *     if (value)
     *       this.ref.reattach();
     *     else
     *       this.ref.detach();
     *   }
     * }
     *
     * \@Component({
     *   selector: 'app',
     *   providers: [DataProvider],
     *   template: `
     *     Live Update: <input type="checkbox" [(ngModel)]="live">
     *     <live-data [live]="live"><live-data>
     *   `,
     * })
     * class App {
     *   live = true;
     * }
     * ```
     * @abstract
     * @return {?}
     */
    ChangeDetectorRef.prototype.reattach = function () { };
    return ChangeDetectorRef;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@stable
 * @abstract
 */
var ViewRef = (function (_super) {
    __extends(ViewRef, _super);
    function ViewRef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Destroys the view and all of the data structures associated with it.
     * @abstract
     * @return {?}
     */
    ViewRef.prototype.destroy = function () { };
    /**
     * @abstract
     * @return {?}
     */
    ViewRef.prototype.destroyed = function () { };
    /**
     * @abstract
     * @param {?} callback
     * @return {?}
     */
    ViewRef.prototype.onDestroy = function (callback) { };
    return ViewRef;
}(ChangeDetectorRef));
/**
 * Represents an Angular View.
 *
 * <!-- TODO: move the next two paragraphs to the dev guide -->
 * A View is a fundamental building block of the application UI. It is the smallest grouping of
 * Elements which are created and destroyed together.
 *
 * Properties of elements in a View can change, but the structure (number and order) of elements in
 * a View cannot. Changing the structure of Elements can only be done by inserting, moving or
 * removing nested Views via a {\@link ViewContainerRef}. Each View can contain many View Containers.
 * <!-- /TODO -->
 *
 * ### Example
 *
 * Given this template...
 *
 * ```
 * Count: {{items.length}}
 * <ul>
 *   <li *ngFor="let  item of items">{{item}}</li>
 * </ul>
 * ```
 *
 * We have two {\@link TemplateRef}s:
 *
 * Outer {\@link TemplateRef}:
 * ```
 * Count: {{items.length}}
 * <ul>
 *   <ng-template ngFor let-item [ngForOf]="items"></ng-template>
 * </ul>
 * ```
 *
 * Inner {\@link TemplateRef}:
 * ```
 *   <li>{{item}}</li>
 * ```
 *
 * Notice that the original template is broken down into two separate {\@link TemplateRef}s.
 *
 * The outer/inner {\@link TemplateRef}s are then assembled into views like so:
 *
 * ```
 * <!-- ViewRef: outer-0 -->
 * Count: 2
 * <ul>
 *   <ng-template view-container-ref></ng-template>
 *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->
 *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->
 * </ul>
 * <!-- /ViewRef: outer-0 -->
 * ```
 * \@experimental
 * @abstract
 */
var EmbeddedViewRef = (function (_super) {
    __extends(EmbeddedViewRef, _super);
    function EmbeddedViewRef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @abstract
     * @return {?}
     */
    EmbeddedViewRef.prototype.context = function () { };
    /**
     * @abstract
     * @return {?}
     */
    EmbeddedViewRef.prototype.rootNodes = function () { };
    return EmbeddedViewRef;
}(ViewRef));
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Public API for compiler
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var EventListener = (function () {
    /**
     * @param {?} name
     * @param {?} callback
     */
    function EventListener(name, callback) {
        this.name = name;
        this.callback = callback;
    }
    
    return EventListener;
}());
/**
 * \@experimental All debugging apis are currently experimental.
 */
var DebugNode = (function () {
    /**
     * @param {?} nativeNode
     * @param {?} parent
     * @param {?} _debugContext
     */
    function DebugNode(nativeNode, parent, _debugContext) {
        this._debugContext = _debugContext;
        this.nativeNode = nativeNode;
        if (parent && parent instanceof DebugElement) {
            parent.addChild(this);
        }
        else {
            this.parent = null;
        }
        this.listeners = [];
    }
    Object.defineProperty(DebugNode.prototype, "injector", {
        /**
         * @return {?}
         */
        get: function () { return this._debugContext.injector; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugNode.prototype, "componentInstance", {
        /**
         * @return {?}
         */
        get: function () { return this._debugContext.component; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugNode.prototype, "context", {
        /**
         * @return {?}
         */
        get: function () { return this._debugContext.context; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugNode.prototype, "references", {
        /**
         * @return {?}
         */
        get: function () { return this._debugContext.references; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugNode.prototype, "providerTokens", {
        /**
         * @return {?}
         */
        get: function () { return this._debugContext.providerTokens; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugNode.prototype, "source", {
        /**
         * @deprecated since v4
         * @return {?}
         */
        get: function () { return 'Deprecated since v4'; },
        enumerable: true,
        configurable: true
    });
    return DebugNode;
}());
/**
 * \@experimental All debugging apis are currently experimental.
 */
var DebugElement = (function (_super) {
    __extends(DebugElement, _super);
    /**
     * @param {?} nativeNode
     * @param {?} parent
     * @param {?} _debugContext
     */
    function DebugElement(nativeNode, parent, _debugContext) {
        var _this = _super.call(this, nativeNode, parent, _debugContext) || this;
        _this.properties = {};
        _this.attributes = {};
        _this.classes = {};
        _this.styles = {};
        _this.childNodes = [];
        _this.nativeElement = nativeNode;
        return _this;
    }
    /**
     * @param {?} child
     * @return {?}
     */
    DebugElement.prototype.addChild = function (child) {
        if (child) {
            this.childNodes.push(child);
            child.parent = this;
        }
    };
    /**
     * @param {?} child
     * @return {?}
     */
    DebugElement.prototype.removeChild = function (child) {
        var /** @type {?} */ childIndex = this.childNodes.indexOf(child);
        if (childIndex !== -1) {
            child.parent = null;
            this.childNodes.splice(childIndex, 1);
        }
    };
    /**
     * @param {?} child
     * @param {?} newChildren
     * @return {?}
     */
    DebugElement.prototype.insertChildrenAfter = function (child, newChildren) {
        var _this = this;
        var /** @type {?} */ siblingIndex = this.childNodes.indexOf(child);
        if (siblingIndex !== -1) {
            (_a = this.childNodes).splice.apply(_a, [siblingIndex + 1, 0].concat(newChildren));
            newChildren.forEach(function (c) {
                if (c.parent) {
                    c.parent.removeChild(c);
                }
                c.parent = _this;
            });
        }
        var _a;
    };
    /**
     * @param {?} refChild
     * @param {?} newChild
     * @return {?}
     */
    DebugElement.prototype.insertBefore = function (refChild, newChild) {
        var /** @type {?} */ refIndex = this.childNodes.indexOf(refChild);
        if (refIndex === -1) {
            this.addChild(newChild);
        }
        else {
            if (newChild.parent) {
                newChild.parent.removeChild(newChild);
            }
            newChild.parent = this;
            this.childNodes.splice(refIndex, 0, newChild);
        }
    };
    /**
     * @param {?} predicate
     * @return {?}
     */
    DebugElement.prototype.query = function (predicate) {
        var /** @type {?} */ results = this.queryAll(predicate);
        return results[0] || null;
    };
    /**
     * @param {?} predicate
     * @return {?}
     */
    DebugElement.prototype.queryAll = function (predicate) {
        var /** @type {?} */ matches = [];
        _queryElementChildren(this, predicate, matches);
        return matches;
    };
    /**
     * @param {?} predicate
     * @return {?}
     */
    DebugElement.prototype.queryAllNodes = function (predicate) {
        var /** @type {?} */ matches = [];
        _queryNodeChildren(this, predicate, matches);
        return matches;
    };
    Object.defineProperty(DebugElement.prototype, "children", {
        /**
         * @return {?}
         */
        get: function () {
            return (this.childNodes.filter(function (node) { return node instanceof DebugElement; }));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} eventName
     * @param {?} eventObj
     * @return {?}
     */
    DebugElement.prototype.triggerEventHandler = function (eventName, eventObj) {
        this.listeners.forEach(function (listener) {
            if (listener.name == eventName) {
                listener.callback(eventObj);
            }
        });
    };
    return DebugElement;
}(DebugNode));
/**
 * \@experimental
 * @param {?} debugEls
 * @return {?}
 */
function asNativeElements(debugEls) {
    return debugEls.map(function (el) { return el.nativeElement; });
}
/**
 * @param {?} element
 * @param {?} predicate
 * @param {?} matches
 * @return {?}
 */
function _queryElementChildren(element, predicate, matches) {
    element.childNodes.forEach(function (node) {
        if (node instanceof DebugElement) {
            if (predicate(node)) {
                matches.push(node);
            }
            _queryElementChildren(node, predicate, matches);
        }
    });
}
/**
 * @param {?} parentNode
 * @param {?} predicate
 * @param {?} matches
 * @return {?}
 */
function _queryNodeChildren(parentNode, predicate, matches) {
    if (parentNode instanceof DebugElement) {
        parentNode.childNodes.forEach(function (node) {
            if (predicate(node)) {
                matches.push(node);
            }
            if (node instanceof DebugElement) {
                _queryNodeChildren(node, predicate, matches);
            }
        });
    }
}
// Need to keep the nodes in a global Map so that multiple angular apps are supported.
var _nativeNodeToDebugNode = new Map();
/**
 * \@experimental
 * @param {?} nativeNode
 * @return {?}
 */
function getDebugNode(nativeNode) {
    return _nativeNodeToDebugNode.get(nativeNode) || null;
}
/**
 * @return {?}
 */
/**
 * @param {?} node
 * @return {?}
 */
function indexDebugNode(node) {
    _nativeNodeToDebugNode.set(node.nativeNode, node);
}
/**
 * @param {?} node
 * @return {?}
 */
function removeDebugNodeFromIndex(node) {
    _nativeNodeToDebugNode.delete(node.nativeNode);
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function devModeEqual(a, b) {
    var /** @type {?} */ isListLikeIterableA = isListLikeIterable(a);
    var /** @type {?} */ isListLikeIterableB = isListLikeIterable(b);
    if (isListLikeIterableA && isListLikeIterableB) {
        return areIterablesEqual(a, b, devModeEqual);
    }
    else {
        var /** @type {?} */ isAObject = a && (typeof a === 'object' || typeof a === 'function');
        var /** @type {?} */ isBObject = b && (typeof b === 'object' || typeof b === 'function');
        if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {
            return true;
        }
        else {
            return looseIdentical(a, b);
        }
    }
}
/**
 * Indicates that the result of a {\@link Pipe} transformation has changed even though the
 * reference
 * has not changed.
 *
 * The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.
 *
 * Example:
 *
 * ```
 * if (this._latestValue === this._latestReturnedValue) {
 *    return this._latestReturnedValue;
 *  } else {
 *    this._latestReturnedValue = this._latestValue;
 *    return WrappedValue.wrap(this._latestValue); // this will force update
 *  }
 * ```
 * \@stable
 */
var WrappedValue = (function () {
    /**
     * @param {?} wrapped
     */
    function WrappedValue(wrapped) {
        this.wrapped = wrapped;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    WrappedValue.wrap = function (value) { return new WrappedValue(value); };
    return WrappedValue;
}());
/**
 * Helper class for unwrapping WrappedValue s
 */
var ValueUnwrapper = (function () {
    function ValueUnwrapper() {
        this.hasWrappedValue = false;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    ValueUnwrapper.prototype.unwrap = function (value) {
        if (value instanceof WrappedValue) {
            this.hasWrappedValue = true;
            return value.wrapped;
        }
        return value;
    };
    /**
     * @return {?}
     */
    ValueUnwrapper.prototype.reset = function () { this.hasWrappedValue = false; };
    return ValueUnwrapper;
}());
/**
 * Represents a basic change from a previous to a new value.
 * \@stable
 */
var SimpleChange = (function () {
    /**
     * @param {?} previousValue
     * @param {?} currentValue
     * @param {?} firstChange
     */
    function SimpleChange(previousValue, currentValue, firstChange) {
        this.previousValue = previousValue;
        this.currentValue = currentValue;
        this.firstChange = firstChange;
    }
    /**
     * Check whether the new value is the first value assigned.
     * @return {?}
     */
    SimpleChange.prototype.isFirstChange = function () { return this.firstChange; };
    return SimpleChange;
}());
/**
 * @param {?} obj
 * @return {?}
 */
function isListLikeIterable(obj) {
    if (!isJsObject(obj))
        return false;
    return Array.isArray(obj) ||
        (!(obj instanceof Map) &&
            getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} comparator
 * @return {?}
 */
function areIterablesEqual(a, b, comparator) {
    var /** @type {?} */ iterator1 = a[getSymbolIterator()]();
    var /** @type {?} */ iterator2 = b[getSymbolIterator()]();
    while (true) {
        var /** @type {?} */ item1 = iterator1.next();
        var /** @type {?} */ item2 = iterator2.next();
        if (item1.done && item2.done)
            return true;
        if (item1.done || item2.done)
            return false;
        if (!comparator(item1.value, item2.value))
            return false;
    }
}
/**
 * @param {?} obj
 * @param {?} fn
 * @return {?}
 */
function iterateListLike(obj, fn) {
    if (Array.isArray(obj)) {
        for (var /** @type {?} */ i = 0; i < obj.length; i++) {
            fn(obj[i]);
        }
    }
    else {
        var /** @type {?} */ iterator = obj[getSymbolIterator()]();
        var /** @type {?} */ item = void 0;
        while (!((item = iterator.next()).done)) {
            fn(item.value);
        }
    }
}
/**
 * @param {?} o
 * @return {?}
 */
function isJsObject(o) {
    return o !== null && (typeof o === 'function' || typeof o === 'object');
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var DefaultIterableDifferFactory = (function () {
    function DefaultIterableDifferFactory() {
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    DefaultIterableDifferFactory.prototype.supports = function (obj) { return isListLikeIterable(obj); };
    /**
     * @deprecated v4.0.0 - ChangeDetectorRef is not used and is no longer a parameter
     * @template V
     * @param {?=} cdRefOrTrackBy
     * @param {?=} trackByFn
     * @return {?}
     */
    DefaultIterableDifferFactory.prototype.create = function (cdRefOrTrackBy, trackByFn) {
        return new DefaultIterableDiffer(trackByFn || (cdRefOrTrackBy));
    };
    return DefaultIterableDifferFactory;
}());
var trackByIdentity = function (index, item) { return item; };
/**
 * @deprecated v4.0.0 - Should not be part of public API.
 */
var DefaultIterableDiffer = (function () {
    /**
     * @param {?=} trackByFn
     */
    function DefaultIterableDiffer(trackByFn) {
        this._length = 0;
        this._collection = null;
        this._linkedRecords = null;
        this._unlinkedRecords = null;
        this._previousItHead = null;
        this._itHead = null;
        this._itTail = null;
        this._additionsHead = null;
        this._additionsTail = null;
        this._movesHead = null;
        this._movesTail = null;
        this._removalsHead = null;
        this._removalsTail = null;
        this._identityChangesHead = null;
        this._identityChangesTail = null;
        this._trackByFn = trackByFn || trackByIdentity;
    }
    Object.defineProperty(DefaultIterableDiffer.prototype, "collection", {
        /**
         * @return {?}
         */
        get: function () { return this._collection; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultIterableDiffer.prototype, "length", {
        /**
         * @return {?}
         */
        get: function () { return this._length; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultIterableDiffer.prototype.forEachItem = function (fn) {
        var /** @type {?} */ record;
        for (record = this._itHead; record !== null; record = record._next) {
            fn(record);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultIterableDiffer.prototype.forEachOperation = function (fn) {
        var /** @type {?} */ nextIt = this._itHead;
        var /** @type {?} */ nextRemove = this._removalsHead;
        var /** @type {?} */ addRemoveOffset = 0;
        var /** @type {?} */ moveOffsets = null;
        while (nextIt || nextRemove) {
            // Figure out which is the next record to process
            // Order: remove, add, move
            var /** @type {?} */ record = !nextRemove ||
                nextIt && ((nextIt.currentIndex)) <
                    getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? ((nextIt)) :
                nextRemove;
            var /** @type {?} */ adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
            var /** @type {?} */ currentIndex = record.currentIndex;
            // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary
            if (record === nextRemove) {
                addRemoveOffset--;
                nextRemove = nextRemove._nextRemoved;
            }
            else {
                nextIt = ((nextIt))._next;
                if (record.previousIndex == null) {
                    addRemoveOffset++;
                }
                else {
                    // INVARIANT:  currentIndex < previousIndex
                    if (!moveOffsets)
                        moveOffsets = [];
                    var /** @type {?} */ localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
                    var /** @type {?} */ localCurrentIndex = ((currentIndex)) - addRemoveOffset;
                    if (localMovePreviousIndex != localCurrentIndex) {
                        for (var /** @type {?} */ i = 0; i < localMovePreviousIndex; i++) {
                            var /** @type {?} */ offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);
                            var /** @type {?} */ index = offset + i;
                            if (localCurrentIndex <= index && index < localMovePreviousIndex) {
                                moveOffsets[i] = offset + 1;
                            }
                        }
                        var /** @type {?} */ previousIndex = record.previousIndex;
                        moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
                    }
                }
            }
            if (adjPreviousIndex !== currentIndex) {
                fn(record, adjPreviousIndex, currentIndex);
            }
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {
        var /** @type {?} */ record;
        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
            fn(record);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {
        var /** @type {?} */ record;
        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
            fn(record);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {
        var /** @type {?} */ record;
        for (record = this._movesHead; record !== null; record = record._nextMoved) {
            fn(record);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {
        var /** @type {?} */ record;
        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
            fn(record);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) {
        var /** @type {?} */ record;
        for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
            fn(record);
        }
    };
    /**
     * @param {?} collection
     * @return {?}
     */
    DefaultIterableDiffer.prototype.diff = function (collection) {
        if (collection == null)
            collection = [];
        if (!isListLikeIterable(collection)) {
            throw new Error("Error trying to diff '" + stringify(collection) + "'. Only arrays and iterables are allowed");
        }
        if (this.check(collection)) {
            return this;
        }
        else {
            return null;
        }
    };
    /**
     * @return {?}
     */
    DefaultIterableDiffer.prototype.onDestroy = function () { };
    /**
     * @param {?} collection
     * @return {?}
     */
    DefaultIterableDiffer.prototype.check = function (collection) {
        var _this = this;
        this._reset();
        var /** @type {?} */ record = this._itHead;
        var /** @type {?} */ mayBeDirty = false;
        var /** @type {?} */ index;
        var /** @type {?} */ item;
        var /** @type {?} */ itemTrackBy;
        if (Array.isArray(collection)) {
            this._length = collection.length;
            for (var /** @type {?} */ index_1 = 0; index_1 < this._length; index_1++) {
                item = collection[index_1];
                itemTrackBy = this._trackByFn(index_1, item);
                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
                    record = this._mismatch(record, item, itemTrackBy, index_1);
                    mayBeDirty = true;
                }
                else {
                    if (mayBeDirty) {
                        // TODO(misko): can we limit this to duplicates only?
                        record = this._verifyReinsertion(record, item, itemTrackBy, index_1);
                    }
                    if (!looseIdentical(record.item, item))
                        this._addIdentityChange(record, item);
                }
                record = record._next;
            }
        }
        else {
            index = 0;
            iterateListLike(collection, function (item) {
                itemTrackBy = _this._trackByFn(index, item);
                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
                    record = _this._mismatch(record, item, itemTrackBy, index);
                    mayBeDirty = true;
                }
                else {
                    if (mayBeDirty) {
                        // TODO(misko): can we limit this to duplicates only?
                        record = _this._verifyReinsertion(record, item, itemTrackBy, index);
                    }
                    if (!looseIdentical(record.item, item))
                        _this._addIdentityChange(record, item);
                }
                record = record._next;
                index++;
            });
            this._length = index;
        }
        this._truncate(record);
        this._collection = collection;
        return this.isDirty;
    };
    Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", {
        /**
         * @return {?}
         */
        get: function () {
            return this._additionsHead !== null || this._movesHead !== null ||
                this._removalsHead !== null || this._identityChangesHead !== null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Reset the state of the change objects to show no changes. This means set previousKey to
     * currentKey, and clear all of the queues (additions, moves, removals).
     * Set the previousIndexes of moved and added items to their currentIndexes
     * Reset the list of additions, moves and removals
     *
     * \@internal
     * @return {?}
     */
    DefaultIterableDiffer.prototype._reset = function () {
        if (this.isDirty) {
            var /** @type {?} */ record = void 0;
            var /** @type {?} */ nextRecord = void 0;
            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
                record._nextPrevious = record._next;
            }
            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
                record.previousIndex = record.currentIndex;
            }
            this._additionsHead = this._additionsTail = null;
            for (record = this._movesHead; record !== null; record = nextRecord) {
                record.previousIndex = record.currentIndex;
                nextRecord = record._nextMoved;
            }
            this._movesHead = this._movesTail = null;
            this._removalsHead = this._removalsTail = null;
            this._identityChangesHead = this._identityChangesTail = null;
            // todo(vicb) when assert gets supported
            // assert(!this.isDirty);
        }
    };
    /**
     * This is the core function which handles differences between collections.
     *
     * - `record` is the record which we saw at this position last time. If null then it is a new
     *   item.
     * - `item` is the current item in the collection
     * - `index` is the position of the item in the collection
     *
     * \@internal
     * @param {?} record
     * @param {?} item
     * @param {?} itemTrackBy
     * @param {?} index
     * @return {?}
     */
    DefaultIterableDiffer.prototype._mismatch = function (record, item, itemTrackBy, index) {
        // The previous record after which we will append the current one.
        var /** @type {?} */ previousRecord;
        if (record === null) {
            previousRecord = this._itTail;
        }
        else {
            previousRecord = record._prev;
            // Remove the record from the collection since we know it does not match the item.
            this._remove(record);
        }
        // Attempt to see if we have seen the item before.
        record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
        if (record !== null) {
            // We have seen this before, we need to move it forward in the collection.
            // But first we need to check if identity changed, so we can update in view if necessary
            if (!looseIdentical(record.item, item))
                this._addIdentityChange(record, item);
            this._moveAfter(record, previousRecord, index);
        }
        else {
            // Never seen it, check evicted list.
            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);
            if (record !== null) {
                // It is an item which we have evicted earlier: reinsert it back into the list.
                // But first we need to check if identity changed, so we can update in view if necessary
                if (!looseIdentical(record.item, item))
                    this._addIdentityChange(record, item);
                this._reinsertAfter(record, previousRecord, index);
            }
            else {
                // It is a new item: add it.
                record =
                    this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);
            }
        }
        return record;
    };
    /**
     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
     *
     * Use case: `[a, a]` => `[b, a, a]`
     *
     * If we did not have this check then the insertion of `b` would:
     *   1) evict first `a`
     *   2) insert `b` at `0` index.
     *   3) leave `a` at index `1` as is. <-- this is wrong!
     *   3) reinsert `a` at index 2. <-- this is wrong!
     *
     * The correct behavior is:
     *   1) evict first `a`
     *   2) insert `b` at `0` index.
     *   3) reinsert `a` at index 1.
     *   3) move `a` at from `1` to `2`.
     *
     *
     * Double check that we have not evicted a duplicate item. We need to check if the item type may
     * have already been removed:
     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
     * at the end.
     *
     * \@internal
     * @param {?} record
     * @param {?} item
     * @param {?} itemTrackBy
     * @param {?} index
     * @return {?}
     */
    DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, itemTrackBy, index) {
        var /** @type {?} */ reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);
        if (reinsertRecord !== null) {
            record = this._reinsertAfter(reinsertRecord, /** @type {?} */ ((record._prev)), index);
        }
        else if (record.currentIndex != index) {
            record.currentIndex = index;
            this._addToMoves(record, index);
        }
        return record;
    };
    /**
     * Get rid of any excess {\@link IterableChangeRecord_}s from the previous collection
     *
     * - `record` The first excess {\@link IterableChangeRecord_}.
     *
     * \@internal
     * @param {?} record
     * @return {?}
     */
    DefaultIterableDiffer.prototype._truncate = function (record) {
        // Anything after that needs to be removed;
        while (record !== null) {
            var /** @type {?} */ nextRecord = record._next;
            this._addToRemovals(this._unlink(record));
            record = nextRecord;
        }
        if (this._unlinkedRecords !== null) {
            this._unlinkedRecords.clear();
        }
        if (this._additionsTail !== null) {
            this._additionsTail._nextAdded = null;
        }
        if (this._movesTail !== null) {
            this._movesTail._nextMoved = null;
        }
        if (this._itTail !== null) {
            this._itTail._next = null;
        }
        if (this._removalsTail !== null) {
            this._removalsTail._nextRemoved = null;
        }
        if (this._identityChangesTail !== null) {
            this._identityChangesTail._nextIdentityChange = null;
        }
    };
    /**
     * \@internal
     * @param {?} record
     * @param {?} prevRecord
     * @param {?} index
     * @return {?}
     */
    DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {
        if (this._unlinkedRecords !== null) {
            this._unlinkedRecords.remove(record);
        }
        var /** @type {?} */ prev = record._prevRemoved;
        var /** @type {?} */ next = record._nextRemoved;
        if (prev === null) {
            this._removalsHead = next;
        }
        else {
            prev._nextRemoved = next;
        }
        if (next === null) {
            this._removalsTail = prev;
        }
        else {
            next._prevRemoved = prev;
        }
        this._insertAfter(record, prevRecord, index);
        this._addToMoves(record, index);
        return record;
    };
    /**
     * \@internal
     * @param {?} record
     * @param {?} prevRecord
     * @param {?} index
     * @return {?}
     */
    DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {
        this._unlink(record);
        this._insertAfter(record, prevRecord, index);
        this._addToMoves(record, index);
        return record;
    };
    /**
     * \@internal
     * @param {?} record
     * @param {?} prevRecord
     * @param {?} index
     * @return {?}
     */
    DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {
        this._insertAfter(record, prevRecord, index);
        if (this._additionsTail === null) {
            // todo(vicb)
            // assert(this._additionsHead === null);
            this._additionsTail = this._additionsHead = record;
        }
        else {
            // todo(vicb)
            // assert(_additionsTail._nextAdded === null);
            // assert(record._nextAdded === null);
            this._additionsTail = this._additionsTail._nextAdded = record;
        }
        return record;
    };
    /**
     * \@internal
     * @param {?} record
     * @param {?} prevRecord
     * @param {?} index
     * @return {?}
     */
    DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {
        // todo(vicb)
        // assert(record != prevRecord);
        // assert(record._next === null);
        // assert(record._prev === null);
        var /** @type {?} */ next = prevRecord === null ? this._itHead : prevRecord._next;
        // todo(vicb)
        // assert(next != record);
        // assert(prevRecord != record);
        record._next = next;
        record._prev = prevRecord;
        if (next === null) {
            this._itTail = record;
        }
        else {
            next._prev = record;
        }
        if (prevRecord === null) {
            this._itHead = record;
        }
        else {
            prevRecord._next = record;
        }
        if (this._linkedRecords === null) {
            this._linkedRecords = new _DuplicateMap();
        }
        this._linkedRecords.put(record);
        record.currentIndex = index;
        return record;
    };
    /**
     * \@internal
     * @param {?} record
     * @return {?}
     */
    DefaultIterableDiffer.prototype._remove = function (record) {
        return this._addToRemovals(this._unlink(record));
    };
    /**
     * \@internal
     * @param {?} record
     * @return {?}
     */
    DefaultIterableDiffer.prototype._unlink = function (record) {
        if (this._linkedRecords !== null) {
            this._linkedRecords.remove(record);
        }
        var /** @type {?} */ prev = record._prev;
        var /** @type {?} */ next = record._next;
        // todo(vicb)
        // assert((record._prev = null) === null);
        // assert((record._next = null) === null);
        if (prev === null) {
            this._itHead = next;
        }
        else {
            prev._next = next;
        }
        if (next === null) {
            this._itTail = prev;
        }
        else {
            next._prev = prev;
        }
        return record;
    };
    /**
     * \@internal
     * @param {?} record
     * @param {?} toIndex
     * @return {?}
     */
    DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {
        // todo(vicb)
        // assert(record._nextMoved === null);
        if (record.previousIndex === toIndex) {
            return record;
        }
        if (this._movesTail === null) {
            // todo(vicb)
            // assert(_movesHead === null);
            this._movesTail = this._movesHead = record;
        }
        else {
            // todo(vicb)
            // assert(_movesTail._nextMoved === null);
            this._movesTail = this._movesTail._nextMoved = record;
        }
        return record;
    };
    /**
     * @param {?} record
     * @return {?}
     */
    DefaultIterableDiffer.prototype._addToRemovals = function (record) {
        if (this._unlinkedRecords === null) {
            this._unlinkedRecords = new _DuplicateMap();
        }
        this._unlinkedRecords.put(record);
        record.currentIndex = null;
        record._nextRemoved = null;
        if (this._removalsTail === null) {
            // todo(vicb)
            // assert(_removalsHead === null);
            this._removalsTail = this._removalsHead = record;
            record._prevRemoved = null;
        }
        else {
            // todo(vicb)
            // assert(_removalsTail._nextRemoved === null);
            // assert(record._nextRemoved === null);
            record._prevRemoved = this._removalsTail;
            this._removalsTail = this._removalsTail._nextRemoved = record;
        }
        return record;
    };
    /**
     * \@internal
     * @param {?} record
     * @param {?} item
     * @return {?}
     */
    DefaultIterableDiffer.prototype._addIdentityChange = function (record, item) {
        record.item = item;
        if (this._identityChangesTail === null) {
            this._identityChangesTail = this._identityChangesHead = record;
        }
        else {
            this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
        }
        return record;
    };
    /**
     * @return {?}
     */
    DefaultIterableDiffer.prototype.toString = function () {
        var /** @type {?} */ list = [];
        this.forEachItem(function (record) { return list.push(record); });
        var /** @type {?} */ previous = [];
        this.forEachPreviousItem(function (record) { return previous.push(record); });
        var /** @type {?} */ additions = [];
        this.forEachAddedItem(function (record) { return additions.push(record); });
        var /** @type {?} */ moves = [];
        this.forEachMovedItem(function (record) { return moves.push(record); });
        var /** @type {?} */ removals = [];
        this.forEachRemovedItem(function (record) { return removals.push(record); });
        var /** @type {?} */ identityChanges = [];
        this.forEachIdentityChange(function (record) { return identityChanges.push(record); });
        return 'collection: ' + list.join(', ') + '\n' +
            'previous: ' + previous.join(', ') + '\n' +
            'additions: ' + additions.join(', ') + '\n' +
            'moves: ' + moves.join(', ') + '\n' +
            'removals: ' + removals.join(', ') + '\n' +
            'identityChanges: ' + identityChanges.join(', ') + '\n';
    };
    return DefaultIterableDiffer;
}());
/**
 * \@stable
 */
var IterableChangeRecord_ = (function () {
    /**
     * @param {?} item
     * @param {?} trackById
     */
    function IterableChangeRecord_(item, trackById) {
        this.item = item;
        this.trackById = trackById;
        this.currentIndex = null;
        this.previousIndex = null;
        /**
         * \@internal
         */
        this._nextPrevious = null;
        /**
         * \@internal
         */
        this._prev = null;
        /**
         * \@internal
         */
        this._next = null;
        /**
         * \@internal
         */
        this._prevDup = null;
        /**
         * \@internal
         */
        this._nextDup = null;
        /**
         * \@internal
         */
        this._prevRemoved = null;
        /**
         * \@internal
         */
        this._nextRemoved = null;
        /**
         * \@internal
         */
        this._nextAdded = null;
        /**
         * \@internal
         */
        this._nextMoved = null;
        /**
         * \@internal
         */
        this._nextIdentityChange = null;
    }
    /**
     * @return {?}
     */
    IterableChangeRecord_.prototype.toString = function () {
        return this.previousIndex === this.currentIndex ? stringify(this.item) :
            stringify(this.item) + '[' +
                stringify(this.previousIndex) + '->' + stringify(this.currentIndex) + ']';
    };
    return IterableChangeRecord_;
}());
var _DuplicateItemRecordList = (function () {
    function _DuplicateItemRecordList() {
        /**
         * \@internal
         */
        this._head = null;
        /**
         * \@internal
         */
        this._tail = null;
    }
    /**
     * Append the record to the list of duplicates.
     *
     * Note: by design all records in the list of duplicates hold the same value in record.item.
     * @param {?} record
     * @return {?}
     */
    _DuplicateItemRecordList.prototype.add = function (record) {
        if (this._head === null) {
            this._head = this._tail = record;
            record._nextDup = null;
            record._prevDup = null;
        }
        else {
            ((
            // todo(vicb)
            // assert(record.item ==  _head.item ||
            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);
            this._tail))._nextDup = record;
            record._prevDup = this._tail;
            record._nextDup = null;
            this._tail = record;
        }
    };
    /**
     * @param {?} trackById
     * @param {?} atOrAfterIndex
     * @return {?}
     */
    _DuplicateItemRecordList.prototype.get = function (trackById, atOrAfterIndex) {
        var /** @type {?} */ record;
        for (record = this._head; record !== null; record = record._nextDup) {
            if ((atOrAfterIndex === null || atOrAfterIndex <= ((record.currentIndex))) &&
                looseIdentical(record.trackById, trackById)) {
                return record;
            }
        }
        return null;
    };
    /**
     * Remove one {\@link IterableChangeRecord_} from the list of duplicates.
     *
     * Returns whether the list of duplicates is empty.
     * @param {?} record
     * @return {?}
     */
    _DuplicateItemRecordList.prototype.remove = function (record) {
        // todo(vicb)
        // assert(() {
        //  // verify that the record being removed is in the list.
        //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {
        //    if (identical(cursor, record)) return true;
        //  }
        //  return false;
        //});
        var /** @type {?} */ prev = record._prevDup;
        var /** @type {?} */ next = record._nextDup;
        if (prev === null) {
            this._head = next;
        }
        else {
            prev._nextDup = next;
        }
        if (next === null) {
            this._tail = prev;
        }
        else {
            next._prevDup = prev;
        }
        return this._head === null;
    };
    return _DuplicateItemRecordList;
}());
var _DuplicateMap = (function () {
    function _DuplicateMap() {
        this.map = new Map();
    }
    /**
     * @param {?} record
     * @return {?}
     */
    _DuplicateMap.prototype.put = function (record) {
        var /** @type {?} */ key = record.trackById;
        var /** @type {?} */ duplicates = this.map.get(key);
        if (!duplicates) {
            duplicates = new _DuplicateItemRecordList();
            this.map.set(key, duplicates);
        }
        duplicates.add(record);
    };
    /**
     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we
     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.
     *
     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
     * have any more `a`s needs to return the second `a`.
     * @param {?} trackById
     * @param {?} atOrAfterIndex
     * @return {?}
     */
    _DuplicateMap.prototype.get = function (trackById, atOrAfterIndex) {
        var /** @type {?} */ key = trackById;
        var /** @type {?} */ recordList = this.map.get(key);
        return recordList ? recordList.get(trackById, atOrAfterIndex) : null;
    };
    /**
     * Removes a {\@link IterableChangeRecord_} from the list of duplicates.
     *
     * The list of duplicates also is removed from the map if it gets empty.
     * @param {?} record
     * @return {?}
     */
    _DuplicateMap.prototype.remove = function (record) {
        var /** @type {?} */ key = record.trackById;
        var /** @type {?} */ recordList = ((this.map.get(key)));
        // Remove the list of duplicates when it gets empty
        if (recordList.remove(record)) {
            this.map.delete(key);
        }
        return record;
    };
    Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
        /**
         * @return {?}
         */
        get: function () { return this.map.size === 0; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    _DuplicateMap.prototype.clear = function () { this.map.clear(); };
    /**
     * @return {?}
     */
    _DuplicateMap.prototype.toString = function () { return '_DuplicateMap(' + stringify(this.map) + ')'; };
    return _DuplicateMap;
}());
/**
 * @param {?} item
 * @param {?} addRemoveOffset
 * @param {?} moveOffsets
 * @return {?}
 */
function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
    var /** @type {?} */ previousIndex = item.previousIndex;
    if (previousIndex === null)
        return previousIndex;
    var /** @type {?} */ moveOffset = 0;
    if (moveOffsets && previousIndex < moveOffsets.length) {
        moveOffset = moveOffsets[previousIndex];
    }
    return previousIndex + addRemoveOffset + moveOffset;
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var DefaultKeyValueDifferFactory = (function () {
    function DefaultKeyValueDifferFactory() {
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    DefaultKeyValueDifferFactory.prototype.supports = function (obj) { return obj instanceof Map || isJsObject(obj); };
    /**
     * @deprecated v4.0.0 - ChangeDetectorRef is not used and is no longer a parameter
     * @template K, V
     * @param {?=} cd
     * @return {?}
     */
    DefaultKeyValueDifferFactory.prototype.create = function (cd) {
        return new DefaultKeyValueDiffer();
    };
    return DefaultKeyValueDifferFactory;
}());
var DefaultKeyValueDiffer = (function () {
    function DefaultKeyValueDiffer() {
        this._records = new Map();
        this._mapHead = null;
        this._appendAfter = null;
        this._previousMapHead = null;
        this._changesHead = null;
        this._changesTail = null;
        this._additionsHead = null;
        this._additionsTail = null;
        this._removalsHead = null;
        this._removalsTail = null;
    }
    Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", {
        /**
         * @return {?}
         */
        get: function () {
            return this._additionsHead !== null || this._changesHead !== null ||
                this._removalsHead !== null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {
        var /** @type {?} */ record;
        for (record = this._mapHead; record !== null; record = record._next) {
            fn(record);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {
        var /** @type {?} */ record;
        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
            fn(record);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {
        var /** @type {?} */ record;
        for (record = this._changesHead; record !== null; record = record._nextChanged) {
            fn(record);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {
        var /** @type {?} */ record;
        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
            fn(record);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {
        var /** @type {?} */ record;
        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
            fn(record);
        }
    };
    /**
     * @param {?=} map
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype.diff = function (map) {
        if (!map) {
            map = new Map();
        }
        else if (!(map instanceof Map || isJsObject(map))) {
            throw new Error("Error trying to diff '" + stringify(map) + "'. Only maps and objects are allowed");
        }
        return this.check(map) ? this : null;
    };
    /**
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype.onDestroy = function () { };
    /**
     * Check the current state of the map vs the previous.
     * The algorithm is optimised for when the keys do no change.
     * @param {?} map
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype.check = function (map) {
        var _this = this;
        this._reset();
        var /** @type {?} */ insertBefore = this._mapHead;
        this._appendAfter = null;
        this._forEach(map, function (value, key) {
            if (insertBefore && insertBefore.key === key) {
                _this._maybeAddToChanges(insertBefore, value);
                _this._appendAfter = insertBefore;
                insertBefore = insertBefore._next;
            }
            else {
                var /** @type {?} */ record = _this._getOrCreateRecordForKey(key, value);
                insertBefore = _this._insertBeforeOrAppend(insertBefore, record);
            }
        });
        // Items remaining at the end of the list have been deleted
        if (insertBefore) {
            if (insertBefore._prev) {
                insertBefore._prev._next = null;
            }
            this._removalsHead = insertBefore;
            for (var /** @type {?} */ record = insertBefore; record !== null; record = record._nextRemoved) {
                if (record === this._mapHead) {
                    this._mapHead = null;
                }
                this._records.delete(record.key);
                record._nextRemoved = record._next;
                record.previousValue = record.currentValue;
                record.currentValue = null;
                record._prev = null;
                record._next = null;
            }
        }
        // Make sure tails have no next records from previous runs
        if (this._changesTail)
            this._changesTail._nextChanged = null;
        if (this._additionsTail)
            this._additionsTail._nextAdded = null;
        return this.isDirty;
    };
    /**
     * Inserts a record before `before` or append at the end of the list when `before` is null.
     *
     * Notes:
     * - This method appends at `this._appendAfter`,
     * - This method updates `this._appendAfter`,
     * - The return value is the new value for the insertion pointer.
     * @param {?} before
     * @param {?} record
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype._insertBeforeOrAppend = function (before, record) {
        if (before) {
            var /** @type {?} */ prev = before._prev;
            record._next = before;
            record._prev = prev;
            before._prev = record;
            if (prev) {
                prev._next = record;
            }
            if (before === this._mapHead) {
                this._mapHead = record;
            }
            this._appendAfter = before;
            return before;
        }
        if (this._appendAfter) {
            this._appendAfter._next = record;
            record._prev = this._appendAfter;
        }
        else {
            this._mapHead = record;
        }
        this._appendAfter = record;
        return null;
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype._getOrCreateRecordForKey = function (key, value) {
        if (this._records.has(key)) {
            var /** @type {?} */ record_1 = ((this._records.get(key)));
            this._maybeAddToChanges(record_1, value);
            var /** @type {?} */ prev = record_1._prev;
            var /** @type {?} */ next = record_1._next;
            if (prev) {
                prev._next = next;
            }
            if (next) {
                next._prev = prev;
            }
            record_1._next = null;
            record_1._prev = null;
            return record_1;
        }
        var /** @type {?} */ record = new KeyValueChangeRecord_(key);
        this._records.set(key, record);
        record.currentValue = value;
        this._addToAdditions(record);
        return record;
    };
    /**
     * \@internal
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype._reset = function () {
        if (this.isDirty) {
            var /** @type {?} */ record = void 0;
            // let `_previousMapHead` contain the state of the map before the changes
            this._previousMapHead = this._mapHead;
            for (record = this._previousMapHead; record !== null; record = record._next) {
                record._nextPrevious = record._next;
            }
            // Update `record.previousValue` with the value of the item before the changes
            // We need to update all changed items (that's those which have been added and changed)
            for (record = this._changesHead; record !== null; record = record._nextChanged) {
                record.previousValue = record.currentValue;
            }
            for (record = this._additionsHead; record != null; record = record._nextAdded) {
                record.previousValue = record.currentValue;
            }
            this._changesHead = this._changesTail = null;
            this._additionsHead = this._additionsTail = null;
            this._removalsHead = null;
        }
    };
    /**
     * @param {?} record
     * @param {?} newValue
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype._maybeAddToChanges = function (record, newValue) {
        if (!looseIdentical(newValue, record.currentValue)) {
            record.previousValue = record.currentValue;
            record.currentValue = newValue;
            this._addToChanges(record);
        }
    };
    /**
     * @param {?} record
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {
        if (this._additionsHead === null) {
            this._additionsHead = this._additionsTail = record;
        }
        else {
            ((this._additionsTail))._nextAdded = record;
            this._additionsTail = record;
        }
    };
    /**
     * @param {?} record
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype._addToChanges = function (record) {
        if (this._changesHead === null) {
            this._changesHead = this._changesTail = record;
        }
        else {
            ((this._changesTail))._nextChanged = record;
            this._changesTail = record;
        }
    };
    /**
     * \@internal
     * @template K, V
     * @param {?} obj
     * @param {?} fn
     * @return {?}
     */
    DefaultKeyValueDiffer.prototype._forEach = function (obj, fn) {
        if (obj instanceof Map) {
            obj.forEach(fn);
        }
        else {
            Object.keys(obj).forEach(function (k) { return fn(obj[k], k); });
        }
    };
    return DefaultKeyValueDiffer;
}());
/**
 * \@stable
 */
var KeyValueChangeRecord_ = (function () {
    /**
     * @param {?} key
     */
    function KeyValueChangeRecord_(key) {
        this.key = key;
        this.previousValue = null;
        this.currentValue = null;
        /**
         * \@internal
         */
        this._nextPrevious = null;
        /**
         * \@internal
         */
        this._next = null;
        /**
         * \@internal
         */
        this._prev = null;
        /**
         * \@internal
         */
        this._nextAdded = null;
        /**
         * \@internal
         */
        this._nextRemoved = null;
        /**
         * \@internal
         */
        this._nextChanged = null;
    }
    return KeyValueChangeRecord_;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.
 * \@stable
 */
var IterableDiffers = (function () {
    /**
     * @param {?} factories
     */
    function IterableDiffers(factories) {
        this.factories = factories;
    }
    /**
     * @param {?} factories
     * @param {?=} parent
     * @return {?}
     */
    IterableDiffers.create = function (factories, parent) {
        if (parent != null) {
            var /** @type {?} */ copied = parent.factories.slice();
            factories = factories.concat(copied);
            return new IterableDiffers(factories);
        }
        else {
            return new IterableDiffers(factories);
        }
    };
    /**
     * Takes an array of {\@link IterableDifferFactory} and returns a provider used to extend the
     * inherited {\@link IterableDiffers} instance with the provided factories and return a new
     * {\@link IterableDiffers} instance.
     *
     * The following example shows how to extend an existing list of factories,
     * which will only be applied to the injector for this component and its children.
     * This step is all that's required to make a new {\@link IterableDiffer} available.
     *
     * ### Example
     *
     * ```
     * \@Component({
     *   viewProviders: [
     *     IterableDiffers.extend([new ImmutableListDiffer()])
     *   ]
     * })
     * ```
     * @param {?} factories
     * @return {?}
     */
    IterableDiffers.extend = function (factories) {
        return {
            provide: IterableDiffers,
            useFactory: function (parent) {
                if (!parent) {
                    // Typically would occur when calling IterableDiffers.extend inside of dependencies passed
                    // to
                    // bootstrap(), which would override default pipes instead of extending them.
                    throw new Error('Cannot extend IterableDiffers without a parent injector');
                }
                return IterableDiffers.create(factories, parent);
            },
            // Dependency technically isn't optional, but we can provide a better error message this way.
            deps: [[IterableDiffers, new SkipSelf(), new Optional()]]
        };
    };
    /**
     * @param {?} iterable
     * @return {?}
     */
    IterableDiffers.prototype.find = function (iterable) {
        var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(iterable); });
        if (factory != null) {
            return factory;
        }
        else {
            throw new Error("Cannot find a differ supporting object '" + iterable + "' of type '" + getTypeNameForDebugging(iterable) + "'");
        }
    };
    return IterableDiffers;
}());
/**
 * @param {?} type
 * @return {?}
 */
function getTypeNameForDebugging(type) {
    return type['name'] || typeof type;
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.
 * \@stable
 */
var KeyValueDiffers = (function () {
    /**
     * @param {?} factories
     */
    function KeyValueDiffers(factories) {
        this.factories = factories;
    }
    /**
     * @template S
     * @param {?} factories
     * @param {?=} parent
     * @return {?}
     */
    KeyValueDiffers.create = function (factories, parent) {
        if (parent) {
            var /** @type {?} */ copied = parent.factories.slice();
            factories = factories.concat(copied);
        }
        return new KeyValueDiffers(factories);
    };
    /**
     * Takes an array of {\@link KeyValueDifferFactory} and returns a provider used to extend the
     * inherited {\@link KeyValueDiffers} instance with the provided factories and return a new
     * {\@link KeyValueDiffers} instance.
     *
     * The following example shows how to extend an existing list of factories,
     * which will only be applied to the injector for this component and its children.
     * This step is all that's required to make a new {\@link KeyValueDiffer} available.
     *
     * ### Example
     *
     * ```
     * \@Component({
     *   viewProviders: [
     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
     *   ]
     * })
     * ```
     * @template S
     * @param {?} factories
     * @return {?}
     */
    KeyValueDiffers.extend = function (factories) {
        return {
            provide: KeyValueDiffers,
            useFactory: function (parent) {
                if (!parent) {
                    // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed
                    // to bootstrap(), which would override default pipes instead of extending them.
                    throw new Error('Cannot extend KeyValueDiffers without a parent injector');
                }
                return KeyValueDiffers.create(factories, parent);
            },
            // Dependency technically isn't optional, but we can provide a better error message this way.
            deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]
        };
    };
    /**
     * @param {?} kv
     * @return {?}
     */
    KeyValueDiffers.prototype.find = function (kv) {
        var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(kv); });
        if (factory) {
            return factory;
        }
        throw new Error("Cannot find a differ supporting object '" + kv + "'");
    };
    return KeyValueDiffers;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Structural diffing for `Object`s and `Map`s.
 */
var keyValDiff = [new DefaultKeyValueDifferFactory()];
/**
 * Structural diffing for `Iterable` types such as `Array`s.
 */
var iterableDiff = [new DefaultIterableDifferFactory()];
var defaultIterableDiffers = new IterableDiffers(iterableDiff);
var defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @module
 * @description
 * Change detection enables data binding in Angular.
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @return {?}
 */
function _reflector() {
    return reflector;
}
var _CORE_PLATFORM_PROVIDERS = [
    // Set a default platform name for platforms that don't set it explicitly.
    { provide: PLATFORM_ID, useValue: 'unknown' },
    PlatformRef_,
    { provide: PlatformRef, useExisting: PlatformRef_ },
    { provide: Reflector, useFactory: _reflector, deps: [] },
    TestabilityRegistry,
    Console,
];
/**
 * This platform has to be included in any other platform
 *
 * \@experimental
 */
var platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@experimental i18n support is experimental.
 */
var LOCALE_ID = new InjectionToken('LocaleId');
/**
 * \@experimental i18n support is experimental.
 */
var TRANSLATIONS = new InjectionToken('Translations');
/**
 * \@experimental i18n support is experimental.
 */
var TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');
var MissingTranslationStrategy = {};
MissingTranslationStrategy.Error = 0;
MissingTranslationStrategy.Warning = 1;
MissingTranslationStrategy.Ignore = 2;
MissingTranslationStrategy[MissingTranslationStrategy.Error] = "Error";
MissingTranslationStrategy[MissingTranslationStrategy.Warning] = "Warning";
MissingTranslationStrategy[MissingTranslationStrategy.Ignore] = "Ignore";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @return {?}
 */
function _iterableDiffersFactory() {
    return defaultIterableDiffers;
}
/**
 * @return {?}
 */
function _keyValueDiffersFactory() {
    return defaultKeyValueDiffers;
}
/**
 * @param {?=} locale
 * @return {?}
 */
function _localeFactory(locale) {
    return locale || 'en-US';
}
/**
 * This module includes the providers of \@angular/core that are needed
 * to bootstrap components via `ApplicationRef`.
 *
 * \@experimental
 */
var ApplicationModule = (function () {
    /**
     * @param {?} appRef
     */
    function ApplicationModule(appRef) {
    }
    return ApplicationModule;
}());
ApplicationModule.decorators = [
    { type: NgModule, args: [{
                providers: [
                    ApplicationRef_,
                    { provide: ApplicationRef, useExisting: ApplicationRef_ },
                    ApplicationInitStatus,
                    Compiler,
                    APP_ID_RANDOM_PROVIDER,
                    { provide: IterableDiffers, useFactory: _iterableDiffersFactory },
                    { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory },
                    {
                        provide: LOCALE_ID,
                        useFactory: _localeFactory,
                        deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]
                    },
                ]
            },] },
];
/**
 * @nocollapse
 */
ApplicationModule.ctorParameters = function () { return [
    { type: ApplicationRef, },
]; };
var SecurityContext = {};
SecurityContext.NONE = 0;
SecurityContext.HTML = 1;
SecurityContext.STYLE = 2;
SecurityContext.SCRIPT = 3;
SecurityContext.URL = 4;
SecurityContext.RESOURCE_URL = 5;
SecurityContext[SecurityContext.NONE] = "NONE";
SecurityContext[SecurityContext.HTML] = "HTML";
SecurityContext[SecurityContext.STYLE] = "STYLE";
SecurityContext[SecurityContext.SCRIPT] = "SCRIPT";
SecurityContext[SecurityContext.URL] = "URL";
SecurityContext[SecurityContext.RESOURCE_URL] = "RESOURCE_URL";
/**
 * Sanitizer is used by the views to sanitize potentially dangerous values.
 *
 * \@stable
 * @abstract
 */
var Sanitizer = (function () {
    function Sanitizer() {
    }
    /**
     * @abstract
     * @param {?} context
     * @param {?} value
     * @return {?}
     */
    Sanitizer.prototype.sanitize = function (context, value) { };
    return Sanitizer;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Node instance data.
 *
 * We have a separate type per NodeType to save memory
 * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)
 *
 * To keep our code monomorphic,
 * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).
 * This way, no usage site can get a `NodeData` from view.nodes and then use it for different
 * purposes.
 */
/**
 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
 * @param {?} view
 * @param {?} index
 * @return {?}
 */
function asTextData(view, index) {
    return (view.nodes[index]);
}
/**
 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
 * @param {?} view
 * @param {?} index
 * @return {?}
 */
function asElementData(view, index) {
    return (view.nodes[index]);
}
/**
 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
 * @param {?} view
 * @param {?} index
 * @return {?}
 */
function asProviderData(view, index) {
    return (view.nodes[index]);
}
/**
 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
 * @param {?} view
 * @param {?} index
 * @return {?}
 */
function asPureExpressionData(view, index) {
    return (view.nodes[index]);
}
/**
 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
 * @param {?} view
 * @param {?} index
 * @return {?}
 */
function asQueryList(view, index) {
    return (view.nodes[index]);
}
/**
 * @abstract
 */
var DebugContext = (function () {
    function DebugContext() {
    }
    /**
     * @abstract
     * @return {?}
     */
    DebugContext.prototype.view = function () { };
    /**
     * @abstract
     * @return {?}
     */
    DebugContext.prototype.nodeIndex = function () { };
    /**
     * @abstract
     * @return {?}
     */
    DebugContext.prototype.injector = function () { };
    /**
     * @abstract
     * @return {?}
     */
    DebugContext.prototype.component = function () { };
    /**
     * @abstract
     * @return {?}
     */
    DebugContext.prototype.providerTokens = function () { };
    /**
     * @abstract
     * @return {?}
     */
    DebugContext.prototype.references = function () { };
    /**
     * @abstract
     * @return {?}
     */
    DebugContext.prototype.context = function () { };
    /**
     * @abstract
     * @return {?}
     */
    DebugContext.prototype.componentRenderElement = function () { };
    /**
     * @abstract
     * @return {?}
     */
    DebugContext.prototype.renderNode = function () { };
    /**
     * @abstract
     * @param {?} console
     * @param {...?} values
     * @return {?}
     */
    DebugContext.prototype.logError = function (console) {
        var values = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            values[_i - 1] = arguments[_i];
        }
    };
    return DebugContext;
}());
/**
 * This object is used to prevent cycles in the source files and to have a place where
 * debug mode can hook it. It is lazily filled when `isDevMode` is known.
 */
var Services = {
    setCurrentNode: undefined,
    createRootView: undefined,
    createEmbeddedView: undefined,
    createComponentView: undefined,
    createNgModuleRef: undefined,
    overrideProvider: undefined,
    clearProviderOverrides: undefined,
    checkAndUpdateView: undefined,
    checkNoChangesView: undefined,
    destroyView: undefined,
    resolveDep: undefined,
    createDebugContext: undefined,
    handleEvent: undefined,
    updateDirectives: undefined,
    updateRenderer: undefined,
    dirtyParentQueries: undefined,
};
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} context
 * @param {?} oldValue
 * @param {?} currValue
 * @param {?} isFirstCheck
 * @return {?}
 */
function expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {
    var /** @type {?} */ msg = "ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '" + oldValue + "'. Current value: '" + currValue + "'.";
    if (isFirstCheck) {
        msg +=
            " It seems like the view has been created after its parent and its children have been dirty checked." +
                " Has it been created in a change detection hook ?";
    }
    return viewDebugError(msg, context);
}
/**
 * @param {?} err
 * @param {?} context
 * @return {?}
 */
function viewWrappedDebugError(err, context) {
    if (!(err instanceof Error)) {
        // errors that are not Error instances don't have a stack,
        // so it is ok to wrap them into a new Error object...
        err = new Error(err.toString());
    }
    _addDebugContext(err, context);
    return err;
}
/**
 * @param {?} msg
 * @param {?} context
 * @return {?}
 */
function viewDebugError(msg, context) {
    var /** @type {?} */ err = new Error(msg);
    _addDebugContext(err, context);
    return err;
}
/**
 * @param {?} err
 * @param {?} context
 * @return {?}
 */
function _addDebugContext(err, context) {
    ((err))[ERROR_DEBUG_CONTEXT] = context;
    ((err))[ERROR_LOGGER] = context.logError.bind(context);
}
/**
 * @param {?} err
 * @return {?}
 */
function isViewDebugError(err) {
    return !!getDebugContext(err);
}
/**
 * @param {?} action
 * @return {?}
 */
function viewDestroyedError(action) {
    return new Error("ViewDestroyedError: Attempt to use a destroyed view: " + action);
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var NOOP = function () { };
var _tokenKeyCache = new Map();
/**
 * @param {?} token
 * @return {?}
 */
function tokenKey(token) {
    var /** @type {?} */ key = _tokenKeyCache.get(token);
    if (!key) {
        key = stringify(token) + '_' + _tokenKeyCache.size;
        _tokenKeyCache.set(token, key);
    }
    return key;
}
/**
 * @param {?} view
 * @param {?} nodeIdx
 * @param {?} bindingIdx
 * @param {?} value
 * @return {?}
 */
function unwrapValue(view, nodeIdx, bindingIdx, value) {
    if (value instanceof WrappedValue) {
        value = value.wrapped;
        var /** @type {?} */ globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;
        var /** @type {?} */ oldValue = view.oldValues[globalBindingIdx];
        if (oldValue instanceof WrappedValue) {
            oldValue = oldValue.wrapped;
        }
        view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);
    }
    return value;
}
var UNDEFINED_RENDERER_TYPE_ID = '$$undefined';
var EMPTY_RENDERER_TYPE_ID = '$$empty';
/**
 * @param {?} values
 * @return {?}
 */
function createRendererType2(values) {
    return {
        id: UNDEFINED_RENDERER_TYPE_ID,
        styles: values.styles,
        encapsulation: values.encapsulation,
        data: values.data
    };
}
var _renderCompCount = 0;
/**
 * @param {?=} type
 * @return {?}
 */
function resolveRendererType2(type) {
    if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {
        // first time we see this RendererType2. Initialize it...
        var /** @type {?} */ isFilled = ((type.encapsulation != null && type.encapsulation !== ViewEncapsulation.None) ||
            type.styles.length || Object.keys(type.data).length);
        if (isFilled) {
            type.id = "c" + _renderCompCount++;
        }
        else {
            type.id = EMPTY_RENDERER_TYPE_ID;
        }
    }
    if (type && type.id === EMPTY_RENDERER_TYPE_ID) {
        type = null;
    }
    return type || null;
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} bindingIdx
 * @param {?} value
 * @return {?}
 */
function checkBinding(view, def, bindingIdx, value) {
    var /** @type {?} */ oldValues = view.oldValues;
    if ((view.state & 2 /* FirstCheck */) ||
        !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {
        return true;
    }
    return false;
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} bindingIdx
 * @param {?} value
 * @return {?}
 */
function checkAndUpdateBinding(view, def, bindingIdx, value) {
    if (checkBinding(view, def, bindingIdx, value)) {
        view.oldValues[def.bindingIndex + bindingIdx] = value;
        return true;
    }
    return false;
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} bindingIdx
 * @param {?} value
 * @return {?}
 */
function checkBindingNoChanges(view, def, bindingIdx, value) {
    var /** @type {?} */ oldValue = view.oldValues[def.bindingIndex + bindingIdx];
    if ((view.state & 1 /* BeforeFirstCheck */) || !devModeEqual(oldValue, value)) {
        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.index), oldValue, value, (view.state & 1 /* BeforeFirstCheck */) !== 0);
    }
}
/**
 * @param {?} view
 * @return {?}
 */
function markParentViewsForCheck(view) {
    var /** @type {?} */ currView = view;
    while (currView) {
        if (currView.def.flags & 2 /* OnPush */) {
            currView.state |= 8 /* ChecksEnabled */;
        }
        currView = currView.viewContainerParent || currView.parent;
    }
}
/**
 * @param {?} view
 * @param {?} endView
 * @return {?}
 */
function markParentViewsForCheckProjectedViews(view, endView) {
    var /** @type {?} */ currView = view;
    while (currView && currView !== endView) {
        currView.state |= 64 /* CheckProjectedViews */;
        currView = currView.viewContainerParent || currView.parent;
    }
}
/**
 * @param {?} view
 * @param {?} nodeIndex
 * @param {?} eventName
 * @param {?} event
 * @return {?}
 */
function dispatchEvent(view, nodeIndex, eventName, event) {
    var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];
    var /** @type {?} */ startView = nodeDef.flags & 33554432 /* ComponentView */ ? asElementData(view, nodeIndex).componentView : view;
    markParentViewsForCheck(startView);
    return Services.handleEvent(view, nodeIndex, eventName, event);
}
/**
 * @param {?} view
 * @return {?}
 */
function declaredViewContainer(view) {
    if (view.parent) {
        var /** @type {?} */ parentView = view.parent;
        return asElementData(parentView, /** @type {?} */ ((view.parentNodeDef)).index);
    }
    return null;
}
/**
 * for component views, this is the host element.
 * for embedded views, this is the index of the parent node
 * that contains the view container.
 * @param {?} view
 * @return {?}
 */
function viewParentEl(view) {
    var /** @type {?} */ parentView = view.parent;
    if (parentView) {
        return ((view.parentNodeDef)).parent;
    }
    else {
        return null;
    }
}
/**
 * @param {?} view
 * @param {?} def
 * @return {?}
 */
function renderNode(view, def) {
    switch (def.flags & 201347067 /* Types */) {
        case 1 /* TypeElement */:
            return asElementData(view, def.index).renderElement;
        case 2 /* TypeText */:
            return asTextData(view, def.index).renderText;
    }
}
/**
 * @param {?} target
 * @param {?} name
 * @return {?}
 */
function elementEventFullName(target, name) {
    return target ? target + ":" + name : name;
}
/**
 * @param {?} view
 * @return {?}
 */
function isComponentView(view) {
    return !!view.parent && !!(((view.parentNodeDef)).flags & 32768 /* Component */);
}
/**
 * @param {?} view
 * @return {?}
 */
function isEmbeddedView(view) {
    return !!view.parent && !(((view.parentNodeDef)).flags & 32768 /* Component */);
}
/**
 * @param {?} queryId
 * @return {?}
 */
function filterQueryId(queryId) {
    return 1 << (queryId % 32);
}
/**
 * @param {?} matchedQueriesDsl
 * @return {?}
 */
function splitMatchedQueriesDsl(matchedQueriesDsl) {
    var /** @type {?} */ matchedQueries = {};
    var /** @type {?} */ matchedQueryIds = 0;
    var /** @type {?} */ references = {};
    if (matchedQueriesDsl) {
        matchedQueriesDsl.forEach(function (_a) {
            var queryId = _a[0], valueType = _a[1];
            if (typeof queryId === 'number') {
                matchedQueries[queryId] = valueType;
                matchedQueryIds |= filterQueryId(queryId);
            }
            else {
                references[queryId] = valueType;
            }
        });
    }
    return { matchedQueries: matchedQueries, references: references, matchedQueryIds: matchedQueryIds };
}
/**
 * @param {?} deps
 * @return {?}
 */
function splitDepsDsl(deps) {
    return deps.map(function (value) {
        var /** @type {?} */ token;
        var /** @type {?} */ flags;
        if (Array.isArray(value)) {
            flags = value[0], token = value[1];
        }
        else {
            flags = 0 /* None */;
            token = value;
        }
        return { flags: flags, token: token, tokenKey: tokenKey(token) };
    });
}
/**
 * @param {?} view
 * @param {?} renderHost
 * @param {?} def
 * @return {?}
 */
function getParentRenderElement(view, renderHost, def) {
    var /** @type {?} */ renderParent = def.renderParent;
    if (renderParent) {
        if ((renderParent.flags & 1 /* TypeElement */) === 0 ||
            (renderParent.flags & 33554432 /* ComponentView */) === 0 ||
            (((renderParent.element)).componentRendererType && ((((renderParent.element)).componentRendererType)).encapsulation ===
                ViewEncapsulation.Native)) {
            // only children of non components, or children of components with native encapsulation should
            // be attached.
            return asElementData(view, /** @type {?} */ ((def.renderParent)).index).renderElement;
        }
    }
    else {
        return renderHost;
    }
}
var DEFINITION_CACHE = new WeakMap();
/**
 * @template D
 * @param {?} factory
 * @return {?}
 */
function resolveDefinition(factory) {
    var /** @type {?} */ value = (((DEFINITION_CACHE.get(factory))));
    if (!value) {
        value = factory(function () { return NOOP; });
        value.factory = factory;
        DEFINITION_CACHE.set(factory, value);
    }
    return value;
}
/**
 * @param {?} view
 * @return {?}
 */
function rootRenderNodes(view) {
    var /** @type {?} */ renderNodes = [];
    visitRootRenderNodes(view, 0 /* Collect */, undefined, undefined, renderNodes);
    return renderNodes;
}
/**
 * @param {?} view
 * @param {?} action
 * @param {?} parentNode
 * @param {?} nextSibling
 * @param {?=} target
 * @return {?}
 */
function visitRootRenderNodes(view, action, parentNode, nextSibling, target) {
    // We need to re-compute the parent node in case the nodes have been moved around manually
    if (action === 3 /* RemoveChild */) {
        parentNode = view.renderer.parentNode(renderNode(view, /** @type {?} */ ((view.def.lastRenderRootNode))));
    }
    visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);
}
/**
 * @param {?} view
 * @param {?} action
 * @param {?} startIndex
 * @param {?} endIndex
 * @param {?} parentNode
 * @param {?} nextSibling
 * @param {?=} target
 * @return {?}
 */
function visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {
    for (var /** @type {?} */ i = startIndex; i <= endIndex; i++) {
        var /** @type {?} */ nodeDef = view.def.nodes[i];
        if (nodeDef.flags & (1 /* TypeElement */ | 2 /* TypeText */ | 8 /* TypeNgContent */)) {
            visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);
        }
        // jump to next sibling
        i += nodeDef.childCount;
    }
}
/**
 * @param {?} view
 * @param {?} ngContentIndex
 * @param {?} action
 * @param {?} parentNode
 * @param {?} nextSibling
 * @param {?=} target
 * @return {?}
 */
function visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {
    var /** @type {?} */ compView = view;
    while (compView && !isComponentView(compView)) {
        compView = compView.parent;
    }
    var /** @type {?} */ hostView = ((compView)).parent;
    var /** @type {?} */ hostElDef = viewParentEl(/** @type {?} */ ((compView)));
    var /** @type {?} */ startIndex = ((hostElDef)).index + 1;
    var /** @type {?} */ endIndex = ((hostElDef)).index + ((hostElDef)).childCount;
    for (var /** @type {?} */ i = startIndex; i <= endIndex; i++) {
        var /** @type {?} */ nodeDef = ((hostView)).def.nodes[i];
        if (nodeDef.ngContentIndex === ngContentIndex) {
            visitRenderNode(/** @type {?} */ ((hostView)), nodeDef, action, parentNode, nextSibling, target);
        }
        // jump to next sibling
        i += nodeDef.childCount;
    }
    if (!((hostView)).parent) {
        // a root view
        var /** @type {?} */ projectedNodes = view.root.projectableNodes[ngContentIndex];
        if (projectedNodes) {
            for (var /** @type {?} */ i = 0; i < projectedNodes.length; i++) {
                execRenderNodeAction(view, projectedNodes[i], action, parentNode, nextSibling, target);
            }
        }
    }
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} action
 * @param {?} parentNode
 * @param {?} nextSibling
 * @param {?=} target
 * @return {?}
 */
function visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {
    if (nodeDef.flags & 8 /* TypeNgContent */) {
        visitProjectedRenderNodes(view, /** @type {?} */ ((nodeDef.ngContent)).index, action, parentNode, nextSibling, target);
    }
    else {
        var /** @type {?} */ rn = renderNode(view, nodeDef);
        if (action === 3 /* RemoveChild */ && (nodeDef.flags & 33554432 /* ComponentView */) &&
            (nodeDef.bindingFlags & 48 /* CatSyntheticProperty */)) {
            // Note: we might need to do both actions.
            if (nodeDef.bindingFlags & (16 /* SyntheticProperty */)) {
                execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);
            }
            if (nodeDef.bindingFlags & (32 /* SyntheticHostProperty */)) {
                var /** @type {?} */ compView = asElementData(view, nodeDef.index).componentView;
                execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);
            }
        }
        else {
            execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);
        }
        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {
            var /** @type {?} */ embeddedViews = ((asElementData(view, nodeDef.index).viewContainer))._embeddedViews;
            for (var /** @type {?} */ k = 0; k < embeddedViews.length; k++) {
                visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);
            }
        }
        if (nodeDef.flags & 1 /* TypeElement */ && !((nodeDef.element)).name) {
            visitSiblingRenderNodes(view, action, nodeDef.index + 1, nodeDef.index + nodeDef.childCount, parentNode, nextSibling, target);
        }
    }
}
/**
 * @param {?} view
 * @param {?} renderNode
 * @param {?} action
 * @param {?} parentNode
 * @param {?} nextSibling
 * @param {?=} target
 * @return {?}
 */
function execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {
    var /** @type {?} */ renderer = view.renderer;
    switch (action) {
        case 1 /* AppendChild */:
            renderer.appendChild(parentNode, renderNode);
            break;
        case 2 /* InsertBefore */:
            renderer.insertBefore(parentNode, renderNode, nextSibling);
            break;
        case 3 /* RemoveChild */:
            renderer.removeChild(parentNode, renderNode);
            break;
        case 0 /* Collect */:
            ((target)).push(renderNode);
            break;
    }
}
var NS_PREFIX_RE = /^:([^:]+):(.+)$/;
/**
 * @param {?} name
 * @return {?}
 */
function splitNamespace(name) {
    if (name[0] === ':') {
        var /** @type {?} */ match = ((name.match(NS_PREFIX_RE)));
        return [match[1], match[2]];
    }
    return ['', name];
}
/**
 * @param {?} bindings
 * @return {?}
 */
function calcBindingFlags(bindings) {
    var /** @type {?} */ flags = 0;
    for (var /** @type {?} */ i = 0; i < bindings.length; i++) {
        flags |= bindings[i].flags;
    }
    return flags;
}
/**
 * @param {?} valueCount
 * @param {?} constAndInterp
 * @return {?}
 */
function interpolate(valueCount, constAndInterp) {
    var /** @type {?} */ result = '';
    for (var /** @type {?} */ i = 0; i < valueCount * 2; i = i + 2) {
        result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);
    }
    return result + constAndInterp[valueCount * 2];
}
/**
 * @param {?} valueCount
 * @param {?} c0
 * @param {?} a1
 * @param {?} c1
 * @param {?=} a2
 * @param {?=} c2
 * @param {?=} a3
 * @param {?=} c3
 * @param {?=} a4
 * @param {?=} c4
 * @param {?=} a5
 * @param {?=} c5
 * @param {?=} a6
 * @param {?=} c6
 * @param {?=} a7
 * @param {?=} c7
 * @param {?=} a8
 * @param {?=} c8
 * @param {?=} a9
 * @param {?=} c9
 * @return {?}
 */
function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
    switch (valueCount) {
        case 1:
            return c0 + _toStringWithNull(a1) + c1;
        case 2:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;
        case 3:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                c3;
        case 4:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                c3 + _toStringWithNull(a4) + c4;
        case 5:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;
        case 6:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;
        case 7:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
                c6 + _toStringWithNull(a7) + c7;
        case 8:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;
        case 9:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;
        default:
            throw new Error("Does not support more than 9 expressions");
    }
}
/**
 * @param {?} v
 * @return {?}
 */
function _toStringWithNull(v) {
    return v != null ? v.toString() : '';
}
var EMPTY_ARRAY = [];
var EMPTY_MAP = {};
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} flags
 * @param {?} matchedQueriesDsl
 * @param {?} ngContentIndex
 * @param {?} childCount
 * @param {?=} handleEvent
 * @param {?=} templateFactory
 * @return {?}
 */
function anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {
    flags |= 1 /* TypeElement */;
    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;
    var /** @type {?} */ template = templateFactory ? resolveDefinition(templateFactory) : null;
    return {
        // will bet set by the view definition
        index: -1,
        parent: null,
        renderParent: null,
        bindingIndex: -1,
        outputIndex: -1,
        // regular values
        flags: flags,
        childFlags: 0,
        directChildFlags: 0,
        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,
        bindings: [],
        bindingFlags: 0,
        outputs: [],
        element: {
            ns: null,
            name: null,
            attrs: null, template: template,
            componentProvider: null,
            componentView: null,
            componentRendererType: null,
            publicProviders: null,
            allProviders: null,
            handleEvent: handleEvent || NOOP
        },
        provider: null,
        text: null,
        query: null,
        ngContent: null
    };
}
/**
 * @param {?} flags
 * @param {?} matchedQueriesDsl
 * @param {?} ngContentIndex
 * @param {?} childCount
 * @param {?} namespaceAndName
 * @param {?=} fixedAttrs
 * @param {?=} bindings
 * @param {?=} outputs
 * @param {?=} handleEvent
 * @param {?=} componentView
 * @param {?=} componentRendererType
 * @return {?}
 */
function elementDef(flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName, fixedAttrs, bindings, outputs, handleEvent, componentView, componentRendererType) {
    if (fixedAttrs === void 0) { fixedAttrs = []; }
    if (!handleEvent) {
        handleEvent = NOOP;
    }
    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;
    var /** @type {?} */ ns = ((null));
    var /** @type {?} */ name = ((null));
    if (namespaceAndName) {
        _b = splitNamespace(namespaceAndName), ns = _b[0], name = _b[1];
    }
    bindings = bindings || [];
    var /** @type {?} */ bindingDefs = new Array(bindings.length);
    for (var /** @type {?} */ i = 0; i < bindings.length; i++) {
        var _c = bindings[i], bindingFlags = _c[0], namespaceAndName_1 = _c[1], suffixOrSecurityContext = _c[2];
        var _d = splitNamespace(namespaceAndName_1), ns_1 = _d[0], name_1 = _d[1];
        var /** @type {?} */ securityContext = ((undefined));
        var /** @type {?} */ suffix = ((undefined));
        switch (bindingFlags & 15 /* Types */) {
            case 4 /* TypeElementStyle */:
                suffix = (suffixOrSecurityContext);
                break;
            case 1 /* TypeElementAttribute */:
            case 8 /* TypeProperty */:
                securityContext = (suffixOrSecurityContext);
                break;
        }
        bindingDefs[i] =
            { flags: bindingFlags, ns: ns_1, name: name_1, nonMinifiedName: name_1, securityContext: securityContext, suffix: suffix };
    }
    outputs = outputs || [];
    var /** @type {?} */ outputDefs = new Array(outputs.length);
    for (var /** @type {?} */ i = 0; i < outputs.length; i++) {
        var _e = outputs[i], target = _e[0], eventName = _e[1];
        outputDefs[i] = {
            type: 0 /* ElementOutput */,
            target: /** @type {?} */ (target), eventName: eventName,
            propName: null
        };
    }
    fixedAttrs = fixedAttrs || [];
    var /** @type {?} */ attrs = (fixedAttrs.map(function (_a) {
        var namespaceAndName = _a[0], value = _a[1];
        var _b = splitNamespace(namespaceAndName), ns = _b[0], name = _b[1];
        return [ns, name, value];
    }));
    componentRendererType = resolveRendererType2(componentRendererType);
    if (componentView) {
        flags |= 33554432 /* ComponentView */;
    }
    flags |= 1 /* TypeElement */;
    return {
        // will bet set by the view definition
        index: -1,
        parent: null,
        renderParent: null,
        bindingIndex: -1,
        outputIndex: -1,
        // regular values
        flags: flags,
        childFlags: 0,
        directChildFlags: 0,
        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,
        bindings: bindingDefs,
        bindingFlags: calcBindingFlags(bindingDefs),
        outputs: outputDefs,
        element: {
            ns: ns,
            name: name,
            attrs: attrs,
            template: null,
            // will bet set by the view definition
            componentProvider: null,
            componentView: componentView || null,
            componentRendererType: componentRendererType,
            publicProviders: null,
            allProviders: null,
            handleEvent: handleEvent || NOOP,
        },
        provider: null,
        text: null,
        query: null,
        ngContent: null
    };
    var _b;
}
/**
 * @param {?} view
 * @param {?} renderHost
 * @param {?} def
 * @return {?}
 */
function createElement(view, renderHost, def) {
    var /** @type {?} */ elDef = ((def.element));
    var /** @type {?} */ rootSelectorOrNode = view.root.selectorOrNode;
    var /** @type {?} */ renderer = view.renderer;
    var /** @type {?} */ el;
    if (view.parent || !rootSelectorOrNode) {
        if (elDef.name) {
            el = renderer.createElement(elDef.name, elDef.ns);
        }
        else {
            el = renderer.createComment('');
        }
        var /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);
        if (parentEl) {
            renderer.appendChild(parentEl, el);
        }
    }
    else {
        el = renderer.selectRootElement(rootSelectorOrNode);
    }
    if (elDef.attrs) {
        for (var /** @type {?} */ i = 0; i < elDef.attrs.length; i++) {
            var _a = elDef.attrs[i], ns = _a[0], name = _a[1], value = _a[2];
            renderer.setAttribute(el, name, value, ns);
        }
    }
    return el;
}
/**
 * @param {?} view
 * @param {?} compView
 * @param {?} def
 * @param {?} el
 * @return {?}
 */
function listenToElementOutputs(view, compView, def, el) {
    for (var /** @type {?} */ i = 0; i < def.outputs.length; i++) {
        var /** @type {?} */ output = def.outputs[i];
        var /** @type {?} */ handleEventClosure = renderEventHandlerClosure(view, def.index, elementEventFullName(output.target, output.eventName));
        var /** @type {?} */ listenTarget = output.target;
        var /** @type {?} */ listenerView = view;
        if (output.target === 'component') {
            listenTarget = null;
            listenerView = compView;
        }
        var /** @type {?} */ disposable = (listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure)); /** @type {?} */
        ((view.disposables))[def.outputIndex + i] = disposable;
    }
}
/**
 * @param {?} view
 * @param {?} index
 * @param {?} eventName
 * @return {?}
 */
function renderEventHandlerClosure(view, index, eventName) {
    return function (event) {
        try {
            return dispatchEvent(view, index, eventName, event);
        }
        catch (e) {
            // Attention: Don't rethrow, to keep in sync with directive events.
            view.root.errorHandler.handleError(e);
        }
    };
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} v0
 * @param {?} v1
 * @param {?} v2
 * @param {?} v3
 * @param {?} v4
 * @param {?} v5
 * @param {?} v6
 * @param {?} v7
 * @param {?} v8
 * @param {?} v9
 * @return {?}
 */
function checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    var /** @type {?} */ bindLen = def.bindings.length;
    var /** @type {?} */ changed = false;
    if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0))
        changed = true;
    if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1))
        changed = true;
    if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2))
        changed = true;
    if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3))
        changed = true;
    if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4))
        changed = true;
    if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5))
        changed = true;
    if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6))
        changed = true;
    if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7))
        changed = true;
    if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8))
        changed = true;
    if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9))
        changed = true;
    return changed;
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} values
 * @return {?}
 */
function checkAndUpdateElementDynamic(view, def, values) {
    var /** @type {?} */ changed = false;
    for (var /** @type {?} */ i = 0; i < values.length; i++) {
        if (checkAndUpdateElementValue(view, def, i, values[i]))
            changed = true;
    }
    return changed;
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} bindingIdx
 * @param {?} value
 * @return {?}
 */
function checkAndUpdateElementValue(view, def, bindingIdx, value) {
    if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {
        return false;
    }
    var /** @type {?} */ binding = def.bindings[bindingIdx];
    var /** @type {?} */ elData = asElementData(view, def.index);
    var /** @type {?} */ renderNode$$1 = elData.renderElement;
    var /** @type {?} */ name = ((binding.name));
    switch (binding.flags & 15 /* Types */) {
        case 1 /* TypeElementAttribute */:
            setElementAttribute(view, binding, renderNode$$1, binding.ns, name, value);
            break;
        case 2 /* TypeElementClass */:
            setElementClass(view, renderNode$$1, name, value);
            break;
        case 4 /* TypeElementStyle */:
            setElementStyle(view, binding, renderNode$$1, name, value);
            break;
        case 8 /* TypeProperty */:
            var /** @type {?} */ bindView = (def.flags & 33554432 /* ComponentView */ &&
                binding.flags & 32 /* SyntheticHostProperty */) ?
                elData.componentView :
                view;
            setElementProperty(bindView, binding, renderNode$$1, name, value);
            break;
    }
    return true;
}
/**
 * @param {?} view
 * @param {?} binding
 * @param {?} renderNode
 * @param {?} ns
 * @param {?} name
 * @param {?} value
 * @return {?}
 */
function setElementAttribute(view, binding, renderNode$$1, ns, name, value) {
    var /** @type {?} */ securityContext = binding.securityContext;
    var /** @type {?} */ renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;
    renderValue = renderValue != null ? renderValue.toString() : null;
    var /** @type {?} */ renderer = view.renderer;
    if (value != null) {
        renderer.setAttribute(renderNode$$1, name, renderValue, ns);
    }
    else {
        renderer.removeAttribute(renderNode$$1, name, ns);
    }
}
/**
 * @param {?} view
 * @param {?} renderNode
 * @param {?} name
 * @param {?} value
 * @return {?}
 */
function setElementClass(view, renderNode$$1, name, value) {
    var /** @type {?} */ renderer = view.renderer;
    if (value) {
        renderer.addClass(renderNode$$1, name);
    }
    else {
        renderer.removeClass(renderNode$$1, name);
    }
}
/**
 * @param {?} view
 * @param {?} binding
 * @param {?} renderNode
 * @param {?} name
 * @param {?} value
 * @return {?}
 */
function setElementStyle(view, binding, renderNode$$1, name, value) {
    var /** @type {?} */ renderValue = view.root.sanitizer.sanitize(SecurityContext.STYLE, /** @type {?} */ (value));
    if (renderValue != null) {
        renderValue = renderValue.toString();
        var /** @type {?} */ unit = binding.suffix;
        if (unit != null) {
            renderValue = renderValue + unit;
        }
    }
    else {
        renderValue = null;
    }
    var /** @type {?} */ renderer = view.renderer;
    if (renderValue != null) {
        renderer.setStyle(renderNode$$1, name, renderValue);
    }
    else {
        renderer.removeStyle(renderNode$$1, name);
    }
}
/**
 * @param {?} view
 * @param {?} binding
 * @param {?} renderNode
 * @param {?} name
 * @param {?} value
 * @return {?}
 */
function setElementProperty(view, binding, renderNode$$1, name, value) {
    var /** @type {?} */ securityContext = binding.securityContext;
    var /** @type {?} */ renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;
    view.renderer.setProperty(renderNode$$1, name, renderValue);
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var NOT_CREATED$1 = new Object();
var InjectorRefTokenKey$1 = tokenKey(Injector);
var NgModuleRefTokenKey = tokenKey(NgModuleRef);
/**
 * @param {?} flags
 * @param {?} token
 * @param {?} value
 * @param {?} deps
 * @return {?}
 */
function moduleProvideDef(flags, token, value, deps) {
    var /** @type {?} */ depDefs = splitDepsDsl(deps);
    return {
        // will bet set by the module definition
        index: -1,
        deps: depDefs, flags: flags, token: token, value: value
    };
}
/**
 * @param {?} providers
 * @return {?}
 */
function moduleDef(providers) {
    var /** @type {?} */ providersByKey = {};
    for (var /** @type {?} */ i = 0; i < providers.length; i++) {
        var /** @type {?} */ provider = providers[i];
        provider.index = i;
        providersByKey[tokenKey(provider.token)] = provider;
    }
    return {
        // Will be filled later...
        factory: null,
        providersByKey: providersByKey,
        providers: providers
    };
}
/**
 * @param {?} data
 * @return {?}
 */
function initNgModule(data) {
    var /** @type {?} */ def = data._def;
    var /** @type {?} */ providers = data._providers = new Array(def.providers.length);
    for (var /** @type {?} */ i = 0; i < def.providers.length; i++) {
        var /** @type {?} */ provDef = def.providers[i];
        providers[i] = provDef.flags & 4096 /* LazyProvider */ ? NOT_CREATED$1 :
            _createProviderInstance$1(data, provDef);
    }
}
/**
 * @param {?} data
 * @param {?} depDef
 * @param {?=} notFoundValue
 * @return {?}
 */
function resolveNgModuleDep(data, depDef, notFoundValue) {
    if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }
    if (depDef.flags & 8 /* Value */) {
        return depDef.token;
    }
    if (depDef.flags & 2 /* Optional */) {
        notFoundValue = null;
    }
    if (depDef.flags & 1 /* SkipSelf */) {
        return data._parent.get(depDef.token, notFoundValue);
    }
    var /** @type {?} */ tokenKey$$1 = depDef.tokenKey;
    switch (tokenKey$$1) {
        case InjectorRefTokenKey$1:
        case NgModuleRefTokenKey:
            return data;
    }
    var /** @type {?} */ providerDef = data._def.providersByKey[tokenKey$$1];
    if (providerDef) {
        var /** @type {?} */ providerInstance = data._providers[providerDef.index];
        if (providerInstance === NOT_CREATED$1) {
            providerInstance = data._providers[providerDef.index] =
                _createProviderInstance$1(data, providerDef);
        }
        return providerInstance;
    }
    return data._parent.get(depDef.token, notFoundValue);
}
/**
 * @param {?} ngModule
 * @param {?} providerDef
 * @return {?}
 */
function _createProviderInstance$1(ngModule, providerDef) {
    var /** @type {?} */ injectable;
    switch (providerDef.flags & 201347067 /* Types */) {
        case 512 /* TypeClassProvider */:
            injectable = _createClass(ngModule, providerDef.value, providerDef.deps);
            break;
        case 1024 /* TypeFactoryProvider */:
            injectable = _callFactory(ngModule, providerDef.value, providerDef.deps);
            break;
        case 2048 /* TypeUseExistingProvider */:
            injectable = resolveNgModuleDep(ngModule, providerDef.deps[0]);
            break;
        case 256 /* TypeValueProvider */:
            injectable = providerDef.value;
            break;
    }
    return injectable;
}
/**
 * @param {?} ngModule
 * @param {?} ctor
 * @param {?} deps
 * @return {?}
 */
function _createClass(ngModule, ctor, deps) {
    var /** @type {?} */ len = deps.length;
    var /** @type {?} */ injectable;
    switch (len) {
        case 0:
            injectable = new ctor();
            break;
        case 1:
            injectable = new ctor(resolveNgModuleDep(ngModule, deps[0]));
            break;
        case 2:
            injectable =
                new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));
            break;
        case 3:
            injectable = new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));
            break;
        default:
            var /** @type {?} */ depValues = new Array(len);
            for (var /** @type {?} */ i = 0; i < len; i++) {
                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);
            }
            injectable = new (ctor.bind.apply(ctor, [void 0].concat(depValues)))();
    }
    return injectable;
}
/**
 * @param {?} ngModule
 * @param {?} factory
 * @param {?} deps
 * @return {?}
 */
function _callFactory(ngModule, factory, deps) {
    var /** @type {?} */ len = deps.length;
    var /** @type {?} */ injectable;
    switch (len) {
        case 0:
            injectable = factory();
            break;
        case 1:
            injectable = factory(resolveNgModuleDep(ngModule, deps[0]));
            break;
        case 2:
            injectable =
                factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));
            break;
        case 3:
            injectable = factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));
            break;
        default:
            var /** @type {?} */ depValues = Array(len);
            for (var /** @type {?} */ i = 0; i < len; i++) {
                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);
            }
            injectable = factory.apply(void 0, depValues);
    }
    return injectable;
}
/**
 * @param {?} ngModule
 * @param {?} lifecycles
 * @return {?}
 */
function callNgModuleLifecycle(ngModule, lifecycles) {
    var /** @type {?} */ def = ngModule._def;
    for (var /** @type {?} */ i = 0; i < def.providers.length; i++) {
        var /** @type {?} */ provDef = def.providers[i];
        if (provDef.flags & 131072 /* OnDestroy */) {
            var /** @type {?} */ instance = ngModule._providers[i];
            if (instance && instance !== NOT_CREATED$1) {
                instance.ngOnDestroy();
            }
        }
    }
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} parentView
 * @param {?} elementData
 * @param {?} viewIndex
 * @param {?} view
 * @return {?}
 */
function attachEmbeddedView(parentView, elementData, viewIndex, view) {
    var /** @type {?} */ embeddedViews = ((elementData.viewContainer))._embeddedViews;
    if (viewIndex === null || viewIndex === undefined) {
        viewIndex = embeddedViews.length;
    }
    view.viewContainerParent = parentView;
    addToArray(embeddedViews, /** @type {?} */ ((viewIndex)), view);
    attachProjectedView(elementData, view);
    Services.dirtyParentQueries(view);
    var /** @type {?} */ prevView = ((viewIndex)) > 0 ? embeddedViews[((viewIndex)) - 1] : null;
    renderAttachEmbeddedView(elementData, prevView, view);
}
/**
 * @param {?} vcElementData
 * @param {?} view
 * @return {?}
 */
function attachProjectedView(vcElementData, view) {
    var /** @type {?} */ dvcElementData = declaredViewContainer(view);
    if (!dvcElementData || dvcElementData === vcElementData ||
        view.state & 16 /* IsProjectedView */) {
        return;
    }
    // Note: For performance reasons, we
    // - add a view to template._projectedViews only 1x throughout its lifetime,
    //   and remove it not until the view is destroyed.
    //   (hard, as when a parent view is attached/detached we would need to attach/detach all
    //    nested projected views as well, even accross component boundaries).
    // - don't track the insertion order of views in the projected views array
    //   (hard, as when the views of the same template are inserted different view containers)
    view.state |= 16 /* IsProjectedView */;
    var /** @type {?} */ projectedViews = dvcElementData.template._projectedViews;
    if (!projectedViews) {
        projectedViews = dvcElementData.template._projectedViews = [];
    }
    projectedViews.push(view);
    // Note: we are changing the NodeDef here as we cannot calculate
    // the fact whether a template is used for projection during compilation.
    markNodeAsProjectedTemplate(/** @type {?} */ ((view.parent)).def, /** @type {?} */ ((view.parentNodeDef)));
}
/**
 * @param {?} viewDef
 * @param {?} nodeDef
 * @return {?}
 */
function markNodeAsProjectedTemplate(viewDef, nodeDef) {
    if (nodeDef.flags & 4 /* ProjectedTemplate */) {
        return;
    }
    viewDef.nodeFlags |= 4 /* ProjectedTemplate */;
    nodeDef.flags |= 4 /* ProjectedTemplate */;
    var /** @type {?} */ parentNodeDef = nodeDef.parent;
    while (parentNodeDef) {
        parentNodeDef.childFlags |= 4 /* ProjectedTemplate */;
        parentNodeDef = parentNodeDef.parent;
    }
}
/**
 * @param {?} elementData
 * @param {?=} viewIndex
 * @return {?}
 */
function detachEmbeddedView(elementData, viewIndex) {
    var /** @type {?} */ embeddedViews = ((elementData.viewContainer))._embeddedViews;
    if (viewIndex == null || viewIndex >= embeddedViews.length) {
        viewIndex = embeddedViews.length - 1;
    }
    if (viewIndex < 0) {
        return null;
    }
    var /** @type {?} */ view = embeddedViews[viewIndex];
    view.viewContainerParent = null;
    removeFromArray(embeddedViews, viewIndex);
    // See attachProjectedView for why we don't update projectedViews here.
    Services.dirtyParentQueries(view);
    renderDetachView(view);
    return view;
}
/**
 * @param {?} view
 * @return {?}
 */
function detachProjectedView(view) {
    if (!(view.state & 16 /* IsProjectedView */)) {
        return;
    }
    var /** @type {?} */ dvcElementData = declaredViewContainer(view);
    if (dvcElementData) {
        var /** @type {?} */ projectedViews = dvcElementData.template._projectedViews;
        if (projectedViews) {
            removeFromArray(projectedViews, projectedViews.indexOf(view));
            Services.dirtyParentQueries(view);
        }
    }
}
/**
 * @param {?} elementData
 * @param {?} oldViewIndex
 * @param {?} newViewIndex
 * @return {?}
 */
function moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {
    var /** @type {?} */ embeddedViews = ((elementData.viewContainer))._embeddedViews;
    var /** @type {?} */ view = embeddedViews[oldViewIndex];
    removeFromArray(embeddedViews, oldViewIndex);
    if (newViewIndex == null) {
        newViewIndex = embeddedViews.length;
    }
    addToArray(embeddedViews, newViewIndex, view);
    // Note: Don't need to change projectedViews as the order in there
    // as always invalid...
    Services.dirtyParentQueries(view);
    renderDetachView(view);
    var /** @type {?} */ prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;
    renderAttachEmbeddedView(elementData, prevView, view);
    return view;
}
/**
 * @param {?} elementData
 * @param {?} prevView
 * @param {?} view
 * @return {?}
 */
function renderAttachEmbeddedView(elementData, prevView, view) {
    var /** @type {?} */ prevRenderNode = prevView ? renderNode(prevView, /** @type {?} */ ((prevView.def.lastRenderRootNode))) :
        elementData.renderElement;
    var /** @type {?} */ parentNode = view.renderer.parentNode(prevRenderNode);
    var /** @type {?} */ nextSibling = view.renderer.nextSibling(prevRenderNode);
    // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!
    // However, browsers automatically do `appendChild` when there is no `nextSibling`.
    visitRootRenderNodes(view, 2 /* InsertBefore */, parentNode, nextSibling, undefined);
}
/**
 * @param {?} view
 * @return {?}
 */
function renderDetachView(view) {
    visitRootRenderNodes(view, 3 /* RemoveChild */, null, null, undefined);
}
/**
 * @param {?} arr
 * @param {?} index
 * @param {?} value
 * @return {?}
 */
function addToArray(arr, index, value) {
    // perf: array.push is faster than array.splice!
    if (index >= arr.length) {
        arr.push(value);
    }
    else {
        arr.splice(index, 0, value);
    }
}
/**
 * @param {?} arr
 * @param {?} index
 * @return {?}
 */
function removeFromArray(arr, index) {
    // perf: array.pop is faster than array.splice!
    if (index >= arr.length - 1) {
        arr.pop();
    }
    else {
        arr.splice(index, 1);
    }
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var EMPTY_CONTEXT = new Object();
/**
 * @param {?} selector
 * @param {?} componentType
 * @param {?} viewDefFactory
 * @param {?} inputs
 * @param {?} outputs
 * @param {?} ngContentSelectors
 * @return {?}
 */
function createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {
    return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);
}
/**
 * @param {?} componentFactory
 * @return {?}
 */
function getComponentViewDefinitionFactory(componentFactory) {
    return ((componentFactory)).viewDefFactory;
}
var ComponentFactory_ = (function (_super) {
    __extends(ComponentFactory_, _super);
    /**
     * @param {?} selector
     * @param {?} componentType
     * @param {?} viewDefFactory
     * @param {?} _inputs
     * @param {?} _outputs
     * @param {?} ngContentSelectors
     */
    function ComponentFactory_(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {
        var _this = 
        // Attention: this ctor is called as top level function.
        // Putting any logic in here will destroy closure tree shaking!
        _super.call(this) || this;
        _this.selector = selector;
        _this.componentType = componentType;
        _this._inputs = _inputs;
        _this._outputs = _outputs;
        _this.ngContentSelectors = ngContentSelectors;
        _this.viewDefFactory = viewDefFactory;
        return _this;
    }
    Object.defineProperty(ComponentFactory_.prototype, "inputs", {
        /**
         * @return {?}
         */
        get: function () {
            var /** @type {?} */ inputsArr = [];
            var /** @type {?} */ inputs = ((this._inputs));
            for (var /** @type {?} */ propName in inputs) {
                var /** @type {?} */ templateName = inputs[propName];
                inputsArr.push({ propName: propName, templateName: templateName });
            }
            return inputsArr;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComponentFactory_.prototype, "outputs", {
        /**
         * @return {?}
         */
        get: function () {
            var /** @type {?} */ outputsArr = [];
            for (var /** @type {?} */ propName in this._outputs) {
                var /** @type {?} */ templateName = this._outputs[propName];
                outputsArr.push({ propName: propName, templateName: templateName });
            }
            return outputsArr;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Creates a new component.
     * @param {?} injector
     * @param {?=} projectableNodes
     * @param {?=} rootSelectorOrNode
     * @param {?=} ngModule
     * @return {?}
     */
    ComponentFactory_.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {
        if (!ngModule) {
            throw new Error('ngModule should be provided');
        }
        var /** @type {?} */ viewDef = resolveDefinition(this.viewDefFactory);
        var /** @type {?} */ componentNodeIndex = ((((viewDef.nodes[0].element)).componentProvider)).index;
        var /** @type {?} */ view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);
        var /** @type {?} */ component = asProviderData(view, componentNodeIndex).instance;
        if (rootSelectorOrNode) {
            view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION.full);
        }
        return new ComponentRef_(view, new ViewRef_(view), component);
    };
    return ComponentFactory_;
}(ComponentFactory));
var ComponentRef_ = (function (_super) {
    __extends(ComponentRef_, _super);
    /**
     * @param {?} _view
     * @param {?} _viewRef
     * @param {?} _component
     */
    function ComponentRef_(_view, _viewRef, _component) {
        var _this = _super.call(this) || this;
        _this._view = _view;
        _this._viewRef = _viewRef;
        _this._component = _component;
        _this._elDef = _this._view.def.nodes[0];
        return _this;
    }
    Object.defineProperty(ComponentRef_.prototype, "location", {
        /**
         * @return {?}
         */
        get: function () {
            return new ElementRef(asElementData(this._view, this._elDef.index).renderElement);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComponentRef_.prototype, "injector", {
        /**
         * @return {?}
         */
        get: function () { return new Injector_(this._view, this._elDef); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComponentRef_.prototype, "instance", {
        /**
         * @return {?}
         */
        get: function () { return this._component; },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(ComponentRef_.prototype, "hostView", {
        /**
         * @return {?}
         */
        get: function () { return this._viewRef; },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(ComponentRef_.prototype, "changeDetectorRef", {
        /**
         * @return {?}
         */
        get: function () { return this._viewRef; },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(ComponentRef_.prototype, "componentType", {
        /**
         * @return {?}
         */
        get: function () { return (this._component.constructor); },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ComponentRef_.prototype.destroy = function () { this._viewRef.destroy(); };
    /**
     * @param {?} callback
     * @return {?}
     */
    ComponentRef_.prototype.onDestroy = function (callback) { this._viewRef.onDestroy(callback); };
    return ComponentRef_;
}(ComponentRef));
/**
 * @param {?} view
 * @param {?} elDef
 * @param {?} elData
 * @return {?}
 */
function createViewContainerData(view, elDef, elData) {
    return new ViewContainerRef_(view, elDef, elData);
}
var ViewContainerRef_ = (function () {
    /**
     * @param {?} _view
     * @param {?} _elDef
     * @param {?} _data
     */
    function ViewContainerRef_(_view, _elDef, _data) {
        this._view = _view;
        this._elDef = _elDef;
        this._data = _data;
        /**
         * \@internal
         */
        this._embeddedViews = [];
    }
    Object.defineProperty(ViewContainerRef_.prototype, "element", {
        /**
         * @return {?}
         */
        get: function () { return new ElementRef(this._data.renderElement); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewContainerRef_.prototype, "injector", {
        /**
         * @return {?}
         */
        get: function () { return new Injector_(this._view, this._elDef); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewContainerRef_.prototype, "parentInjector", {
        /**
         * @return {?}
         */
        get: function () {
            var /** @type {?} */ view = this._view;
            var /** @type {?} */ elDef = this._elDef.parent;
            while (!elDef && view) {
                elDef = viewParentEl(view);
                view = ((view.parent));
            }
            return view ? new Injector_(view, elDef) : new Injector_(this._view, null);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ViewContainerRef_.prototype.clear = function () {
        var /** @type {?} */ len = this._embeddedViews.length;
        for (var /** @type {?} */ i = len - 1; i >= 0; i--) {
            var /** @type {?} */ view = ((detachEmbeddedView(this._data, i)));
            Services.destroyView(view);
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    ViewContainerRef_.prototype.get = function (index) {
        var /** @type {?} */ view = this._embeddedViews[index];
        if (view) {
            var /** @type {?} */ ref = new ViewRef_(view);
            ref.attachToViewContainerRef(this);
            return ref;
        }
        return null;
    };
    Object.defineProperty(ViewContainerRef_.prototype, "length", {
        /**
         * @return {?}
         */
        get: function () { return this._embeddedViews.length; },
        enumerable: true,
        configurable: true
    });
    
    /**
     * @template C
     * @param {?} templateRef
     * @param {?=} context
     * @param {?=} index
     * @return {?}
     */
    ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) {
        var /** @type {?} */ viewRef = templateRef.createEmbeddedView(context || ({}));
        this.insert(viewRef, index);
        return viewRef;
    };
    /**
     * @template C
     * @param {?} componentFactory
     * @param {?=} index
     * @param {?=} injector
     * @param {?=} projectableNodes
     * @param {?=} ngModuleRef
     * @return {?}
     */
    ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModuleRef) {
        var /** @type {?} */ contextInjector = injector || this.parentInjector;
        if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {
            ngModuleRef = contextInjector.get(NgModuleRef);
        }
        var /** @type {?} */ componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);
        this.insert(componentRef.hostView, index);
        return componentRef;
    };
    /**
     * @param {?} viewRef
     * @param {?=} index
     * @return {?}
     */
    ViewContainerRef_.prototype.insert = function (viewRef, index) {
        var /** @type {?} */ viewRef_ = (viewRef);
        var /** @type {?} */ viewData = viewRef_._view;
        attachEmbeddedView(this._view, this._data, index, viewData);
        viewRef_.attachToViewContainerRef(this);
        return viewRef;
    };
    /**
     * @param {?} viewRef
     * @param {?} currentIndex
     * @return {?}
     */
    ViewContainerRef_.prototype.move = function (viewRef, currentIndex) {
        var /** @type {?} */ previousIndex = this._embeddedViews.indexOf(viewRef._view);
        moveEmbeddedView(this._data, previousIndex, currentIndex);
        return viewRef;
    };
    /**
     * @param {?} viewRef
     * @return {?}
     */
    ViewContainerRef_.prototype.indexOf = function (viewRef) {
        return this._embeddedViews.indexOf(((viewRef))._view);
    };
    /**
     * @param {?=} index
     * @return {?}
     */
    ViewContainerRef_.prototype.remove = function (index) {
        var /** @type {?} */ viewData = detachEmbeddedView(this._data, index);
        if (viewData) {
            Services.destroyView(viewData);
        }
    };
    /**
     * @param {?=} index
     * @return {?}
     */
    ViewContainerRef_.prototype.detach = function (index) {
        var /** @type {?} */ view = detachEmbeddedView(this._data, index);
        return view ? new ViewRef_(view) : null;
    };
    return ViewContainerRef_;
}());
/**
 * @param {?} view
 * @return {?}
 */
function createChangeDetectorRef(view) {
    return new ViewRef_(view);
}
var ViewRef_ = (function () {
    /**
     * @param {?} _view
     */
    function ViewRef_(_view) {
        this._view = _view;
        this._viewContainerRef = null;
        this._appRef = null;
    }
    Object.defineProperty(ViewRef_.prototype, "rootNodes", {
        /**
         * @return {?}
         */
        get: function () { return rootRenderNodes(this._view); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewRef_.prototype, "context", {
        /**
         * @return {?}
         */
        get: function () { return this._view.context; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewRef_.prototype, "destroyed", {
        /**
         * @return {?}
         */
        get: function () { return (this._view.state & 128 /* Destroyed */) !== 0; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ViewRef_.prototype.markForCheck = function () { markParentViewsForCheck(this._view); };
    /**
     * @return {?}
     */
    ViewRef_.prototype.detach = function () { this._view.state &= ~4 /* Attached */; };
    /**
     * @return {?}
     */
    ViewRef_.prototype.detectChanges = function () {
        var /** @type {?} */ fs = this._view.root.rendererFactory;
        if (fs.begin) {
            fs.begin();
        }
        Services.checkAndUpdateView(this._view);
        if (fs.end) {
            fs.end();
        }
    };
    /**
     * @return {?}
     */
    ViewRef_.prototype.checkNoChanges = function () { Services.checkNoChangesView(this._view); };
    /**
     * @return {?}
     */
    ViewRef_.prototype.reattach = function () { this._view.state |= 4 /* Attached */; };
    /**
     * @param {?} callback
     * @return {?}
     */
    ViewRef_.prototype.onDestroy = function (callback) {
        if (!this._view.disposables) {
            this._view.disposables = [];
        }
        this._view.disposables.push(/** @type {?} */ (callback));
    };
    /**
     * @return {?}
     */
    ViewRef_.prototype.destroy = function () {
        if (this._appRef) {
            this._appRef.detachView(this);
        }
        else if (this._viewContainerRef) {
            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));
        }
        Services.destroyView(this._view);
    };
    /**
     * @return {?}
     */
    ViewRef_.prototype.detachFromAppRef = function () {
        this._appRef = null;
        renderDetachView(this._view);
        Services.dirtyParentQueries(this._view);
    };
    /**
     * @param {?} appRef
     * @return {?}
     */
    ViewRef_.prototype.attachToAppRef = function (appRef) {
        if (this._viewContainerRef) {
            throw new Error('This view is already attached to a ViewContainer!');
        }
        this._appRef = appRef;
    };
    /**
     * @param {?} vcRef
     * @return {?}
     */
    ViewRef_.prototype.attachToViewContainerRef = function (vcRef) {
        if (this._appRef) {
            throw new Error('This view is already attached directly to the ApplicationRef!');
        }
        this._viewContainerRef = vcRef;
    };
    return ViewRef_;
}());
/**
 * @param {?} view
 * @param {?} def
 * @return {?}
 */
function createTemplateData(view, def) {
    return new TemplateRef_(view, def);
}
var TemplateRef_ = (function (_super) {
    __extends(TemplateRef_, _super);
    /**
     * @param {?} _parentView
     * @param {?} _def
     */
    function TemplateRef_(_parentView, _def) {
        var _this = _super.call(this) || this;
        _this._parentView = _parentView;
        _this._def = _def;
        return _this;
    }
    /**
     * @param {?} context
     * @return {?}
     */
    TemplateRef_.prototype.createEmbeddedView = function (context) {
        return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, /** @type {?} */ ((((this._def.element)).template)), context));
    };
    Object.defineProperty(TemplateRef_.prototype, "elementRef", {
        /**
         * @return {?}
         */
        get: function () {
            return new ElementRef(asElementData(this._parentView, this._def.index).renderElement);
        },
        enumerable: true,
        configurable: true
    });
    return TemplateRef_;
}(TemplateRef));
/**
 * @param {?} view
 * @param {?} elDef
 * @return {?}
 */
function createInjector(view, elDef) {
    return new Injector_(view, elDef);
}
var Injector_ = (function () {
    /**
     * @param {?} view
     * @param {?} elDef
     */
    function Injector_(view, elDef) {
        this.view = view;
        this.elDef = elDef;
    }
    /**
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */
    Injector_.prototype.get = function (token, notFoundValue) {
        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }
        var /** @type {?} */ allowPrivateServices = this.elDef ? (this.elDef.flags & 33554432 /* ComponentView */) !== 0 : false;
        return Services.resolveDep(this.view, this.elDef, allowPrivateServices, { flags: 0 /* None */, token: token, tokenKey: tokenKey(token) }, notFoundValue);
    };
    return Injector_;
}());
/**
 * @param {?} view
 * @param {?} index
 * @return {?}
 */
function nodeValue(view, index) {
    var /** @type {?} */ def = view.def.nodes[index];
    if (def.flags & 1 /* TypeElement */) {
        var /** @type {?} */ elData = asElementData(view, def.index);
        return ((def.element)).template ? elData.template : elData.renderElement;
    }
    else if (def.flags & 2 /* TypeText */) {
        return asTextData(view, def.index).renderText;
    }
    else if (def.flags & (20224 /* CatProvider */ | 16 /* TypePipe */)) {
        return asProviderData(view, def.index).instance;
    }
    throw new Error("Illegal state: read nodeValue for node index " + index);
}
/**
 * @param {?} view
 * @return {?}
 */
function createRendererV1(view) {
    return new RendererAdapter(view.renderer);
}
var RendererAdapter = (function () {
    /**
     * @param {?} delegate
     */
    function RendererAdapter(delegate) {
        this.delegate = delegate;
    }
    /**
     * @param {?} selectorOrNode
     * @return {?}
     */
    RendererAdapter.prototype.selectRootElement = function (selectorOrNode) {
        return this.delegate.selectRootElement(selectorOrNode);
    };
    /**
     * @param {?} parent
     * @param {?} namespaceAndName
     * @return {?}
     */
    RendererAdapter.prototype.createElement = function (parent, namespaceAndName) {
        var _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];
        var /** @type {?} */ el = this.delegate.createElement(name, ns);
        if (parent) {
            this.delegate.appendChild(parent, el);
        }
        return el;
    };
    /**
     * @param {?} hostElement
     * @return {?}
     */
    RendererAdapter.prototype.createViewRoot = function (hostElement) { return hostElement; };
    /**
     * @param {?} parentElement
     * @return {?}
     */
    RendererAdapter.prototype.createTemplateAnchor = function (parentElement) {
        var /** @type {?} */ comment = this.delegate.createComment('');
        if (parentElement) {
            this.delegate.appendChild(parentElement, comment);
        }
        return comment;
    };
    /**
     * @param {?} parentElement
     * @param {?} value
     * @return {?}
     */
    RendererAdapter.prototype.createText = function (parentElement, value) {
        var /** @type {?} */ node = this.delegate.createText(value);
        if (parentElement) {
            this.delegate.appendChild(parentElement, node);
        }
        return node;
    };
    /**
     * @param {?} parentElement
     * @param {?} nodes
     * @return {?}
     */
    RendererAdapter.prototype.projectNodes = function (parentElement, nodes) {
        for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
            this.delegate.appendChild(parentElement, nodes[i]);
        }
    };
    /**
     * @param {?} node
     * @param {?} viewRootNodes
     * @return {?}
     */
    RendererAdapter.prototype.attachViewAfter = function (node, viewRootNodes) {
        var /** @type {?} */ parentElement = this.delegate.parentNode(node);
        var /** @type {?} */ nextSibling = this.delegate.nextSibling(node);
        for (var /** @type {?} */ i = 0; i < viewRootNodes.length; i++) {
            this.delegate.insertBefore(parentElement, viewRootNodes[i], nextSibling);
        }
    };
    /**
     * @param {?} viewRootNodes
     * @return {?}
     */
    RendererAdapter.prototype.detachView = function (viewRootNodes) {
        for (var /** @type {?} */ i = 0; i < viewRootNodes.length; i++) {
            var /** @type {?} */ node = viewRootNodes[i];
            var /** @type {?} */ parentElement = this.delegate.parentNode(node);
            this.delegate.removeChild(parentElement, node);
        }
    };
    /**
     * @param {?} hostElement
     * @param {?} viewAllNodes
     * @return {?}
     */
    RendererAdapter.prototype.destroyView = function (hostElement, viewAllNodes) {
        for (var /** @type {?} */ i = 0; i < viewAllNodes.length; i++) {
            ((this.delegate.destroyNode))(viewAllNodes[i]);
        }
    };
    /**
     * @param {?} renderElement
     * @param {?} name
     * @param {?} callback
     * @return {?}
     */
    RendererAdapter.prototype.listen = function (renderElement, name, callback) {
        return this.delegate.listen(renderElement, name, /** @type {?} */ (callback));
    };
    /**
     * @param {?} target
     * @param {?} name
     * @param {?} callback
     * @return {?}
     */
    RendererAdapter.prototype.listenGlobal = function (target, name, callback) {
        return this.delegate.listen(target, name, /** @type {?} */ (callback));
    };
    /**
     * @param {?} renderElement
     * @param {?} propertyName
     * @param {?} propertyValue
     * @return {?}
     */
    RendererAdapter.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {
        this.delegate.setProperty(renderElement, propertyName, propertyValue);
    };
    /**
     * @param {?} renderElement
     * @param {?} namespaceAndName
     * @param {?} attributeValue
     * @return {?}
     */
    RendererAdapter.prototype.setElementAttribute = function (renderElement, namespaceAndName, attributeValue) {
        var _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];
        if (attributeValue != null) {
            this.delegate.setAttribute(renderElement, name, attributeValue, ns);
        }
        else {
            this.delegate.removeAttribute(renderElement, name, ns);
        }
    };
    /**
     * @param {?} renderElement
     * @param {?} propertyName
     * @param {?} propertyValue
     * @return {?}
     */
    RendererAdapter.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };
    /**
     * @param {?} renderElement
     * @param {?} className
     * @param {?} isAdd
     * @return {?}
     */
    RendererAdapter.prototype.setElementClass = function (renderElement, className, isAdd) {
        if (isAdd) {
            this.delegate.addClass(renderElement, className);
        }
        else {
            this.delegate.removeClass(renderElement, className);
        }
    };
    /**
     * @param {?} renderElement
     * @param {?} styleName
     * @param {?} styleValue
     * @return {?}
     */
    RendererAdapter.prototype.setElementStyle = function (renderElement, styleName, styleValue) {
        if (styleValue != null) {
            this.delegate.setStyle(renderElement, styleName, styleValue);
        }
        else {
            this.delegate.removeStyle(renderElement, styleName);
        }
    };
    /**
     * @param {?} renderElement
     * @param {?} methodName
     * @param {?} args
     * @return {?}
     */
    RendererAdapter.prototype.invokeElementMethod = function (renderElement, methodName, args) {
        ((renderElement))[methodName].apply(renderElement, args);
    };
    /**
     * @param {?} renderNode
     * @param {?} text
     * @return {?}
     */
    RendererAdapter.prototype.setText = function (renderNode$$1, text) { this.delegate.setValue(renderNode$$1, text); };
    /**
     * @return {?}
     */
    RendererAdapter.prototype.animate = function () { throw new Error('Renderer.animate is no longer supported!'); };
    return RendererAdapter;
}());
/**
 * @param {?} moduleType
 * @param {?} parent
 * @param {?} bootstrapComponents
 * @param {?} def
 * @return {?}
 */
function createNgModuleRef(moduleType, parent, bootstrapComponents, def) {
    return new NgModuleRef_(moduleType, parent, bootstrapComponents, def);
}
var NgModuleRef_ = (function () {
    /**
     * @param {?} _moduleType
     * @param {?} _parent
     * @param {?} _bootstrapComponents
     * @param {?} _def
     */
    function NgModuleRef_(_moduleType, _parent, _bootstrapComponents, _def) {
        this._moduleType = _moduleType;
        this._parent = _parent;
        this._bootstrapComponents = _bootstrapComponents;
        this._def = _def;
        this._destroyListeners = [];
        this._destroyed = false;
        initNgModule(this);
    }
    /**
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */
    NgModuleRef_.prototype.get = function (token, notFoundValue) {
        if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }
        return resolveNgModuleDep(this, { token: token, tokenKey: tokenKey(token), flags: 0 /* None */ }, notFoundValue);
    };
    Object.defineProperty(NgModuleRef_.prototype, "instance", {
        /**
         * @return {?}
         */
        get: function () { return this.get(this._moduleType); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgModuleRef_.prototype, "componentFactoryResolver", {
        /**
         * @return {?}
         */
        get: function () { return this.get(ComponentFactoryResolver); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgModuleRef_.prototype, "injector", {
        /**
         * @return {?}
         */
        get: function () { return this; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgModuleRef_.prototype.destroy = function () {
        if (this._destroyed) {
            throw new Error("The ng module " + stringify(this.instance.constructor) + " has already been destroyed.");
        }
        this._destroyed = true;
        callNgModuleLifecycle(this, 131072 /* OnDestroy */);
        this._destroyListeners.forEach(function (listener) { return listener(); });
    };
    /**
     * @param {?} callback
     * @return {?}
     */
    NgModuleRef_.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };
    return NgModuleRef_;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var RendererV1TokenKey = tokenKey(Renderer);
var Renderer2TokenKey = tokenKey(Renderer2);
var ElementRefTokenKey = tokenKey(ElementRef);
var ViewContainerRefTokenKey = tokenKey(ViewContainerRef);
var TemplateRefTokenKey = tokenKey(TemplateRef);
var ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);
var InjectorRefTokenKey = tokenKey(Injector);
var NOT_CREATED = new Object();
/**
 * @param {?} flags
 * @param {?} matchedQueries
 * @param {?} childCount
 * @param {?} ctor
 * @param {?} deps
 * @param {?=} props
 * @param {?=} outputs
 * @return {?}
 */
function directiveDef(flags, matchedQueries, childCount, ctor, deps, props, outputs) {
    var /** @type {?} */ bindings = [];
    if (props) {
        for (var /** @type {?} */ prop in props) {
            var _a = props[prop], bindingIndex = _a[0], nonMinifiedName = _a[1];
            bindings[bindingIndex] = {
                flags: 8 /* TypeProperty */,
                name: prop, nonMinifiedName: nonMinifiedName,
                ns: null,
                securityContext: null,
                suffix: null
            };
        }
    }
    var /** @type {?} */ outputDefs = [];
    if (outputs) {
        for (var /** @type {?} */ propName in outputs) {
            outputDefs.push({ type: 1 /* DirectiveOutput */, propName: propName, target: null, eventName: outputs[propName] });
        }
    }
    flags |= 16384 /* TypeDirective */;
    return _def(flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);
}
/**
 * @param {?} flags
 * @param {?} ctor
 * @param {?} deps
 * @return {?}
 */
function pipeDef(flags, ctor, deps) {
    flags |= 16 /* TypePipe */;
    return _def(flags, null, 0, ctor, ctor, deps);
}
/**
 * @param {?} flags
 * @param {?} matchedQueries
 * @param {?} token
 * @param {?} value
 * @param {?} deps
 * @return {?}
 */
function providerDef(flags, matchedQueries, token, value, deps) {
    return _def(flags, matchedQueries, 0, token, value, deps);
}
/**
 * @param {?} flags
 * @param {?} matchedQueriesDsl
 * @param {?} childCount
 * @param {?} token
 * @param {?} value
 * @param {?} deps
 * @param {?=} bindings
 * @param {?=} outputs
 * @return {?}
 */
function _def(flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {
    var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;
    if (!outputs) {
        outputs = [];
    }
    if (!bindings) {
        bindings = [];
    }
    var /** @type {?} */ depDefs = splitDepsDsl(deps);
    return {
        // will bet set by the view definition
        index: -1,
        parent: null,
        renderParent: null,
        bindingIndex: -1,
        outputIndex: -1,
        // regular values
        flags: flags,
        childFlags: 0,
        directChildFlags: 0,
        childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references,
        ngContentIndex: -1, childCount: childCount, bindings: bindings,
        bindingFlags: calcBindingFlags(bindings), outputs: outputs,
        element: null,
        provider: { token: token, value: value, deps: depDefs },
        text: null,
        query: null,
        ngContent: null
    };
}
/**
 * @param {?} view
 * @param {?} def
 * @return {?}
 */
function createProviderInstance(view, def) {
    return def.flags & 4096 /* LazyProvider */ ? NOT_CREATED : _createProviderInstance(view, def);
}
/**
 * @param {?} view
 * @param {?} def
 * @return {?}
 */
function createPipeInstance(view, def) {
    // deps are looked up from component.
    var /** @type {?} */ compView = view;
    while (compView.parent && !isComponentView(compView)) {
        compView = compView.parent;
    }
    // pipes can see the private services of the component
    var /** @type {?} */ allowPrivateServices = true;
    // pipes are always eager and classes!
    return createClass(/** @type {?} */ ((compView.parent)), /** @type {?} */ ((viewParentEl(compView))), allowPrivateServices, /** @type {?} */ ((def.provider)).value, /** @type {?} */ ((def.provider)).deps);
}
/**
 * @param {?} view
 * @param {?} def
 * @return {?}
 */
function createDirectiveInstance(view, def) {
    // components can see other private services, other directives can't.
    var /** @type {?} */ allowPrivateServices = (def.flags & 32768 /* Component */) > 0;
    // directives are always eager and classes!
    var /** @type {?} */ instance = createClass(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((def.provider)).value, /** @type {?} */ ((def.provider)).deps);
    if (def.outputs.length) {
        for (var /** @type {?} */ i = 0; i < def.outputs.length; i++) {
            var /** @type {?} */ output = def.outputs[i];
            var /** @type {?} */ subscription = instance[((output.propName))].subscribe(eventHandlerClosure(view, /** @type {?} */ ((def.parent)).index, output.eventName)); /** @type {?} */
            ((view.disposables))[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);
        }
    }
    return instance;
}
/**
 * @param {?} view
 * @param {?} index
 * @param {?} eventName
 * @return {?}
 */
function eventHandlerClosure(view, index, eventName) {
    return function (event) {
        try {
            return dispatchEvent(view, index, eventName, event);
        }
        catch (e) {
            // Attention: Don't rethrow, as it would cancel Observable subscriptions!
            view.root.errorHandler.handleError(e);
        }
    };
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} v0
 * @param {?} v1
 * @param {?} v2
 * @param {?} v3
 * @param {?} v4
 * @param {?} v5
 * @param {?} v6
 * @param {?} v7
 * @param {?} v8
 * @param {?} v9
 * @return {?}
 */
function checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    var /** @type {?} */ providerData = asProviderData(view, def.index);
    var /** @type {?} */ directive = providerData.instance;
    var /** @type {?} */ changed = false;
    var /** @type {?} */ changes = ((undefined));
    var /** @type {?} */ bindLen = def.bindings.length;
    if (bindLen > 0 && checkBinding(view, def, 0, v0)) {
        changed = true;
        changes = updateProp(view, providerData, def, 0, v0, changes);
    }
    if (bindLen > 1 && checkBinding(view, def, 1, v1)) {
        changed = true;
        changes = updateProp(view, providerData, def, 1, v1, changes);
    }
    if (bindLen > 2 && checkBinding(view, def, 2, v2)) {
        changed = true;
        changes = updateProp(view, providerData, def, 2, v2, changes);
    }
    if (bindLen > 3 && checkBinding(view, def, 3, v3)) {
        changed = true;
        changes = updateProp(view, providerData, def, 3, v3, changes);
    }
    if (bindLen > 4 && checkBinding(view, def, 4, v4)) {
        changed = true;
        changes = updateProp(view, providerData, def, 4, v4, changes);
    }
    if (bindLen > 5 && checkBinding(view, def, 5, v5)) {
        changed = true;
        changes = updateProp(view, providerData, def, 5, v5, changes);
    }
    if (bindLen > 6 && checkBinding(view, def, 6, v6)) {
        changed = true;
        changes = updateProp(view, providerData, def, 6, v6, changes);
    }
    if (bindLen > 7 && checkBinding(view, def, 7, v7)) {
        changed = true;
        changes = updateProp(view, providerData, def, 7, v7, changes);
    }
    if (bindLen > 8 && checkBinding(view, def, 8, v8)) {
        changed = true;
        changes = updateProp(view, providerData, def, 8, v8, changes);
    }
    if (bindLen > 9 && checkBinding(view, def, 9, v9)) {
        changed = true;
        changes = updateProp(view, providerData, def, 9, v9, changes);
    }
    if (changes) {
        directive.ngOnChanges(changes);
    }
    if ((view.state & 2 /* FirstCheck */) && (def.flags & 65536 /* OnInit */)) {
        directive.ngOnInit();
    }
    if (def.flags & 262144 /* DoCheck */) {
        directive.ngDoCheck();
    }
    return changed;
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} values
 * @return {?}
 */
function checkAndUpdateDirectiveDynamic(view, def, values) {
    var /** @type {?} */ providerData = asProviderData(view, def.index);
    var /** @type {?} */ directive = providerData.instance;
    var /** @type {?} */ changed = false;
    var /** @type {?} */ changes = ((undefined));
    for (var /** @type {?} */ i = 0; i < values.length; i++) {
        if (checkBinding(view, def, i, values[i])) {
            changed = true;
            changes = updateProp(view, providerData, def, i, values[i], changes);
        }
    }
    if (changes) {
        directive.ngOnChanges(changes);
    }
    if ((view.state & 2 /* FirstCheck */) && (def.flags & 65536 /* OnInit */)) {
        directive.ngOnInit();
    }
    if (def.flags & 262144 /* DoCheck */) {
        directive.ngDoCheck();
    }
    return changed;
}
/**
 * @param {?} view
 * @param {?} def
 * @return {?}
 */
function _createProviderInstance(view, def) {
    // private services can see other private services
    var /** @type {?} */ allowPrivateServices = (def.flags & 8192 /* PrivateProvider */) > 0;
    var /** @type {?} */ providerDef = def.provider;
    var /** @type {?} */ injectable;
    switch (def.flags & 201347067 /* Types */) {
        case 512 /* TypeClassProvider */:
            injectable = createClass(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).value, /** @type {?} */ ((providerDef)).deps);
            break;
        case 1024 /* TypeFactoryProvider */:
            injectable = callFactory(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).value, /** @type {?} */ ((providerDef)).deps);
            break;
        case 2048 /* TypeUseExistingProvider */:
            injectable = resolveDep(view, /** @type {?} */ ((def.parent)), allowPrivateServices, /** @type {?} */ ((providerDef)).deps[0]);
            break;
        case 256 /* TypeValueProvider */:
            injectable = ((providerDef)).value;
            break;
    }
    return injectable;
}
/**
 * @param {?} view
 * @param {?} elDef
 * @param {?} allowPrivateServices
 * @param {?} ctor
 * @param {?} deps
 * @return {?}
 */
function createClass(view, elDef, allowPrivateServices, ctor, deps) {
    var /** @type {?} */ len = deps.length;
    var /** @type {?} */ injectable;
    switch (len) {
        case 0:
            injectable = new ctor();
            break;
        case 1:
            injectable = new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));
            break;
        case 2:
            injectable = new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));
            break;
        case 3:
            injectable = new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));
            break;
        default:
            var /** @type {?} */ depValues = new Array(len);
            for (var /** @type {?} */ i = 0; i < len; i++) {
                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);
            }
            injectable = new (ctor.bind.apply(ctor, [void 0].concat(depValues)))();
    }
    return injectable;
}
/**
 * @param {?} view
 * @param {?} elDef
 * @param {?} allowPrivateServices
 * @param {?} factory
 * @param {?} deps
 * @return {?}
 */
function callFactory(view, elDef, allowPrivateServices, factory, deps) {
    var /** @type {?} */ len = deps.length;
    var /** @type {?} */ injectable;
    switch (len) {
        case 0:
            injectable = factory();
            break;
        case 1:
            injectable = factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));
            break;
        case 2:
            injectable = factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));
            break;
        case 3:
            injectable = factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));
            break;
        default:
            var /** @type {?} */ depValues = Array(len);
            for (var /** @type {?} */ i = 0; i < len; i++) {
                depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);
            }
            injectable = factory.apply(void 0, depValues);
    }
    return injectable;
}
// This default value is when checking the hierarchy for a token.
//
// It means both:
// - the token is not provided by the current injector,
// - only the element injectors should be checked (ie do not check module injectors
//
//          mod1
//         /
//       el1   mod2
//         \  /
//         el2
//
// When requesting el2.injector.get(token), we should check in the following order and return the
// first found value:
// - el2.injector.get(token, default)
// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module
// - mod2.injector.get(token, default)
var NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};
/**
 * @param {?} view
 * @param {?} elDef
 * @param {?} allowPrivateServices
 * @param {?} depDef
 * @param {?=} notFoundValue
 * @return {?}
 */
function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue) {
    if (notFoundValue === void 0) { notFoundValue = Injector.THROW_IF_NOT_FOUND; }
    if (depDef.flags & 8 /* Value */) {
        return depDef.token;
    }
    var /** @type {?} */ startView = view;
    if (depDef.flags & 2 /* Optional */) {
        notFoundValue = null;
    }
    var /** @type {?} */ tokenKey$$1 = depDef.tokenKey;
    if (tokenKey$$1 === ChangeDetectorRefTokenKey) {
        // directives on the same element as a component should be able to control the change detector
        // of that component as well.
        allowPrivateServices = !!(elDef && ((elDef.element)).componentView);
    }
    if (elDef && (depDef.flags & 1 /* SkipSelf */)) {
        allowPrivateServices = false;
        elDef = ((elDef.parent));
    }
    while (view) {
        if (elDef) {
            switch (tokenKey$$1) {
                case RendererV1TokenKey: {
                    var /** @type {?} */ compView = findCompView(view, elDef, allowPrivateServices);
                    return createRendererV1(compView);
                }
                case Renderer2TokenKey: {
                    var /** @type {?} */ compView = findCompView(view, elDef, allowPrivateServices);
                    return compView.renderer;
                }
                case ElementRefTokenKey:
                    return new ElementRef(asElementData(view, elDef.index).renderElement);
                case ViewContainerRefTokenKey:
                    return asElementData(view, elDef.index).viewContainer;
                case TemplateRefTokenKey: {
                    if (((elDef.element)).template) {
                        return asElementData(view, elDef.index).template;
                    }
                    break;
                }
                case ChangeDetectorRefTokenKey: {
                    var /** @type {?} */ cdView = findCompView(view, elDef, allowPrivateServices);
                    return createChangeDetectorRef(cdView);
                }
                case InjectorRefTokenKey:
                    return createInjector(view, elDef);
                default:
                    var /** @type {?} */ providerDef_1 = (((allowPrivateServices ? ((elDef.element)).allProviders : ((elDef.element)).publicProviders)))[tokenKey$$1];
                    if (providerDef_1) {
                        var /** @type {?} */ providerData = asProviderData(view, providerDef_1.index);
                        if (providerData.instance === NOT_CREATED) {
                            providerData.instance = _createProviderInstance(view, providerDef_1);
                        }
                        return providerData.instance;
                    }
            }
        }
        allowPrivateServices = isComponentView(view);
        elDef = ((viewParentEl(view)));
        view = ((view.parent));
    }
    var /** @type {?} */ value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);
    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||
        notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {
        // Return the value from the root element injector when
        // - it provides it
        //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
        // - the module injector should not be checked
        //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
        return value;
    }
    return startView.root.ngModule.injector.get(depDef.token, notFoundValue);
}
/**
 * @param {?} view
 * @param {?} elDef
 * @param {?} allowPrivateServices
 * @return {?}
 */
function findCompView(view, elDef, allowPrivateServices) {
    var /** @type {?} */ compView;
    if (allowPrivateServices) {
        compView = asElementData(view, elDef.index).componentView;
    }
    else {
        compView = view;
        while (compView.parent && !isComponentView(compView)) {
            compView = compView.parent;
        }
    }
    return compView;
}
/**
 * @param {?} view
 * @param {?} providerData
 * @param {?} def
 * @param {?} bindingIdx
 * @param {?} value
 * @param {?} changes
 * @return {?}
 */
function updateProp(view, providerData, def, bindingIdx, value, changes) {
    if (def.flags & 32768 /* Component */) {
        var /** @type {?} */ compView = asElementData(view, /** @type {?} */ ((def.parent)).index).componentView;
        if (compView.def.flags & 2 /* OnPush */) {
            compView.state |= 8 /* ChecksEnabled */;
        }
    }
    var /** @type {?} */ binding = def.bindings[bindingIdx];
    var /** @type {?} */ propName = ((binding.name));
    // Note: This is still safe with Closure Compiler as
    // the user passed in the property name as an object has to `providerDef`,
    // so Closure Compiler will have renamed the property correctly already.
    providerData.instance[propName] = value;
    if (def.flags & 524288 /* OnChanges */) {
        changes = changes || {};
        var /** @type {?} */ oldValue = view.oldValues[def.bindingIndex + bindingIdx];
        if (oldValue instanceof WrappedValue) {
            oldValue = oldValue.wrapped;
        }
        var /** @type {?} */ binding_1 = def.bindings[bindingIdx];
        changes[((binding_1.nonMinifiedName))] =
            new SimpleChange(oldValue, value, (view.state & 2 /* FirstCheck */) !== 0);
    }
    view.oldValues[def.bindingIndex + bindingIdx] = value;
    return changes;
}
/**
 * @param {?} view
 * @param {?} lifecycles
 * @return {?}
 */
function callLifecycleHooksChildrenFirst(view, lifecycles) {
    if (!(view.def.nodeFlags & lifecycles)) {
        return;
    }
    var /** @type {?} */ nodes = view.def.nodes;
    for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
        var /** @type {?} */ nodeDef = nodes[i];
        var /** @type {?} */ parent = nodeDef.parent;
        if (!parent && nodeDef.flags & lifecycles) {
            // matching root node (e.g. a pipe)
            callProviderLifecycles(view, i, nodeDef.flags & lifecycles);
        }
        if ((nodeDef.childFlags & lifecycles) === 0) {
            // no child matches one of the lifecycles
            i += nodeDef.childCount;
        }
        while (parent && (parent.flags & 1 /* TypeElement */) &&
            i === parent.index + parent.childCount) {
            // last child of an element
            if (parent.directChildFlags & lifecycles) {
                callElementProvidersLifecycles(view, parent, lifecycles);
            }
            parent = parent.parent;
        }
    }
}
/**
 * @param {?} view
 * @param {?} elDef
 * @param {?} lifecycles
 * @return {?}
 */
function callElementProvidersLifecycles(view, elDef, lifecycles) {
    for (var /** @type {?} */ i = elDef.index + 1; i <= elDef.index + elDef.childCount; i++) {
        var /** @type {?} */ nodeDef = view.def.nodes[i];
        if (nodeDef.flags & lifecycles) {
            callProviderLifecycles(view, i, nodeDef.flags & lifecycles);
        }
        // only visit direct children
        i += nodeDef.childCount;
    }
}
/**
 * @param {?} view
 * @param {?} index
 * @param {?} lifecycles
 * @return {?}
 */
function callProviderLifecycles(view, index, lifecycles) {
    var /** @type {?} */ provider = asProviderData(view, index).instance;
    if (provider === NOT_CREATED) {
        return;
    }
    Services.setCurrentNode(view, index);
    if (lifecycles & 1048576 /* AfterContentInit */) {
        provider.ngAfterContentInit();
    }
    if (lifecycles & 2097152 /* AfterContentChecked */) {
        provider.ngAfterContentChecked();
    }
    if (lifecycles & 4194304 /* AfterViewInit */) {
        provider.ngAfterViewInit();
    }
    if (lifecycles & 8388608 /* AfterViewChecked */) {
        provider.ngAfterViewChecked();
    }
    if (lifecycles & 131072 /* OnDestroy */) {
        provider.ngOnDestroy();
    }
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} flags
 * @param {?} id
 * @param {?} bindings
 * @return {?}
 */
function queryDef(flags, id, bindings) {
    var /** @type {?} */ bindingDefs = [];
    for (var /** @type {?} */ propName in bindings) {
        var /** @type {?} */ bindingType = bindings[propName];
        bindingDefs.push({ propName: propName, bindingType: bindingType });
    }
    return {
        // will bet set by the view definition
        index: -1,
        parent: null,
        renderParent: null,
        bindingIndex: -1,
        outputIndex: -1,
        // regular values
        flags: flags,
        childFlags: 0,
        directChildFlags: 0,
        childMatchedQueries: 0,
        ngContentIndex: -1,
        matchedQueries: {},
        matchedQueryIds: 0,
        references: {},
        childCount: 0,
        bindings: [],
        bindingFlags: 0,
        outputs: [],
        element: null,
        provider: null,
        text: null,
        query: { id: id, filterId: filterQueryId(id), bindings: bindingDefs },
        ngContent: null
    };
}
/**
 * @return {?}
 */
function createQuery() {
    return new QueryList();
}
/**
 * @param {?} view
 * @return {?}
 */
function dirtyParentQueries(view) {
    var /** @type {?} */ queryIds = view.def.nodeMatchedQueries;
    while (view.parent && isEmbeddedView(view)) {
        var /** @type {?} */ tplDef = ((view.parentNodeDef));
        view = view.parent;
        // content queries
        var /** @type {?} */ end = tplDef.index + tplDef.childCount;
        for (var /** @type {?} */ i = 0; i <= end; i++) {
            var /** @type {?} */ nodeDef = view.def.nodes[i];
            if ((nodeDef.flags & 67108864 /* TypeContentQuery */) &&
                (nodeDef.flags & 536870912 /* DynamicQuery */) &&
                (((nodeDef.query)).filterId & queryIds) === ((nodeDef.query)).filterId) {
                asQueryList(view, i).setDirty();
            }
            if ((nodeDef.flags & 1 /* TypeElement */ && i + nodeDef.childCount < tplDef.index) ||
                !(nodeDef.childFlags & 67108864 /* TypeContentQuery */) ||
                !(nodeDef.childFlags & 536870912 /* DynamicQuery */)) {
                // skip elements that don't contain the template element or no query.
                i += nodeDef.childCount;
            }
        }
    }
    // view queries
    if (view.def.nodeFlags & 134217728 /* TypeViewQuery */) {
        for (var /** @type {?} */ i = 0; i < view.def.nodes.length; i++) {
            var /** @type {?} */ nodeDef = view.def.nodes[i];
            if ((nodeDef.flags & 134217728 /* TypeViewQuery */) && (nodeDef.flags & 536870912 /* DynamicQuery */)) {
                asQueryList(view, i).setDirty();
            }
            // only visit the root nodes
            i += nodeDef.childCount;
        }
    }
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @return {?}
 */
function checkAndUpdateQuery(view, nodeDef) {
    var /** @type {?} */ queryList = asQueryList(view, nodeDef.index);
    if (!queryList.dirty) {
        return;
    }
    var /** @type {?} */ directiveInstance;
    var /** @type {?} */ newValues = ((undefined));
    if (nodeDef.flags & 67108864 /* TypeContentQuery */) {
        var /** @type {?} */ elementDef_1 = ((((nodeDef.parent)).parent));
        newValues = calcQueryValues(view, elementDef_1.index, elementDef_1.index + elementDef_1.childCount, /** @type {?} */ ((nodeDef.query)), []);
        directiveInstance = asProviderData(view, /** @type {?} */ ((nodeDef.parent)).index).instance;
    }
    else if (nodeDef.flags & 134217728 /* TypeViewQuery */) {
        newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, /** @type {?} */ ((nodeDef.query)), []);
        directiveInstance = view.component;
    }
    queryList.reset(newValues);
    var /** @type {?} */ bindings = ((nodeDef.query)).bindings;
    var /** @type {?} */ notify = false;
    for (var /** @type {?} */ i = 0; i < bindings.length; i++) {
        var /** @type {?} */ binding = bindings[i];
        var /** @type {?} */ boundValue = void 0;
        switch (binding.bindingType) {
            case 0 /* First */:
                boundValue = queryList.first;
                break;
            case 1 /* All */:
                boundValue = queryList;
                notify = true;
                break;
        }
        directiveInstance[binding.propName] = boundValue;
    }
    if (notify) {
        queryList.notifyOnChanges();
    }
}
/**
 * @param {?} view
 * @param {?} startIndex
 * @param {?} endIndex
 * @param {?} queryDef
 * @param {?} values
 * @return {?}
 */
function calcQueryValues(view, startIndex, endIndex, queryDef, values) {
    for (var /** @type {?} */ i = startIndex; i <= endIndex; i++) {
        var /** @type {?} */ nodeDef = view.def.nodes[i];
        var /** @type {?} */ valueType = nodeDef.matchedQueries[queryDef.id];
        if (valueType != null) {
            values.push(getQueryValue(view, nodeDef, valueType));
        }
        if (nodeDef.flags & 1 /* TypeElement */ && ((nodeDef.element)).template &&
            (((((nodeDef.element)).template)).nodeMatchedQueries & queryDef.filterId) ===
                queryDef.filterId) {
            // check embedded views that were attached at the place of their template.
            var /** @type {?} */ elementData = asElementData(view, i);
            if (nodeDef.flags & 16777216 /* EmbeddedViews */) {
                var /** @type {?} */ embeddedViews = ((elementData.viewContainer))._embeddedViews;
                for (var /** @type {?} */ k = 0; k < embeddedViews.length; k++) {
                    var /** @type {?} */ embeddedView = embeddedViews[k];
                    var /** @type {?} */ dvc = declaredViewContainer(embeddedView);
                    if (dvc && dvc === elementData) {
                        calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);
                    }
                }
            }
            var /** @type {?} */ projectedViews = elementData.template._projectedViews;
            if (projectedViews) {
                for (var /** @type {?} */ k = 0; k < projectedViews.length; k++) {
                    var /** @type {?} */ projectedView = projectedViews[k];
                    calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);
                }
            }
        }
        if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {
            // if no child matches the query, skip the children.
            i += nodeDef.childCount;
        }
    }
    return values;
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} queryValueType
 * @return {?}
 */
function getQueryValue(view, nodeDef, queryValueType) {
    if (queryValueType != null) {
        // a match
        var /** @type {?} */ value = void 0;
        switch (queryValueType) {
            case 1 /* RenderElement */:
                value = asElementData(view, nodeDef.index).renderElement;
                break;
            case 0 /* ElementRef */:
                value = new ElementRef(asElementData(view, nodeDef.index).renderElement);
                break;
            case 2 /* TemplateRef */:
                value = asElementData(view, nodeDef.index).template;
                break;
            case 3 /* ViewContainerRef */:
                value = asElementData(view, nodeDef.index).viewContainer;
                break;
            case 4 /* Provider */:
                value = asProviderData(view, nodeDef.index).instance;
                break;
        }
        return value;
    }
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} ngContentIndex
 * @param {?} index
 * @return {?}
 */
function ngContentDef(ngContentIndex, index) {
    return {
        // will bet set by the view definition
        index: -1,
        parent: null,
        renderParent: null,
        bindingIndex: -1,
        outputIndex: -1,
        // regular values
        flags: 8 /* TypeNgContent */,
        childFlags: 0,
        directChildFlags: 0,
        childMatchedQueries: 0,
        matchedQueries: {},
        matchedQueryIds: 0,
        references: {}, ngContentIndex: ngContentIndex,
        childCount: 0,
        bindings: [],
        bindingFlags: 0,
        outputs: [],
        element: null,
        provider: null,
        text: null,
        query: null,
        ngContent: { index: index }
    };
}
/**
 * @param {?} view
 * @param {?} renderHost
 * @param {?} def
 * @return {?}
 */
function appendNgContent(view, renderHost, def) {
    var /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);
    if (!parentEl) {
        // Nothing to do if there is no parent element.
        return;
    }
    var /** @type {?} */ ngContentIndex = ((def.ngContent)).index;
    visitProjectedRenderNodes(view, ngContentIndex, 1 /* AppendChild */, parentEl, null, undefined);
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} argCount
 * @return {?}
 */
function purePipeDef(argCount) {
    // argCount + 1 to include the pipe as first arg
    return _pureExpressionDef(128 /* TypePurePipe */, new Array(argCount + 1));
}
/**
 * @param {?} argCount
 * @return {?}
 */
function pureArrayDef(argCount) {
    return _pureExpressionDef(32 /* TypePureArray */, new Array(argCount));
}
/**
 * @param {?} propToIndex
 * @return {?}
 */
function pureObjectDef(propToIndex) {
    var /** @type {?} */ keys = Object.keys(propToIndex);
    var /** @type {?} */ nbKeys = keys.length;
    var /** @type {?} */ propertyNames = new Array(nbKeys);
    for (var /** @type {?} */ i = 0; i < nbKeys; i++) {
        var /** @type {?} */ key = keys[i];
        var /** @type {?} */ index = propToIndex[key];
        propertyNames[index] = key;
    }
    return _pureExpressionDef(64 /* TypePureObject */, propertyNames);
}
/**
 * @param {?} flags
 * @param {?} propertyNames
 * @return {?}
 */
function _pureExpressionDef(flags, propertyNames) {
    var /** @type {?} */ bindings = new Array(propertyNames.length);
    for (var /** @type {?} */ i = 0; i < propertyNames.length; i++) {
        var /** @type {?} */ prop = propertyNames[i];
        bindings[i] = {
            flags: 8 /* TypeProperty */,
            name: prop,
            ns: null,
            nonMinifiedName: prop,
            securityContext: null,
            suffix: null
        };
    }
    return {
        // will bet set by the view definition
        index: -1,
        parent: null,
        renderParent: null,
        bindingIndex: -1,
        outputIndex: -1,
        // regular values
        flags: flags,
        childFlags: 0,
        directChildFlags: 0,
        childMatchedQueries: 0,
        matchedQueries: {},
        matchedQueryIds: 0,
        references: {},
        ngContentIndex: -1,
        childCount: 0, bindings: bindings,
        bindingFlags: calcBindingFlags(bindings),
        outputs: [],
        element: null,
        provider: null,
        text: null,
        query: null,
        ngContent: null
    };
}
/**
 * @param {?} view
 * @param {?} def
 * @return {?}
 */
function createPureExpression(view, def) {
    return { value: undefined };
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} v0
 * @param {?} v1
 * @param {?} v2
 * @param {?} v3
 * @param {?} v4
 * @param {?} v5
 * @param {?} v6
 * @param {?} v7
 * @param {?} v8
 * @param {?} v9
 * @return {?}
 */
function checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    var /** @type {?} */ bindings = def.bindings;
    var /** @type {?} */ changed = false;
    var /** @type {?} */ bindLen = bindings.length;
    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))
        changed = true;
    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))
        changed = true;
    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))
        changed = true;
    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))
        changed = true;
    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))
        changed = true;
    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))
        changed = true;
    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))
        changed = true;
    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))
        changed = true;
    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))
        changed = true;
    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))
        changed = true;
    if (changed) {
        var /** @type {?} */ data = asPureExpressionData(view, def.index);
        var /** @type {?} */ value = void 0;
        switch (def.flags & 201347067 /* Types */) {
            case 32 /* TypePureArray */:
                value = new Array(bindings.length);
                if (bindLen > 0)
                    value[0] = v0;
                if (bindLen > 1)
                    value[1] = v1;
                if (bindLen > 2)
                    value[2] = v2;
                if (bindLen > 3)
                    value[3] = v3;
                if (bindLen > 4)
                    value[4] = v4;
                if (bindLen > 5)
                    value[5] = v5;
                if (bindLen > 6)
                    value[6] = v6;
                if (bindLen > 7)
                    value[7] = v7;
                if (bindLen > 8)
                    value[8] = v8;
                if (bindLen > 9)
                    value[9] = v9;
                break;
            case 64 /* TypePureObject */:
                value = {};
                if (bindLen > 0)
                    value[((bindings[0].name))] = v0;
                if (bindLen > 1)
                    value[((bindings[1].name))] = v1;
                if (bindLen > 2)
                    value[((bindings[2].name))] = v2;
                if (bindLen > 3)
                    value[((bindings[3].name))] = v3;
                if (bindLen > 4)
                    value[((bindings[4].name))] = v4;
                if (bindLen > 5)
                    value[((bindings[5].name))] = v5;
                if (bindLen > 6)
                    value[((bindings[6].name))] = v6;
                if (bindLen > 7)
                    value[((bindings[7].name))] = v7;
                if (bindLen > 8)
                    value[((bindings[8].name))] = v8;
                if (bindLen > 9)
                    value[((bindings[9].name))] = v9;
                break;
            case 128 /* TypePurePipe */:
                var /** @type {?} */ pipe = v0;
                switch (bindLen) {
                    case 1:
                        value = pipe.transform(v0);
                        break;
                    case 2:
                        value = pipe.transform(v1);
                        break;
                    case 3:
                        value = pipe.transform(v1, v2);
                        break;
                    case 4:
                        value = pipe.transform(v1, v2, v3);
                        break;
                    case 5:
                        value = pipe.transform(v1, v2, v3, v4);
                        break;
                    case 6:
                        value = pipe.transform(v1, v2, v3, v4, v5);
                        break;
                    case 7:
                        value = pipe.transform(v1, v2, v3, v4, v5, v6);
                        break;
                    case 8:
                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);
                        break;
                    case 9:
                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);
                        break;
                    case 10:
                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);
                        break;
                }
                break;
        }
        data.value = value;
    }
    return changed;
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} values
 * @return {?}
 */
function checkAndUpdatePureExpressionDynamic(view, def, values) {
    var /** @type {?} */ bindings = def.bindings;
    var /** @type {?} */ changed = false;
    for (var /** @type {?} */ i = 0; i < values.length; i++) {
        // Note: We need to loop over all values, so that
        // the old values are updates as well!
        if (checkAndUpdateBinding(view, def, i, values[i])) {
            changed = true;
        }
    }
    if (changed) {
        var /** @type {?} */ data = asPureExpressionData(view, def.index);
        var /** @type {?} */ value = void 0;
        switch (def.flags & 201347067 /* Types */) {
            case 32 /* TypePureArray */:
                value = values;
                break;
            case 64 /* TypePureObject */:
                value = {};
                for (var /** @type {?} */ i = 0; i < values.length; i++) {
                    value[((bindings[i].name))] = values[i];
                }
                break;
            case 128 /* TypePurePipe */:
                var /** @type {?} */ pipe = values[0];
                var /** @type {?} */ params = values.slice(1);
                value = pipe.transform.apply(pipe, params);
                break;
        }
        data.value = value;
    }
    return changed;
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} ngContentIndex
 * @param {?} constants
 * @return {?}
 */
function textDef(ngContentIndex, constants) {
    var /** @type {?} */ bindings = new Array(constants.length - 1);
    for (var /** @type {?} */ i = 1; i < constants.length; i++) {
        bindings[i - 1] = {
            flags: 8 /* TypeProperty */,
            name: null,
            ns: null,
            nonMinifiedName: null,
            securityContext: null,
            suffix: constants[i]
        };
    }
    var /** @type {?} */ flags = 2;
    return {
        // will bet set by the view definition
        index: -1,
        parent: null,
        renderParent: null,
        bindingIndex: -1,
        outputIndex: -1,
        // regular values
        flags: flags,
        childFlags: 0,
        directChildFlags: 0,
        childMatchedQueries: 0,
        matchedQueries: {},
        matchedQueryIds: 0,
        references: {}, ngContentIndex: ngContentIndex,
        childCount: 0, bindings: bindings,
        bindingFlags: calcBindingFlags(bindings),
        outputs: [],
        element: null,
        provider: null,
        text: { prefix: constants[0] },
        query: null,
        ngContent: null
    };
}
/**
 * @param {?} view
 * @param {?} renderHost
 * @param {?} def
 * @return {?}
 */
function createText(view, renderHost, def) {
    var /** @type {?} */ renderNode$$1;
    var /** @type {?} */ renderer = view.renderer;
    renderNode$$1 = renderer.createText(/** @type {?} */ ((def.text)).prefix);
    var /** @type {?} */ parentEl = getParentRenderElement(view, renderHost, def);
    if (parentEl) {
        renderer.appendChild(parentEl, renderNode$$1);
    }
    return { renderText: renderNode$$1 };
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} v0
 * @param {?} v1
 * @param {?} v2
 * @param {?} v3
 * @param {?} v4
 * @param {?} v5
 * @param {?} v6
 * @param {?} v7
 * @param {?} v8
 * @param {?} v9
 * @return {?}
 */
function checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    var /** @type {?} */ changed = false;
    var /** @type {?} */ bindings = def.bindings;
    var /** @type {?} */ bindLen = bindings.length;
    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))
        changed = true;
    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))
        changed = true;
    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))
        changed = true;
    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))
        changed = true;
    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))
        changed = true;
    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))
        changed = true;
    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))
        changed = true;
    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))
        changed = true;
    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))
        changed = true;
    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))
        changed = true;
    if (changed) {
        var /** @type {?} */ value = ((def.text)).prefix;
        if (bindLen > 0)
            value += _addInterpolationPart(v0, bindings[0]);
        if (bindLen > 1)
            value += _addInterpolationPart(v1, bindings[1]);
        if (bindLen > 2)
            value += _addInterpolationPart(v2, bindings[2]);
        if (bindLen > 3)
            value += _addInterpolationPart(v3, bindings[3]);
        if (bindLen > 4)
            value += _addInterpolationPart(v4, bindings[4]);
        if (bindLen > 5)
            value += _addInterpolationPart(v5, bindings[5]);
        if (bindLen > 6)
            value += _addInterpolationPart(v6, bindings[6]);
        if (bindLen > 7)
            value += _addInterpolationPart(v7, bindings[7]);
        if (bindLen > 8)
            value += _addInterpolationPart(v8, bindings[8]);
        if (bindLen > 9)
            value += _addInterpolationPart(v9, bindings[9]);
        var /** @type {?} */ renderNode$$1 = asTextData(view, def.index).renderText;
        view.renderer.setValue(renderNode$$1, value);
    }
    return changed;
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} values
 * @return {?}
 */
function checkAndUpdateTextDynamic(view, def, values) {
    var /** @type {?} */ bindings = def.bindings;
    var /** @type {?} */ changed = false;
    for (var /** @type {?} */ i = 0; i < values.length; i++) {
        // Note: We need to loop over all values, so that
        // the old values are updates as well!
        if (checkAndUpdateBinding(view, def, i, values[i])) {
            changed = true;
        }
    }
    if (changed) {
        var /** @type {?} */ value = '';
        for (var /** @type {?} */ i = 0; i < values.length; i++) {
            value = value + _addInterpolationPart(values[i], bindings[i]);
        }
        value = ((def.text)).prefix + value;
        var /** @type {?} */ renderNode$$1 = asTextData(view, def.index).renderText;
        view.renderer.setValue(renderNode$$1, value);
    }
    return changed;
}
/**
 * @param {?} value
 * @param {?} binding
 * @return {?}
 */
function _addInterpolationPart(value, binding) {
    var /** @type {?} */ valueStr = value != null ? value.toString() : '';
    return valueStr + binding.suffix;
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} flags
 * @param {?} nodes
 * @param {?=} updateDirectives
 * @param {?=} updateRenderer
 * @return {?}
 */
function viewDef(flags, nodes, updateDirectives, updateRenderer) {
    // clone nodes and set auto calculated values
    var /** @type {?} */ viewBindingCount = 0;
    var /** @type {?} */ viewDisposableCount = 0;
    var /** @type {?} */ viewNodeFlags = 0;
    var /** @type {?} */ viewRootNodeFlags = 0;
    var /** @type {?} */ viewMatchedQueries = 0;
    var /** @type {?} */ currentParent = null;
    var /** @type {?} */ currentElementHasPublicProviders = false;
    var /** @type {?} */ currentElementHasPrivateProviders = false;
    var /** @type {?} */ lastRenderRootNode = null;
    for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
        while (currentParent && i > currentParent.index + currentParent.childCount) {
            var /** @type {?} */ newParent = currentParent.parent;
            if (newParent) {
                newParent.childFlags |= ((currentParent.childFlags));
                newParent.childMatchedQueries |= currentParent.childMatchedQueries;
            }
            currentParent = newParent;
        }
        var /** @type {?} */ node = nodes[i];
        node.index = i;
        node.parent = currentParent;
        node.bindingIndex = viewBindingCount;
        node.outputIndex = viewDisposableCount;
        // renderParent needs to account for ng-container!
        var /** @type {?} */ currentRenderParent = void 0;
        if (currentParent && currentParent.flags & 1 /* TypeElement */ &&
            !((currentParent.element)).name) {
            currentRenderParent = currentParent.renderParent;
        }
        else {
            currentRenderParent = currentParent;
        }
        node.renderParent = currentRenderParent;
        if (node.element) {
            var /** @type {?} */ elDef = node.element;
            elDef.publicProviders =
                currentParent ? ((currentParent.element)).publicProviders : Object.create(null);
            elDef.allProviders = elDef.publicProviders;
            // Note: We assume that all providers of an element are before any child element!
            currentElementHasPublicProviders = false;
            currentElementHasPrivateProviders = false;
        }
        validateNode(currentParent, node, nodes.length);
        viewNodeFlags |= node.flags;
        viewMatchedQueries |= node.matchedQueryIds;
        if (node.element && node.element.template) {
            viewMatchedQueries |= node.element.template.nodeMatchedQueries;
        }
        if (currentParent) {
            currentParent.childFlags |= node.flags;
            currentParent.directChildFlags |= node.flags;
            currentParent.childMatchedQueries |= node.matchedQueryIds;
            if (node.element && node.element.template) {
                currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;
            }
        }
        else {
            viewRootNodeFlags |= node.flags;
        }
        viewBindingCount += node.bindings.length;
        viewDisposableCount += node.outputs.length;
        if (!currentRenderParent && (node.flags & 3 /* CatRenderNode */)) {
            lastRenderRootNode = node;
        }
        if (node.flags & 20224 /* CatProvider */) {
            if (!currentElementHasPublicProviders) {
                currentElementHasPublicProviders = true; /** @type {?} */
                ((((
                // Use prototypical inheritance to not get O(n^2) complexity...
                currentParent)).element)).publicProviders =
                    Object.create(/** @type {?} */ ((((currentParent)).element)).publicProviders); /** @type {?} */
                ((((currentParent)).element)).allProviders = ((((currentParent)).element)).publicProviders;
            }
            var /** @type {?} */ isPrivateService = (node.flags & 8192 /* PrivateProvider */) !== 0;
            var /** @type {?} */ isComponent = (node.flags & 32768 /* Component */) !== 0;
            if (!isPrivateService || isComponent) {
                ((((((currentParent)).element)).publicProviders))[tokenKey(/** @type {?} */ ((node.provider)).token)] = node;
            }
            else {
                if (!currentElementHasPrivateProviders) {
                    currentElementHasPrivateProviders = true; /** @type {?} */
                    ((((
                    // Use protoyypical inheritance to not get O(n^2) complexity...
                    currentParent)).element)).allProviders =
                        Object.create(/** @type {?} */ ((((currentParent)).element)).publicProviders);
                } /** @type {?} */
                ((((((currentParent)).element)).allProviders))[tokenKey(/** @type {?} */ ((node.provider)).token)] = node;
            }
            if (isComponent) {
                ((((currentParent)).element)).componentProvider = node;
            }
        }
        if (node.childCount) {
            currentParent = node;
        }
    }
    while (currentParent) {
        var /** @type {?} */ newParent = currentParent.parent;
        if (newParent) {
            newParent.childFlags |= currentParent.childFlags;
            newParent.childMatchedQueries |= currentParent.childMatchedQueries;
        }
        currentParent = newParent;
    }
    var /** @type {?} */ handleEvent = function (view, nodeIndex, eventName, event) { return ((((nodes[nodeIndex].element)).handleEvent))(view, eventName, event); };
    return {
        // Will be filled later...
        factory: null,
        nodeFlags: viewNodeFlags,
        rootNodeFlags: viewRootNodeFlags,
        nodeMatchedQueries: viewMatchedQueries, flags: flags,
        nodes: nodes,
        updateDirectives: updateDirectives || NOOP,
        updateRenderer: updateRenderer || NOOP,
        handleEvent: handleEvent || NOOP,
        bindingCount: viewBindingCount,
        outputCount: viewDisposableCount, lastRenderRootNode: lastRenderRootNode
    };
}
/**
 * @param {?} parent
 * @param {?} node
 * @param {?} nodeCount
 * @return {?}
 */
function validateNode(parent, node, nodeCount) {
    var /** @type {?} */ template = node.element && node.element.template;
    if (template) {
        if (!template.lastRenderRootNode) {
            throw new Error("Illegal State: Embedded templates without nodes are not allowed!");
        }
        if (template.lastRenderRootNode &&
            template.lastRenderRootNode.flags & 16777216 /* EmbeddedViews */) {
            throw new Error("Illegal State: Last root node of a template can't have embedded views, at index " + node.index + "!");
        }
    }
    if (node.flags & 20224 /* CatProvider */) {
        var /** @type {?} */ parentFlags = parent ? parent.flags : 0;
        if ((parentFlags & 1 /* TypeElement */) === 0) {
            throw new Error("Illegal State: Provider/Directive nodes need to be children of elements or anchors, at index " + node.index + "!");
        }
    }
    if (node.query) {
        if (node.flags & 67108864 /* TypeContentQuery */ &&
            (!parent || (parent.flags & 16384 /* TypeDirective */) === 0)) {
            throw new Error("Illegal State: Content Query nodes need to be children of directives, at index " + node.index + "!");
        }
        if (node.flags & 134217728 /* TypeViewQuery */ && parent) {
            throw new Error("Illegal State: View Query nodes have to be top level nodes, at index " + node.index + "!");
        }
    }
    if (node.childCount) {
        var /** @type {?} */ parentEnd = parent ? parent.index + parent.childCount : nodeCount - 1;
        if (node.index <= parentEnd && node.index + node.childCount > parentEnd) {
            throw new Error("Illegal State: childCount of node leads outside of parent, at index " + node.index + "!");
        }
    }
}
/**
 * @param {?} parent
 * @param {?} anchorDef
 * @param {?} viewDef
 * @param {?=} context
 * @return {?}
 */
function createEmbeddedView(parent, anchorDef$$1, viewDef, context) {
    // embedded views are seen as siblings to the anchor, so we need
    // to get the parent of the anchor and use it as parentIndex.
    var /** @type {?} */ view = createView(parent.root, parent.renderer, parent, anchorDef$$1, viewDef);
    initView(view, parent.component, context);
    createViewNodes(view);
    return view;
}
/**
 * @param {?} root
 * @param {?} def
 * @param {?=} context
 * @return {?}
 */
function createRootView(root, def, context) {
    var /** @type {?} */ view = createView(root, root.renderer, null, null, def);
    initView(view, context, context);
    createViewNodes(view);
    return view;
}
/**
 * @param {?} parentView
 * @param {?} nodeDef
 * @param {?} viewDef
 * @param {?} hostElement
 * @return {?}
 */
function createComponentView(parentView, nodeDef, viewDef, hostElement) {
    var /** @type {?} */ rendererType = ((nodeDef.element)).componentRendererType;
    var /** @type {?} */ compRenderer;
    if (!rendererType) {
        compRenderer = parentView.root.renderer;
    }
    else {
        compRenderer = parentView.root.rendererFactory.createRenderer(hostElement, rendererType);
    }
    return createView(parentView.root, compRenderer, parentView, /** @type {?} */ ((nodeDef.element)).componentProvider, viewDef);
}
/**
 * @param {?} root
 * @param {?} renderer
 * @param {?} parent
 * @param {?} parentNodeDef
 * @param {?} def
 * @return {?}
 */
function createView(root, renderer, parent, parentNodeDef, def) {
    var /** @type {?} */ nodes = new Array(def.nodes.length);
    var /** @type {?} */ disposables = def.outputCount ? new Array(def.outputCount) : null;
    var /** @type {?} */ view = {
        def: def,
        parent: parent,
        viewContainerParent: null, parentNodeDef: parentNodeDef,
        context: null,
        component: null, nodes: nodes,
        state: 13 /* CatInit */, root: root, renderer: renderer,
        oldValues: new Array(def.bindingCount), disposables: disposables
    };
    return view;
}
/**
 * @param {?} view
 * @param {?} component
 * @param {?} context
 * @return {?}
 */
function initView(view, component, context) {
    view.component = component;
    view.context = context;
}
/**
 * @param {?} view
 * @return {?}
 */
function createViewNodes(view) {
    var /** @type {?} */ renderHost;
    if (isComponentView(view)) {
        var /** @type {?} */ hostDef = view.parentNodeDef;
        renderHost = asElementData(/** @type {?} */ ((view.parent)), /** @type {?} */ ((((hostDef)).parent)).index).renderElement;
    }
    var /** @type {?} */ def = view.def;
    var /** @type {?} */ nodes = view.nodes;
    for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {
        var /** @type {?} */ nodeDef = def.nodes[i];
        Services.setCurrentNode(view, i);
        var /** @type {?} */ nodeData = void 0;
        switch (nodeDef.flags & 201347067 /* Types */) {
            case 1 /* TypeElement */:
                var /** @type {?} */ el = (createElement(view, renderHost, nodeDef));
                var /** @type {?} */ componentView = ((undefined));
                if (nodeDef.flags & 33554432 /* ComponentView */) {
                    var /** @type {?} */ compViewDef = resolveDefinition(/** @type {?} */ ((((nodeDef.element)).componentView)));
                    componentView = Services.createComponentView(view, nodeDef, compViewDef, el);
                }
                listenToElementOutputs(view, componentView, nodeDef, el);
                nodeData = ({
                    renderElement: el,
                    componentView: componentView,
                    viewContainer: null,
                    template: /** @type {?} */ ((nodeDef.element)).template ? createTemplateData(view, nodeDef) : undefined
                });
                if (nodeDef.flags & 16777216 /* EmbeddedViews */) {
                    nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);
                }
                break;
            case 2 /* TypeText */:
                nodeData = (createText(view, renderHost, nodeDef));
                break;
            case 512 /* TypeClassProvider */:
            case 1024 /* TypeFactoryProvider */:
            case 2048 /* TypeUseExistingProvider */:
            case 256 /* TypeValueProvider */: {
                var /** @type {?} */ instance = createProviderInstance(view, nodeDef);
                nodeData = ({ instance: instance });
                break;
            }
            case 16 /* TypePipe */: {
                var /** @type {?} */ instance = createPipeInstance(view, nodeDef);
                nodeData = ({ instance: instance });
                break;
            }
            case 16384 /* TypeDirective */: {
                var /** @type {?} */ instance = createDirectiveInstance(view, nodeDef);
                nodeData = ({ instance: instance });
                if (nodeDef.flags & 32768 /* Component */) {
                    var /** @type {?} */ compView = asElementData(view, /** @type {?} */ ((nodeDef.parent)).index).componentView;
                    initView(compView, instance, instance);
                }
                break;
            }
            case 32 /* TypePureArray */:
            case 64 /* TypePureObject */:
            case 128 /* TypePurePipe */:
                nodeData = (createPureExpression(view, nodeDef));
                break;
            case 67108864 /* TypeContentQuery */:
            case 134217728 /* TypeViewQuery */:
                nodeData = (createQuery());
                break;
            case 8 /* TypeNgContent */:
                appendNgContent(view, renderHost, nodeDef);
                // no runtime data needed for NgContent...
                nodeData = undefined;
                break;
        }
        nodes[i] = nodeData;
    }
    // Create the ViewData.nodes of component views after we created everything else,
    // so that e.g. ng-content works
    execComponentViewsAction(view, ViewAction.CreateViewNodes);
    // fill static content and view queries
    execQueriesAction(view, 67108864 /* TypeContentQuery */ | 134217728 /* TypeViewQuery */, 268435456 /* StaticQuery */, 0 /* CheckAndUpdate */);
}
/**
 * @param {?} view
 * @return {?}
 */
function checkNoChangesView(view) {
    markProjectedViewsForCheck(view);
    Services.updateDirectives(view, 1 /* CheckNoChanges */);
    execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);
    Services.updateRenderer(view, 1 /* CheckNoChanges */);
    execComponentViewsAction(view, ViewAction.CheckNoChanges);
    // Note: We don't check queries for changes as we didn't do this in v2.x.
    // TODO(tbosch): investigate if we can enable the check again in v5.x with a nicer error message.
    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);
}
/**
 * @param {?} view
 * @return {?}
 */
function checkAndUpdateView(view) {
    if (view.state & 1 /* BeforeFirstCheck */) {
        view.state &= ~1 /* BeforeFirstCheck */;
        view.state |= 2 /* FirstCheck */;
    }
    else {
        view.state &= ~2 /* FirstCheck */;
    }
    markProjectedViewsForCheck(view);
    Services.updateDirectives(view, 0 /* CheckAndUpdate */);
    execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);
    execQueriesAction(view, 67108864 /* TypeContentQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);
    callLifecycleHooksChildrenFirst(view, 2097152 /* AfterContentChecked */ |
        (view.state & 2 /* FirstCheck */ ? 1048576 /* AfterContentInit */ : 0));
    Services.updateRenderer(view, 0 /* CheckAndUpdate */);
    execComponentViewsAction(view, ViewAction.CheckAndUpdate);
    execQueriesAction(view, 134217728 /* TypeViewQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);
    callLifecycleHooksChildrenFirst(view, 8388608 /* AfterViewChecked */ |
        (view.state & 2 /* FirstCheck */ ? 4194304 /* AfterViewInit */ : 0));
    if (view.def.flags & 2 /* OnPush */) {
        view.state &= ~8 /* ChecksEnabled */;
    }
    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} argStyle
 * @param {?=} v0
 * @param {?=} v1
 * @param {?=} v2
 * @param {?=} v3
 * @param {?=} v4
 * @param {?=} v5
 * @param {?=} v6
 * @param {?=} v7
 * @param {?=} v8
 * @param {?=} v9
 * @return {?}
 */
function checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    if (argStyle === 0 /* Inline */) {
        return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
    }
    else {
        return checkAndUpdateNodeDynamic(view, nodeDef, v0);
    }
}
/**
 * @param {?} view
 * @return {?}
 */
function markProjectedViewsForCheck(view) {
    var /** @type {?} */ def = view.def;
    if (!(def.nodeFlags & 4 /* ProjectedTemplate */)) {
        return;
    }
    for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {
        var /** @type {?} */ nodeDef = def.nodes[i];
        if (nodeDef.flags & 4 /* ProjectedTemplate */) {
            var /** @type {?} */ projectedViews = asElementData(view, i).template._projectedViews;
            if (projectedViews) {
                for (var /** @type {?} */ i_1 = 0; i_1 < projectedViews.length; i_1++) {
                    var /** @type {?} */ projectedView = projectedViews[i_1];
                    projectedView.state |= 32 /* CheckProjectedView */;
                    markParentViewsForCheckProjectedViews(projectedView, view);
                }
            }
        }
        else if ((nodeDef.childFlags & 4 /* ProjectedTemplate */) === 0) {
            // a parent with leafs
            // no child is a component,
            // then skip the children
            i += nodeDef.childCount;
        }
    }
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?=} v0
 * @param {?=} v1
 * @param {?=} v2
 * @param {?=} v3
 * @param {?=} v4
 * @param {?=} v5
 * @param {?=} v6
 * @param {?=} v7
 * @param {?=} v8
 * @param {?=} v9
 * @return {?}
 */
function checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    var /** @type {?} */ changed = false;
    switch (nodeDef.flags & 201347067 /* Types */) {
        case 1 /* TypeElement */:
            changed = checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
            break;
        case 2 /* TypeText */:
            changed = checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
            break;
        case 16384 /* TypeDirective */:
            changed =
                checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
            break;
        case 32 /* TypePureArray */:
        case 64 /* TypePureObject */:
        case 128 /* TypePurePipe */:
            changed =
                checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
            break;
    }
    return changed;
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} values
 * @return {?}
 */
function checkAndUpdateNodeDynamic(view, nodeDef, values) {
    var /** @type {?} */ changed = false;
    switch (nodeDef.flags & 201347067 /* Types */) {
        case 1 /* TypeElement */:
            changed = checkAndUpdateElementDynamic(view, nodeDef, values);
            break;
        case 2 /* TypeText */:
            changed = checkAndUpdateTextDynamic(view, nodeDef, values);
            break;
        case 16384 /* TypeDirective */:
            changed = checkAndUpdateDirectiveDynamic(view, nodeDef, values);
            break;
        case 32 /* TypePureArray */:
        case 64 /* TypePureObject */:
        case 128 /* TypePurePipe */:
            changed = checkAndUpdatePureExpressionDynamic(view, nodeDef, values);
            break;
    }
    if (changed) {
        // Update oldValues after all bindings have been updated,
        // as a setter for a property might update other properties.
        var /** @type {?} */ bindLen = nodeDef.bindings.length;
        var /** @type {?} */ bindingStart = nodeDef.bindingIndex;
        var /** @type {?} */ oldValues = view.oldValues;
        for (var /** @type {?} */ i = 0; i < bindLen; i++) {
            oldValues[bindingStart + i] = values[i];
        }
    }
    return changed;
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} argStyle
 * @param {?=} v0
 * @param {?=} v1
 * @param {?=} v2
 * @param {?=} v3
 * @param {?=} v4
 * @param {?=} v5
 * @param {?=} v6
 * @param {?=} v7
 * @param {?=} v8
 * @param {?=} v9
 * @return {?}
 */
function checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    if (argStyle === 0 /* Inline */) {
        checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
    }
    else {
        checkNoChangesNodeDynamic(view, nodeDef, v0);
    }
    // Returning false is ok here as we would have thrown in case of a change.
    return false;
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} v0
 * @param {?} v1
 * @param {?} v2
 * @param {?} v3
 * @param {?} v4
 * @param {?} v5
 * @param {?} v6
 * @param {?} v7
 * @param {?} v8
 * @param {?} v9
 * @return {?}
 */
function checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    var /** @type {?} */ bindLen = nodeDef.bindings.length;
    if (bindLen > 0)
        checkBindingNoChanges(view, nodeDef, 0, v0);
    if (bindLen > 1)
        checkBindingNoChanges(view, nodeDef, 1, v1);
    if (bindLen > 2)
        checkBindingNoChanges(view, nodeDef, 2, v2);
    if (bindLen > 3)
        checkBindingNoChanges(view, nodeDef, 3, v3);
    if (bindLen > 4)
        checkBindingNoChanges(view, nodeDef, 4, v4);
    if (bindLen > 5)
        checkBindingNoChanges(view, nodeDef, 5, v5);
    if (bindLen > 6)
        checkBindingNoChanges(view, nodeDef, 6, v6);
    if (bindLen > 7)
        checkBindingNoChanges(view, nodeDef, 7, v7);
    if (bindLen > 8)
        checkBindingNoChanges(view, nodeDef, 8, v8);
    if (bindLen > 9)
        checkBindingNoChanges(view, nodeDef, 9, v9);
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} values
 * @return {?}
 */
function checkNoChangesNodeDynamic(view, nodeDef, values) {
    for (var /** @type {?} */ i = 0; i < values.length; i++) {
        checkBindingNoChanges(view, nodeDef, i, values[i]);
    }
}
/**
 * Workaround https://github.com/angular/tsickle/issues/497
 * @suppress {misplacedTypeAnnotation}
 * @param {?} view
 * @param {?} nodeDef
 * @return {?}
 */
function checkNoChangesQuery(view, nodeDef) {
    var /** @type {?} */ queryList = asQueryList(view, nodeDef.index);
    if (queryList.dirty) {
        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.index), "Query " + ((nodeDef.query)).id + " not dirty", "Query " + ((nodeDef.query)).id + " dirty", (view.state & 1 /* BeforeFirstCheck */) !== 0);
    }
}
/**
 * @param {?} view
 * @return {?}
 */
function destroyView(view) {
    if (view.state & 128 /* Destroyed */) {
        return;
    }
    execEmbeddedViewsAction(view, ViewAction.Destroy);
    execComponentViewsAction(view, ViewAction.Destroy);
    callLifecycleHooksChildrenFirst(view, 131072 /* OnDestroy */);
    if (view.disposables) {
        for (var /** @type {?} */ i = 0; i < view.disposables.length; i++) {
            view.disposables[i]();
        }
    }
    detachProjectedView(view);
    if (view.renderer.destroyNode) {
        destroyViewNodes(view);
    }
    if (isComponentView(view)) {
        view.renderer.destroy();
    }
    view.state |= 128 /* Destroyed */;
}
/**
 * @param {?} view
 * @return {?}
 */
function destroyViewNodes(view) {
    var /** @type {?} */ len = view.def.nodes.length;
    for (var /** @type {?} */ i = 0; i < len; i++) {
        var /** @type {?} */ def = view.def.nodes[i];
        if (def.flags & 1 /* TypeElement */) {
            ((view.renderer.destroyNode))(asElementData(view, i).renderElement);
        }
        else if (def.flags & 2 /* TypeText */) {
            ((view.renderer.destroyNode))(asTextData(view, i).renderText);
        }
    }
}
var ViewAction = {};
ViewAction.CreateViewNodes = 0;
ViewAction.CheckNoChanges = 1;
ViewAction.CheckNoChangesProjectedViews = 2;
ViewAction.CheckAndUpdate = 3;
ViewAction.CheckAndUpdateProjectedViews = 4;
ViewAction.Destroy = 5;
ViewAction[ViewAction.CreateViewNodes] = "CreateViewNodes";
ViewAction[ViewAction.CheckNoChanges] = "CheckNoChanges";
ViewAction[ViewAction.CheckNoChangesProjectedViews] = "CheckNoChangesProjectedViews";
ViewAction[ViewAction.CheckAndUpdate] = "CheckAndUpdate";
ViewAction[ViewAction.CheckAndUpdateProjectedViews] = "CheckAndUpdateProjectedViews";
ViewAction[ViewAction.Destroy] = "Destroy";
/**
 * @param {?} view
 * @param {?} action
 * @return {?}
 */
function execComponentViewsAction(view, action) {
    var /** @type {?} */ def = view.def;
    if (!(def.nodeFlags & 33554432 /* ComponentView */)) {
        return;
    }
    for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {
        var /** @type {?} */ nodeDef = def.nodes[i];
        if (nodeDef.flags & 33554432 /* ComponentView */) {
            // a leaf
            callViewAction(asElementData(view, i).componentView, action);
        }
        else if ((nodeDef.childFlags & 33554432 /* ComponentView */) === 0) {
            // a parent with leafs
            // no child is a component,
            // then skip the children
            i += nodeDef.childCount;
        }
    }
}
/**
 * @param {?} view
 * @param {?} action
 * @return {?}
 */
function execEmbeddedViewsAction(view, action) {
    var /** @type {?} */ def = view.def;
    if (!(def.nodeFlags & 16777216 /* EmbeddedViews */)) {
        return;
    }
    for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {
        var /** @type {?} */ nodeDef = def.nodes[i];
        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {
            // a leaf
            var /** @type {?} */ embeddedViews = ((asElementData(view, i).viewContainer))._embeddedViews;
            for (var /** @type {?} */ k = 0; k < embeddedViews.length; k++) {
                callViewAction(embeddedViews[k], action);
            }
        }
        else if ((nodeDef.childFlags & 16777216 /* EmbeddedViews */) === 0) {
            // a parent with leafs
            // no child is a component,
            // then skip the children
            i += nodeDef.childCount;
        }
    }
}
/**
 * @param {?} view
 * @param {?} action
 * @return {?}
 */
function callViewAction(view, action) {
    var /** @type {?} */ viewState = view.state;
    switch (action) {
        case ViewAction.CheckNoChanges:
            if ((viewState & 128 /* Destroyed */) === 0) {
                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {
                    checkNoChangesView(view);
                }
                else if (viewState & 64 /* CheckProjectedViews */) {
                    execProjectedViewsAction(view, ViewAction.CheckNoChangesProjectedViews);
                }
            }
            break;
        case ViewAction.CheckNoChangesProjectedViews:
            if ((viewState & 128 /* Destroyed */) === 0) {
                if (viewState & 32 /* CheckProjectedView */) {
                    checkNoChangesView(view);
                }
                else if (viewState & 64 /* CheckProjectedViews */) {
                    execProjectedViewsAction(view, action);
                }
            }
            break;
        case ViewAction.CheckAndUpdate:
            if ((viewState & 128 /* Destroyed */) === 0) {
                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {
                    checkAndUpdateView(view);
                }
                else if (viewState & 64 /* CheckProjectedViews */) {
                    execProjectedViewsAction(view, ViewAction.CheckAndUpdateProjectedViews);
                }
            }
            break;
        case ViewAction.CheckAndUpdateProjectedViews:
            if ((viewState & 128 /* Destroyed */) === 0) {
                if (viewState & 32 /* CheckProjectedView */) {
                    checkAndUpdateView(view);
                }
                else if (viewState & 64 /* CheckProjectedViews */) {
                    execProjectedViewsAction(view, action);
                }
            }
            break;
        case ViewAction.Destroy:
            // Note: destroyView recurses over all views,
            // so we don't need to special case projected views here.
            destroyView(view);
            break;
        case ViewAction.CreateViewNodes:
            createViewNodes(view);
            break;
    }
}
/**
 * @param {?} view
 * @param {?} action
 * @return {?}
 */
function execProjectedViewsAction(view, action) {
    execEmbeddedViewsAction(view, action);
    execComponentViewsAction(view, action);
}
/**
 * @param {?} view
 * @param {?} queryFlags
 * @param {?} staticDynamicQueryFlag
 * @param {?} checkType
 * @return {?}
 */
function execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {
    if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {
        return;
    }
    var /** @type {?} */ nodeCount = view.def.nodes.length;
    for (var /** @type {?} */ i = 0; i < nodeCount; i++) {
        var /** @type {?} */ nodeDef = view.def.nodes[i];
        if ((nodeDef.flags & queryFlags) && (nodeDef.flags & staticDynamicQueryFlag)) {
            Services.setCurrentNode(view, nodeDef.index);
            switch (checkType) {
                case 0 /* CheckAndUpdate */:
                    checkAndUpdateQuery(view, nodeDef);
                    break;
                case 1 /* CheckNoChanges */:
                    checkNoChangesQuery(view, nodeDef);
                    break;
            }
        }
        if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {
            // no child has a matching query
            // then skip the children
            i += nodeDef.childCount;
        }
    }
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var initialized = false;
/**
 * @return {?}
 */
function initServicesIfNeeded() {
    if (initialized) {
        return;
    }
    initialized = true;
    var /** @type {?} */ services = isDevMode() ? createDebugServices() : createProdServices();
    Services.setCurrentNode = services.setCurrentNode;
    Services.createRootView = services.createRootView;
    Services.createEmbeddedView = services.createEmbeddedView;
    Services.createComponentView = services.createComponentView;
    Services.createNgModuleRef = services.createNgModuleRef;
    Services.overrideProvider = services.overrideProvider;
    Services.clearProviderOverrides = services.clearProviderOverrides;
    Services.checkAndUpdateView = services.checkAndUpdateView;
    Services.checkNoChangesView = services.checkNoChangesView;
    Services.destroyView = services.destroyView;
    Services.resolveDep = resolveDep;
    Services.createDebugContext = services.createDebugContext;
    Services.handleEvent = services.handleEvent;
    Services.updateDirectives = services.updateDirectives;
    Services.updateRenderer = services.updateRenderer;
    Services.dirtyParentQueries = dirtyParentQueries;
}
/**
 * @return {?}
 */
function createProdServices() {
    return {
        setCurrentNode: function () { },
        createRootView: createProdRootView,
        createEmbeddedView: createEmbeddedView,
        createComponentView: createComponentView,
        createNgModuleRef: createNgModuleRef,
        overrideProvider: NOOP,
        clearProviderOverrides: NOOP,
        checkAndUpdateView: checkAndUpdateView,
        checkNoChangesView: checkNoChangesView,
        destroyView: destroyView,
        createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },
        handleEvent: function (view, nodeIndex, eventName, event) { return view.def.handleEvent(view, nodeIndex, eventName, event); },
        updateDirectives: function (view, checkType) { return view.def.updateDirectives(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :
            prodCheckNoChangesNode, view); },
        updateRenderer: function (view, checkType) { return view.def.updateRenderer(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :
            prodCheckNoChangesNode, view); },
    };
}
/**
 * @return {?}
 */
function createDebugServices() {
    return {
        setCurrentNode: debugSetCurrentNode,
        createRootView: debugCreateRootView,
        createEmbeddedView: debugCreateEmbeddedView,
        createComponentView: debugCreateComponentView,
        createNgModuleRef: debugCreateNgModuleRef,
        overrideProvider: debugOverrideProvider,
        clearProviderOverrides: debugClearProviderOverrides,
        checkAndUpdateView: debugCheckAndUpdateView,
        checkNoChangesView: debugCheckNoChangesView,
        destroyView: debugDestroyView,
        createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },
        handleEvent: debugHandleEvent,
        updateDirectives: debugUpdateDirectives,
        updateRenderer: debugUpdateRenderer,
    };
}
/**
 * @param {?} elInjector
 * @param {?} projectableNodes
 * @param {?} rootSelectorOrNode
 * @param {?} def
 * @param {?} ngModule
 * @param {?=} context
 * @return {?}
 */
function createProdRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {
    var /** @type {?} */ rendererFactory = ngModule.injector.get(RendererFactory2);
    return createRootView(createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);
}
/**
 * @param {?} elInjector
 * @param {?} projectableNodes
 * @param {?} rootSelectorOrNode
 * @param {?} def
 * @param {?} ngModule
 * @param {?=} context
 * @return {?}
 */
function debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {
    var /** @type {?} */ rendererFactory = ngModule.injector.get(RendererFactory2);
    var /** @type {?} */ root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);
    var /** @type {?} */ defWithOverride = applyProviderOverridesToView(def);
    return callWithDebugContext(DebugAction.create, createRootView, null, [root, defWithOverride, context]);
}
/**
 * @param {?} elInjector
 * @param {?} ngModule
 * @param {?} rendererFactory
 * @param {?} projectableNodes
 * @param {?} rootSelectorOrNode
 * @return {?}
 */
function createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {
    var /** @type {?} */ sanitizer = ngModule.injector.get(Sanitizer);
    var /** @type {?} */ errorHandler = ngModule.injector.get(ErrorHandler);
    var /** @type {?} */ renderer = rendererFactory.createRenderer(null, null);
    return {
        ngModule: ngModule,
        injector: elInjector, projectableNodes: projectableNodes,
        selectorOrNode: rootSelectorOrNode, sanitizer: sanitizer, rendererFactory: rendererFactory, renderer: renderer, errorHandler: errorHandler
    };
}
/**
 * @param {?} parentView
 * @param {?} anchorDef
 * @param {?} viewDef
 * @param {?=} context
 * @return {?}
 */
function debugCreateEmbeddedView(parentView, anchorDef, viewDef$$1, context) {
    var /** @type {?} */ defWithOverride = applyProviderOverridesToView(viewDef$$1);
    return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parentView, anchorDef, defWithOverride, context]);
}
/**
 * @param {?} parentView
 * @param {?} nodeDef
 * @param {?} viewDef
 * @param {?} hostElement
 * @return {?}
 */
function debugCreateComponentView(parentView, nodeDef, viewDef$$1, hostElement) {
    var /** @type {?} */ defWithOverride = applyProviderOverridesToView(viewDef$$1);
    return callWithDebugContext(DebugAction.create, createComponentView, null, [parentView, nodeDef, defWithOverride, hostElement]);
}
/**
 * @param {?} moduleType
 * @param {?} parentInjector
 * @param {?} bootstrapComponents
 * @param {?} def
 * @return {?}
 */
function debugCreateNgModuleRef(moduleType, parentInjector, bootstrapComponents, def) {
    var /** @type {?} */ defWithOverride = applyProviderOverridesToNgModule(def);
    return createNgModuleRef(moduleType, parentInjector, bootstrapComponents, defWithOverride);
}
var providerOverrides = new Map();
/**
 * @param {?} override
 * @return {?}
 */
function debugOverrideProvider(override) {
    providerOverrides.set(override.token, override);
}
/**
 * @return {?}
 */
function debugClearProviderOverrides() {
    providerOverrides.clear();
}
/**
 * @param {?} def
 * @return {?}
 */
function applyProviderOverridesToView(def) {
    if (providerOverrides.size === 0) {
        return def;
    }
    var /** @type {?} */ elementIndicesWithOverwrittenProviders = findElementIndicesWithOverwrittenProviders(def);
    if (elementIndicesWithOverwrittenProviders.length === 0) {
        return def;
    }
    // clone the whole view definition,
    // as it maintains references between the nodes that are hard to update.
    def = ((def.factory))(function () { return NOOP; });
    for (var /** @type {?} */ i = 0; i < elementIndicesWithOverwrittenProviders.length; i++) {
        applyProviderOverridesToElement(def, elementIndicesWithOverwrittenProviders[i]);
    }
    return def;
    /**
     * @param {?} def
     * @return {?}
     */
    function findElementIndicesWithOverwrittenProviders(def) {
        var /** @type {?} */ elIndicesWithOverwrittenProviders = [];
        var /** @type {?} */ lastElementDef = null;
        for (var /** @type {?} */ i = 0; i < def.nodes.length; i++) {
            var /** @type {?} */ nodeDef = def.nodes[i];
            if (nodeDef.flags & 1 /* TypeElement */) {
                lastElementDef = nodeDef;
            }
            if (lastElementDef && nodeDef.flags & 3840 /* CatProviderNoDirective */ &&
                providerOverrides.has(/** @type {?} */ ((nodeDef.provider)).token)) {
                elIndicesWithOverwrittenProviders.push(/** @type {?} */ ((lastElementDef)).index);
                lastElementDef = null;
            }
        }
        return elIndicesWithOverwrittenProviders;
    }
    /**
     * @param {?} viewDef
     * @param {?} elIndex
     * @return {?}
     */
    function applyProviderOverridesToElement(viewDef$$1, elIndex) {
        for (var /** @type {?} */ i = elIndex + 1; i < viewDef$$1.nodes.length; i++) {
            var /** @type {?} */ nodeDef = viewDef$$1.nodes[i];
            if (nodeDef.flags & 1 /* TypeElement */) {
                // stop at the next element
                return;
            }
            if (nodeDef.flags & 3840 /* CatProviderNoDirective */) {
                // Make all providers lazy, so that we don't get into trouble
                // with ordering problems of providers on the same element
                nodeDef.flags |= 4096 /* LazyProvider */;
                var /** @type {?} */ provider = ((nodeDef.provider));
                var /** @type {?} */ override = providerOverrides.get(provider.token);
                if (override) {
                    nodeDef.flags = (nodeDef.flags & ~3840 /* CatProviderNoDirective */) | override.flags;
                    provider.deps = splitDepsDsl(override.deps);
                    provider.value = override.value;
                }
            }
        }
    }
}
/**
 * @param {?} def
 * @return {?}
 */
function applyProviderOverridesToNgModule(def) {
    if (providerOverrides.size === 0 || !hasOverrrides(def)) {
        return def;
    }
    // clone the whole view definition,
    // as it maintains references between the nodes that are hard to update.
    def = ((def.factory))(function () { return NOOP; });
    applyProviderOverrides(def);
    return def;
    /**
     * @param {?} def
     * @return {?}
     */
    function hasOverrrides(def) {
        return def.providers.some(function (node) { return !!(node.flags & 3840 /* CatProviderNoDirective */) && providerOverrides.has(node.token); });
    }
    /**
     * @param {?} def
     * @return {?}
     */
    function applyProviderOverrides(def) {
        for (var /** @type {?} */ i = 0; i < def.providers.length; i++) {
            var /** @type {?} */ provider = def.providers[i];
            // Make all providers lazy, so that we don't get into trouble
            // with ordering problems of providers on the same element
            provider.flags |= 4096 /* LazyProvider */;
            var /** @type {?} */ override = providerOverrides.get(provider.token);
            if (override) {
                provider.flags = (provider.flags & ~3840 /* CatProviderNoDirective */) | override.flags;
                provider.deps = splitDepsDsl(override.deps);
                provider.value = override.value;
            }
        }
    }
}
/**
 * @param {?} view
 * @param {?} nodeIndex
 * @param {?} argStyle
 * @param {?=} v0
 * @param {?=} v1
 * @param {?=} v2
 * @param {?=} v3
 * @param {?=} v4
 * @param {?=} v5
 * @param {?=} v6
 * @param {?=} v7
 * @param {?=} v8
 * @param {?=} v9
 * @return {?}
 */
function prodCheckAndUpdateNode(view, nodeIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];
    checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
    return (nodeDef.flags & 224 /* CatPureExpression */) ?
        asPureExpressionData(view, nodeIndex).value :
        undefined;
}
/**
 * @param {?} view
 * @param {?} nodeIndex
 * @param {?} argStyle
 * @param {?=} v0
 * @param {?=} v1
 * @param {?=} v2
 * @param {?=} v3
 * @param {?=} v4
 * @param {?=} v5
 * @param {?=} v6
 * @param {?=} v7
 * @param {?=} v8
 * @param {?=} v9
 * @return {?}
 */
function prodCheckNoChangesNode(view, nodeIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];
    checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
    return (nodeDef.flags & 224 /* CatPureExpression */) ?
        asPureExpressionData(view, nodeIndex).value :
        undefined;
}
/**
 * @param {?} view
 * @return {?}
 */
function debugCheckAndUpdateView(view) {
    return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);
}
/**
 * @param {?} view
 * @return {?}
 */
function debugCheckNoChangesView(view) {
    return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);
}
/**
 * @param {?} view
 * @return {?}
 */
function debugDestroyView(view) {
    return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);
}
var DebugAction = {};
DebugAction.create = 0;
DebugAction.detectChanges = 1;
DebugAction.checkNoChanges = 2;
DebugAction.destroy = 3;
DebugAction.handleEvent = 4;
DebugAction[DebugAction.create] = "create";
DebugAction[DebugAction.detectChanges] = "detectChanges";
DebugAction[DebugAction.checkNoChanges] = "checkNoChanges";
DebugAction[DebugAction.destroy] = "destroy";
DebugAction[DebugAction.handleEvent] = "handleEvent";
var _currentAction;
var _currentView;
var _currentNodeIndex;
/**
 * @param {?} view
 * @param {?} nodeIndex
 * @return {?}
 */
function debugSetCurrentNode(view, nodeIndex) {
    _currentView = view;
    _currentNodeIndex = nodeIndex;
}
/**
 * @param {?} view
 * @param {?} nodeIndex
 * @param {?} eventName
 * @param {?} event
 * @return {?}
 */
function debugHandleEvent(view, nodeIndex, eventName, event) {
    debugSetCurrentNode(view, nodeIndex);
    return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);
}
/**
 * @param {?} view
 * @param {?} checkType
 * @return {?}
 */
function debugUpdateDirectives(view, checkType) {
    if (view.state & 128 /* Destroyed */) {
        throw viewDestroyedError(DebugAction[_currentAction]);
    }
    debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));
    return view.def.updateDirectives(debugCheckDirectivesFn, view);
    /**
     * @param {?} view
     * @param {?} nodeIndex
     * @param {?} argStyle
     * @param {...?} values
     * @return {?}
     */
    function debugCheckDirectivesFn(view, nodeIndex, argStyle) {
        var values = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            values[_i - 3] = arguments[_i];
        }
        var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];
        if (checkType === 0 /* CheckAndUpdate */) {
            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);
        }
        else {
            debugCheckNoChangesNode(view, nodeDef, argStyle, values);
        }
        if (nodeDef.flags & 16384 /* TypeDirective */) {
            debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));
        }
        return (nodeDef.flags & 224 /* CatPureExpression */) ?
            asPureExpressionData(view, nodeDef.index).value :
            undefined;
    }
}
/**
 * @param {?} view
 * @param {?} checkType
 * @return {?}
 */
function debugUpdateRenderer(view, checkType) {
    if (view.state & 128 /* Destroyed */) {
        throw viewDestroyedError(DebugAction[_currentAction]);
    }
    debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));
    return view.def.updateRenderer(debugCheckRenderNodeFn, view);
    /**
     * @param {?} view
     * @param {?} nodeIndex
     * @param {?} argStyle
     * @param {...?} values
     * @return {?}
     */
    function debugCheckRenderNodeFn(view, nodeIndex, argStyle) {
        var values = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            values[_i - 3] = arguments[_i];
        }
        var /** @type {?} */ nodeDef = view.def.nodes[nodeIndex];
        if (checkType === 0 /* CheckAndUpdate */) {
            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);
        }
        else {
            debugCheckNoChangesNode(view, nodeDef, argStyle, values);
        }
        if (nodeDef.flags & 3 /* CatRenderNode */) {
            debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));
        }
        return (nodeDef.flags & 224 /* CatPureExpression */) ?
            asPureExpressionData(view, nodeDef.index).value :
            undefined;
    }
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} argStyle
 * @param {?} givenValues
 * @return {?}
 */
function debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {
    var /** @type {?} */ changed = ((checkAndUpdateNode)).apply(void 0, [view, nodeDef, argStyle].concat(givenValues));
    if (changed) {
        var /** @type {?} */ values = argStyle === 1 /* Dynamic */ ? givenValues[0] : givenValues;
        if (nodeDef.flags & 16384 /* TypeDirective */) {
            var /** @type {?} */ bindingValues = {};
            for (var /** @type {?} */ i = 0; i < nodeDef.bindings.length; i++) {
                var /** @type {?} */ binding = nodeDef.bindings[i];
                var /** @type {?} */ value = values[i];
                if (binding.flags & 8 /* TypeProperty */) {
                    bindingValues[normalizeDebugBindingName(/** @type {?} */ ((binding.nonMinifiedName)))] =
                        normalizeDebugBindingValue(value);
                }
            }
            var /** @type {?} */ elDef = ((nodeDef.parent));
            var /** @type {?} */ el = asElementData(view, elDef.index).renderElement;
            if (!((elDef.element)).name) {
                // a comment.
                view.renderer.setValue(el, "bindings=" + JSON.stringify(bindingValues, null, 2));
            }
            else {
                // a regular element.
                for (var /** @type {?} */ attr in bindingValues) {
                    var /** @type {?} */ value = bindingValues[attr];
                    if (value != null) {
                        view.renderer.setAttribute(el, attr, value);
                    }
                    else {
                        view.renderer.removeAttribute(el, attr);
                    }
                }
            }
        }
    }
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} argStyle
 * @param {?} values
 * @return {?}
 */
function debugCheckNoChangesNode(view, nodeDef, argStyle, values) {
    ((checkNoChangesNode)).apply(void 0, [view, nodeDef, argStyle].concat(values));
}
/**
 * @param {?} name
 * @return {?}
 */
function normalizeDebugBindingName(name) {
    // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers
    name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));
    return "ng-reflect-" + name;
}
var CAMEL_CASE_REGEXP = /([A-Z])/g;
/**
 * @param {?} input
 * @return {?}
 */
function camelCaseToDashCase(input) {
    return input.replace(CAMEL_CASE_REGEXP, function () {
        var m = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            m[_i] = arguments[_i];
        }
        return '-' + m[1].toLowerCase();
    });
}
/**
 * @param {?} value
 * @return {?}
 */
function normalizeDebugBindingValue(value) {
    try {
        // Limit the size of the value as otherwise the DOM just gets polluted.
        return value != null ? value.toString().slice(0, 30) : value;
    }
    catch (e) {
        return '[ERROR] Exception while trying to serialize the value';
    }
}
/**
 * @param {?} view
 * @param {?} nodeIndex
 * @return {?}
 */
function nextDirectiveWithBinding(view, nodeIndex) {
    for (var /** @type {?} */ i = nodeIndex; i < view.def.nodes.length; i++) {
        var /** @type {?} */ nodeDef = view.def.nodes[i];
        if (nodeDef.flags & 16384 /* TypeDirective */ && nodeDef.bindings && nodeDef.bindings.length) {
            return i;
        }
    }
    return null;
}
/**
 * @param {?} view
 * @param {?} nodeIndex
 * @return {?}
 */
function nextRenderNodeWithBinding(view, nodeIndex) {
    for (var /** @type {?} */ i = nodeIndex; i < view.def.nodes.length; i++) {
        var /** @type {?} */ nodeDef = view.def.nodes[i];
        if ((nodeDef.flags & 3 /* CatRenderNode */) && nodeDef.bindings && nodeDef.bindings.length) {
            return i;
        }
    }
    return null;
}
var DebugContext_ = (function () {
    /**
     * @param {?} view
     * @param {?} nodeIndex
     */
    function DebugContext_(view, nodeIndex) {
        this.view = view;
        this.nodeIndex = nodeIndex;
        if (nodeIndex == null) {
            this.nodeIndex = nodeIndex = 0;
        }
        this.nodeDef = view.def.nodes[nodeIndex];
        var elDef = this.nodeDef;
        var elView = view;
        while (elDef && (elDef.flags & 1 /* TypeElement */) === 0) {
            elDef = elDef.parent;
        }
        if (!elDef) {
            while (!elDef && elView) {
                elDef = viewParentEl(elView);
                elView = elView.parent;
            }
        }
        this.elDef = elDef;
        this.elView = elView;
    }
    Object.defineProperty(DebugContext_.prototype, "elOrCompView", {
        /**
         * @return {?}
         */
        get: function () {
            // Has to be done lazily as we use the DebugContext also during creation of elements...
            return asElementData(this.elView, this.elDef.index).componentView || this.view;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext_.prototype, "injector", {
        /**
         * @return {?}
         */
        get: function () { return createInjector(this.elView, this.elDef); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext_.prototype, "component", {
        /**
         * @return {?}
         */
        get: function () { return this.elOrCompView.component; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext_.prototype, "context", {
        /**
         * @return {?}
         */
        get: function () { return this.elOrCompView.context; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext_.prototype, "providerTokens", {
        /**
         * @return {?}
         */
        get: function () {
            var /** @type {?} */ tokens = [];
            if (this.elDef) {
                for (var /** @type {?} */ i = this.elDef.index + 1; i <= this.elDef.index + this.elDef.childCount; i++) {
                    var /** @type {?} */ childDef = this.elView.def.nodes[i];
                    if (childDef.flags & 20224 /* CatProvider */) {
                        tokens.push(/** @type {?} */ ((childDef.provider)).token);
                    }
                    i += childDef.childCount;
                }
            }
            return tokens;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext_.prototype, "references", {
        /**
         * @return {?}
         */
        get: function () {
            var /** @type {?} */ references = {};
            if (this.elDef) {
                collectReferences(this.elView, this.elDef, references);
                for (var /** @type {?} */ i = this.elDef.index + 1; i <= this.elDef.index + this.elDef.childCount; i++) {
                    var /** @type {?} */ childDef = this.elView.def.nodes[i];
                    if (childDef.flags & 20224 /* CatProvider */) {
                        collectReferences(this.elView, childDef, references);
                    }
                    i += childDef.childCount;
                }
            }
            return references;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext_.prototype, "componentRenderElement", {
        /**
         * @return {?}
         */
        get: function () {
            var /** @type {?} */ elData = findHostElement(this.elOrCompView);
            return elData ? elData.renderElement : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DebugContext_.prototype, "renderNode", {
        /**
         * @return {?}
         */
        get: function () {
            return this.nodeDef.flags & 2 /* TypeText */ ? renderNode(this.view, this.nodeDef) :
                renderNode(this.elView, this.elDef);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} console
     * @param {...?} values
     * @return {?}
     */
    DebugContext_.prototype.logError = function (console) {
        var values = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            values[_i - 1] = arguments[_i];
        }
        var /** @type {?} */ logViewDef;
        var /** @type {?} */ logNodeIndex;
        if (this.nodeDef.flags & 2 /* TypeText */) {
            logViewDef = this.view.def;
            logNodeIndex = this.nodeDef.index;
        }
        else {
            logViewDef = this.elView.def;
            logNodeIndex = this.elDef.index;
        }
        // Note: we only generate a log function for text and element nodes
        // to make the generated code as small as possible.
        var /** @type {?} */ renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);
        var /** @type {?} */ currRenderNodeIndex = -1;
        var /** @type {?} */ nodeLogger = function () {
            currRenderNodeIndex++;
            if (currRenderNodeIndex === renderNodeIndex) {
                return (_a = console.error).bind.apply(_a, [console].concat(values));
            }
            else {
                return NOOP;
            }
            var _a;
        }; /** @type {?} */
        ((logViewDef.factory))(nodeLogger);
        if (currRenderNodeIndex < renderNodeIndex) {
            console.error('Illegal state: the ViewDefinitionFactory did not call the logger!');
            console.error.apply(console, values);
        }
    };
    return DebugContext_;
}());
/**
 * @param {?} viewDef
 * @param {?} nodeIndex
 * @return {?}
 */
function getRenderNodeIndex(viewDef$$1, nodeIndex) {
    var /** @type {?} */ renderNodeIndex = -1;
    for (var /** @type {?} */ i = 0; i <= nodeIndex; i++) {
        var /** @type {?} */ nodeDef = viewDef$$1.nodes[i];
        if (nodeDef.flags & 3 /* CatRenderNode */) {
            renderNodeIndex++;
        }
    }
    return renderNodeIndex;
}
/**
 * @param {?} view
 * @return {?}
 */
function findHostElement(view) {
    while (view && !isComponentView(view)) {
        view = ((view.parent));
    }
    if (view.parent) {
        return asElementData(view.parent, /** @type {?} */ ((viewParentEl(view))).index);
    }
    return null;
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} references
 * @return {?}
 */
function collectReferences(view, nodeDef, references) {
    for (var /** @type {?} */ refName in nodeDef.references) {
        references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);
    }
}
/**
 * @param {?} action
 * @param {?} fn
 * @param {?} self
 * @param {?} args
 * @return {?}
 */
function callWithDebugContext(action, fn, self, args) {
    var /** @type {?} */ oldAction = _currentAction;
    var /** @type {?} */ oldView = _currentView;
    var /** @type {?} */ oldNodeIndex = _currentNodeIndex;
    try {
        _currentAction = action;
        var /** @type {?} */ result = fn.apply(self, args);
        _currentView = oldView;
        _currentNodeIndex = oldNodeIndex;
        _currentAction = oldAction;
        return result;
    }
    catch (e) {
        if (isViewDebugError(e) || !_currentView) {
            throw e;
        }
        throw viewWrappedDebugError(e, /** @type {?} */ ((getCurrentDebugContext())));
    }
}
/**
 * @return {?}
 */
function getCurrentDebugContext() {
    return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;
}
var DebugRendererFactory2 = (function () {
    /**
     * @param {?} delegate
     */
    function DebugRendererFactory2(delegate) {
        this.delegate = delegate;
    }
    /**
     * @param {?} element
     * @param {?} renderData
     * @return {?}
     */
    DebugRendererFactory2.prototype.createRenderer = function (element, renderData) {
        return new DebugRenderer2(this.delegate.createRenderer(element, renderData));
    };
    /**
     * @return {?}
     */
    DebugRendererFactory2.prototype.begin = function () {
        if (this.delegate.begin) {
            this.delegate.begin();
        }
    };
    /**
     * @return {?}
     */
    DebugRendererFactory2.prototype.end = function () {
        if (this.delegate.end) {
            this.delegate.end();
        }
    };
    /**
     * @return {?}
     */
    DebugRendererFactory2.prototype.whenRenderingDone = function () {
        if (this.delegate.whenRenderingDone) {
            return this.delegate.whenRenderingDone();
        }
        return Promise.resolve(null);
    };
    return DebugRendererFactory2;
}());
var DebugRenderer2 = (function () {
    /**
     * @param {?} delegate
     */
    function DebugRenderer2(delegate) {
        this.delegate = delegate;
    }
    Object.defineProperty(DebugRenderer2.prototype, "data", {
        /**
         * @return {?}
         */
        get: function () { return this.delegate.data; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} node
     * @return {?}
     */
    DebugRenderer2.prototype.destroyNode = function (node) {
        removeDebugNodeFromIndex(/** @type {?} */ ((getDebugNode(node))));
        if (this.delegate.destroyNode) {
            this.delegate.destroyNode(node);
        }
    };
    /**
     * @return {?}
     */
    DebugRenderer2.prototype.destroy = function () { this.delegate.destroy(); };
    /**
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    DebugRenderer2.prototype.createElement = function (name, namespace) {
        var /** @type {?} */ el = this.delegate.createElement(name, namespace);
        var /** @type {?} */ debugCtx = getCurrentDebugContext();
        if (debugCtx) {
            var /** @type {?} */ debugEl = new DebugElement(el, null, debugCtx);
            debugEl.name = name;
            indexDebugNode(debugEl);
        }
        return el;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DebugRenderer2.prototype.createComment = function (value) {
        var /** @type {?} */ comment = this.delegate.createComment(value);
        var /** @type {?} */ debugCtx = getCurrentDebugContext();
        if (debugCtx) {
            indexDebugNode(new DebugNode(comment, null, debugCtx));
        }
        return comment;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DebugRenderer2.prototype.createText = function (value) {
        var /** @type {?} */ text = this.delegate.createText(value);
        var /** @type {?} */ debugCtx = getCurrentDebugContext();
        if (debugCtx) {
            indexDebugNode(new DebugNode(text, null, debugCtx));
        }
        return text;
    };
    /**
     * @param {?} parent
     * @param {?} newChild
     * @return {?}
     */
    DebugRenderer2.prototype.appendChild = function (parent, newChild) {
        var /** @type {?} */ debugEl = getDebugNode(parent);
        var /** @type {?} */ debugChildEl = getDebugNode(newChild);
        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {
            debugEl.addChild(debugChildEl);
        }
        this.delegate.appendChild(parent, newChild);
    };
    /**
     * @param {?} parent
     * @param {?} newChild
     * @param {?} refChild
     * @return {?}
     */
    DebugRenderer2.prototype.insertBefore = function (parent, newChild, refChild) {
        var /** @type {?} */ debugEl = getDebugNode(parent);
        var /** @type {?} */ debugChildEl = getDebugNode(newChild);
        var /** @type {?} */ debugRefEl = ((getDebugNode(refChild)));
        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {
            debugEl.insertBefore(debugRefEl, debugChildEl);
        }
        this.delegate.insertBefore(parent, newChild, refChild);
    };
    /**
     * @param {?} parent
     * @param {?} oldChild
     * @return {?}
     */
    DebugRenderer2.prototype.removeChild = function (parent, oldChild) {
        var /** @type {?} */ debugEl = getDebugNode(parent);
        var /** @type {?} */ debugChildEl = getDebugNode(oldChild);
        if (debugEl && debugChildEl && debugEl instanceof DebugElement) {
            debugEl.removeChild(debugChildEl);
        }
        this.delegate.removeChild(parent, oldChild);
    };
    /**
     * @param {?} selectorOrNode
     * @return {?}
     */
    DebugRenderer2.prototype.selectRootElement = function (selectorOrNode) {
        var /** @type {?} */ el = this.delegate.selectRootElement(selectorOrNode);
        var /** @type {?} */ debugCtx = getCurrentDebugContext();
        if (debugCtx) {
            indexDebugNode(new DebugElement(el, null, debugCtx));
        }
        return el;
    };
    /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @param {?=} namespace
     * @return {?}
     */
    DebugRenderer2.prototype.setAttribute = function (el, name, value, namespace) {
        var /** @type {?} */ debugEl = getDebugNode(el);
        if (debugEl && debugEl instanceof DebugElement) {
            var /** @type {?} */ fullName = namespace ? namespace + ':' + name : name;
            debugEl.attributes[fullName] = value;
        }
        this.delegate.setAttribute(el, name, value, namespace);
    };
    /**
     * @param {?} el
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    DebugRenderer2.prototype.removeAttribute = function (el, name, namespace) {
        var /** @type {?} */ debugEl = getDebugNode(el);
        if (debugEl && debugEl instanceof DebugElement) {
            var /** @type {?} */ fullName = namespace ? namespace + ':' + name : name;
            debugEl.attributes[fullName] = null;
        }
        this.delegate.removeAttribute(el, name, namespace);
    };
    /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    DebugRenderer2.prototype.addClass = function (el, name) {
        var /** @type {?} */ debugEl = getDebugNode(el);
        if (debugEl && debugEl instanceof DebugElement) {
            debugEl.classes[name] = true;
        }
        this.delegate.addClass(el, name);
    };
    /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    DebugRenderer2.prototype.removeClass = function (el, name) {
        var /** @type {?} */ debugEl = getDebugNode(el);
        if (debugEl && debugEl instanceof DebugElement) {
            debugEl.classes[name] = false;
        }
        this.delegate.removeClass(el, name);
    };
    /**
     * @param {?} el
     * @param {?} style
     * @param {?} value
     * @param {?} flags
     * @return {?}
     */
    DebugRenderer2.prototype.setStyle = function (el, style, value, flags) {
        var /** @type {?} */ debugEl = getDebugNode(el);
        if (debugEl && debugEl instanceof DebugElement) {
            debugEl.styles[style] = value;
        }
        this.delegate.setStyle(el, style, value, flags);
    };
    /**
     * @param {?} el
     * @param {?} style
     * @param {?} flags
     * @return {?}
     */
    DebugRenderer2.prototype.removeStyle = function (el, style, flags) {
        var /** @type {?} */ debugEl = getDebugNode(el);
        if (debugEl && debugEl instanceof DebugElement) {
            debugEl.styles[style] = null;
        }
        this.delegate.removeStyle(el, style, flags);
    };
    /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    DebugRenderer2.prototype.setProperty = function (el, name, value) {
        var /** @type {?} */ debugEl = getDebugNode(el);
        if (debugEl && debugEl instanceof DebugElement) {
            debugEl.properties[name] = value;
        }
        this.delegate.setProperty(el, name, value);
    };
    /**
     * @param {?} target
     * @param {?} eventName
     * @param {?} callback
     * @return {?}
     */
    DebugRenderer2.prototype.listen = function (target, eventName, callback) {
        if (typeof target !== 'string') {
            var /** @type {?} */ debugEl = getDebugNode(target);
            if (debugEl) {
                debugEl.listeners.push(new EventListener(eventName, callback));
            }
        }
        return this.delegate.listen(target, eventName, callback);
    };
    /**
     * @param {?} node
     * @return {?}
     */
    DebugRenderer2.prototype.parentNode = function (node) { return this.delegate.parentNode(node); };
    /**
     * @param {?} node
     * @return {?}
     */
    DebugRenderer2.prototype.nextSibling = function (node) { return this.delegate.nextSibling(node); };
    /**
     * @param {?} node
     * @param {?} value
     * @return {?}
     */
    DebugRenderer2.prototype.setValue = function (node, value) { return this.delegate.setValue(node, value); };
    return DebugRenderer2;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} override
 * @return {?}
 */
function overrideProvider(override) {
    initServicesIfNeeded();
    return Services.overrideProvider(override);
}
/**
 * @return {?}
 */
function clearProviderOverrides() {
    initServicesIfNeeded();
    return Services.clearProviderOverrides();
}
/**
 * @param {?} ngModuleType
 * @param {?} bootstrapComponents
 * @param {?} defFactory
 * @return {?}
 */
function createNgModuleFactory(ngModuleType, bootstrapComponents, defFactory) {
    return new NgModuleFactory_(ngModuleType, bootstrapComponents, defFactory);
}
var NgModuleFactory_ = (function (_super) {
    __extends(NgModuleFactory_, _super);
    /**
     * @param {?} moduleType
     * @param {?} _bootstrapComponents
     * @param {?} _ngModuleDefFactory
     */
    function NgModuleFactory_(moduleType, _bootstrapComponents, _ngModuleDefFactory) {
        var _this = 
        // Attention: this ctor is called as top level function.
        // Putting any logic in here will destroy closure tree shaking!
        _super.call(this) || this;
        _this.moduleType = moduleType;
        _this._bootstrapComponents = _bootstrapComponents;
        _this._ngModuleDefFactory = _ngModuleDefFactory;
        return _this;
    }
    /**
     * @param {?} parentInjector
     * @return {?}
     */
    NgModuleFactory_.prototype.create = function (parentInjector) {
        initServicesIfNeeded();
        var /** @type {?} */ def = resolveDefinition(this._ngModuleDefFactory);
        return Services.createNgModuleRef(this.moduleType, parentInjector || Injector.NULL, this._bootstrapComponents, def);
    };
    return NgModuleFactory_;
}(NgModuleFactory));
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@experimental Animation support is experimental.
 */
/**
 * `trigger` is an animation-specific function that is designed to be used inside of Angular's
 * animation DSL language. If this information is new, please navigate to the
 * {\@link Component#animations component animations metadata page} to gain a better
 * understanding of how animations in Angular are used.
 *
 * `trigger` Creates an animation trigger which will a list of {\@link state state} and
 * {\@link transition transition} entries that will be evaluated when the expression
 * bound to the trigger changes.
 *
 * Triggers are registered within the component annotation data under the
 * {\@link Component#animations animations section}. An animation trigger can be placed on an element
 * within a template by referencing the name of the trigger followed by the expression value that
 * the
 * trigger is bound to (in the form of `[\@triggerName]="expression"`.
 *
 * ### Usage
 *
 * `trigger` will create an animation trigger reference based on the provided `name` value. The
 * provided `animation` value is expected to be an array consisting of {\@link state state} and
 * {\@link transition transition} declarations.
 *
 * ```typescript
 * \@Component({
 *   selector: 'my-component',
 *   templateUrl: 'my-component-tpl.html',
 *   animations: [
 *     trigger("myAnimationTrigger", [
 *       state(...),
 *       state(...),
 *       transition(...),
 *       transition(...)
 *     ])
 *   ]
 * })
 * class MyComponent {
 *   myStatusExp = "something";
 * }
 * ```
 *
 * The template associated with this component will make use of the `myAnimationTrigger` animation
 * trigger by binding to an element within its template code.
 *
 * ```html
 * <!-- somewhere inside of my-component-tpl.html -->
 * <div [\@myAnimationTrigger]="myStatusExp">...</div>
 * ```
 *
 * ## Disable Child Animations
 * A special animation control binding called `\@.disabled` can be placed on an element which will
 * then disable animations for any inner animation triggers situated within the element.
 *
 * When true, the `\@.disabled` binding will prevent inner animations from rendering. The example
 * below shows how to use this feature:
 *
 * ```ts
 * \@Component({
 *   selector: 'my-component',
 *   template: `
 *     <div [\@.disabled]="isDisabled">
 *       <div [\@childAnimation]="exp"></div>
 *     </div>
 *   `,
 *   animations: [
 *     trigger("childAnimation", [
 *       // ...
 *     ])
 *   ]
 * })
 * class MyComponent {
 *   isDisabled = true;
 *   exp = '...';
 * }
 * ```
 *
 * The `\@childAnimation` trigger will not animate because `\@.disabled` prevents it from happening
 * (when true).
 *
 * Note that `\@.disbled` will only disable inner animations (any animations running on the same
 * element will not be disabled).
 *
 * ### Disabling Animations Application-wide
 * When an area of the template is set to have animations disabled, **all** inner components will
 * also have their animations disabled as well. This means that all animations for an angular
 * application can be disabled by placing a host binding set on `\@.disabled` on the topmost Angular
 * component.
 *
 * ```ts
 * import {Component, HostBinding} from '\@angular/core';
 *
 * \@Component({
 *   selector: 'app-component',
 *   templateUrl: 'app.component.html',
 * })
 * class AppComponent {
 *   \@HostBinding('\@.disabled')
 *   public animationsDisabled = true;
 * }
 * ```
 *
 * ### What about animations that us `query()` and `animateChild()`?
 * Despite inner animations being disabled, a parent animation can {\@link query query} for inner
 * elements located in disabled areas of the template and still animate them as it sees fit. This is
 * also the case for when a sub animation is queried by a parent and then later animated using {\@link
 * animateChild animateChild}.
 *
 * \@experimental Animation support is experimental.
 * @param {?} name
 * @param {?} definitions
 * @return {?}
 */
function trigger$1(name, definitions) {
    return { type: 7 /* Trigger */, name: name, definitions: definitions, options: {} };
}
/**
 * `animate` is an animation-specific function that is designed to be used inside of Angular's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations component animations metadata page} to gain a better understanding of
 * how animations in Angular are used.
 *
 * `animate` specifies an animation step that will apply the provided `styles` data for a given
 * amount of time based on the provided `timing` expression value. Calls to `animate` are expected
 * to be used within {\@link sequence an animation sequence}, {\@link group group}, or {\@link
 * transition transition}.
 *
 * ### Usage
 *
 * The `animate` function accepts two input parameters: `timing` and `styles`:
 *
 * - `timing` is a string based value that can be a combination of a duration with optional delay
 * and easing values. The format for the expression breaks down to `duration delay easing`
 * (therefore a value such as `1s 100ms ease-out` will be parse itself into `duration=1000,
 * delay=100, easing=ease-out`. If a numeric value is provided then that will be used as the
 * `duration` value in millisecond form.
 * - `styles` is the style input data which can either be a call to {\@link style style} or {\@link
 * keyframes keyframes}. If left empty then the styles from the destination state will be collected
 * and used (this is useful when describing an animation step that will complete an animation by
 * {\@link transition#the-final-animate-call animating to the final state}).
 *
 * ```typescript
 * // various functions for specifying timing data
 * animate(500, style(...))
 * animate("1s", style(...))
 * animate("100ms 0.5s", style(...))
 * animate("5s ease", style(...))
 * animate("5s 10ms cubic-bezier(.17,.67,.88,.1)", style(...))
 *
 * // either style() of keyframes() can be used
 * animate(500, style({ background: "red" }))
 * animate(500, keyframes([
 *   style({ background: "blue" })),
 *   style({ background: "red" }))
 * ])
 * ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} timings
 * @param {?=} styles
 * @return {?}
 */
function animate$1(timings, styles) {
    if (styles === void 0) { styles = null; }
    return { type: 4 /* Animate */, styles: styles, timings: timings };
}
/**
 * `group` is an animation-specific function that is designed to be used inside of Angular's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations component animations metadata page} to gain a better understanding of
 * how animations in Angular are used.
 *
 * `group` specifies a list of animation steps that are all run in parallel. Grouped animations are
 * useful when a series of styles must be animated/closed off at different starting/ending times.
 *
 * The `group` function can either be used within a {\@link sequence sequence} or a {\@link transition
 * transition} and it will only continue to the next instruction once all of the inner animation
 * steps have completed.
 *
 * ### Usage
 *
 * The `steps` data that is passed into the `group` animation function can either consist of {\@link
 * style style} or {\@link animate animate} function calls. Each call to `style()` or `animate()`
 * within a group will be executed instantly (use {\@link keyframes keyframes} or a {\@link
 * animate#usage animate() with a delay value} to offset styles to be applied at a later time).
 *
 * ```typescript
 * group([
 *   animate("1s", { background: "black" }))
 *   animate("2s", { color: "white" }))
 * ])
 * ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} steps
 * @param {?=} options
 * @return {?}
 */
function group$1(steps, options) {
    if (options === void 0) { options = null; }
    return { type: 3 /* Group */, steps: steps, options: options };
}
/**
 * `sequence` is an animation-specific function that is designed to be used inside of Angular's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations component animations metadata page} to gain a better understanding of
 * how animations in Angular are used.
 *
 * `sequence` Specifies a list of animation steps that are run one by one. (`sequence` is used by
 * default when an array is passed as animation data into {\@link transition transition}.)
 *
 * The `sequence` function can either be used within a {\@link group group} or a {\@link transition
 * transition} and it will only continue to the next instruction once each of the inner animation
 * steps have completed.
 *
 * To perform animation styling in parallel with other animation steps then have a look at the
 * {\@link group group} animation function.
 *
 * ### Usage
 *
 * The `steps` data that is passed into the `sequence` animation function can either consist of
 * {\@link style style} or {\@link animate animate} function calls. A call to `style()` will apply the
 * provided styling data immediately while a call to `animate()` will apply its styling data over a
 * given time depending on its timing data.
 *
 * ```typescript
 * sequence([
 *   style({ opacity: 0 })),
 *   animate("1s", { opacity: 1 }))
 * ])
 * ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} steps
 * @param {?=} options
 * @return {?}
 */
function sequence$1(steps, options) {
    if (options === void 0) { options = null; }
    return { type: 2 /* Sequence */, steps: steps, options: options };
}
/**
 * `style` is an animation-specific function that is designed to be used inside of Angular's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations component animations metadata page} to gain a better understanding of
 * how animations in Angular are used.
 *
 * `style` declares a key/value object containing CSS properties/styles that can then be used for
 * {\@link state animation states}, within an {\@link sequence animation sequence}, or as styling data
 * for both {\@link animate animate} and {\@link keyframes keyframes}.
 *
 * ### Usage
 *
 * `style` takes in a key/value string map as data and expects one or more CSS property/value pairs
 * to be defined.
 *
 * ```typescript
 * // string values are used for css properties
 * style({ background: "red", color: "blue" })
 *
 * // numerical (pixel) values are also supported
 * style({ width: 100, height: 0 })
 * ```
 *
 * #### Auto-styles (using `*`)
 *
 * When an asterix (`*`) character is used as a value then it will be detected from the element
 * being animated and applied as animation data when the animation starts.
 *
 * This feature proves useful for a state depending on layout and/or environment factors; in such
 * cases the styles are calculated just before the animation starts.
 *
 * ```typescript
 * // the steps below will animate from 0 to the
 * // actual height of the element
 * style({ height: 0 }),
 * animate("1s", style({ height: "*" }))
 * ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} tokens
 * @return {?}
 */
function style$1(tokens) {
    return { type: 6 /* Style */, styles: tokens, offset: null };
}
/**
 * `state` is an animation-specific function that is designed to be used inside of Angular's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations component animations metadata page} to gain a better understanding of
 * how animations in Angular are used.
 *
 * `state` declares an animation state within the given trigger. When a state is active within a
 * component then its associated styles will persist on the element that the trigger is attached to
 * (even when the animation ends).
 *
 * To animate between states, have a look at the animation {\@link transition transition} DSL
 * function. To register states to an animation trigger please have a look at the {\@link trigger
 * trigger} function.
 *
 * #### The `void` state
 *
 * The `void` state value is a reserved word that angular uses to determine when the element is not
 * apart of the application anymore (e.g. when an `ngIf` evaluates to false then the state of the
 * associated element is void).
 *
 * #### The `*` (default) state
 *
 * The `*` state (when styled) is a fallback state that will be used if the state that is being
 * animated is not declared within the trigger.
 *
 * ### Usage
 *
 * `state` will declare an animation state with its associated styles
 * within the given trigger.
 *
 * - `stateNameExpr` can be one or more state names separated by commas.
 * - `styles` refers to the {\@link style styling data} that will be persisted on the element once
 * the state has been reached.
 *
 * ```typescript
 * // "void" is a reserved name for a state and is used to represent
 * // the state in which an element is detached from from the application.
 * state("void", style({ height: 0 }))
 *
 * // user-defined states
 * state("closed", style({ height: 0 }))
 * state("open, visible", style({ height: "*" }))
 * ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} name
 * @param {?} styles
 * @return {?}
 */
function state$1(name, styles) {
    return { type: 0 /* State */, name: name, styles: styles };
}
/**
 * `keyframes` is an animation-specific function that is designed to be used inside of Angular's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations component animations metadata page} to gain a better understanding of
 * how animations in Angular are used.
 *
 * `keyframes` specifies a collection of {\@link style style} entries each optionally characterized
 * by an `offset` value.
 *
 * ### Usage
 *
 * The `keyframes` animation function is designed to be used alongside the {\@link animate animate}
 * animation function. Instead of applying animations from where they are currently to their
 * destination, keyframes can describe how each style entry is applied and at what point within the
 * animation arc (much like CSS Keyframe Animations do).
 *
 * For each `style()` entry an `offset` value can be set. Doing so allows to specifiy at what
 * percentage of the animate time the styles will be applied.
 *
 * ```typescript
 * // the provided offset values describe when each backgroundColor value is applied.
 * animate("5s", keyframes([
 *   style({ backgroundColor: "red", offset: 0 }),
 *   style({ backgroundColor: "blue", offset: 0.2 }),
 *   style({ backgroundColor: "orange", offset: 0.3 }),
 *   style({ backgroundColor: "black", offset: 1 })
 * ]))
 * ```
 *
 * Alternatively, if there are no `offset` values used within the style entries then the offsets
 * will be calculated automatically.
 *
 * ```typescript
 * animate("5s", keyframes([
 *   style({ backgroundColor: "red" }) // offset = 0
 *   style({ backgroundColor: "blue" }) // offset = 0.33
 *   style({ backgroundColor: "orange" }) // offset = 0.66
 *   style({ backgroundColor: "black" }) // offset = 1
 * ]))
 * ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} steps
 * @return {?}
 */
function keyframes$1(steps) {
    return { type: 5 /* Keyframes */, steps: steps };
}
/**
 * `transition` is an animation-specific function that is designed to be used inside of Angular's
 * animation DSL language. If this information is new, please navigate to the {\@link
 * Component#animations component animations metadata page} to gain a better understanding of
 * how animations in Angular are used.
 *
 * `transition` declares the {\@link sequence sequence of animation steps} that will be run when the
 * provided `stateChangeExpr` value is satisfied. The `stateChangeExpr` consists of a `state1 =>
 * state2` which consists of two known states (use an asterix (`*`) to refer to a dynamic starting
 * and/or ending state).
 *
 * A function can also be provided as the `stateChangeExpr` argument for a transition and this
 * function will be executed each time a state change occurs. If the value returned within the
 * function is true then the associated animation will be run.
 *
 * Animation transitions are placed within an {\@link trigger animation trigger}. For an transition
 * to animate to a state value and persist its styles then one or more {\@link state animation
 * states} is expected to be defined.
 *
 * ### Usage
 *
 * An animation transition is kicked off the `stateChangeExpr` predicate evaluates to true based on
 * what the previous state is and what the current state has become. In other words, if a transition
 * is defined that matches the old/current state criteria then the associated animation will be
 * triggered.
 *
 * ```typescript
 * // all transition/state changes are defined within an animation trigger
 * trigger("myAnimationTrigger", [
 *   // if a state is defined then its styles will be persisted when the
 *   // animation has fully completed itself
 *   state("on", style({ background: "green" })),
 *   state("off", style({ background: "grey" })),
 *
 *   // a transition animation that will be kicked off when the state value
 *   // bound to "myAnimationTrigger" changes from "on" to "off"
 *   transition("on => off", animate(500)),
 *
 *   // it is also possible to do run the same animation for both directions
 *   transition("on <=> off", animate(500)),
 *
 *   // or to define multiple states pairs separated by commas
 *   transition("on => off, off => void", animate(500)),
 *
 *   // this is a catch-all state change for when an element is inserted into
 *   // the page and the destination state is unknown
 *   transition("void => *", [
 *     style({ opacity: 0 }),
 *     animate(500)
 *   ]),
 *
 *   // this will capture a state change between any states
 *   transition("* => *", animate("1s 0s")),
 *
 *   // you can also go full out and include a function
 *   transition((fromState, toState) => {
 *     // when `true` then it will allow the animation below to be invoked
 *     return fromState == "off" && toState == "on";
 *   }, animate("1s 0s"))
 * ])
 * ```
 *
 * The template associated with this component will make use of the `myAnimationTrigger` animation
 * trigger by binding to an element within its template code.
 *
 * ```html
 * <!-- somewhere inside of my-component-tpl.html -->
 * <div [\@myAnimationTrigger]="myStatusExp">...</div>
 * ```
 *
 * #### The final `animate` call
 *
 * If the final step within the transition steps is a call to `animate()` that **only** uses a
 * timing value with **no style data** then it will be automatically used as the final animation arc
 * for the element to animate itself to the final state. This involves an automatic mix of
 * adding/removing CSS styles so that the element will be in the exact state it should be for the
 * applied state to be presented correctly.
 *
 * ```
 * // start off by hiding the element, but make sure that it animates properly to whatever state
 * // is currently active for "myAnimationTrigger"
 * transition("void => *", [
 *   style({ opacity: 0 }),
 *   animate(500)
 * ])
 * ```
 *
 * ### Transition Aliases (`:enter` and `:leave`)
 *
 * Given that enter (insertion) and leave (removal) animations are so common, the `transition`
 * function accepts both `:enter` and `:leave` values which are aliases for the `void => *` and `*
 * => void` state changes.
 *
 * ```
 * transition(":enter", [
 *   style({ opacity: 0 }),
 *   animate(500, style({ opacity: 1 }))
 * ])
 * transition(":leave", [
 *   animate(500, style({ opacity: 0 }))
 * ])
 * ```
 *
 * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
 *
 * \@experimental Animation support is experimental.
 * @param {?} stateChangeExpr
 * @param {?} steps
 * @param {?=} options
 * @return {?}
 */
function transition$1(stateChangeExpr, steps, options) {
    if (options === void 0) { options = null; }
    return { type: 1 /* Transition */, expr: stateChangeExpr, animation: steps, options: options };
}
/**
 * `animation` is an animation-specific function that is designed to be used inside of Angular's
 * animation DSL language.
 *
 * `var myAnimation = animation(...)` is designed to produce a reusable animation that can be later
 * invoked in another animation or sequence. Reusable animations are designed to make use of
 * animation parameters and the produced animation can be used via the `useAnimation` method.
 *
 * ```
 * var fadeAnimation = animation([
 *   style({ opacity: '{{ start }}' }),
 *   animate('{{ time }}',
 *     style({ opacity: '{{ end }}'))
 * ], { params: { time: '1000ms', start: 0, end: 1 }});
 * ```
 *
 * If parameters are attached to an animation then they act as **default parameter values**. When an
 * animation is invoked via `useAnimation` then parameter values are allowed to be passed in
 * directly. If any of the passed in parameter values are missing then the default values will be
 * used.
 *
 * ```
 * useAnimation(fadeAnimation, {
 *   params: {
 *     time: '2s',
 *     start: 1,
 *     end: 0
 *   }
 * })
 * ```
 *
 * If one or more parameter values are missing before animated then an error will be thrown.
 *
 * \@experimental Animation support is experimental.
 * @param {?} steps
 * @param {?=} options
 * @return {?}
 */
/**
 * `animateChild` is an animation-specific function that is designed to be used inside of Angular's
 * animation DSL language. It works by allowing a queried element to execute its own
 * animation within the animation sequence.
 *
 * Each time an animation is triggered in angular, the parent animation
 * will always get priority and any child animations will be blocked. In order
 * for a child animation to run, the parent animation must query each of the elements
 * containing child animations and then allow the animations to run using `animateChild`.
 *
 * The example HTML code below shows both parent and child elements that have animation
 * triggers that will execute at the same time.
 *
 * ```html
 * <!-- parent-child.component.html -->
 * <button (click)="exp =! exp">Toggle</button>
 * <hr>
 *
 * <div [\@parentAnimation]="exp">
 *   <header>Hello</header>
 *   <div [\@childAnimation]="exp">
 *       one
 *   </div>
 *   <div [\@childAnimation]="exp">
 *       two
 *   </div>
 *   <div [\@childAnimation]="exp">
 *       three
 *   </div>
 * </div>
 * ```
 *
 * Now when the `exp` value changes to true, only the `parentAnimation` animation will animate
 * because it has priority. However, using `query` and `animateChild` each of the inner animations
 * can also fire:
 *
 * ```ts
 * // parent-child.component.ts
 * import {trigger, transition, animate, style, query, animateChild} from '\@angular/animations';
 * \@Component({
 *   selector: 'parent-child-component',
 *   animations: [
 *     trigger('parentAnimation', [
 *       transition('false => true', [
 *         query('header', [
 *           style({ opacity: 0 }),
 *           animate(500, style({ opacity: 1 }))
 *         ]),
 *         query('\@childAnimation', [
 *           animateChild()
 *         ])
 *       ])
 *     ]),
 *     trigger('childAnimation', [
 *       transition('false => true', [
 *         style({ opacity: 0 }),
 *         animate(500, style({ opacity: 1 }))
 *       ])
 *     ])
 *   ]
 * })
 * class ParentChildCmp {
 *   exp: boolean = false;
 * }
 * ```
 *
 * In the animation code above, when the `parentAnimation` transition kicks off it first queries to
 * find the header element and fades it in. It then finds each of the sub elements that contain the
 * `\@childAnimation` trigger and then allows for their animations to fire.
 *
 * This example can be further extended by using stagger:
 *
 * ```ts
 * query('\@childAnimation', stagger(100, [
 *   animateChild()
 * ]))
 * ```
 *
 * Now each of the sub animations start off with respect to the `100ms` staggering step.
 *
 * ## The first frame of child animations
 * When sub animations are executed using `animateChild` the animation engine will always apply the
 * first frame of every sub animation immediately at the start of the animation sequence. This way
 * the parent animation does not need to set any initial styling data on the sub elements before the
 * sub animations kick off.
 *
 * In the example above the first frame of the `childAnimation`'s `false => true` transition
 * consists of a style of `opacity: 0`. This is applied immediately when the `parentAnimation`
 * animation transition sequence starts. Only then when the `\@childAnimation` is queried and called
 * with `animateChild` will it then animate to its destination of `opacity: 1`.
 *
 * Note that this feature designed to be used alongside {\@link query query()} and it will only work
 * with animations that are assigned using the Angular animation DSL (this means that CSS keyframes
 * and transitions are not handled by this API).
 *
 * \@experimental Animation support is experimental.
 * @param {?=} options
 * @return {?}
 */
/**
 * `useAnimation` is an animation-specific function that is designed to be used inside of Angular's
 * animation DSL language. It is used to kick off a reusable animation that is created using {\@link
 * animation animation()}.
 *
 * \@experimental Animation support is experimental.
 * @param {?} animation
 * @param {?=} options
 * @return {?}
 */
/**
 * `query` is an animation-specific function that is designed to be used inside of Angular's
 * animation DSL language.
 *
 * query() is used to find one or more inner elements within the current element that is
 * being animated within the sequence. The provided animation steps are applied
 * to the queried element (by default, an array is provided, then this will be
 * treated as an animation sequence).
 *
 * ### Usage
 *
 * query() is designed to collect mutiple elements and works internally by using
 * `element.querySelectorAll`. An additional options object can be provided which
 * can be used to limit the total amount of items to be collected.
 *
 * ```js
 * query('div', [
 *   animate(...),
 *   animate(...)
 * ], { limit: 1 })
 * ```
 *
 * query(), by default, will throw an error when zero items are found. If a query
 * has the `optional` flag set to true then this error will be ignored.
 *
 * ```js
 * query('.some-element-that-may-not-be-there', [
 *   animate(...),
 *   animate(...)
 * ], { optional: true })
 * ```
 *
 * ### Special Selector Values
 *
 * The selector value within a query can collect elements that contain angular-specific
 * characteristics
 * using special pseudo-selectors tokens.
 *
 * These include:
 *
 *  - Querying for newly inserted/removed elements using `query(":enter")`/`query(":leave")`
 *  - Querying all currently animating elements using `query(":animating")`
 *  - Querying elements that contain an animation trigger using `query("\@triggerName")`
 *  - Querying all elements that contain an animation triggers using `query("\@*")`
 *  - Including the current element into the animation sequence using `query(":self")`
 *
 *
 *  Each of these pseudo-selector tokens can be merged together into a combined query selector
 * string:
 *
 *  ```
 *  query(':self, .record:enter, .record:leave, \@subTrigger', [...])
 *  ```
 *
 * ### Demo
 *
 * ```
 * \@Component({
 *   selector: 'inner',
 *   template: `
 *     <div [\@queryAnimation]="exp">
 *       <h1>Title</h1>
 *       <div class="content">
 *         Blah blah blah
 *       </div>
 *     </div>
 *   `,
 *   animations: [
 *    trigger('queryAnimation', [
 *      transition('* => goAnimate', [
 *        // hide the inner elements
 *        query('h1', style({ opacity: 0 })),
 *        query('.content', style({ opacity: 0 })),
 *
 *        // animate the inner elements in, one by one
 *        query('h1', animate(1000, style({ opacity: 1 })),
 *        query('.content', animate(1000, style({ opacity: 1 })),
 *      ])
 *    ])
 *  ]
 * })
 * class Cmp {
 *   exp = '';
 *
 *   goAnimate() {
 *     this.exp = 'goAnimate';
 *   }
 * }
 * ```
 *
 * \@experimental Animation support is experimental.
 * @param {?} selector
 * @param {?} animation
 * @param {?=} options
 * @return {?}
 */
/**
 * `stagger` is an animation-specific function that is designed to be used inside of Angular's
 * animation DSL language. It is designed to be used inside of an animation {\@link query query()}
 * and works by issuing a timing gap between after each queried item is animated.
 *
 * ### Usage
 *
 * In the example below there is a container element that wraps a list of items stamped out
 * by an ngFor. The container element contains an animation trigger that will later be set
 * to query for each of the inner items.
 *
 * ```html
 * <!-- list.component.html -->
 * <button (click)="toggle()">Show / Hide Items</button>
 * <hr />
 * <div [\@listAnimation]="items.length">
 *   <div *ngFor="let item of items">
 *     {{ item }}
 *   </div>
 * </div>
 * ```
 *
 * The component code for this looks as such:
 *
 * ```ts
 * import {trigger, transition, style, animate, query, stagger} from '\@angular/animations';
 * \@Component({
 *   templateUrl: 'list.component.html',
 *   animations: [
 *     trigger('listAnimation', [
 *        //...
 *     ])
 *   ]
 * })
 * class ListComponent {
 *   items = [];
 *
 *   showItems() {
 *     this.items = [0,1,2,3,4];
 *   }
 *
 *   hideItems() {
 *     this.items = [];
 *   }
 *
 *   toggle() {
 *     this.items.length ? this.hideItems() : this.showItems();
 *   }
 * }
 * ```
 *
 * And now for the animation trigger code:
 *
 * ```ts
 * trigger('listAnimation', [
 *   transition('* => *', [ // each time the binding value changes
 *     query(':leave', [
 *       stagger(100, [
 *         animate('0.5s', style({ opacity: 0 }))
 *       ])
 *     ]),
 *     query(':enter', [
 *       style({ opacity: 0 }),
 *       stagger(100, [
 *         animate('0.5s', style({ opacity: 1 }))
 *       ])
 *     ])
 *   ])
 * ])
 * ```
 *
 * Now each time the items are added/removed then either the opacity
 * fade-in animation will run or each removed item will be faded out.
 * When either of these animations occur then a stagger effect will be
 * applied after each item's animation is started.
 *
 * \@experimental Animation support is experimental.
 * @param {?} timings
 * @param {?} animation
 * @return {?}
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 */
var AUTO_STYLE$$1 = '*';
/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @param {?} name
 * @param {?} definitions
 * @return {?}
 */
function trigger$$1(name, definitions) {
    return trigger$1(name, definitions);
}
/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @param {?} timings
 * @param {?=} styles
 * @return {?}
 */
function animate$$1(timings, styles) {
    return animate$1(timings, styles);
}
/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @param {?} steps
 * @return {?}
 */
function group$$1(steps) {
    return group$1(steps);
}
/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @param {?} steps
 * @return {?}
 */
function sequence$$1(steps) {
    return sequence$1(steps);
}
/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @param {?} tokens
 * @return {?}
 */
function style$$1(tokens) {
    return style$1(tokens);
}
/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @param {?} name
 * @param {?} styles
 * @return {?}
 */
function state$$1(name, styles) {
    return state$1(name, styles);
}
/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @param {?} steps
 * @return {?}
 */
function keyframes$$1(steps) {
    return keyframes$1(steps);
}
/**
 * @deprecated This symbol has moved. Please Import from \@angular/animations instead!
 * @param {?} stateChangeExpr
 * @param {?} steps
 * @return {?}
 */
function transition$$1(stateChangeExpr, steps) {
    return transition$1(stateChangeExpr, steps);
}




var core_es5 = Object.freeze({
	Class: Class,
	createPlatform: createPlatform,
	assertPlatform: assertPlatform,
	destroyPlatform: destroyPlatform,
	getPlatform: getPlatform,
	PlatformRef: PlatformRef,
	ApplicationRef: ApplicationRef,
	enableProdMode: enableProdMode,
	isDevMode: isDevMode,
	createPlatformFactory: createPlatformFactory,
	NgProbeToken: NgProbeToken,
	APP_ID: APP_ID,
	PACKAGE_ROOT_URL: PACKAGE_ROOT_URL,
	PLATFORM_INITIALIZER: PLATFORM_INITIALIZER,
	PLATFORM_ID: PLATFORM_ID,
	APP_BOOTSTRAP_LISTENER: APP_BOOTSTRAP_LISTENER,
	APP_INITIALIZER: APP_INITIALIZER,
	ApplicationInitStatus: ApplicationInitStatus,
	DebugElement: DebugElement,
	DebugNode: DebugNode,
	asNativeElements: asNativeElements,
	getDebugNode: getDebugNode,
	Testability: Testability,
	TestabilityRegistry: TestabilityRegistry,
	setTestabilityGetter: setTestabilityGetter,
	TRANSLATIONS: TRANSLATIONS,
	TRANSLATIONS_FORMAT: TRANSLATIONS_FORMAT,
	LOCALE_ID: LOCALE_ID,
	MissingTranslationStrategy: MissingTranslationStrategy,
	ApplicationModule: ApplicationModule,
	wtfCreateScope: wtfCreateScope,
	wtfLeave: wtfLeave,
	wtfStartTimeRange: wtfStartTimeRange,
	wtfEndTimeRange: wtfEndTimeRange,
	Type: Type,
	EventEmitter: EventEmitter,
	ErrorHandler: ErrorHandler,
	Sanitizer: Sanitizer,
	SecurityContext: SecurityContext,
	ANALYZE_FOR_ENTRY_COMPONENTS: ANALYZE_FOR_ENTRY_COMPONENTS,
	Attribute: Attribute,
	ContentChild: ContentChild,
	ContentChildren: ContentChildren,
	Query: Query,
	ViewChild: ViewChild,
	ViewChildren: ViewChildren,
	Component: Component,
	Directive: Directive,
	HostBinding: HostBinding,
	HostListener: HostListener,
	Input: Input,
	Output: Output,
	Pipe: Pipe,
	CUSTOM_ELEMENTS_SCHEMA: CUSTOM_ELEMENTS_SCHEMA,
	NO_ERRORS_SCHEMA: NO_ERRORS_SCHEMA,
	NgModule: NgModule,
	ViewEncapsulation: ViewEncapsulation,
	Version: Version,
	VERSION: VERSION,
	forwardRef: forwardRef,
	resolveForwardRef: resolveForwardRef,
	Injector: Injector,
	ReflectiveInjector: ReflectiveInjector,
	ResolvedReflectiveFactory: ResolvedReflectiveFactory,
	ReflectiveKey: ReflectiveKey,
	InjectionToken: InjectionToken,
	OpaqueToken: OpaqueToken,
	Inject: Inject,
	Optional: Optional,
	Injectable: Injectable,
	Self: Self,
	SkipSelf: SkipSelf,
	Host: Host,
	NgZone: NgZone,
	RenderComponentType: RenderComponentType,
	Renderer: Renderer,
	Renderer2: Renderer2,
	RendererFactory2: RendererFactory2,
	RendererStyleFlags2: RendererStyleFlags2,
	RootRenderer: RootRenderer,
	COMPILER_OPTIONS: COMPILER_OPTIONS,
	Compiler: Compiler,
	CompilerFactory: CompilerFactory,
	ModuleWithComponentFactories: ModuleWithComponentFactories,
	ComponentFactory: ComponentFactory,
	ComponentRef: ComponentRef,
	ComponentFactoryResolver: ComponentFactoryResolver,
	ElementRef: ElementRef,
	NgModuleFactory: NgModuleFactory,
	NgModuleRef: NgModuleRef,
	NgModuleFactoryLoader: NgModuleFactoryLoader,
	getModuleFactory: getModuleFactory,
	QueryList: QueryList,
	SystemJsNgModuleLoader: SystemJsNgModuleLoader,
	SystemJsNgModuleLoaderConfig: SystemJsNgModuleLoaderConfig,
	TemplateRef: TemplateRef,
	ViewContainerRef: ViewContainerRef,
	EmbeddedViewRef: EmbeddedViewRef,
	ViewRef: ViewRef,
	ChangeDetectionStrategy: ChangeDetectionStrategy,
	ChangeDetectorRef: ChangeDetectorRef,
	DefaultIterableDiffer: DefaultIterableDiffer,
	IterableDiffers: IterableDiffers,
	KeyValueDiffers: KeyValueDiffers,
	SimpleChange: SimpleChange,
	WrappedValue: WrappedValue,
	platformCore: platformCore,
	ɵALLOW_MULTIPLE_PLATFORMS: ALLOW_MULTIPLE_PLATFORMS,
	ɵAPP_ID_RANDOM_PROVIDER: APP_ID_RANDOM_PROVIDER,
	ɵValueUnwrapper: ValueUnwrapper,
	ɵdevModeEqual: devModeEqual,
	ɵisListLikeIterable: isListLikeIterable,
	ɵChangeDetectorStatus: ChangeDetectorStatus,
	ɵisDefaultChangeDetectionStrategy: isDefaultChangeDetectionStrategy,
	ɵConsole: Console,
	ɵERROR_COMPONENT_TYPE: ERROR_COMPONENT_TYPE,
	ɵComponentFactory: ComponentFactory,
	ɵCodegenComponentFactoryResolver: CodegenComponentFactoryResolver,
	ɵViewMetadata: ViewMetadata,
	ɵReflectionCapabilities: ReflectionCapabilities,
	ɵRenderDebugInfo: RenderDebugInfo,
	ɵglobal: _global,
	ɵlooseIdentical: looseIdentical,
	ɵstringify: stringify,
	ɵmakeDecorator: makeDecorator,
	ɵisObservable: isObservable,
	ɵisPromise: isPromise,
	ɵclearProviderOverrides: clearProviderOverrides,
	ɵoverrideProvider: overrideProvider,
	ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR: NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR,
	ɵregisterModuleFactory: registerModuleFactory,
	ɵEMPTY_ARRAY: EMPTY_ARRAY,
	ɵEMPTY_MAP: EMPTY_MAP,
	ɵand: anchorDef,
	ɵccf: createComponentFactory,
	ɵcmf: createNgModuleFactory,
	ɵcrt: createRendererType2,
	ɵdid: directiveDef,
	ɵeld: elementDef,
	ɵelementEventFullName: elementEventFullName,
	ɵgetComponentViewDefinitionFactory: getComponentViewDefinitionFactory,
	ɵinlineInterpolate: inlineInterpolate,
	ɵinterpolate: interpolate,
	ɵmod: moduleDef,
	ɵmpd: moduleProvideDef,
	ɵncd: ngContentDef,
	ɵnov: nodeValue,
	ɵpid: pipeDef,
	ɵprd: providerDef,
	ɵpad: pureArrayDef,
	ɵpod: pureObjectDef,
	ɵppd: purePipeDef,
	ɵqud: queryDef,
	ɵted: textDef,
	ɵunv: unwrapValue,
	ɵvid: viewDef,
	AUTO_STYLE: AUTO_STYLE$$1,
	trigger: trigger$$1,
	animate: animate$$1,
	group: group$$1,
	sequence: sequence$$1,
	style: style$$1,
	state: state$$1,
	keyframes: keyframes$$1,
	transition: transition$$1,
	ɵx: animate$1,
	ɵy: group$1,
	ɵbc: keyframes$1,
	ɵz: sequence$1,
	ɵbb: state$1,
	ɵba: style$1,
	ɵbd: transition$1,
	ɵw: trigger$1,
	ɵk: _iterableDiffersFactory,
	ɵl: _keyValueDiffersFactory,
	ɵm: _localeFactory,
	ɵe: ApplicationRef_,
	ɵf: _appIdRandomProviderFactory,
	ɵg: defaultIterableDiffers,
	ɵh: defaultKeyValueDiffers,
	ɵi: DefaultIterableDifferFactory,
	ɵj: DefaultKeyValueDifferFactory,
	ɵb: ReflectiveInjector_,
	ɵc: ReflectiveDependency,
	ɵd: resolveReflectiveProviders,
	ɵn: wtfEnabled,
	ɵp: createScope$1,
	ɵo: detectWTF,
	ɵs: endTimeRange,
	ɵq: leave,
	ɵr: startTimeRange,
	ɵa: makeParamDecorator,
	ɵt: _def,
	ɵu: DebugContext
});

/**
 * @license Angular v4.3.3
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * This class should not be used directly by an application developer. Instead, use
 * {\@link Location}.
 *
 * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform
 * agnostic.
 * This means that we can have different implementation of `PlatformLocation` for the different
 * platforms that angular supports. For example, `\@angular/platform-browser` provides an
 * implementation specific to the browser environment, while `\@angular/platform-webworker` provides
 * one suitable for use with web workers.
 *
 * The `PlatformLocation` class is used directly by all implementations of {\@link LocationStrategy}
 * when they need to interact with the DOM apis like pushState, popState, etc...
 *
 * {\@link LocationStrategy} in turn is used by the {\@link Location} service which is used directly
 * by the {\@link Router} in order to navigate between routes. Since all interactions between {\@link
 * Router} /
 * {\@link Location} / {\@link LocationStrategy} and DOM apis flow through the `PlatformLocation`
 * class they are all platform independent.
 *
 * \@stable
 * @abstract
 */
var PlatformLocation = (function () {
    function PlatformLocation() {
    }
    /**
     * @abstract
     * @return {?}
     */
    PlatformLocation.prototype.getBaseHrefFromDOM = function () { };
    /**
     * @abstract
     * @param {?} fn
     * @return {?}
     */
    PlatformLocation.prototype.onPopState = function (fn) { };
    /**
     * @abstract
     * @param {?} fn
     * @return {?}
     */
    PlatformLocation.prototype.onHashChange = function (fn) { };
    /**
     * @abstract
     * @return {?}
     */
    PlatformLocation.prototype.pathname = function () { };
    /**
     * @abstract
     * @return {?}
     */
    PlatformLocation.prototype.search = function () { };
    /**
     * @abstract
     * @return {?}
     */
    PlatformLocation.prototype.hash = function () { };
    /**
     * @abstract
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @return {?}
     */
    PlatformLocation.prototype.replaceState = function (state, title, url) { };
    /**
     * @abstract
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @return {?}
     */
    PlatformLocation.prototype.pushState = function (state, title, url) { };
    /**
     * @abstract
     * @return {?}
     */
    PlatformLocation.prototype.forward = function () { };
    /**
     * @abstract
     * @return {?}
     */
    PlatformLocation.prototype.back = function () { };
    return PlatformLocation;
}());
/**
 * \@whatItDoes indicates when a location is initialized
 * \@experimental
 */
var LOCATION_INITIALIZED = new InjectionToken('Location Initialized');
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * `LocationStrategy` is responsible for representing and reading route state
 * from the browser's URL. Angular provides two strategies:
 * {\@link HashLocationStrategy} and {\@link PathLocationStrategy}.
 *
 * This is used under the hood of the {\@link Location} service.
 *
 * Applications should use the {\@link Router} or {\@link Location} services to
 * interact with application route state.
 *
 * For instance, {\@link HashLocationStrategy} produces URLs like
 * `http://example.com#/foo`, and {\@link PathLocationStrategy} produces
 * `http://example.com/foo` as an equivalent URL.
 *
 * See these two classes for more.
 *
 * \@stable
 * @abstract
 */
var LocationStrategy = (function () {
    function LocationStrategy() {
    }
    /**
     * @abstract
     * @param {?=} includeHash
     * @return {?}
     */
    LocationStrategy.prototype.path = function (includeHash) { };
    /**
     * @abstract
     * @param {?} internal
     * @return {?}
     */
    LocationStrategy.prototype.prepareExternalUrl = function (internal) { };
    /**
     * @abstract
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @param {?} queryParams
     * @return {?}
     */
    LocationStrategy.prototype.pushState = function (state, title, url, queryParams) { };
    /**
     * @abstract
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @param {?} queryParams
     * @return {?}
     */
    LocationStrategy.prototype.replaceState = function (state, title, url, queryParams) { };
    /**
     * @abstract
     * @return {?}
     */
    LocationStrategy.prototype.forward = function () { };
    /**
     * @abstract
     * @return {?}
     */
    LocationStrategy.prototype.back = function () { };
    /**
     * @abstract
     * @param {?} fn
     * @return {?}
     */
    LocationStrategy.prototype.onPopState = function (fn) { };
    /**
     * @abstract
     * @return {?}
     */
    LocationStrategy.prototype.getBaseHref = function () { };
    return LocationStrategy;
}());
/**
 * The `APP_BASE_HREF` token represents the base href to be used with the
 * {\@link PathLocationStrategy}.
 *
 * If you're using {\@link PathLocationStrategy}, you must provide a provider to a string
 * representing the URL prefix that should be preserved when generating and recognizing
 * URLs.
 *
 * ### Example
 *
 * ```typescript
 * import {Component, NgModule} from '\@angular/core';
 * import {APP_BASE_HREF} from '\@angular/common';
 *
 * \@NgModule({
 *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]
 * })
 * class AppModule {}
 * ```
 *
 * \@stable
 */
var APP_BASE_HREF = new InjectionToken('appBaseHref');
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@whatItDoes `Location` is a service that applications can use to interact with a browser's URL.
 * \@description
 * Depending on which {\@link LocationStrategy} is used, `Location` will either persist
 * to the URL's path or the URL's hash segment.
 *
 * Note: it's better to use {\@link Router#navigate} service to trigger route changes. Use
 * `Location` only if you need to interact with or create normalized URLs outside of
 * routing.
 *
 * `Location` is responsible for normalizing the URL against the application's base href.
 * A normalized URL is absolute from the URL host, includes the application's base href, and has no
 * trailing slash:
 * - `/my/app/user/123` is normalized
 * - `my/app/user/123` **is not** normalized
 * - `/my/app/user/123/` **is not** normalized
 *
 * ### Example
 * {\@example common/location/ts/path_location_component.ts region='LocationComponent'}
 * \@stable
 */
var Location = (function () {
    /**
     * @param {?} platformStrategy
     */
    function Location(platformStrategy) {
        var _this = this;
        /**
         * \@internal
         */
        this._subject = new EventEmitter();
        this._platformStrategy = platformStrategy;
        var browserBaseHref = this._platformStrategy.getBaseHref();
        this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));
        this._platformStrategy.onPopState(function (ev) {
            _this._subject.emit({
                'url': _this.path(true),
                'pop': true,
                'type': ev.type,
            });
        });
    }
    /**
     * @param {?=} includeHash
     * @return {?}
     */
    Location.prototype.path = function (includeHash) {
        if (includeHash === void 0) { includeHash = false; }
        return this.normalize(this._platformStrategy.path(includeHash));
    };
    /**
     * Normalizes the given path and compares to the current normalized path.
     * @param {?} path
     * @param {?=} query
     * @return {?}
     */
    Location.prototype.isCurrentPathEqualTo = function (path, query) {
        if (query === void 0) { query = ''; }
        return this.path() == this.normalize(path + Location.normalizeQueryParams(query));
    };
    /**
     * Given a string representing a URL, returns the normalized URL path without leading or
     * trailing slashes.
     * @param {?} url
     * @return {?}
     */
    Location.prototype.normalize = function (url) {
        return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));
    };
    /**
     * Given a string representing a URL, returns the platform-specific external URL path.
     * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one
     * before normalizing. This method will also add a hash if `HashLocationStrategy` is
     * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.
     * @param {?} url
     * @return {?}
     */
    Location.prototype.prepareExternalUrl = function (url) {
        if (url && url[0] !== '/') {
            url = '/' + url;
        }
        return this._platformStrategy.prepareExternalUrl(url);
    };
    /**
     * Changes the browsers URL to the normalized version of the given URL, and pushes a
     * new item onto the platform's history.
     * @param {?} path
     * @param {?=} query
     * @return {?}
     */
    Location.prototype.go = function (path, query) {
        if (query === void 0) { query = ''; }
        this._platformStrategy.pushState(null, '', path, query);
    };
    /**
     * Changes the browsers URL to the normalized version of the given URL, and replaces
     * the top item on the platform's history stack.
     * @param {?} path
     * @param {?=} query
     * @return {?}
     */
    Location.prototype.replaceState = function (path, query) {
        if (query === void 0) { query = ''; }
        this._platformStrategy.replaceState(null, '', path, query);
    };
    /**
     * Navigates forward in the platform's history.
     * @return {?}
     */
    Location.prototype.forward = function () { this._platformStrategy.forward(); };
    /**
     * Navigates back in the platform's history.
     * @return {?}
     */
    Location.prototype.back = function () { this._platformStrategy.back(); };
    /**
     * Subscribe to the platform's `popState` events.
     * @param {?} onNext
     * @param {?=} onThrow
     * @param {?=} onReturn
     * @return {?}
     */
    Location.prototype.subscribe = function (onNext, onThrow, onReturn) {
        return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });
    };
    /**
     * Given a string of url parameters, prepend with '?' if needed, otherwise return parameters as
     * is.
     * @param {?} params
     * @return {?}
     */
    Location.normalizeQueryParams = function (params) {
        return params && params[0] !== '?' ? '?' + params : params;
    };
    /**
     * Given 2 parts of a url, join them with a slash if needed.
     * @param {?} start
     * @param {?} end
     * @return {?}
     */
    Location.joinWithSlash = function (start, end) {
        if (start.length == 0) {
            return end;
        }
        if (end.length == 0) {
            return start;
        }
        var /** @type {?} */ slashes = 0;
        if (start.endsWith('/')) {
            slashes++;
        }
        if (end.startsWith('/')) {
            slashes++;
        }
        if (slashes == 2) {
            return start + end.substring(1);
        }
        if (slashes == 1) {
            return start + end;
        }
        return start + '/' + end;
    };
    /**
     * If url has a trailing slash, remove it, otherwise return url as is. This
     * method looks for the first occurence of either #, ?, or the end of the
     * line as `/` characters after any of these should not be replaced.
     * @param {?} url
     * @return {?}
     */
    Location.stripTrailingSlash = function (url) {
        var /** @type {?} */ match = url.match(/#|\?|$/);
        var /** @type {?} */ pathEndIdx = match && match.index || url.length;
        var /** @type {?} */ droppedSlashIdx = pathEndIdx - (url[pathEndIdx - 1] === '/' ? 1 : 0);
        return url.slice(0, droppedSlashIdx) + url.slice(pathEndIdx);
    };
    return Location;
}());
Location.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
Location.ctorParameters = function () { return [
    { type: LocationStrategy, },
]; };
/**
 * @param {?} baseHref
 * @param {?} url
 * @return {?}
 */
function _stripBaseHref(baseHref, url) {
    return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;
}
/**
 * @param {?} url
 * @return {?}
 */
function _stripIndexHtml(url) {
    return url.replace(/\/index.html$/, '');
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@whatItDoes Use URL hash for storing application location data.
 * \@description
 * `HashLocationStrategy` is a {\@link LocationStrategy} used to configure the
 * {\@link Location} service to represent its state in the
 * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)
 * of the browser's URL.
 *
 * For instance, if you call `location.go('/foo')`, the browser's URL will become
 * `example.com#/foo`.
 *
 * ### Example
 *
 * {\@example common/location/ts/hash_location_component.ts region='LocationComponent'}
 *
 * \@stable
 */
var HashLocationStrategy = (function (_super) {
    __extends(HashLocationStrategy, _super);
    /**
     * @param {?} _platformLocation
     * @param {?=} _baseHref
     */
    function HashLocationStrategy(_platformLocation, _baseHref) {
        var _this = _super.call(this) || this;
        _this._platformLocation = _platformLocation;
        _this._baseHref = '';
        if (_baseHref != null) {
            _this._baseHref = _baseHref;
        }
        return _this;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    HashLocationStrategy.prototype.onPopState = function (fn) {
        this._platformLocation.onPopState(fn);
        this._platformLocation.onHashChange(fn);
    };
    /**
     * @return {?}
     */
    HashLocationStrategy.prototype.getBaseHref = function () { return this._baseHref; };
    /**
     * @param {?=} includeHash
     * @return {?}
     */
    HashLocationStrategy.prototype.path = function (includeHash) {
        if (includeHash === void 0) { includeHash = false; }
        // the hash value is always prefixed with a `#`
        // and if it is empty then it will stay empty
        var /** @type {?} */ path = this._platformLocation.hash;
        if (path == null)
            path = '#';
        return path.length > 0 ? path.substring(1) : path;
    };
    /**
     * @param {?} internal
     * @return {?}
     */
    HashLocationStrategy.prototype.prepareExternalUrl = function (internal) {
        var /** @type {?} */ url = Location.joinWithSlash(this._baseHref, internal);
        return url.length > 0 ? ('#' + url) : url;
    };
    /**
     * @param {?} state
     * @param {?} title
     * @param {?} path
     * @param {?} queryParams
     * @return {?}
     */
    HashLocationStrategy.prototype.pushState = function (state, title, path, queryParams) {
        var /** @type {?} */ url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
        if (url.length == 0) {
            url = this._platformLocation.pathname;
        }
        this._platformLocation.pushState(state, title, url);
    };
    /**
     * @param {?} state
     * @param {?} title
     * @param {?} path
     * @param {?} queryParams
     * @return {?}
     */
    HashLocationStrategy.prototype.replaceState = function (state, title, path, queryParams) {
        var /** @type {?} */ url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
        if (url.length == 0) {
            url = this._platformLocation.pathname;
        }
        this._platformLocation.replaceState(state, title, url);
    };
    /**
     * @return {?}
     */
    HashLocationStrategy.prototype.forward = function () { this._platformLocation.forward(); };
    /**
     * @return {?}
     */
    HashLocationStrategy.prototype.back = function () { this._platformLocation.back(); };
    return HashLocationStrategy;
}(LocationStrategy));
HashLocationStrategy.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
HashLocationStrategy.ctorParameters = function () { return [
    { type: PlatformLocation, },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APP_BASE_HREF,] },] },
]; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@whatItDoes Use URL for storing application location data.
 * \@description
 * `PathLocationStrategy` is a {\@link LocationStrategy} used to configure the
 * {\@link Location} service to represent its state in the
 * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the
 * browser's URL.
 *
 * If you're using `PathLocationStrategy`, you must provide a {\@link APP_BASE_HREF}
 * or add a base element to the document. This URL prefix that will be preserved
 * when generating and recognizing URLs.
 *
 * For instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call
 * `location.go('/foo')`, the browser's URL will become
 * `example.com/my/app/foo`.
 *
 * Similarly, if you add `<base href='/my/app'/>` to the document and call
 * `location.go('/foo')`, the browser's URL will become
 * `example.com/my/app/foo`.
 *
 * ### Example
 *
 * {\@example common/location/ts/path_location_component.ts region='LocationComponent'}
 *
 * \@stable
 */
var PathLocationStrategy = (function (_super) {
    __extends(PathLocationStrategy, _super);
    /**
     * @param {?} _platformLocation
     * @param {?=} href
     */
    function PathLocationStrategy(_platformLocation, href) {
        var _this = _super.call(this) || this;
        _this._platformLocation = _platformLocation;
        if (href == null) {
            href = _this._platformLocation.getBaseHrefFromDOM();
        }
        if (href == null) {
            throw new Error("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.");
        }
        _this._baseHref = href;
        return _this;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    PathLocationStrategy.prototype.onPopState = function (fn) {
        this._platformLocation.onPopState(fn);
        this._platformLocation.onHashChange(fn);
    };
    /**
     * @return {?}
     */
    PathLocationStrategy.prototype.getBaseHref = function () { return this._baseHref; };
    /**
     * @param {?} internal
     * @return {?}
     */
    PathLocationStrategy.prototype.prepareExternalUrl = function (internal) {
        return Location.joinWithSlash(this._baseHref, internal);
    };
    /**
     * @param {?=} includeHash
     * @return {?}
     */
    PathLocationStrategy.prototype.path = function (includeHash) {
        if (includeHash === void 0) { includeHash = false; }
        var /** @type {?} */ pathname = this._platformLocation.pathname +
            Location.normalizeQueryParams(this._platformLocation.search);
        var /** @type {?} */ hash = this._platformLocation.hash;
        return hash && includeHash ? "" + pathname + hash : pathname;
    };
    /**
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @param {?} queryParams
     * @return {?}
     */
    PathLocationStrategy.prototype.pushState = function (state, title, url, queryParams) {
        var /** @type {?} */ externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
        this._platformLocation.pushState(state, title, externalUrl);
    };
    /**
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @param {?} queryParams
     * @return {?}
     */
    PathLocationStrategy.prototype.replaceState = function (state, title, url, queryParams) {
        var /** @type {?} */ externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
        this._platformLocation.replaceState(state, title, externalUrl);
    };
    /**
     * @return {?}
     */
    PathLocationStrategy.prototype.forward = function () { this._platformLocation.forward(); };
    /**
     * @return {?}
     */
    PathLocationStrategy.prototype.back = function () { this._platformLocation.back(); };
    return PathLocationStrategy;
}(LocationStrategy));
PathLocationStrategy.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
PathLocationStrategy.ctorParameters = function () { return [
    { type: PlatformLocation, },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APP_BASE_HREF,] },] },
]; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@experimental
 * @abstract
 */
var NgLocalization = (function () {
    function NgLocalization() {
    }
    /**
     * @abstract
     * @param {?} value
     * @return {?}
     */
    NgLocalization.prototype.getPluralCategory = function (value) { };
    return NgLocalization;
}());
/**
 * Returns the plural category for a given value.
 * - "=value" when the case exists,
 * - the plural category otherwise
 *
 * \@internal
 * @param {?} value
 * @param {?} cases
 * @param {?} ngLocalization
 * @return {?}
 */
function getPluralCategory(value, cases, ngLocalization) {
    var /** @type {?} */ key = "=" + value;
    if (cases.indexOf(key) > -1) {
        return key;
    }
    key = ngLocalization.getPluralCategory(value);
    if (cases.indexOf(key) > -1) {
        return key;
    }
    if (cases.indexOf('other') > -1) {
        return 'other';
    }
    throw new Error("No plural message found for value \"" + value + "\"");
}
/**
 * Returns the plural case based on the locale
 *
 * \@experimental
 */
var NgLocaleLocalization = (function (_super) {
    __extends(NgLocaleLocalization, _super);
    /**
     * @param {?} locale
     */
    function NgLocaleLocalization(locale) {
        var _this = _super.call(this) || this;
        _this.locale = locale;
        return _this;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    NgLocaleLocalization.prototype.getPluralCategory = function (value) {
        var /** @type {?} */ plural = getPluralCase(this.locale, value);
        switch (plural) {
            case Plural.Zero:
                return 'zero';
            case Plural.One:
                return 'one';
            case Plural.Two:
                return 'two';
            case Plural.Few:
                return 'few';
            case Plural.Many:
                return 'many';
            default:
                return 'other';
        }
    };
    return NgLocaleLocalization;
}(NgLocalization));
NgLocaleLocalization.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
NgLocaleLocalization.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },
]; };
var Plural = {};
Plural.Zero = 0;
Plural.One = 1;
Plural.Two = 2;
Plural.Few = 3;
Plural.Many = 4;
Plural.Other = 5;
Plural[Plural.Zero] = "Zero";
Plural[Plural.One] = "One";
Plural[Plural.Two] = "Two";
Plural[Plural.Few] = "Few";
Plural[Plural.Many] = "Many";
Plural[Plural.Other] = "Other";
/**
 * Returns the plural case based on the locale
 *
 * \@experimental
 * @param {?} locale
 * @param {?} nLike
 * @return {?}
 */
function getPluralCase(locale, nLike) {
    // TODO(vicb): lazy compute
    if (typeof nLike === 'string') {
        nLike = parseInt(/** @type {?} */ (nLike), 10);
    }
    var /** @type {?} */ n = (nLike);
    var /** @type {?} */ nDecimal = n.toString().replace(/^[^.]*\.?/, '');
    var /** @type {?} */ i = Math.floor(Math.abs(n));
    var /** @type {?} */ v = nDecimal.length;
    var /** @type {?} */ f = parseInt(nDecimal, 10);
    var /** @type {?} */ t = parseInt(n.toString().replace(/^[^.]*\.?|0+$/g, ''), 10) || 0;
    var /** @type {?} */ lang = locale.split('-')[0].toLowerCase();
    switch (lang) {
        case 'af':
        case 'asa':
        case 'az':
        case 'bem':
        case 'bez':
        case 'bg':
        case 'brx':
        case 'ce':
        case 'cgg':
        case 'chr':
        case 'ckb':
        case 'ee':
        case 'el':
        case 'eo':
        case 'es':
        case 'eu':
        case 'fo':
        case 'fur':
        case 'gsw':
        case 'ha':
        case 'haw':
        case 'hu':
        case 'jgo':
        case 'jmc':
        case 'ka':
        case 'kk':
        case 'kkj':
        case 'kl':
        case 'ks':
        case 'ksb':
        case 'ky':
        case 'lb':
        case 'lg':
        case 'mas':
        case 'mgo':
        case 'ml':
        case 'mn':
        case 'nb':
        case 'nd':
        case 'ne':
        case 'nn':
        case 'nnh':
        case 'nyn':
        case 'om':
        case 'or':
        case 'os':
        case 'ps':
        case 'rm':
        case 'rof':
        case 'rwk':
        case 'saq':
        case 'seh':
        case 'sn':
        case 'so':
        case 'sq':
        case 'ta':
        case 'te':
        case 'teo':
        case 'tk':
        case 'tr':
        case 'ug':
        case 'uz':
        case 'vo':
        case 'vun':
        case 'wae':
        case 'xog':
            if (n === 1)
                return Plural.One;
            return Plural.Other;
        case 'ak':
        case 'ln':
        case 'mg':
        case 'pa':
        case 'ti':
            if (n === Math.floor(n) && n >= 0 && n <= 1)
                return Plural.One;
            return Plural.Other;
        case 'am':
        case 'as':
        case 'bn':
        case 'fa':
        case 'gu':
        case 'hi':
        case 'kn':
        case 'mr':
        case 'zu':
            if (i === 0 || n === 1)
                return Plural.One;
            return Plural.Other;
        case 'ar':
            if (n === 0)
                return Plural.Zero;
            if (n === 1)
                return Plural.One;
            if (n === 2)
                return Plural.Two;
            if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10)
                return Plural.Few;
            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99)
                return Plural.Many;
            return Plural.Other;
        case 'ast':
        case 'ca':
        case 'de':
        case 'en':
        case 'et':
        case 'fi':
        case 'fy':
        case 'gl':
        case 'it':
        case 'nl':
        case 'sv':
        case 'sw':
        case 'ur':
        case 'yi':
            if (i === 1 && v === 0)
                return Plural.One;
            return Plural.Other;
        case 'be':
            if (n % 10 === 1 && !(n % 100 === 11))
                return Plural.One;
            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 &&
                !(n % 100 >= 12 && n % 100 <= 14))
                return Plural.Few;
            if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 ||
                n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)
                return Plural.Many;
            return Plural.Other;
        case 'br':
            if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91))
                return Plural.One;
            if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92))
                return Plural.Two;
            if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) &&
                !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 ||
                    n % 100 >= 90 && n % 100 <= 99))
                return Plural.Few;
            if (!(n === 0) && n % 1e6 === 0)
                return Plural.Many;
            return Plural.Other;
        case 'bs':
        case 'hr':
        case 'sr':
            if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))
                return Plural.One;
            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
                !(i % 100 >= 12 && i % 100 <= 14) ||
                f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 &&
                    !(f % 100 >= 12 && f % 100 <= 14))
                return Plural.Few;
            return Plural.Other;
        case 'cs':
        case 'sk':
            if (i === 1 && v === 0)
                return Plural.One;
            if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0)
                return Plural.Few;
            if (!(v === 0))
                return Plural.Many;
            return Plural.Other;
        case 'cy':
            if (n === 0)
                return Plural.Zero;
            if (n === 1)
                return Plural.One;
            if (n === 2)
                return Plural.Two;
            if (n === 3)
                return Plural.Few;
            if (n === 6)
                return Plural.Many;
            return Plural.Other;
        case 'da':
            if (n === 1 || !(t === 0) && (i === 0 || i === 1))
                return Plural.One;
            return Plural.Other;
        case 'dsb':
        case 'hsb':
            if (v === 0 && i % 100 === 1 || f % 100 === 1)
                return Plural.One;
            if (v === 0 && i % 100 === 2 || f % 100 === 2)
                return Plural.Two;
            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 ||
                f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)
                return Plural.Few;
            return Plural.Other;
        case 'ff':
        case 'fr':
        case 'hy':
        case 'kab':
            if (i === 0 || i === 1)
                return Plural.One;
            return Plural.Other;
        case 'fil':
            if (v === 0 && (i === 1 || i === 2 || i === 3) ||
                v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) ||
                !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))
                return Plural.One;
            return Plural.Other;
        case 'ga':
            if (n === 1)
                return Plural.One;
            if (n === 2)
                return Plural.Two;
            if (n === Math.floor(n) && n >= 3 && n <= 6)
                return Plural.Few;
            if (n === Math.floor(n) && n >= 7 && n <= 10)
                return Plural.Many;
            return Plural.Other;
        case 'gd':
            if (n === 1 || n === 11)
                return Plural.One;
            if (n === 2 || n === 12)
                return Plural.Two;
            if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19))
                return Plural.Few;
            return Plural.Other;
        case 'gv':
            if (v === 0 && i % 10 === 1)
                return Plural.One;
            if (v === 0 && i % 10 === 2)
                return Plural.Two;
            if (v === 0 &&
                (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))
                return Plural.Few;
            if (!(v === 0))
                return Plural.Many;
            return Plural.Other;
        case 'he':
            if (i === 1 && v === 0)
                return Plural.One;
            if (i === 2 && v === 0)
                return Plural.Two;
            if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0)
                return Plural.Many;
            return Plural.Other;
        case 'is':
            if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0))
                return Plural.One;
            return Plural.Other;
        case 'ksh':
            if (n === 0)
                return Plural.Zero;
            if (n === 1)
                return Plural.One;
            return Plural.Other;
        case 'kw':
        case 'naq':
        case 'se':
        case 'smn':
            if (n === 1)
                return Plural.One;
            if (n === 2)
                return Plural.Two;
            return Plural.Other;
        case 'lag':
            if (n === 0)
                return Plural.Zero;
            if ((i === 0 || i === 1) && !(n === 0))
                return Plural.One;
            return Plural.Other;
        case 'lt':
            if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19))
                return Plural.One;
            if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 &&
                !(n % 100 >= 11 && n % 100 <= 19))
                return Plural.Few;
            if (!(f === 0))
                return Plural.Many;
            return Plural.Other;
        case 'lv':
        case 'prg':
            if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ||
                v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)
                return Plural.Zero;
            if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) ||
                !(v === 2) && f % 10 === 1)
                return Plural.One;
            return Plural.Other;
        case 'mk':
            if (v === 0 && i % 10 === 1 || f % 10 === 1)
                return Plural.One;
            return Plural.Other;
        case 'mt':
            if (n === 1)
                return Plural.One;
            if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)
                return Plural.Few;
            if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19)
                return Plural.Many;
            return Plural.Other;
        case 'pl':
            if (i === 1 && v === 0)
                return Plural.One;
            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
                !(i % 100 >= 12 && i % 100 <= 14))
                return Plural.Few;
            if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 ||
                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||
                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)
                return Plural.Many;
            return Plural.Other;
        case 'pt':
            if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2))
                return Plural.One;
            return Plural.Other;
        case 'ro':
            if (i === 1 && v === 0)
                return Plural.One;
            if (!(v === 0) || n === 0 ||
                !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)
                return Plural.Few;
            return Plural.Other;
        case 'ru':
        case 'uk':
            if (v === 0 && i % 10 === 1 && !(i % 100 === 11))
                return Plural.One;
            if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
                !(i % 100 >= 12 && i % 100 <= 14))
                return Plural.Few;
            if (v === 0 && i % 10 === 0 ||
                v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||
                v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)
                return Plural.Many;
            return Plural.Other;
        case 'shi':
            if (i === 0 || n === 1)
                return Plural.One;
            if (n === Math.floor(n) && n >= 2 && n <= 10)
                return Plural.Few;
            return Plural.Other;
        case 'si':
            if (n === 0 || n === 1 || i === 0 && f === 1)
                return Plural.One;
            return Plural.Other;
        case 'sl':
            if (v === 0 && i % 100 === 1)
                return Plural.One;
            if (v === 0 && i % 100 === 2)
                return Plural.Two;
            if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))
                return Plural.Few;
            return Plural.Other;
        case 'tzm':
            if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)
                return Plural.One;
            return Plural.Other;
        // When there is no specification, the default is always "other"
        // Spec: http://cldr.unicode.org/index/cldr-spec/plural-rules
        // > other (required—general plural form — also used if the language only has a single form)
        default:
            return Plural.Other;
    }
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 * @param {?} cookieStr
 * @param {?} name
 * @return {?}
 */
function parseCookieValue(cookieStr, name) {
    name = encodeURIComponent(name);
    for (var _i = 0, _a = cookieStr.split(';'); _i < _a.length; _i++) {
        var cookie = _a[_i];
        var /** @type {?} */ eqIndex = cookie.indexOf('=');
        var _b = eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)], cookieName = _b[0], cookieValue = _b[1];
        if (cookieName.trim() === name) {
            return decodeURIComponent(cookieValue);
        }
    }
    return null;
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@ngModule CommonModule
 *
 * \@whatItDoes Adds and removes CSS classes on an HTML element.
 *
 * \@howToUse
 * ```
 *     <some-element [ngClass]="'first second'">...</some-element>
 *
 *     <some-element [ngClass]="['first', 'second']">...</some-element>
 *
 *     <some-element [ngClass]="{'first': true, 'second': true, 'third': false}">...</some-element>
 *
 *     <some-element [ngClass]="stringExp|arrayExp|objExp">...</some-element>
 *
 *     <some-element [ngClass]="{'class1 class2 class3' : true}">...</some-element>
 * ```
 *
 * \@description
 *
 * The CSS classes are updated as follows, depending on the type of the expression evaluation:
 * - `string` - the CSS classes listed in the string (space delimited) are added,
 * - `Array` - the CSS classes declared as Array elements are added,
 * - `Object` - keys are CSS classes that get added when the expression given in the value
 *              evaluates to a truthy value, otherwise they are removed.
 *
 * \@stable
 */
var NgClass = (function () {
    /**
     * @param {?} _iterableDiffers
     * @param {?} _keyValueDiffers
     * @param {?} _ngEl
     * @param {?} _renderer
     */
    function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
        this._iterableDiffers = _iterableDiffers;
        this._keyValueDiffers = _keyValueDiffers;
        this._ngEl = _ngEl;
        this._renderer = _renderer;
        this._initialClasses = [];
    }
    Object.defineProperty(NgClass.prototype, "klass", {
        /**
         * @param {?} v
         * @return {?}
         */
        set: function (v) {
            this._applyInitialClasses(true);
            this._initialClasses = typeof v === 'string' ? v.split(/\s+/) : [];
            this._applyInitialClasses(false);
            this._applyClasses(this._rawClass, false);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgClass.prototype, "ngClass", {
        /**
         * @param {?} v
         * @return {?}
         */
        set: function (v) {
            this._cleanupClasses(this._rawClass);
            this._iterableDiffer = null;
            this._keyValueDiffer = null;
            this._rawClass = typeof v === 'string' ? v.split(/\s+/) : v;
            if (this._rawClass) {
                if (isListLikeIterable(this._rawClass)) {
                    this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create();
                }
                else {
                    this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgClass.prototype.ngDoCheck = function () {
        if (this._iterableDiffer) {
            var /** @type {?} */ iterableChanges = this._iterableDiffer.diff(/** @type {?} */ (this._rawClass));
            if (iterableChanges) {
                this._applyIterableChanges(iterableChanges);
            }
        }
        else if (this._keyValueDiffer) {
            var /** @type {?} */ keyValueChanges = this._keyValueDiffer.diff(/** @type {?} */ (this._rawClass));
            if (keyValueChanges) {
                this._applyKeyValueChanges(keyValueChanges);
            }
        }
    };
    /**
     * @param {?} rawClassVal
     * @return {?}
     */
    NgClass.prototype._cleanupClasses = function (rawClassVal) {
        this._applyClasses(rawClassVal, true);
        this._applyInitialClasses(false);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgClass.prototype._applyKeyValueChanges = function (changes) {
        var _this = this;
        changes.forEachAddedItem(function (record) { return _this._toggleClass(record.key, record.currentValue); });
        changes.forEachChangedItem(function (record) { return _this._toggleClass(record.key, record.currentValue); });
        changes.forEachRemovedItem(function (record) {
            if (record.previousValue) {
                _this._toggleClass(record.key, false);
            }
        });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgClass.prototype._applyIterableChanges = function (changes) {
        var _this = this;
        changes.forEachAddedItem(function (record) {
            if (typeof record.item === 'string') {
                _this._toggleClass(record.item, true);
            }
            else {
                throw new Error("NgClass can only toggle CSS classes expressed as strings, got " + stringify(record.item));
            }
        });
        changes.forEachRemovedItem(function (record) { return _this._toggleClass(record.item, false); });
    };
    /**
     * @param {?} isCleanup
     * @return {?}
     */
    NgClass.prototype._applyInitialClasses = function (isCleanup) {
        var _this = this;
        this._initialClasses.forEach(function (klass) { return _this._toggleClass(klass, !isCleanup); });
    };
    /**
     * @param {?} rawClassVal
     * @param {?} isCleanup
     * @return {?}
     */
    NgClass.prototype._applyClasses = function (rawClassVal, isCleanup) {
        var _this = this;
        if (rawClassVal) {
            if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
                ((rawClassVal)).forEach(function (klass) { return _this._toggleClass(klass, !isCleanup); });
            }
            else {
                Object.keys(rawClassVal).forEach(function (klass) {
                    if (rawClassVal[klass] != null)
                        _this._toggleClass(klass, !isCleanup);
                });
            }
        }
    };
    /**
     * @param {?} klass
     * @param {?} enabled
     * @return {?}
     */
    NgClass.prototype._toggleClass = function (klass, enabled) {
        var _this = this;
        klass = klass.trim();
        if (klass) {
            klass.split(/\s+/g).forEach(function (klass) { _this._renderer.setElementClass(_this._ngEl.nativeElement, klass, !!enabled); });
        }
    };
    return NgClass;
}());
NgClass.decorators = [
    { type: Directive, args: [{ selector: '[ngClass]' },] },
];
/**
 * @nocollapse
 */
NgClass.ctorParameters = function () { return [
    { type: IterableDiffers, },
    { type: KeyValueDiffers, },
    { type: ElementRef, },
    { type: Renderer, },
]; };
NgClass.propDecorators = {
    'klass': [{ type: Input, args: ['class',] },],
    'ngClass': [{ type: Input },],
};
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Instantiates a single {\@link Component} type and inserts its Host View into current View.
 * `NgComponentOutlet` provides a declarative approach for dynamic component creation.
 *
 * `NgComponentOutlet` requires a component type, if a falsy value is set the view will clear and
 * any existing component will get destroyed.
 *
 * ### Fine tune control
 *
 * You can control the component creation process by using the following optional attributes:
 *
 * * `ngComponentOutletInjector`: Optional custom {\@link Injector} that will be used as parent for
 * the Component. Defaults to the injector of the current view container.
 *
 * * `ngComponentOutletContent`: Optional list of projectable nodes to insert into the content
 * section of the component, if exists.
 *
 * * `ngComponentOutletNgModuleFactory`: Optional module factory to allow dynamically loading other
 * module, then load a component from that module.
 *
 * ### Syntax
 *
 * Simple
 * ```
 * <ng-container *ngComponentOutlet="componentTypeExpression"></ng-container>
 * ```
 *
 * Customized injector/content
 * ```
 * <ng-container *ngComponentOutlet="componentTypeExpression;
 *                                   injector: injectorExpression;
 *                                   content: contentNodesExpression;">
 * </ng-container>
 * ```
 *
 * Customized ngModuleFactory
 * ```
 * <ng-container *ngComponentOutlet="componentTypeExpression;
 *                                   ngModuleFactory: moduleFactory;">
 * </ng-container>
 * ```
 * ## Example
 *
 * {\@example common/ngComponentOutlet/ts/module.ts region='SimpleExample'}
 *
 * A more complete example with additional options:
 *
 * {\@example common/ngComponentOutlet/ts/module.ts region='CompleteExample'}
 * A more complete example with ngModuleFactory:
 *
 * {\@example common/ngComponentOutlet/ts/module.ts region='NgModuleFactoryExample'}
 *
 * \@experimental
 */
var NgComponentOutlet = (function () {
    /**
     * @param {?} _viewContainerRef
     */
    function NgComponentOutlet(_viewContainerRef) {
        this._viewContainerRef = _viewContainerRef;
        this._componentRef = null;
        this._moduleRef = null;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    NgComponentOutlet.prototype.ngOnChanges = function (changes) {
        this._viewContainerRef.clear();
        this._componentRef = null;
        if (this.ngComponentOutlet) {
            var /** @type {?} */ elInjector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;
            if (changes['ngComponentOutletNgModuleFactory']) {
                if (this._moduleRef)
                    this._moduleRef.destroy();
                if (this.ngComponentOutletNgModuleFactory) {
                    var /** @type {?} */ parentModule = elInjector.get(NgModuleRef);
                    this._moduleRef = this.ngComponentOutletNgModuleFactory.create(parentModule.injector);
                }
                else {
                    this._moduleRef = null;
                }
            }
            var /** @type {?} */ componentFactoryResolver = this._moduleRef ? this._moduleRef.componentFactoryResolver :
                elInjector.get(ComponentFactoryResolver);
            var /** @type {?} */ componentFactory = componentFactoryResolver.resolveComponentFactory(this.ngComponentOutlet);
            this._componentRef = this._viewContainerRef.createComponent(componentFactory, this._viewContainerRef.length, elInjector, this.ngComponentOutletContent);
        }
    };
    /**
     * @return {?}
     */
    NgComponentOutlet.prototype.ngOnDestroy = function () {
        if (this._moduleRef)
            this._moduleRef.destroy();
    };
    return NgComponentOutlet;
}());
NgComponentOutlet.decorators = [
    { type: Directive, args: [{ selector: '[ngComponentOutlet]' },] },
];
/**
 * @nocollapse
 */
NgComponentOutlet.ctorParameters = function () { return [
    { type: ViewContainerRef, },
]; };
NgComponentOutlet.propDecorators = {
    'ngComponentOutlet': [{ type: Input },],
    'ngComponentOutletInjector': [{ type: Input },],
    'ngComponentOutletContent': [{ type: Input },],
    'ngComponentOutletNgModuleFactory': [{ type: Input },],
};
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@stable
 */
var NgForOfContext = (function () {
    /**
     * @param {?} $implicit
     * @param {?} ngForOf
     * @param {?} index
     * @param {?} count
     */
    function NgForOfContext($implicit, ngForOf, index, count) {
        this.$implicit = $implicit;
        this.ngForOf = ngForOf;
        this.index = index;
        this.count = count;
    }
    Object.defineProperty(NgForOfContext.prototype, "first", {
        /**
         * @return {?}
         */
        get: function () { return this.index === 0; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForOfContext.prototype, "last", {
        /**
         * @return {?}
         */
        get: function () { return this.index === this.count - 1; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForOfContext.prototype, "even", {
        /**
         * @return {?}
         */
        get: function () { return this.index % 2 === 0; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForOfContext.prototype, "odd", {
        /**
         * @return {?}
         */
        get: function () { return !this.even; },
        enumerable: true,
        configurable: true
    });
    return NgForOfContext;
}());
/**
 * The `NgForOf` directive instantiates a template once per item from an iterable. The context
 * for each instantiated template inherits from the outer context with the given loop variable
 * set to the current item from the iterable.
 *
 * ### Local Variables
 *
 * `NgForOf` provides several exported values that can be aliased to local variables:
 *
 * - `$implicit: T`: The value of the individual items in the iterable (`ngForOf`).
 * - `ngForOf: NgIterable<T>`: The value of the iterable expression. Useful when the expression is
 * more complex then a property access, for example when using the async pipe (`userStreams |
 * async`).
 * - `index: number`: The index of the current item in the iterable.
 * - `first: boolean`: True when the item is the first item in the iterable.
 * - `last: boolean`: True when the item is the last item in the iterable.
 * - `even: boolean`: True when the item has an even index in the iterable.
 * - `odd: boolean`: True when the item has an odd index in the iterable.
 *
 * ```
 * <li *ngFor="let user of userObservable | async as users; index as i; first as isFirst">
 *    {{i}}/{{users.length}}. {{user}} <span *ngIf="isFirst">default</span>
 * </li>
 * ```
 *
 * ### Change Propagation
 *
 * When the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:
 *
 * * When an item is added, a new instance of the template is added to the DOM.
 * * When an item is removed, its template instance is removed from the DOM.
 * * When items are reordered, their respective templates are reordered in the DOM.
 * * Otherwise, the DOM element for that item will remain the same.
 *
 * Angular uses object identity to track insertions and deletions within the iterator and reproduce
 * those changes in the DOM. This has important implications for animations and any stateful
 * controls (such as `<input>` elements which accept user input) that are present. Inserted rows can
 * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state
 * such as user input.
 *
 * It is possible for the identities of elements in the iterator to change while the data does not.
 * This can happen, for example, if the iterator produced from an RPC to the server, and that
 * RPC is re-run. Even if the data hasn't changed, the second response will produce objects with
 * different identities, and Angular will tear down the entire DOM and rebuild it (as if all old
 * elements were deleted and all new elements inserted). This is an expensive operation and should
 * be avoided if possible.
 *
 * To customize the default tracking algorithm, `NgForOf` supports `trackBy` option.
 * `trackBy` takes a function which has two arguments: `index` and `item`.
 * If `trackBy` is given, Angular tracks changes by the return value of the function.
 *
 * ### Syntax
 *
 * - `<li *ngFor="let item of items; index as i; trackBy: trackByFn">...</li>`
 * - `<li template="ngFor let item of items; index as i; trackBy: trackByFn">...</li>`
 *
 * With `<ng-template>` element:
 *
 * ```
 * <ng-template ngFor let-item [ngForOf]="items" let-i="index" [ngForTrackBy]="trackByFn">
 *   <li>...</li>
 * </ng-template>
 * ```
 *
 * ### Example
 *
 * See a [live demo](http://plnkr.co/edit/KVuXxDp0qinGDyo307QW?p=preview) for a more detailed
 * example.
 *
 * \@stable
 */
var NgForOf = (function () {
    /**
     * @param {?} _viewContainer
     * @param {?} _template
     * @param {?} _differs
     */
    function NgForOf(_viewContainer, _template, _differs) {
        this._viewContainer = _viewContainer;
        this._template = _template;
        this._differs = _differs;
        this._differ = null;
    }
    Object.defineProperty(NgForOf.prototype, "ngForTrackBy", {
        /**
         * @return {?}
         */
        get: function () { return this._trackByFn; },
        /**
         * @param {?} fn
         * @return {?}
         */
        set: function (fn) {
            if (isDevMode() && fn != null && typeof fn !== 'function') {
                // TODO(vicb): use a log service once there is a public one available
                if ((console) && (console.warn)) {
                    console.warn("trackBy must be a function, but received " + JSON.stringify(fn) + ". " +
                        "See https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html#!#change-propagation for more information.");
                }
            }
            this._trackByFn = fn;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForOf.prototype, "ngForTemplate", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            // TODO(TS2.1): make TemplateRef<Partial<NgForRowOf<T>>> once we move to TS v2.1
            // The current type is too restrictive; a template that just uses index, for example,
            // should be acceptable.
            if (value) {
                this._template = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    NgForOf.prototype.ngOnChanges = function (changes) {
        if ('ngForOf' in changes) {
            // React on ngForOf changes only once all inputs have been initialized
            var /** @type {?} */ value = changes['ngForOf'].currentValue;
            if (!this._differ && value) {
                try {
                    this._differ = this._differs.find(value).create(this.ngForTrackBy);
                }
                catch (e) {
                    throw new Error("Cannot find a differ supporting object '" + value + "' of type '" + getTypeNameForDebugging$1(value) + "'. NgFor only supports binding to Iterables such as Arrays.");
                }
            }
        }
    };
    /**
     * @return {?}
     */
    NgForOf.prototype.ngDoCheck = function () {
        if (this._differ) {
            var /** @type {?} */ changes = this._differ.diff(this.ngForOf);
            if (changes)
                this._applyChanges(changes);
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgForOf.prototype._applyChanges = function (changes) {
        var _this = this;
        var /** @type {?} */ insertTuples = [];
        changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {
            if (item.previousIndex == null) {
                var /** @type {?} */ view = _this._viewContainer.createEmbeddedView(_this._template, new NgForOfContext(/** @type {?} */ ((null)), _this.ngForOf, -1, -1), currentIndex);
                var /** @type {?} */ tuple = new RecordViewTuple(item, view);
                insertTuples.push(tuple);
            }
            else if (currentIndex == null) {
                _this._viewContainer.remove(adjustedPreviousIndex);
            }
            else {
                var /** @type {?} */ view = ((_this._viewContainer.get(adjustedPreviousIndex)));
                _this._viewContainer.move(view, currentIndex);
                var /** @type {?} */ tuple = new RecordViewTuple(item, /** @type {?} */ (view));
                insertTuples.push(tuple);
            }
        });
        for (var /** @type {?} */ i = 0; i < insertTuples.length; i++) {
            this._perViewChange(insertTuples[i].view, insertTuples[i].record);
        }
        for (var /** @type {?} */ i = 0, /** @type {?} */ ilen = this._viewContainer.length; i < ilen; i++) {
            var /** @type {?} */ viewRef = (this._viewContainer.get(i));
            viewRef.context.index = i;
            viewRef.context.count = ilen;
        }
        changes.forEachIdentityChange(function (record) {
            var /** @type {?} */ viewRef = (_this._viewContainer.get(record.currentIndex));
            viewRef.context.$implicit = record.item;
        });
    };
    /**
     * @param {?} view
     * @param {?} record
     * @return {?}
     */
    NgForOf.prototype._perViewChange = function (view, record) {
        view.context.$implicit = record.item;
    };
    return NgForOf;
}());
NgForOf.decorators = [
    { type: Directive, args: [{ selector: '[ngFor][ngForOf]' },] },
];
/**
 * @nocollapse
 */
NgForOf.ctorParameters = function () { return [
    { type: ViewContainerRef, },
    { type: TemplateRef, },
    { type: IterableDiffers, },
]; };
NgForOf.propDecorators = {
    'ngForOf': [{ type: Input },],
    'ngForTrackBy': [{ type: Input },],
    'ngForTemplate': [{ type: Input },],
};
var RecordViewTuple = (function () {
    /**
     * @param {?} record
     * @param {?} view
     */
    function RecordViewTuple(record, view) {
        this.record = record;
        this.view = view;
    }
    return RecordViewTuple;
}());
/**
 * @deprecated from v4.0.0 - Use NgForOf instead.
 */
var NgFor = NgForOf;
/**
 * @param {?} type
 * @return {?}
 */
function getTypeNameForDebugging$1(type) {
    return type['name'] || typeof type;
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Conditionally includes a template based on the value of an `expression`.
 *
 * `ngIf` evaluates the `expression` and then renders the `then` or `else` template in its place
 * when expression is truthy or falsy respectively. Typically the:
 *  - `then` template is the inline template of `ngIf` unless bound to a different value.
 *  - `else` template is blank unless it is bound.
 *
 * ## Most common usage
 *
 * The most common usage of the `ngIf` directive is to conditionally show the inline template as
 * seen in this example:
 * {\@example common/ngIf/ts/module.ts region='NgIfSimple'}
 *
 * ## Showing an alternative template using `else`
 *
 * If it is necessary to display a template when the `expression` is falsy use the `else` template
 * binding as shown. Note that the `else` binding points to a `<ng-template>` labeled `#elseBlock`.
 * The template can be defined anywhere in the component view but is typically placed right after
 * `ngIf` for readability.
 *
 * {\@example common/ngIf/ts/module.ts region='NgIfElse'}
 *
 * ## Using non-inlined `then` template
 *
 * Usually the `then` template is the inlined template of the `ngIf`, but it can be changed using
 * a binding (just like `else`). Because `then` and `else` are bindings, the template references can
 * change at runtime as shown in this example.
 *
 * {\@example common/ngIf/ts/module.ts region='NgIfThenElse'}
 *
 * ## Storing conditional result in a variable
 *
 * A common pattern is that we need to show a set of properties from the same object. If the
 * object is undefined, then we have to use the safe-traversal-operator `?.` to guard against
 * dereferencing a `null` value. This is especially the case when waiting on async data such as
 * when using the `async` pipe as shown in following example:
 *
 * ```
 * Hello {{ (userStream|async)?.last }}, {{ (userStream|async)?.first }}!
 * ```
 *
 * There are several inefficiencies in the above example:
 *  - We create multiple subscriptions on `userStream`. One for each `async` pipe, or two in the
 *    example above.
 *  - We cannot display an alternative screen while waiting for the data to arrive asynchronously.
 *  - We have to use the safe-traversal-operator `?.` to access properties, which is cumbersome.
 *  - We have to place the `async` pipe in parenthesis.
 *
 * A better way to do this is to use `ngIf` and store the result of the condition in a local
 * variable as shown in the the example below:
 *
 * {\@example common/ngIf/ts/module.ts region='NgIfAs'}
 *
 * Notice that:
 *  - We use only one `async` pipe and hence only one subscription gets created.
 *  - `ngIf` stores the result of the `userStream|async` in the local variable `user`.
 *  - The local `user` can then be bound repeatedly in a more efficient way.
 *  - No need to use the safe-traversal-operator `?.` to access properties as `ngIf` will only
 *    display the data if `userStream` returns a value.
 *  - We can display an alternative template while waiting for the data.
 *
 * ### Syntax
 *
 * Simple form:
 * - `<div *ngIf="condition">...</div>`
 * - `<div template="ngIf condition">...</div>`
 * - `<ng-template [ngIf]="condition"><div>...</div></ng-template>`
 *
 * Form with an else block:
 * ```
 * <div *ngIf="condition; else elseBlock">...</div>
 * <ng-template #elseBlock>...</ng-template>
 * ```
 *
 * Form with a `then` and `else` block:
 * ```
 * <div *ngIf="condition; then thenBlock else elseBlock"></div>
 * <ng-template #thenBlock>...</ng-template>
 * <ng-template #elseBlock>...</ng-template>
 * ```
 *
 * Form with storing the value locally:
 * ```
 * <div *ngIf="condition as value; else elseBlock">{{value}}</div>
 * <ng-template #elseBlock>...</ng-template>
 * ```
 *
 * \@stable
 */
var NgIf = (function () {
    /**
     * @param {?} _viewContainer
     * @param {?} templateRef
     */
    function NgIf(_viewContainer, templateRef) {
        this._viewContainer = _viewContainer;
        this._context = new NgIfContext();
        this._thenTemplateRef = null;
        this._elseTemplateRef = null;
        this._thenViewRef = null;
        this._elseViewRef = null;
        this._thenTemplateRef = templateRef;
    }
    Object.defineProperty(NgIf.prototype, "ngIf", {
        /**
         * @param {?} condition
         * @return {?}
         */
        set: function (condition) {
            this._context.$implicit = this._context.ngIf = condition;
            this._updateView();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgIf.prototype, "ngIfThen", {
        /**
         * @param {?} templateRef
         * @return {?}
         */
        set: function (templateRef) {
            this._thenTemplateRef = templateRef;
            this._thenViewRef = null; // clear previous view if any.
            this._updateView();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgIf.prototype, "ngIfElse", {
        /**
         * @param {?} templateRef
         * @return {?}
         */
        set: function (templateRef) {
            this._elseTemplateRef = templateRef;
            this._elseViewRef = null; // clear previous view if any.
            this._updateView();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgIf.prototype._updateView = function () {
        if (this._context.$implicit) {
            if (!this._thenViewRef) {
                this._viewContainer.clear();
                this._elseViewRef = null;
                if (this._thenTemplateRef) {
                    this._thenViewRef =
                        this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);
                }
            }
        }
        else {
            if (!this._elseViewRef) {
                this._viewContainer.clear();
                this._thenViewRef = null;
                if (this._elseTemplateRef) {
                    this._elseViewRef =
                        this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);
                }
            }
        }
    };
    return NgIf;
}());
NgIf.decorators = [
    { type: Directive, args: [{ selector: '[ngIf]' },] },
];
/**
 * @nocollapse
 */
NgIf.ctorParameters = function () { return [
    { type: ViewContainerRef, },
    { type: TemplateRef, },
]; };
NgIf.propDecorators = {
    'ngIf': [{ type: Input },],
    'ngIfThen': [{ type: Input },],
    'ngIfElse': [{ type: Input },],
};
/**
 * \@stable
 */
var NgIfContext = (function () {
    function NgIfContext() {
        this.$implicit = null;
        this.ngIf = null;
    }
    return NgIfContext;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var SwitchView = (function () {
    /**
     * @param {?} _viewContainerRef
     * @param {?} _templateRef
     */
    function SwitchView(_viewContainerRef, _templateRef) {
        this._viewContainerRef = _viewContainerRef;
        this._templateRef = _templateRef;
        this._created = false;
    }
    /**
     * @return {?}
     */
    SwitchView.prototype.create = function () {
        this._created = true;
        this._viewContainerRef.createEmbeddedView(this._templateRef);
    };
    /**
     * @return {?}
     */
    SwitchView.prototype.destroy = function () {
        this._created = false;
        this._viewContainerRef.clear();
    };
    /**
     * @param {?} created
     * @return {?}
     */
    SwitchView.prototype.enforceState = function (created) {
        if (created && !this._created) {
            this.create();
        }
        else if (!created && this._created) {
            this.destroy();
        }
    };
    return SwitchView;
}());
/**
 * \@ngModule CommonModule
 *
 * \@whatItDoes Adds / removes DOM sub-trees when the nest match expressions matches the switch
 *             expression.
 *
 * \@howToUse
 * ```
 *     <container-element [ngSwitch]="switch_expression">
 *       <some-element *ngSwitchCase="match_expression_1">...</some-element>
 *       <some-element *ngSwitchCase="match_expression_2">...</some-element>
 *       <some-other-element *ngSwitchCase="match_expression_3">...</some-other-element>
 *       <ng-container *ngSwitchCase="match_expression_3">
 *         <!-- use a ng-container to group multiple root nodes -->
 *         <inner-element></inner-element>
 *         <inner-other-element></inner-other-element>
 *       </ng-container>
 *       <some-element *ngSwitchDefault>...</some-element>
 *     </container-element>
 * ```
 * \@description
 *
 * `NgSwitch` stamps out nested views when their match expression value matches the value of the
 * switch expression.
 *
 * In other words:
 * - you define a container element (where you place the directive with a switch expression on the
 * `[ngSwitch]="..."` attribute)
 * - you define inner views inside the `NgSwitch` and place a `*ngSwitchCase` attribute on the view
 * root elements.
 *
 * Elements within `NgSwitch` but outside of a `NgSwitchCase` or `NgSwitchDefault` directives will
 * be preserved at the location.
 *
 * The `ngSwitchCase` directive informs the parent `NgSwitch` of which view to display when the
 * expression is evaluated.
 * When no matching expression is found on a `ngSwitchCase` view, the `ngSwitchDefault` view is
 * stamped out.
 *
 * \@stable
 */
var NgSwitch = (function () {
    function NgSwitch() {
        this._defaultUsed = false;
        this._caseCount = 0;
        this._lastCaseCheckIndex = 0;
        this._lastCasesMatched = false;
    }
    Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
        /**
         * @param {?} newValue
         * @return {?}
         */
        set: function (newValue) {
            this._ngSwitch = newValue;
            if (this._caseCount === 0) {
                this._updateDefaultCases(true);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * \@internal
     * @return {?}
     */
    NgSwitch.prototype._addCase = function () { return this._caseCount++; };
    /**
     * \@internal
     * @param {?} view
     * @return {?}
     */
    NgSwitch.prototype._addDefault = function (view) {
        if (!this._defaultViews) {
            this._defaultViews = [];
        }
        this._defaultViews.push(view);
    };
    /**
     * \@internal
     * @param {?} value
     * @return {?}
     */
    NgSwitch.prototype._matchCase = function (value) {
        var /** @type {?} */ matched = value == this._ngSwitch;
        this._lastCasesMatched = this._lastCasesMatched || matched;
        this._lastCaseCheckIndex++;
        if (this._lastCaseCheckIndex === this._caseCount) {
            this._updateDefaultCases(!this._lastCasesMatched);
            this._lastCaseCheckIndex = 0;
            this._lastCasesMatched = false;
        }
        return matched;
    };
    /**
     * @param {?} useDefault
     * @return {?}
     */
    NgSwitch.prototype._updateDefaultCases = function (useDefault) {
        if (this._defaultViews && useDefault !== this._defaultUsed) {
            this._defaultUsed = useDefault;
            for (var /** @type {?} */ i = 0; i < this._defaultViews.length; i++) {
                var /** @type {?} */ defaultView = this._defaultViews[i];
                defaultView.enforceState(useDefault);
            }
        }
    };
    return NgSwitch;
}());
NgSwitch.decorators = [
    { type: Directive, args: [{ selector: '[ngSwitch]' },] },
];
/**
 * @nocollapse
 */
NgSwitch.ctorParameters = function () { return []; };
NgSwitch.propDecorators = {
    'ngSwitch': [{ type: Input },],
};
/**
 * \@ngModule CommonModule
 *
 * \@whatItDoes Creates a view that will be added/removed from the parent {\@link NgSwitch} when the
 *             given expression evaluate to respectively the same/different value as the switch
 *             expression.
 *
 * \@howToUse
 * ```
 * <container-element [ngSwitch]="switch_expression">
 *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
 * </container-element>
 * ```
 * \@description
 *
 * Insert the sub-tree when the expression evaluates to the same value as the enclosing switch
 * expression.
 *
 * If multiple match expressions match the switch expression value, all of them are displayed.
 *
 * See {\@link NgSwitch} for more details and example.
 *
 * \@stable
 */
var NgSwitchCase = (function () {
    /**
     * @param {?} viewContainer
     * @param {?} templateRef
     * @param {?} ngSwitch
     */
    function NgSwitchCase(viewContainer, templateRef, ngSwitch) {
        this.ngSwitch = ngSwitch;
        ngSwitch._addCase();
        this._view = new SwitchView(viewContainer, templateRef);
    }
    /**
     * @return {?}
     */
    NgSwitchCase.prototype.ngDoCheck = function () { this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase)); };
    return NgSwitchCase;
}());
NgSwitchCase.decorators = [
    { type: Directive, args: [{ selector: '[ngSwitchCase]' },] },
];
/**
 * @nocollapse
 */
NgSwitchCase.ctorParameters = function () { return [
    { type: ViewContainerRef, },
    { type: TemplateRef, },
    { type: NgSwitch, decorators: [{ type: Host },] },
]; };
NgSwitchCase.propDecorators = {
    'ngSwitchCase': [{ type: Input },],
};
/**
 * \@ngModule CommonModule
 * \@whatItDoes Creates a view that is added to the parent {\@link NgSwitch} when no case expressions
 * match the
 *             switch expression.
 *
 * \@howToUse
 * ```
 * <container-element [ngSwitch]="switch_expression">
 *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
 *   <some-other-element *ngSwitchDefault>...</some-other-element>
 * </container-element>
 * ```
 *
 * \@description
 *
 * Insert the sub-tree when no case expressions evaluate to the same value as the enclosing switch
 * expression.
 *
 * See {\@link NgSwitch} for more details and example.
 *
 * \@stable
 */
var NgSwitchDefault = (function () {
    /**
     * @param {?} viewContainer
     * @param {?} templateRef
     * @param {?} ngSwitch
     */
    function NgSwitchDefault(viewContainer, templateRef, ngSwitch) {
        ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));
    }
    return NgSwitchDefault;
}());
NgSwitchDefault.decorators = [
    { type: Directive, args: [{ selector: '[ngSwitchDefault]' },] },
];
/**
 * @nocollapse
 */
NgSwitchDefault.ctorParameters = function () { return [
    { type: ViewContainerRef, },
    { type: TemplateRef, },
    { type: NgSwitch, decorators: [{ type: Host },] },
]; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@ngModule CommonModule
 *
 * \@whatItDoes Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.
 *
 * \@howToUse
 * ```
 * <some-element [ngPlural]="value">
 *   <ng-template ngPluralCase="=0">there is nothing</ng-template>
 *   <ng-template ngPluralCase="=1">there is one</ng-template>
 *   <ng-template ngPluralCase="few">there are a few</ng-template>
 * </some-element>
 * ```
 *
 * \@description
 *
 * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees
 * that match the switch expression's pluralization category.
 *
 * To use this directive you must provide a container element that sets the `[ngPlural]` attribute
 * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their
 * expression:
 * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value
 *   matches the switch expression exactly,
 * - otherwise, the view will be treated as a "category match", and will only display if exact
 *   value matches aren't found and the value maps to its category for the defined locale.
 *
 * See http://cldr.unicode.org/index/cldr-spec/plural-rules
 *
 * \@experimental
 */
var NgPlural = (function () {
    /**
     * @param {?} _localization
     */
    function NgPlural(_localization) {
        this._localization = _localization;
        this._caseViews = {};
    }
    Object.defineProperty(NgPlural.prototype, "ngPlural", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this._switchValue = value;
            this._updateView();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @param {?} switchView
     * @return {?}
     */
    NgPlural.prototype.addCase = function (value, switchView) { this._caseViews[value] = switchView; };
    /**
     * @return {?}
     */
    NgPlural.prototype._updateView = function () {
        this._clearViews();
        var /** @type {?} */ cases = Object.keys(this._caseViews);
        var /** @type {?} */ key = getPluralCategory(this._switchValue, cases, this._localization);
        this._activateView(this._caseViews[key]);
    };
    /**
     * @return {?}
     */
    NgPlural.prototype._clearViews = function () {
        if (this._activeView)
            this._activeView.destroy();
    };
    /**
     * @param {?} view
     * @return {?}
     */
    NgPlural.prototype._activateView = function (view) {
        if (view) {
            this._activeView = view;
            this._activeView.create();
        }
    };
    return NgPlural;
}());
NgPlural.decorators = [
    { type: Directive, args: [{ selector: '[ngPlural]' },] },
];
/**
 * @nocollapse
 */
NgPlural.ctorParameters = function () { return [
    { type: NgLocalization, },
]; };
NgPlural.propDecorators = {
    'ngPlural': [{ type: Input },],
};
/**
 * \@ngModule CommonModule
 *
 * \@whatItDoes Creates a view that will be added/removed from the parent {\@link NgPlural} when the
 *             given expression matches the plural expression according to CLDR rules.
 *
 * \@howToUse
 * ```
 * <some-element [ngPlural]="value">
 *   <ng-template ngPluralCase="=0">...</ng-template>
 *   <ng-template ngPluralCase="other">...</ng-template>
 * </some-element>
 * ```
 *
 * See {\@link NgPlural} for more details and example.
 *
 * \@experimental
 */
var NgPluralCase = (function () {
    /**
     * @param {?} value
     * @param {?} template
     * @param {?} viewContainer
     * @param {?} ngPlural
     */
    function NgPluralCase(value, template, viewContainer, ngPlural) {
        this.value = value;
        var isANumber = !isNaN(Number(value));
        ngPlural.addCase(isANumber ? "=" + value : value, new SwitchView(viewContainer, template));
    }
    return NgPluralCase;
}());
NgPluralCase.decorators = [
    { type: Directive, args: [{ selector: '[ngPluralCase]' },] },
];
/**
 * @nocollapse
 */
NgPluralCase.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: Attribute, args: ['ngPluralCase',] },] },
    { type: TemplateRef, },
    { type: ViewContainerRef, },
    { type: NgPlural, decorators: [{ type: Host },] },
]; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@ngModule CommonModule
 *
 * \@whatItDoes Update an HTML element styles.
 *
 * \@howToUse
 * ```
 * <some-element [ngStyle]="{'font-style': styleExp}">...</some-element>
 *
 * <some-element [ngStyle]="{'max-width.px': widthExp}">...</some-element>
 *
 * <some-element [ngStyle]="objExp">...</some-element>
 * ```
 *
 * \@description
 *
 * The styles are updated according to the value of the expression evaluation:
 * - keys are style names with an optional `.<unit>` suffix (ie 'top.px', 'font-style.em'),
 * - values are the values assigned to those properties (expressed in the given unit).
 *
 * \@stable
 */
var NgStyle = (function () {
    /**
     * @param {?} _differs
     * @param {?} _ngEl
     * @param {?} _renderer
     */
    function NgStyle(_differs, _ngEl, _renderer) {
        this._differs = _differs;
        this._ngEl = _ngEl;
        this._renderer = _renderer;
    }
    Object.defineProperty(NgStyle.prototype, "ngStyle", {
        /**
         * @param {?} v
         * @return {?}
         */
        set: function (v) {
            this._ngStyle = v;
            if (!this._differ && v) {
                this._differ = this._differs.find(v).create();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgStyle.prototype.ngDoCheck = function () {
        if (this._differ) {
            var /** @type {?} */ changes = this._differ.diff(this._ngStyle);
            if (changes) {
                this._applyChanges(changes);
            }
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgStyle.prototype._applyChanges = function (changes) {
        var _this = this;
        changes.forEachRemovedItem(function (record) { return _this._setStyle(record.key, null); });
        changes.forEachAddedItem(function (record) { return _this._setStyle(record.key, record.currentValue); });
        changes.forEachChangedItem(function (record) { return _this._setStyle(record.key, record.currentValue); });
    };
    /**
     * @param {?} nameAndUnit
     * @param {?} value
     * @return {?}
     */
    NgStyle.prototype._setStyle = function (nameAndUnit, value) {
        var _a = nameAndUnit.split('.'), name = _a[0], unit = _a[1];
        value = value != null && unit ? "" + value + unit : value;
        this._renderer.setElementStyle(this._ngEl.nativeElement, name, /** @type {?} */ (value));
    };
    return NgStyle;
}());
NgStyle.decorators = [
    { type: Directive, args: [{ selector: '[ngStyle]' },] },
];
/**
 * @nocollapse
 */
NgStyle.ctorParameters = function () { return [
    { type: KeyValueDiffers, },
    { type: ElementRef, },
    { type: Renderer, },
]; };
NgStyle.propDecorators = {
    'ngStyle': [{ type: Input },],
};
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@ngModule CommonModule
 *
 * \@whatItDoes Inserts an embedded view from a prepared `TemplateRef`
 *
 * \@howToUse
 * ```
 * <ng-container *ngTemplateOutlet="templateRefExp; context: contextExp"></ng-container>
 * ```
 *
 * \@description
 *
 * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.
 * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding
 * by the local template `let` declarations.
 *
 * Note: using the key `$implicit` in the context object will set it's value as default.
 *
 * ## Example
 *
 * {\@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}
 *
 * \@experimental
 */
var NgTemplateOutlet = (function () {
    /**
     * @param {?} _viewContainerRef
     */
    function NgTemplateOutlet(_viewContainerRef) {
        this._viewContainerRef = _viewContainerRef;
    }
    Object.defineProperty(NgTemplateOutlet.prototype, "ngOutletContext", {
        /**
         * @deprecated v4.0.0 - Renamed to ngTemplateOutletContext.
         * @param {?} context
         * @return {?}
         */
        set: function (context) { this.ngTemplateOutletContext = context; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    NgTemplateOutlet.prototype.ngOnChanges = function (changes) {
        if (this._viewRef) {
            this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));
        }
        if (this.ngTemplateOutlet) {
            this._viewRef = this._viewContainerRef.createEmbeddedView(this.ngTemplateOutlet, this.ngTemplateOutletContext);
        }
    };
    return NgTemplateOutlet;
}());
NgTemplateOutlet.decorators = [
    { type: Directive, args: [{ selector: '[ngTemplateOutlet]' },] },
];
/**
 * @nocollapse
 */
NgTemplateOutlet.ctorParameters = function () { return [
    { type: ViewContainerRef, },
]; };
NgTemplateOutlet.propDecorators = {
    'ngTemplateOutletContext': [{ type: Input },],
    'ngTemplateOutlet': [{ type: Input },],
    'ngOutletContext': [{ type: Input },],
};
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A collection of Angular directives that are likely to be used in each and every Angular
 * application.
 */
var COMMON_DIRECTIVES = [
    NgClass,
    NgComponentOutlet,
    NgForOf,
    NgIf,
    NgTemplateOutlet,
    NgStyle,
    NgSwitch,
    NgSwitchCase,
    NgSwitchDefault,
    NgPlural,
    NgPluralCase,
];
/**
 * A collection of deprecated directives that are no longer part of the core module.
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} type
 * @param {?} value
 * @return {?}
 */
function invalidPipeArgumentError(type, value) {
    return Error("InvalidPipeArgument: '" + value + "' for pipe '" + stringify(type) + "'");
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ObservableStrategy = (function () {
    function ObservableStrategy() {
    }
    /**
     * @param {?} async
     * @param {?} updateLatestValue
     * @return {?}
     */
    ObservableStrategy.prototype.createSubscription = function (async, updateLatestValue) {
        return async.subscribe({ next: updateLatestValue, error: function (e) { throw e; } });
    };
    /**
     * @param {?} subscription
     * @return {?}
     */
    ObservableStrategy.prototype.dispose = function (subscription) { subscription.unsubscribe(); };
    /**
     * @param {?} subscription
     * @return {?}
     */
    ObservableStrategy.prototype.onDestroy = function (subscription) { subscription.unsubscribe(); };
    return ObservableStrategy;
}());
var PromiseStrategy = (function () {
    function PromiseStrategy() {
    }
    /**
     * @param {?} async
     * @param {?} updateLatestValue
     * @return {?}
     */
    PromiseStrategy.prototype.createSubscription = function (async, updateLatestValue) {
        return async.then(updateLatestValue, function (e) { throw e; });
    };
    /**
     * @param {?} subscription
     * @return {?}
     */
    PromiseStrategy.prototype.dispose = function (subscription) { };
    /**
     * @param {?} subscription
     * @return {?}
     */
    PromiseStrategy.prototype.onDestroy = function (subscription) { };
    return PromiseStrategy;
}());
var _promiseStrategy = new PromiseStrategy();
var _observableStrategy = new ObservableStrategy();
/**
 * \@ngModule CommonModule
 * \@whatItDoes Unwraps a value from an asynchronous primitive.
 * \@howToUse `observable_or_promise_expression | async`
 * \@description
 * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has
 * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for
 * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid
 * potential memory leaks.
 *
 *
 * ## Examples
 *
 * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the
 * promise.
 *
 * {\@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}
 *
 * It's also possible to use `async` with Observables. The example below binds the `time` Observable
 * to the view. The Observable continuously updates the view with the current time.
 *
 * {\@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}
 *
 * \@stable
 */
var AsyncPipe = (function () {
    /**
     * @param {?} _ref
     */
    function AsyncPipe(_ref) {
        this._ref = _ref;
        this._latestValue = null;
        this._latestReturnedValue = null;
        this._subscription = null;
        this._obj = null;
        this._strategy = ((null));
    }
    /**
     * @return {?}
     */
    AsyncPipe.prototype.ngOnDestroy = function () {
        if (this._subscription) {
            this._dispose();
        }
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    AsyncPipe.prototype.transform = function (obj) {
        if (!this._obj) {
            if (obj) {
                this._subscribe(obj);
            }
            this._latestReturnedValue = this._latestValue;
            return this._latestValue;
        }
        if (obj !== this._obj) {
            this._dispose();
            return this.transform(/** @type {?} */ (obj));
        }
        if (this._latestValue === this._latestReturnedValue) {
            return this._latestReturnedValue;
        }
        this._latestReturnedValue = this._latestValue;
        return WrappedValue.wrap(this._latestValue);
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    AsyncPipe.prototype._subscribe = function (obj) {
        var _this = this;
        this._obj = obj;
        this._strategy = this._selectStrategy(obj);
        this._subscription = this._strategy.createSubscription(obj, function (value) { return _this._updateLatestValue(obj, value); });
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    AsyncPipe.prototype._selectStrategy = function (obj) {
        if (isPromise(obj)) {
            return _promiseStrategy;
        }
        if (isObservable(obj)) {
            return _observableStrategy;
        }
        throw invalidPipeArgumentError(AsyncPipe, obj);
    };
    /**
     * @return {?}
     */
    AsyncPipe.prototype._dispose = function () {
        this._strategy.dispose(/** @type {?} */ ((this._subscription)));
        this._latestValue = null;
        this._latestReturnedValue = null;
        this._subscription = null;
        this._obj = null;
    };
    /**
     * @param {?} async
     * @param {?} value
     * @return {?}
     */
    AsyncPipe.prototype._updateLatestValue = function (async, value) {
        if (async === this._obj) {
            this._latestValue = value;
            this._ref.markForCheck();
        }
    };
    return AsyncPipe;
}());
AsyncPipe.decorators = [
    { type: Pipe, args: [{ name: 'async', pure: false },] },
];
/**
 * @nocollapse
 */
AsyncPipe.ctorParameters = function () { return [
    { type: ChangeDetectorRef, },
]; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Transforms text to lowercase.
 *
 * {\@example  common/pipes/ts/lowerupper_pipe.ts region='LowerUpperPipe' }
 *
 * \@stable
 */
var LowerCasePipe = (function () {
    function LowerCasePipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    LowerCasePipe.prototype.transform = function (value) {
        if (!value)
            return value;
        if (typeof value !== 'string') {
            throw invalidPipeArgumentError(LowerCasePipe, value);
        }
        return value.toLowerCase();
    };
    return LowerCasePipe;
}());
LowerCasePipe.decorators = [
    { type: Pipe, args: [{ name: 'lowercase' },] },
];
/**
 * @nocollapse
 */
LowerCasePipe.ctorParameters = function () { return []; };
/**
 * Helper method to transform a single word to titlecase.
 *
 * \@stable
 * @param {?} word
 * @return {?}
 */
function titleCaseWord(word) {
    if (!word)
        return word;
    return word[0].toUpperCase() + word.substr(1).toLowerCase();
}
/**
 * Transforms text to titlecase.
 *
 * \@stable
 */
var TitleCasePipe = (function () {
    function TitleCasePipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    TitleCasePipe.prototype.transform = function (value) {
        if (!value)
            return value;
        if (typeof value !== 'string') {
            throw invalidPipeArgumentError(TitleCasePipe, value);
        }
        return value.split(/\b/g).map(function (word) { return titleCaseWord(word); }).join('');
    };
    return TitleCasePipe;
}());
TitleCasePipe.decorators = [
    { type: Pipe, args: [{ name: 'titlecase' },] },
];
/**
 * @nocollapse
 */
TitleCasePipe.ctorParameters = function () { return []; };
/**
 * Transforms text to uppercase.
 *
 * \@stable
 */
var UpperCasePipe = (function () {
    function UpperCasePipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    UpperCasePipe.prototype.transform = function (value) {
        if (!value)
            return value;
        if (typeof value !== 'string') {
            throw invalidPipeArgumentError(UpperCasePipe, value);
        }
        return value.toUpperCase();
    };
    return UpperCasePipe;
}());
UpperCasePipe.decorators = [
    { type: Pipe, args: [{ name: 'uppercase' },] },
];
/**
 * @nocollapse
 */
UpperCasePipe.ctorParameters = function () { return []; };
var NumberFormatStyle = {};
NumberFormatStyle.Decimal = 0;
NumberFormatStyle.Percent = 1;
NumberFormatStyle.Currency = 2;
NumberFormatStyle[NumberFormatStyle.Decimal] = "Decimal";
NumberFormatStyle[NumberFormatStyle.Percent] = "Percent";
NumberFormatStyle[NumberFormatStyle.Currency] = "Currency";
var NumberFormatter = (function () {
    function NumberFormatter() {
    }
    /**
     * @param {?} num
     * @param {?} locale
     * @param {?} style
     * @param {?=} opts
     * @return {?}
     */
    NumberFormatter.format = function (num, locale, style, opts) {
        if (opts === void 0) { opts = {}; }
        var minimumIntegerDigits = opts.minimumIntegerDigits, minimumFractionDigits = opts.minimumFractionDigits, maximumFractionDigits = opts.maximumFractionDigits, currency = opts.currency, _a = opts.currencyAsSymbol, currencyAsSymbol = _a === void 0 ? false : _a;
        var /** @type {?} */ options = {
            minimumIntegerDigits: minimumIntegerDigits,
            minimumFractionDigits: minimumFractionDigits,
            maximumFractionDigits: maximumFractionDigits,
            style: NumberFormatStyle[style].toLowerCase()
        };
        if (style == NumberFormatStyle.Currency) {
            options.currency = typeof currency == 'string' ? currency : undefined;
            options.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';
        }
        return new Intl.NumberFormat(locale, options).format(num);
    };
    return NumberFormatter;
}());
var DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;
var PATTERN_ALIASES = {
    // Keys are quoted so they do not get renamed during closure compilation.
    'yMMMdjms': datePartGetterFactory(combine([
        digitCondition('year', 1),
        nameCondition('month', 3),
        digitCondition('day', 1),
        digitCondition('hour', 1),
        digitCondition('minute', 1),
        digitCondition('second', 1),
    ])),
    'yMdjm': datePartGetterFactory(combine([
        digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1),
        digitCondition('hour', 1), digitCondition('minute', 1)
    ])),
    'yMMMMEEEEd': datePartGetterFactory(combine([
        digitCondition('year', 1), nameCondition('month', 4), nameCondition('weekday', 4),
        digitCondition('day', 1)
    ])),
    'yMMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), digitCondition('day', 1)])),
    'yMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1)])),
    'yMd': datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1)])),
    'jms': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('second', 1), digitCondition('minute', 1)])),
    'jm': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('minute', 1)]))
};
var DATE_FORMATS = {
    // Keys are quoted so they do not get renamed.
    'yyyy': datePartGetterFactory(digitCondition('year', 4)),
    'yy': datePartGetterFactory(digitCondition('year', 2)),
    'y': datePartGetterFactory(digitCondition('year', 1)),
    'MMMM': datePartGetterFactory(nameCondition('month', 4)),
    'MMM': datePartGetterFactory(nameCondition('month', 3)),
    'MM': datePartGetterFactory(digitCondition('month', 2)),
    'M': datePartGetterFactory(digitCondition('month', 1)),
    'LLLL': datePartGetterFactory(nameCondition('month', 4)),
    'L': datePartGetterFactory(nameCondition('month', 1)),
    'dd': datePartGetterFactory(digitCondition('day', 2)),
    'd': datePartGetterFactory(digitCondition('day', 1)),
    'HH': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), false)))),
    'H': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), false))),
    'hh': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), true)))),
    'h': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
    'jj': datePartGetterFactory(digitCondition('hour', 2)),
    'j': datePartGetterFactory(digitCondition('hour', 1)),
    'mm': digitModifier(datePartGetterFactory(digitCondition('minute', 2))),
    'm': datePartGetterFactory(digitCondition('minute', 1)),
    'ss': digitModifier(datePartGetterFactory(digitCondition('second', 2))),
    's': datePartGetterFactory(digitCondition('second', 1)),
    // while ISO 8601 requires fractions to be prefixed with `.` or `,`
    // we can be just safely rely on using `sss` since we currently don't support single or two digit
    // fractions
    'sss': datePartGetterFactory(digitCondition('second', 3)),
    'EEEE': datePartGetterFactory(nameCondition('weekday', 4)),
    'EEE': datePartGetterFactory(nameCondition('weekday', 3)),
    'EE': datePartGetterFactory(nameCondition('weekday', 2)),
    'E': datePartGetterFactory(nameCondition('weekday', 1)),
    'a': hourClockExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
    'Z': timeZoneGetter('short'),
    'z': timeZoneGetter('long'),
    'ww': datePartGetterFactory({}),
    // first Thursday of the year. not support ?
    'w': datePartGetterFactory({}),
    // of the year not support ?
    'G': datePartGetterFactory(nameCondition('era', 1)),
    'GG': datePartGetterFactory(nameCondition('era', 2)),
    'GGG': datePartGetterFactory(nameCondition('era', 3)),
    'GGGG': datePartGetterFactory(nameCondition('era', 4))
};
/**
 * @param {?} inner
 * @return {?}
 */
function digitModifier(inner) {
    return function (date, locale) {
        var /** @type {?} */ result = inner(date, locale);
        return result.length == 1 ? '0' + result : result;
    };
}
/**
 * @param {?} inner
 * @return {?}
 */
function hourClockExtractor(inner) {
    return function (date, locale) { return inner(date, locale).split(' ')[1]; };
}
/**
 * @param {?} inner
 * @return {?}
 */
function hourExtractor(inner) {
    return function (date, locale) { return inner(date, locale).split(' ')[0]; };
}
/**
 * @param {?} date
 * @param {?} locale
 * @param {?} options
 * @return {?}
 */
function intlDateFormat(date, locale, options) {
    return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\u200e\u200f]/g, '');
}
/**
 * @param {?} timezone
 * @return {?}
 */
function timeZoneGetter(timezone) {
    // To workaround `Intl` API restriction for single timezone let format with 24 hours
    var /** @type {?} */ options = { hour: '2-digit', hour12: false, timeZoneName: timezone };
    return function (date, locale) {
        var /** @type {?} */ result = intlDateFormat(date, locale, options);
        // Then extract first 3 letters that related to hours
        return result ? result.substring(3) : '';
    };
}
/**
 * @param {?} options
 * @param {?} value
 * @return {?}
 */
function hour12Modify(options, value) {
    options.hour12 = value;
    return options;
}
/**
 * @param {?} prop
 * @param {?} len
 * @return {?}
 */
function digitCondition(prop, len) {
    var /** @type {?} */ result = {};
    result[prop] = len === 2 ? '2-digit' : 'numeric';
    return result;
}
/**
 * @param {?} prop
 * @param {?} len
 * @return {?}
 */
function nameCondition(prop, len) {
    var /** @type {?} */ result = {};
    if (len < 4) {
        result[prop] = len > 1 ? 'short' : 'narrow';
    }
    else {
        result[prop] = 'long';
    }
    return result;
}
/**
 * @param {?} options
 * @return {?}
 */
function combine(options) {
    return options.reduce(function (merged, opt) { return (Object.assign({}, merged, opt)); }, {});
}
/**
 * @param {?} ret
 * @return {?}
 */
function datePartGetterFactory(ret) {
    return function (date, locale) { return intlDateFormat(date, locale, ret); };
}
var DATE_FORMATTER_CACHE = new Map();
/**
 * @param {?} format
 * @param {?} date
 * @param {?} locale
 * @return {?}
 */
function dateFormatter(format, date, locale) {
    var /** @type {?} */ fn = PATTERN_ALIASES[format];
    if (fn)
        return fn(date, locale);
    var /** @type {?} */ cacheKey = format;
    var /** @type {?} */ parts = DATE_FORMATTER_CACHE.get(cacheKey);
    if (!parts) {
        parts = [];
        var /** @type {?} */ match = void 0;
        DATE_FORMATS_SPLIT.exec(format);
        var /** @type {?} */ _format = format;
        while (_format) {
            match = DATE_FORMATS_SPLIT.exec(_format);
            if (match) {
                parts = parts.concat(match.slice(1));
                _format = ((parts.pop()));
            }
            else {
                parts.push(_format);
                _format = null;
            }
        }
        DATE_FORMATTER_CACHE.set(cacheKey, parts);
    }
    return parts.reduce(function (text, part) {
        var /** @type {?} */ fn = DATE_FORMATS[part];
        return text + (fn ? fn(date, locale) : partToTime(part));
    }, '');
}
/**
 * @param {?} part
 * @return {?}
 */
function partToTime(part) {
    return part === '\'\'' ? '\'' : part.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
}
var DateFormatter = (function () {
    function DateFormatter() {
    }
    /**
     * @param {?} date
     * @param {?} locale
     * @param {?} pattern
     * @return {?}
     */
    DateFormatter.format = function (date, locale, pattern) {
        return dateFormatter(pattern, date, locale);
    };
    return DateFormatter;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var _NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
/**
 * @param {?} pipe
 * @param {?} locale
 * @param {?} value
 * @param {?} style
 * @param {?=} digits
 * @param {?=} currency
 * @param {?=} currencyAsSymbol
 * @return {?}
 */
function formatNumber(pipe, locale, value, style, digits, currency, currencyAsSymbol) {
    if (currency === void 0) { currency = null; }
    if (currencyAsSymbol === void 0) { currencyAsSymbol = false; }
    if (value == null)
        return null;
    // Convert strings to numbers
    value = typeof value === 'string' && isNumeric(value) ? +value : value;
    if (typeof value !== 'number') {
        throw invalidPipeArgumentError(pipe, value);
    }
    var /** @type {?} */ minInt = undefined;
    var /** @type {?} */ minFraction = undefined;
    var /** @type {?} */ maxFraction = undefined;
    if (style !== NumberFormatStyle.Currency) {
        // rely on Intl default for currency
        minInt = 1;
        minFraction = 0;
        maxFraction = 3;
    }
    if (digits) {
        var /** @type {?} */ parts = digits.match(_NUMBER_FORMAT_REGEXP);
        if (parts === null) {
            throw new Error(digits + " is not a valid digit info for number pipes");
        }
        if (parts[1] != null) {
            minInt = parseIntAutoRadix(parts[1]);
        }
        if (parts[3] != null) {
            minFraction = parseIntAutoRadix(parts[3]);
        }
        if (parts[5] != null) {
            maxFraction = parseIntAutoRadix(parts[5]);
        }
    }
    return NumberFormatter.format(/** @type {?} */ (value), locale, style, {
        minimumIntegerDigits: minInt,
        minimumFractionDigits: minFraction,
        maximumFractionDigits: maxFraction,
        currency: currency,
        currencyAsSymbol: currencyAsSymbol,
    });
}
/**
 * \@ngModule CommonModule
 * \@whatItDoes Formats a number according to locale rules.
 * \@howToUse `number_expression | number[:digitInfo]`
 *
 * Formats a number as text. Group sizing and separator and other locale-specific
 * configurations are based on the active locale.
 *
 * where `expression` is a number:
 *  - `digitInfo` is a `string` which has a following format: <br>
 *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>
 *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.
 *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.
 *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.
 *
 * For more information on the acceptable range for each of these numbers and other
 * details see your native internationalization library.
 *
 * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
 * and may require a polyfill. See [Browser Support](guide/browser-support) for details.
 *
 * ### Example
 *
 * {\@example common/pipes/ts/number_pipe.ts region='NumberPipe'}
 *
 * \@stable
 */
var DecimalPipe = (function () {
    /**
     * @param {?} _locale
     */
    function DecimalPipe(_locale) {
        this._locale = _locale;
    }
    /**
     * @param {?} value
     * @param {?=} digits
     * @return {?}
     */
    DecimalPipe.prototype.transform = function (value, digits) {
        return formatNumber(DecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);
    };
    return DecimalPipe;
}());
DecimalPipe.decorators = [
    { type: Pipe, args: [{ name: 'number' },] },
];
/**
 * @nocollapse
 */
DecimalPipe.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },
]; };
/**
 * \@ngModule CommonModule
 * \@whatItDoes Formats a number as a percentage according to locale rules.
 * \@howToUse `number_expression | percent[:digitInfo]`
 *
 * \@description
 *
 * Formats a number as percentage.
 *
 * - `digitInfo` See {\@link DecimalPipe} for detailed description.
 *
 * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
 * and may require a polyfill. See [Browser Support](guide/browser-support) for details.
 *
 * ### Example
 *
 * {\@example common/pipes/ts/number_pipe.ts region='PercentPipe'}
 *
 * \@stable
 */
var PercentPipe = (function () {
    /**
     * @param {?} _locale
     */
    function PercentPipe(_locale) {
        this._locale = _locale;
    }
    /**
     * @param {?} value
     * @param {?=} digits
     * @return {?}
     */
    PercentPipe.prototype.transform = function (value, digits) {
        return formatNumber(PercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);
    };
    return PercentPipe;
}());
PercentPipe.decorators = [
    { type: Pipe, args: [{ name: 'percent' },] },
];
/**
 * @nocollapse
 */
PercentPipe.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },
]; };
/**
 * \@ngModule CommonModule
 * \@whatItDoes Formats a number as currency using locale rules.
 * \@howToUse `number_expression | currency[:currencyCode[:symbolDisplay[:digitInfo]]]`
 * \@description
 *
 * Use `currency` to format a number as currency.
 *
 * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such
 *    as `USD` for the US dollar and `EUR` for the euro.
 * - `symbolDisplay` is a boolean indicating whether to use the currency symbol or code.
 *   - `true`: use symbol (e.g. `$`).
 *   - `false`(default): use code (e.g. `USD`).
 * - `digitInfo` See {\@link DecimalPipe} for detailed description.
 *
 * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
 * and may require a polyfill. See [Browser Support](guide/browser-support) for details.
 *
 * ### Example
 *
 * {\@example common/pipes/ts/number_pipe.ts region='CurrencyPipe'}
 *
 * \@stable
 */
var CurrencyPipe = (function () {
    /**
     * @param {?} _locale
     */
    function CurrencyPipe(_locale) {
        this._locale = _locale;
    }
    /**
     * @param {?} value
     * @param {?=} currencyCode
     * @param {?=} symbolDisplay
     * @param {?=} digits
     * @return {?}
     */
    CurrencyPipe.prototype.transform = function (value, currencyCode, symbolDisplay, digits) {
        if (currencyCode === void 0) { currencyCode = 'USD'; }
        if (symbolDisplay === void 0) { symbolDisplay = false; }
        return formatNumber(CurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);
    };
    return CurrencyPipe;
}());
CurrencyPipe.decorators = [
    { type: Pipe, args: [{ name: 'currency' },] },
];
/**
 * @nocollapse
 */
CurrencyPipe.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },
]; };
/**
 * @param {?} text
 * @return {?}
 */
function parseIntAutoRadix(text) {
    var /** @type {?} */ result = parseInt(text);
    if (isNaN(result)) {
        throw new Error('Invalid integer literal when parsing ' + text);
    }
    return result;
}
/**
 * @param {?} value
 * @return {?}
 */
function isNumeric(value) {
    return !isNaN(value - parseFloat(value));
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ISO8601_DATE_REGEX = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
/**
 * \@ngModule CommonModule
 * \@whatItDoes Formats a date according to locale rules.
 * \@howToUse `date_expression | date[:format]`
 * \@description
 *
 * Where:
 * - `expression` is a date object or a number (milliseconds since UTC epoch) or an ISO string
 * (https://www.w3.org/TR/NOTE-datetime).
 * - `format` indicates which date/time components to include. The format can be predefined as
 *   shown below or custom as shown in the table.
 *   - `'medium'`: equivalent to `'yMMMdjms'` (e.g. `Sep 3, 2010, 12:05:08 PM` for `en-US`)
 *   - `'short'`: equivalent to `'yMdjm'` (e.g. `9/3/2010, 12:05 PM` for `en-US`)
 *   - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. `Friday, September 3, 2010` for `en-US`)
 *   - `'longDate'`: equivalent to `'yMMMMd'` (e.g. `September 3, 2010` for `en-US`)
 *   - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. `Sep 3, 2010` for `en-US`)
 *   - `'shortDate'`: equivalent to `'yMd'` (e.g. `9/3/2010` for `en-US`)
 *   - `'mediumTime'`: equivalent to `'jms'` (e.g. `12:05:08 PM` for `en-US`)
 *   - `'shortTime'`: equivalent to `'jm'` (e.g. `12:05 PM` for `en-US`)
 *
 *
 *  | Component | Symbol | Narrow | Short Form   | Long Form         | Numeric   | 2-digit   |
 *  |-----------|:------:|--------|--------------|-------------------|-----------|-----------|
 *  | era       |   G    | G (A)  | GGG (AD)     | GGGG (Anno Domini)| -         | -         |
 *  | year      |   y    | -      | -            | -                 | y (2015)  | yy (15)   |
 *  | month     |   M    | L (S)  | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |
 *  | day       |   d    | -      | -            | -                 | d (3)     | dd (03)   |
 *  | weekday   |   E    | E (S)  | EEE (Sun)    | EEEE (Sunday)     | -         | -         |
 *  | hour      |   j    | -      | -            | -                 | j (13)    | jj (13)   |
 *  | hour12    |   h    | -      | -            | -                 | h (1 PM)  | hh (01 PM)|
 *  | hour24    |   H    | -      | -            | -                 | H (13)    | HH (13)   |
 *  | minute    |   m    | -      | -            | -                 | m (5)     | mm (05)   |
 *  | second    |   s    | -      | -            | -                 | s (9)     | ss (09)   |
 *  | timezone  |   z    | -      | -            | z (Pacific Standard Time)| -  | -         |
 *  | timezone  |   Z    | -      | Z (GMT-8:00) | -                 | -         | -         |
 *  | timezone  |   a    | -      | a (PM)       | -                 | -         | -         |
 *
 * In javascript, only the components specified will be respected (not the ordering,
 * punctuations, ...) and details of the formatting will be dependent on the locale.
 *
 * Timezone of the formatted text will be the local system timezone of the end-user's machine.
 *
 * When the expression is a ISO string without time (e.g. 2016-09-19) the time zone offset is not
 * applied and the formatted text will have the same day, month and year of the expression.
 *
 * WARNINGS:
 * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.
 *   Instead users should treat the date as an immutable object and change the reference when the
 *   pipe needs to re-run (this is to avoid reformatting the date on every change detection run
 *   which would be an expensive operation).
 * - this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera
 *   browsers.
 *
 * ### Examples
 *
 * Assuming `dateObj` is (year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11)
 * in the _local_ time and locale is 'en-US':
 *
 * ```
 *     {{ dateObj | date }}               // output is 'Jun 15, 2015'
 *     {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'
 *     {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'
 *     {{ dateObj | date:'mmss' }}        // output is '43:11'
 * ```
 *
 * {\@example common/pipes/ts/date_pipe.ts region='DatePipe'}
 *
 * \@stable
 */
var DatePipe = (function () {
    /**
     * @param {?} _locale
     */
    function DatePipe(_locale) {
        this._locale = _locale;
    }
    /**
     * @param {?} value
     * @param {?=} pattern
     * @return {?}
     */
    DatePipe.prototype.transform = function (value, pattern) {
        if (pattern === void 0) { pattern = 'mediumDate'; }
        var /** @type {?} */ date;
        if (isBlank(value) || value !== value)
            return null;
        if (typeof value === 'string') {
            value = value.trim();
        }
        if (isDate(value)) {
            date = value;
        }
        else if (isNumeric(value)) {
            date = new Date(parseFloat(value));
        }
        else if (typeof value === 'string' && /^(\d{4}-\d{1,2}-\d{1,2})$/.test(value)) {
            /**
             * For ISO Strings without time the day, month and year must be extracted from the ISO String
             * before Date creation to avoid time offset and errors in the new Date.
             * If we only replace '-' with ',' in the ISO String ("2015,01,01"), and try to create a new
             * date, some browsers (e.g. IE 9) will throw an invalid Date error
             * If we leave the '-' ("2015-01-01") and try to create a new Date("2015-01-01") the timeoffset
             * is applied
             * Note: ISO months are 0 for January, 1 for February, ...
             */
            var _a = value.split('-').map(function (val) { return parseInt(val, 10); }), y = _a[0], m = _a[1], d = _a[2];
            date = new Date(y, m - 1, d);
        }
        else {
            date = new Date(value);
        }
        if (!isDate(date)) {
            var /** @type {?} */ match = void 0;
            if ((typeof value === 'string') && (match = value.match(ISO8601_DATE_REGEX))) {
                date = isoStringToDate(match);
            }
            else {
                throw invalidPipeArgumentError(DatePipe, value);
            }
        }
        return DateFormatter.format(date, this._locale, DatePipe._ALIASES[pattern] || pattern);
    };
    return DatePipe;
}());
/**
 * \@internal
 */
DatePipe._ALIASES = {
    'medium': 'yMMMdjms',
    'short': 'yMdjm',
    'fullDate': 'yMMMMEEEEd',
    'longDate': 'yMMMMd',
    'mediumDate': 'yMMMd',
    'shortDate': 'yMd',
    'mediumTime': 'jms',
    'shortTime': 'jm'
};
DatePipe.decorators = [
    { type: Pipe, args: [{ name: 'date', pure: true },] },
];
/**
 * @nocollapse
 */
DatePipe.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },
]; };
/**
 * @param {?} obj
 * @return {?}
 */
function isBlank(obj) {
    return obj == null || obj === '';
}
/**
 * @param {?} obj
 * @return {?}
 */
function isDate(obj) {
    return obj instanceof Date && !isNaN(obj.valueOf());
}
/**
 * @param {?} match
 * @return {?}
 */
function isoStringToDate(match) {
    var /** @type {?} */ date = new Date(0);
    var /** @type {?} */ tzHour = 0;
    var /** @type {?} */ tzMin = 0;
    var /** @type {?} */ dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;
    var /** @type {?} */ timeSetter = match[8] ? date.setUTCHours : date.setHours;
    if (match[9]) {
        tzHour = toInt(match[9] + match[10]);
        tzMin = toInt(match[9] + match[11]);
    }
    dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));
    var /** @type {?} */ h = toInt(match[4] || '0') - tzHour;
    var /** @type {?} */ m = toInt(match[5] || '0') - tzMin;
    var /** @type {?} */ s = toInt(match[6] || '0');
    var /** @type {?} */ ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
    timeSetter.call(date, h, m, s, ms);
    return date;
}
/**
 * @param {?} str
 * @return {?}
 */
function toInt(str) {
    return parseInt(str, 10);
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var _INTERPOLATION_REGEXP = /#/g;
/**
 * \@ngModule CommonModule
 * \@whatItDoes Maps a value to a string that pluralizes the value according to locale rules.
 * \@howToUse `expression | i18nPlural:mapping`
 * \@description
 *
 *  Where:
 *  - `expression` is a number.
 *  - `mapping` is an object that mimics the ICU format, see
 *    http://userguide.icu-project.org/formatparse/messages
 *
 *  ## Example
 *
 * {\@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}
 *
 * \@experimental
 */
var I18nPluralPipe = (function () {
    /**
     * @param {?} _localization
     */
    function I18nPluralPipe(_localization) {
        this._localization = _localization;
    }
    /**
     * @param {?} value
     * @param {?} pluralMap
     * @return {?}
     */
    I18nPluralPipe.prototype.transform = function (value, pluralMap) {
        if (value == null)
            return '';
        if (typeof pluralMap !== 'object' || pluralMap === null) {
            throw invalidPipeArgumentError(I18nPluralPipe, pluralMap);
        }
        var /** @type {?} */ key = getPluralCategory(value, Object.keys(pluralMap), this._localization);
        return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());
    };
    return I18nPluralPipe;
}());
I18nPluralPipe.decorators = [
    { type: Pipe, args: [{ name: 'i18nPlural', pure: true },] },
];
/**
 * @nocollapse
 */
I18nPluralPipe.ctorParameters = function () { return [
    { type: NgLocalization, },
]; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@ngModule CommonModule
 * \@whatItDoes Generic selector that displays the string that matches the current value.
 * \@howToUse `expression | i18nSelect:mapping`
 * \@description
 *
 *  Where `mapping` is an object that indicates the text that should be displayed
 *  for different values of the provided `expression`.
 *  If none of the keys of the mapping match the value of the `expression`, then the content
 *  of the `other` key is returned when present, otherwise an empty string is returned.
 *
 *  ## Example
 *
 * {\@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}
 *
 *  \@experimental
 */
var I18nSelectPipe = (function () {
    function I18nSelectPipe() {
    }
    /**
     * @param {?} value
     * @param {?} mapping
     * @return {?}
     */
    I18nSelectPipe.prototype.transform = function (value, mapping) {
        if (value == null)
            return '';
        if (typeof mapping !== 'object' || typeof value !== 'string') {
            throw invalidPipeArgumentError(I18nSelectPipe, mapping);
        }
        if (mapping.hasOwnProperty(value)) {
            return mapping[value];
        }
        if (mapping.hasOwnProperty('other')) {
            return mapping['other'];
        }
        return '';
    };
    return I18nSelectPipe;
}());
I18nSelectPipe.decorators = [
    { type: Pipe, args: [{ name: 'i18nSelect', pure: true },] },
];
/**
 * @nocollapse
 */
I18nSelectPipe.ctorParameters = function () { return []; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@ngModule CommonModule
 * \@whatItDoes Converts value into JSON string.
 * \@howToUse `expression | json`
 * \@description
 *
 * Converts value into string using `JSON.stringify`. Useful for debugging.
 *
 * ### Example
 * {\@example common/pipes/ts/json_pipe.ts region='JsonPipe'}
 *
 * \@stable
 */
var JsonPipe = (function () {
    function JsonPipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    JsonPipe.prototype.transform = function (value) { return JSON.stringify(value, null, 2); };
    return JsonPipe;
}());
JsonPipe.decorators = [
    { type: Pipe, args: [{ name: 'json', pure: false },] },
];
/**
 * @nocollapse
 */
JsonPipe.ctorParameters = function () { return []; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@ngModule CommonModule
 * \@whatItDoes Creates a new List or String containing a subset (slice) of the elements.
 * \@howToUse `array_or_string_expression | slice:start[:end]`
 * \@description
 *
 * Where the input expression is a `List` or `String`, and:
 * - `start`: The starting index of the subset to return.
 *   - **a positive integer**: return the item at `start` index and all items after
 *     in the list or string expression.
 *   - **a negative integer**: return the item at `start` index from the end and all items after
 *     in the list or string expression.
 *   - **if positive and greater than the size of the expression**: return an empty list or string.
 *   - **if negative and greater than the size of the expression**: return entire list or string.
 * - `end`: The ending index of the subset to return.
 *   - **omitted**: return all items until the end.
 *   - **if positive**: return all items before `end` index of the list or string.
 *   - **if negative**: return all items before `end` index from the end of the list or string.
 *
 * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`
 * and `String.prototype.slice()`.
 *
 * When operating on a [List], the returned list is always a copy even when all
 * the elements are being returned.
 *
 * When operating on a blank value, the pipe returns the blank value.
 *
 * ## List Example
 *
 * This `ngFor` example:
 *
 * {\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}
 *
 * produces the following:
 *
 *     <li>b</li>
 *     <li>c</li>
 *
 * ## String Examples
 *
 * {\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}
 *
 * \@stable
 */
var SlicePipe = (function () {
    function SlicePipe() {
    }
    /**
     * @param {?} value
     * @param {?} start
     * @param {?=} end
     * @return {?}
     */
    SlicePipe.prototype.transform = function (value, start, end) {
        if (value == null)
            return value;
        if (!this.supports(value)) {
            throw invalidPipeArgumentError(SlicePipe, value);
        }
        return value.slice(start, end);
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    SlicePipe.prototype.supports = function (obj) { return typeof obj === 'string' || Array.isArray(obj); };
    return SlicePipe;
}());
SlicePipe.decorators = [
    { type: Pipe, args: [{ name: 'slice', pure: false },] },
];
/**
 * @nocollapse
 */
SlicePipe.ctorParameters = function () { return []; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @module
 * @description
 * This module provides a set of common Pipes.
 */
/**
 * A collection of Angular pipes that are likely to be used in each and every application.
 */
var COMMON_PIPES = [
    AsyncPipe,
    UpperCasePipe,
    LowerCasePipe,
    JsonPipe,
    SlicePipe,
    DecimalPipe,
    PercentPipe,
    TitleCasePipe,
    CurrencyPipe,
    DatePipe,
    I18nPluralPipe,
    I18nSelectPipe,
];
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * The module that includes all the basic Angular directives like {\@link NgIf}, {\@link NgForOf}, ...
 *
 * \@stable
 */
var CommonModule = (function () {
    function CommonModule() {
    }
    return CommonModule;
}());
CommonModule.decorators = [
    { type: NgModule, args: [{
                declarations: [COMMON_DIRECTIVES, COMMON_PIPES],
                exports: [COMMON_DIRECTIVES, COMMON_PIPES],
                providers: [
                    { provide: NgLocalization, useClass: NgLocaleLocalization },
                ],
            },] },
];
/**
 * @nocollapse
 */
CommonModule.ctorParameters = function () { return []; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A DI Token representing the main rendering context. In a browser this is the DOM Document.
 *
 * Note: Document might not be available in the Application Context when Application and Rendering
 * Contexts are not the same (e.g. when running the application into a Web Worker).
 *
 * \@stable
 */
var DOCUMENT = new InjectionToken('DocumentToken');
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var PLATFORM_BROWSER_ID = 'browser';
var PLATFORM_SERVER_ID = 'server';
var PLATFORM_WORKER_APP_ID = 'browserWorkerApp';
var PLATFORM_WORKER_UI_ID = 'browserWorkerUi';
/**
 * Returns whether a platform id represents a browser platform.
 * \@experimental
 * @param {?} platformId
 * @return {?}
 */
function isPlatformBrowser(platformId) {
    return platformId === PLATFORM_BROWSER_ID;
}
/**
 * Returns whether a platform id represents a server platform.
 * \@experimental
 * @param {?} platformId
 * @return {?}
 */
function isPlatformServer(platformId) {
    return platformId === PLATFORM_SERVER_ID;
}
/**
 * Returns whether a platform id represents a web worker app platform.
 * \@experimental
 * @param {?} platformId
 * @return {?}
 */
function isPlatformWorkerApp(platformId) {
    return platformId === PLATFORM_WORKER_APP_ID;
}
/**
 * Returns whether a platform id represents a web worker UI platform.
 * \@experimental
 * @param {?} platformId
 * @return {?}
 */
function isPlatformWorkerUi(platformId) {
    return platformId === PLATFORM_WORKER_UI_ID;
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @module
 * @description
 * Entry point for all public APIs of the common package.
 */
/**
 * \@stable
 */
var VERSION$2 = new Version('4.3.3');




var common_es5 = Object.freeze({
	NgLocaleLocalization: NgLocaleLocalization,
	NgLocalization: NgLocalization,
	ɵparseCookieValue: parseCookieValue,
	CommonModule: CommonModule,
	NgClass: NgClass,
	NgFor: NgFor,
	NgForOf: NgForOf,
	NgForOfContext: NgForOfContext,
	NgIf: NgIf,
	NgIfContext: NgIfContext,
	NgPlural: NgPlural,
	NgPluralCase: NgPluralCase,
	NgStyle: NgStyle,
	NgSwitch: NgSwitch,
	NgSwitchCase: NgSwitchCase,
	NgSwitchDefault: NgSwitchDefault,
	NgTemplateOutlet: NgTemplateOutlet,
	NgComponentOutlet: NgComponentOutlet,
	DOCUMENT: DOCUMENT,
	AsyncPipe: AsyncPipe,
	DatePipe: DatePipe,
	I18nPluralPipe: I18nPluralPipe,
	I18nSelectPipe: I18nSelectPipe,
	JsonPipe: JsonPipe,
	LowerCasePipe: LowerCasePipe,
	CurrencyPipe: CurrencyPipe,
	DecimalPipe: DecimalPipe,
	PercentPipe: PercentPipe,
	SlicePipe: SlicePipe,
	UpperCasePipe: UpperCasePipe,
	TitleCasePipe: TitleCasePipe,
	ɵPLATFORM_BROWSER_ID: PLATFORM_BROWSER_ID,
	ɵPLATFORM_SERVER_ID: PLATFORM_SERVER_ID,
	ɵPLATFORM_WORKER_APP_ID: PLATFORM_WORKER_APP_ID,
	ɵPLATFORM_WORKER_UI_ID: PLATFORM_WORKER_UI_ID,
	isPlatformBrowser: isPlatformBrowser,
	isPlatformServer: isPlatformServer,
	isPlatformWorkerApp: isPlatformWorkerApp,
	isPlatformWorkerUi: isPlatformWorkerUi,
	VERSION: VERSION$2,
	PlatformLocation: PlatformLocation,
	LOCATION_INITIALIZED: LOCATION_INITIALIZED,
	LocationStrategy: LocationStrategy,
	APP_BASE_HREF: APP_BASE_HREF,
	HashLocationStrategy: HashLocationStrategy,
	PathLocationStrategy: PathLocationStrategy,
	Location: Location,
	ɵa: COMMON_DIRECTIVES,
	ɵb: COMMON_PIPES
});

/**
 * @license Angular v4.3.3
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var _DOM = ((null));
/**
 * @return {?}
 */
function getDOM() {
    return _DOM;
}
/**
 * @param {?} adapter
 * @return {?}
 */
/**
 * @param {?} adapter
 * @return {?}
 */
function setRootDomAdapter(adapter) {
    if (!_DOM) {
        _DOM = adapter;
    }
}
/**
 * Provides DOM operations in an environment-agnostic way.
 *
 * \@security Tread carefully! Interacting with the DOM directly is dangerous and
 * can introduce XSS risks.
 * @abstract
 */
var DomAdapter = (function () {
    function DomAdapter() {
        this.resourceLoaderType = ((null));
    }
    /**
     * @abstract
     * @param {?} element
     * @param {?} name
     * @return {?}
     */
    DomAdapter.prototype.hasProperty = function (element, name) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    DomAdapter.prototype.setProperty = function (el, name, value) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    DomAdapter.prototype.getProperty = function (el, name) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} methodName
     * @param {?} args
     * @return {?}
     */
    DomAdapter.prototype.invoke = function (el, methodName, args) { };
    /**
     * @abstract
     * @param {?} error
     * @return {?}
     */
    DomAdapter.prototype.logError = function (error) { };
    /**
     * @abstract
     * @param {?} error
     * @return {?}
     */
    DomAdapter.prototype.log = function (error) { };
    /**
     * @abstract
     * @param {?} error
     * @return {?}
     */
    DomAdapter.prototype.logGroup = function (error) { };
    /**
     * @abstract
     * @return {?}
     */
    DomAdapter.prototype.logGroupEnd = function () { };
    Object.defineProperty(DomAdapter.prototype, "attrToPropMap", {
        /**
         * Maps attribute names to their corresponding property names for cases
         * where attribute name doesn't match property name.
         * @return {?}
         */
        get: function () { return this._attrToPropMap; },
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) { this._attrToPropMap = value; },
        enumerable: true,
        configurable: true
    });
    
    
    /**
     * @abstract
     * @param {?} nodeA
     * @param {?} nodeB
     * @return {?}
     */
    DomAdapter.prototype.contains = function (nodeA, nodeB) { };
    /**
     * @abstract
     * @param {?} templateHtml
     * @return {?}
     */
    DomAdapter.prototype.parse = function (templateHtml) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */
    DomAdapter.prototype.querySelector = function (el, selector) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */
    DomAdapter.prototype.querySelectorAll = function (el, selector) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} evt
     * @param {?} listener
     * @return {?}
     */
    DomAdapter.prototype.on = function (el, evt, listener) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} evt
     * @param {?} listener
     * @return {?}
     */
    DomAdapter.prototype.onAndCancel = function (el, evt, listener) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} evt
     * @return {?}
     */
    DomAdapter.prototype.dispatchEvent = function (el, evt) { };
    /**
     * @abstract
     * @param {?} eventType
     * @return {?}
     */
    DomAdapter.prototype.createMouseEvent = function (eventType) { };
    /**
     * @abstract
     * @param {?} eventType
     * @return {?}
     */
    DomAdapter.prototype.createEvent = function (eventType) { };
    /**
     * @abstract
     * @param {?} evt
     * @return {?}
     */
    DomAdapter.prototype.preventDefault = function (evt) { };
    /**
     * @abstract
     * @param {?} evt
     * @return {?}
     */
    DomAdapter.prototype.isPrevented = function (evt) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.getInnerHTML = function (el) { };
    /**
     * Returns content if el is a <template> element, null otherwise.
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.getTemplateContent = function (el) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.getOuterHTML = function (el) { };
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */
    DomAdapter.prototype.nodeName = function (node) { };
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */
    DomAdapter.prototype.nodeValue = function (node) { };
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */
    DomAdapter.prototype.type = function (node) { };
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */
    DomAdapter.prototype.content = function (node) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.firstChild = function (el) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.nextSibling = function (el) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.parentElement = function (el) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.childNodes = function (el) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.childNodesAsList = function (el) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.clearNodes = function (el) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} node
     * @return {?}
     */
    DomAdapter.prototype.appendChild = function (el, node) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} node
     * @return {?}
     */
    DomAdapter.prototype.removeChild = function (el, node) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} newNode
     * @param {?} oldNode
     * @return {?}
     */
    DomAdapter.prototype.replaceChild = function (el, newNode, oldNode) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.remove = function (el) { };
    /**
     * @abstract
     * @param {?} parent
     * @param {?} ref
     * @param {?} node
     * @return {?}
     */
    DomAdapter.prototype.insertBefore = function (parent, ref, node) { };
    /**
     * @abstract
     * @param {?} parent
     * @param {?} ref
     * @param {?} nodes
     * @return {?}
     */
    DomAdapter.prototype.insertAllBefore = function (parent, ref, nodes) { };
    /**
     * @abstract
     * @param {?} parent
     * @param {?} el
     * @param {?} node
     * @return {?}
     */
    DomAdapter.prototype.insertAfter = function (parent, el, node) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    DomAdapter.prototype.setInnerHTML = function (el, value) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.getText = function (el) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    DomAdapter.prototype.setText = function (el, value) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.getValue = function (el) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    DomAdapter.prototype.setValue = function (el, value) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.getChecked = function (el) { };
    /**
     * @abstract
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    DomAdapter.prototype.setChecked = function (el, value) { };
    /**
     * @abstract
     * @param {?} text
     * @return {?}
     */
    DomAdapter.prototype.createComment = function (text) { };
    /**
     * @abstract
     * @param {?} html
     * @return {?}
     */
    DomAdapter.prototype.createTemplate = function (html) { };
    /**
     * @abstract
     * @param {?} tagName
     * @param {?=} doc
     * @return {?}
     */
    DomAdapter.prototype.createElement = function (tagName, doc) { };
    /**
     * @abstract
     * @param {?} ns
     * @param {?} tagName
     * @param {?=} doc
     * @return {?}
     */
    DomAdapter.prototype.createElementNS = function (ns, tagName, doc) { };
    /**
     * @abstract
     * @param {?} text
     * @param {?=} doc
     * @return {?}
     */
    DomAdapter.prototype.createTextNode = function (text, doc) { };
    /**
     * @abstract
     * @param {?} attrName
     * @param {?} attrValue
     * @param {?=} doc
     * @return {?}
     */
    DomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) { };
    /**
     * @abstract
     * @param {?} css
     * @param {?=} doc
     * @return {?}
     */
    DomAdapter.prototype.createStyleElement = function (css, doc) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.createShadowRoot = function (el) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.getShadowRoot = function (el) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.getHost = function (el) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.getDistributedNodes = function (el) { };
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */
    DomAdapter.prototype.clone /*<T extends Node>*/ = function (node) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} name
     * @return {?}
     */
    DomAdapter.prototype.getElementsByClassName = function (element, name) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} name
     * @return {?}
     */
    DomAdapter.prototype.getElementsByTagName = function (element, name) { };
    /**
     * @abstract
     * @param {?} element
     * @return {?}
     */
    DomAdapter.prototype.classList = function (element) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    DomAdapter.prototype.addClass = function (element, className) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    DomAdapter.prototype.removeClass = function (element, className) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    DomAdapter.prototype.hasClass = function (element, className) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} styleName
     * @param {?} styleValue
     * @return {?}
     */
    DomAdapter.prototype.setStyle = function (element, styleName, styleValue) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} styleName
     * @return {?}
     */
    DomAdapter.prototype.removeStyle = function (element, styleName) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} styleName
     * @return {?}
     */
    DomAdapter.prototype.getStyle = function (element, styleName) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} styleName
     * @param {?=} styleValue
     * @return {?}
     */
    DomAdapter.prototype.hasStyle = function (element, styleName, styleValue) { };
    /**
     * @abstract
     * @param {?} element
     * @return {?}
     */
    DomAdapter.prototype.tagName = function (element) { };
    /**
     * @abstract
     * @param {?} element
     * @return {?}
     */
    DomAdapter.prototype.attributeMap = function (element) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} attribute
     * @return {?}
     */
    DomAdapter.prototype.hasAttribute = function (element, attribute) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} ns
     * @param {?} attribute
     * @return {?}
     */
    DomAdapter.prototype.hasAttributeNS = function (element, ns, attribute) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} attribute
     * @return {?}
     */
    DomAdapter.prototype.getAttribute = function (element, attribute) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} ns
     * @param {?} attribute
     * @return {?}
     */
    DomAdapter.prototype.getAttributeNS = function (element, ns, attribute) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    DomAdapter.prototype.setAttribute = function (element, name, value) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} ns
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    DomAdapter.prototype.setAttributeNS = function (element, ns, name, value) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} attribute
     * @return {?}
     */
    DomAdapter.prototype.removeAttribute = function (element, attribute) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} ns
     * @param {?} attribute
     * @return {?}
     */
    DomAdapter.prototype.removeAttributeNS = function (element, ns, attribute) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.templateAwareRoot = function (el) { };
    /**
     * @abstract
     * @return {?}
     */
    DomAdapter.prototype.createHtmlDocument = function () { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.getBoundingClientRect = function (el) { };
    /**
     * @abstract
     * @param {?} doc
     * @return {?}
     */
    DomAdapter.prototype.getTitle = function (doc) { };
    /**
     * @abstract
     * @param {?} doc
     * @param {?} newTitle
     * @return {?}
     */
    DomAdapter.prototype.setTitle = function (doc, newTitle) { };
    /**
     * @abstract
     * @param {?} n
     * @param {?} selector
     * @return {?}
     */
    DomAdapter.prototype.elementMatches = function (n, selector) { };
    /**
     * @abstract
     * @param {?} el
     * @return {?}
     */
    DomAdapter.prototype.isTemplateElement = function (el) { };
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */
    DomAdapter.prototype.isTextNode = function (node) { };
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */
    DomAdapter.prototype.isCommentNode = function (node) { };
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */
    DomAdapter.prototype.isElementNode = function (node) { };
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */
    DomAdapter.prototype.hasShadowRoot = function (node) { };
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */
    DomAdapter.prototype.isShadowRoot = function (node) { };
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */
    DomAdapter.prototype.importIntoDoc /*<T extends Node>*/ = function (node) { };
    /**
     * @abstract
     * @param {?} node
     * @return {?}
     */
    DomAdapter.prototype.adoptNode /*<T extends Node>*/ = function (node) { };
    /**
     * @abstract
     * @param {?} element
     * @return {?}
     */
    DomAdapter.prototype.getHref = function (element) { };
    /**
     * @abstract
     * @param {?} event
     * @return {?}
     */
    DomAdapter.prototype.getEventKey = function (event) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} baseUrl
     * @param {?} href
     * @return {?}
     */
    DomAdapter.prototype.resolveAndSetHref = function (element, baseUrl, href) { };
    /**
     * @abstract
     * @return {?}
     */
    DomAdapter.prototype.supportsDOMEvents = function () { };
    /**
     * @abstract
     * @return {?}
     */
    DomAdapter.prototype.supportsNativeShadowDOM = function () { };
    /**
     * @abstract
     * @param {?} doc
     * @param {?} target
     * @return {?}
     */
    DomAdapter.prototype.getGlobalEventTarget = function (doc, target) { };
    /**
     * @abstract
     * @return {?}
     */
    DomAdapter.prototype.getHistory = function () { };
    /**
     * @abstract
     * @return {?}
     */
    DomAdapter.prototype.getLocation = function () { };
    /**
     * @abstract
     * @param {?} doc
     * @return {?}
     */
    DomAdapter.prototype.getBaseHref = function (doc) { };
    /**
     * @abstract
     * @return {?}
     */
    DomAdapter.prototype.resetBaseElement = function () { };
    /**
     * @abstract
     * @return {?}
     */
    DomAdapter.prototype.getUserAgent = function () { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    DomAdapter.prototype.setData = function (element, name, value) { };
    /**
     * @abstract
     * @param {?} element
     * @return {?}
     */
    DomAdapter.prototype.getComputedStyle = function (element) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} name
     * @return {?}
     */
    DomAdapter.prototype.getData = function (element, name) { };
    /**
     * @abstract
     * @return {?}
     */
    DomAdapter.prototype.supportsWebAnimation = function () { };
    /**
     * @abstract
     * @return {?}
     */
    DomAdapter.prototype.performanceNow = function () { };
    /**
     * @abstract
     * @return {?}
     */
    DomAdapter.prototype.getAnimationPrefix = function () { };
    /**
     * @abstract
     * @return {?}
     */
    DomAdapter.prototype.getTransitionEnd = function () { };
    /**
     * @abstract
     * @return {?}
     */
    DomAdapter.prototype.supportsAnimation = function () { };
    /**
     * @abstract
     * @return {?}
     */
    DomAdapter.prototype.supportsCookies = function () { };
    /**
     * @abstract
     * @param {?} name
     * @return {?}
     */
    DomAdapter.prototype.getCookie = function (name) { };
    /**
     * @abstract
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    DomAdapter.prototype.setCookie = function (name, value) { };
    return DomAdapter;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Provides DOM operations in any browser environment.
 *
 * \@security Tread carefully! Interacting with the DOM directly is dangerous and
 * can introduce XSS risks.
 * @abstract
 */
var GenericBrowserDomAdapter = (function (_super) {
    __extends(GenericBrowserDomAdapter, _super);
    function GenericBrowserDomAdapter() {
        var _this = _super.call(this) || this;
        _this._animationPrefix = null;
        _this._transitionEnd = null;
        try {
            var element_1 = _this.createElement('div', document);
            if (_this.getStyle(element_1, 'animationName') != null) {
                _this._animationPrefix = '';
            }
            else {
                var domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];
                for (var i = 0; i < domPrefixes.length; i++) {
                    if (_this.getStyle(element_1, domPrefixes[i] + 'AnimationName') != null) {
                        _this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';
                        break;
                    }
                }
            }
            var transEndEventNames_1 = {
                WebkitTransition: 'webkitTransitionEnd',
                MozTransition: 'transitionend',
                OTransition: 'oTransitionEnd otransitionend',
                transition: 'transitionend'
            };
            Object.keys(transEndEventNames_1).forEach(function (key) {
                if (_this.getStyle(element_1, key) != null) {
                    _this._transitionEnd = transEndEventNames_1[key];
                }
            });
        }
        catch (e) {
            _this._animationPrefix = null;
            _this._transitionEnd = null;
        }
        return _this;
    }
    /**
     * @param {?} el
     * @return {?}
     */
    GenericBrowserDomAdapter.prototype.getDistributedNodes = function (el) { return ((el)).getDistributedNodes(); };
    /**
     * @param {?} el
     * @param {?} baseUrl
     * @param {?} href
     * @return {?}
     */
    GenericBrowserDomAdapter.prototype.resolveAndSetHref = function (el, baseUrl, href) {
        el.href = href == null ? baseUrl : baseUrl + '/../' + href;
    };
    /**
     * @return {?}
     */
    GenericBrowserDomAdapter.prototype.supportsDOMEvents = function () { return true; };
    /**
     * @return {?}
     */
    GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function () {
        return typeof ((document.body)).createShadowRoot === 'function';
    };
    /**
     * @return {?}
     */
    GenericBrowserDomAdapter.prototype.getAnimationPrefix = function () { return this._animationPrefix ? this._animationPrefix : ''; };
    /**
     * @return {?}
     */
    GenericBrowserDomAdapter.prototype.getTransitionEnd = function () { return this._transitionEnd ? this._transitionEnd : ''; };
    /**
     * @return {?}
     */
    GenericBrowserDomAdapter.prototype.supportsAnimation = function () {
        return this._animationPrefix != null && this._transitionEnd != null;
    };
    return GenericBrowserDomAdapter;
}(DomAdapter));
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var _attrToPropMap = {
    'class': 'className',
    'innerHtml': 'innerHTML',
    'readonly': 'readOnly',
    'tabindex': 'tabIndex',
};
var DOM_KEY_LOCATION_NUMPAD = 3;
// Map to convert some key or keyIdentifier values to what will be returned by getEventKey
var _keyMap = {
    // The following values are here for cross-browser compatibility and to match the W3C standard
    // cf http://www.w3.org/TR/DOM-Level-3-Events-key/
    '\b': 'Backspace',
    '\t': 'Tab',
    '\x7F': 'Delete',
    '\x1B': 'Escape',
    'Del': 'Delete',
    'Esc': 'Escape',
    'Left': 'ArrowLeft',
    'Right': 'ArrowRight',
    'Up': 'ArrowUp',
    'Down': 'ArrowDown',
    'Menu': 'ContextMenu',
    'Scroll': 'ScrollLock',
    'Win': 'OS'
};
// There is a bug in Chrome for numeric keypad keys:
// https://code.google.com/p/chromium/issues/detail?id=155654
// 1, 2, 3 ... are reported as A, B, C ...
var _chromeNumKeyPadMap = {
    'A': '1',
    'B': '2',
    'C': '3',
    'D': '4',
    'E': '5',
    'F': '6',
    'G': '7',
    'H': '8',
    'I': '9',
    'J': '*',
    'K': '+',
    'M': '-',
    'N': '.',
    'O': '/',
    '\x60': '0',
    '\x90': 'NumLock'
};
var nodeContains;
if (_global['Node']) {
    nodeContains = _global['Node'].prototype.contains || function (node) {
        return !!(this.compareDocumentPosition(node) & 16);
    };
}
var BrowserDomAdapter = (function (_super) {
    __extends(BrowserDomAdapter, _super);
    function BrowserDomAdapter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} templateHtml
     * @return {?}
     */
    BrowserDomAdapter.prototype.parse = function (templateHtml) { throw new Error('parse not implemented'); };
    /**
     * @return {?}
     */
    BrowserDomAdapter.makeCurrent = function () { setRootDomAdapter(new BrowserDomAdapter()); };
    /**
     * @param {?} element
     * @param {?} name
     * @return {?}
     */
    BrowserDomAdapter.prototype.hasProperty = function (element, name) { return name in element; };
    /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    BrowserDomAdapter.prototype.setProperty = function (el, name, value) { ((el))[name] = value; };
    /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    BrowserDomAdapter.prototype.getProperty = function (el, name) { return ((el))[name]; };
    /**
     * @param {?} el
     * @param {?} methodName
     * @param {?} args
     * @return {?}
     */
    BrowserDomAdapter.prototype.invoke = function (el, methodName, args) { ((el))[methodName].apply(((el)), args); };
    /**
     * @param {?} error
     * @return {?}
     */
    BrowserDomAdapter.prototype.logError = function (error) {
        if (window.console) {
            if (console.error) {
                console.error(error);
            }
            else {
                console.log(error);
            }
        }
    };
    /**
     * @param {?} error
     * @return {?}
     */
    BrowserDomAdapter.prototype.log = function (error) {
        if (window.console) {
            window.console.log && window.console.log(error);
        }
    };
    /**
     * @param {?} error
     * @return {?}
     */
    BrowserDomAdapter.prototype.logGroup = function (error) {
        if (window.console) {
            window.console.group && window.console.group(error);
        }
    };
    /**
     * @return {?}
     */
    BrowserDomAdapter.prototype.logGroupEnd = function () {
        if (window.console) {
            window.console.groupEnd && window.console.groupEnd();
        }
    };
    Object.defineProperty(BrowserDomAdapter.prototype, "attrToPropMap", {
        /**
         * @return {?}
         */
        get: function () { return _attrToPropMap; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} nodeA
     * @param {?} nodeB
     * @return {?}
     */
    BrowserDomAdapter.prototype.contains = function (nodeA, nodeB) { return nodeContains.call(nodeA, nodeB); };
    /**
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */
    BrowserDomAdapter.prototype.querySelector = function (el, selector) { return el.querySelector(selector); };
    /**
     * @param {?} el
     * @param {?} selector
     * @return {?}
     */
    BrowserDomAdapter.prototype.querySelectorAll = function (el, selector) { return el.querySelectorAll(selector); };
    /**
     * @param {?} el
     * @param {?} evt
     * @param {?} listener
     * @return {?}
     */
    BrowserDomAdapter.prototype.on = function (el, evt, listener) { el.addEventListener(evt, listener, false); };
    /**
     * @param {?} el
     * @param {?} evt
     * @param {?} listener
     * @return {?}
     */
    BrowserDomAdapter.prototype.onAndCancel = function (el, evt, listener) {
        el.addEventListener(evt, listener, false);
        // Needed to follow Dart's subscription semantic, until fix of
        // https://code.google.com/p/dart/issues/detail?id=17406
        return function () { el.removeEventListener(evt, listener, false); };
    };
    /**
     * @param {?} el
     * @param {?} evt
     * @return {?}
     */
    BrowserDomAdapter.prototype.dispatchEvent = function (el, evt) { el.dispatchEvent(evt); };
    /**
     * @param {?} eventType
     * @return {?}
     */
    BrowserDomAdapter.prototype.createMouseEvent = function (eventType) {
        var /** @type {?} */ evt = document.createEvent('MouseEvent');
        evt.initEvent(eventType, true, true);
        return evt;
    };
    /**
     * @param {?} eventType
     * @return {?}
     */
    BrowserDomAdapter.prototype.createEvent = function (eventType) {
        var /** @type {?} */ evt = document.createEvent('Event');
        evt.initEvent(eventType, true, true);
        return evt;
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    BrowserDomAdapter.prototype.preventDefault = function (evt) {
        evt.preventDefault();
        evt.returnValue = false;
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    BrowserDomAdapter.prototype.isPrevented = function (evt) {
        return evt.defaultPrevented || evt.returnValue != null && !evt.returnValue;
    };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.getInnerHTML = function (el) { return el.innerHTML; };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.getTemplateContent = function (el) {
        return 'content' in el && el instanceof HTMLTemplateElement ? el.content : null;
    };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.getOuterHTML = function (el) { return el.outerHTML; };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.nodeName = function (node) { return node.nodeName; };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.nodeValue = function (node) { return node.nodeValue; };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.type = function (node) { return node.type; };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.content = function (node) {
        if (this.hasProperty(node, 'content')) {
            return ((node)).content;
        }
        else {
            return node;
        }
    };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.firstChild = function (el) { return el.firstChild; };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.nextSibling = function (el) { return el.nextSibling; };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.parentElement = function (el) { return el.parentNode; };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.childNodes = function (el) { return el.childNodes; };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.childNodesAsList = function (el) {
        var /** @type {?} */ childNodes = el.childNodes;
        var /** @type {?} */ res = new Array(childNodes.length);
        for (var /** @type {?} */ i = 0; i < childNodes.length; i++) {
            res[i] = childNodes[i];
        }
        return res;
    };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.clearNodes = function (el) {
        while (el.firstChild) {
            el.removeChild(el.firstChild);
        }
    };
    /**
     * @param {?} el
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.appendChild = function (el, node) { el.appendChild(node); };
    /**
     * @param {?} el
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.removeChild = function (el, node) { el.removeChild(node); };
    /**
     * @param {?} el
     * @param {?} newChild
     * @param {?} oldChild
     * @return {?}
     */
    BrowserDomAdapter.prototype.replaceChild = function (el, newChild, oldChild) { el.replaceChild(newChild, oldChild); };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.remove = function (node) {
        if (node.parentNode) {
            node.parentNode.removeChild(node);
        }
        return node;
    };
    /**
     * @param {?} parent
     * @param {?} ref
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.insertBefore = function (parent, ref, node) { parent.insertBefore(node, ref); };
    /**
     * @param {?} parent
     * @param {?} ref
     * @param {?} nodes
     * @return {?}
     */
    BrowserDomAdapter.prototype.insertAllBefore = function (parent, ref, nodes) {
        nodes.forEach(function (n) { return parent.insertBefore(n, ref); });
    };
    /**
     * @param {?} parent
     * @param {?} ref
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.insertAfter = function (parent, ref, node) { parent.insertBefore(node, ref.nextSibling); };
    /**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    BrowserDomAdapter.prototype.setInnerHTML = function (el, value) { el.innerHTML = value; };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.getText = function (el) { return el.textContent; };
    /**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    BrowserDomAdapter.prototype.setText = function (el, value) { el.textContent = value; };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.getValue = function (el) { return el.value; };
    /**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    BrowserDomAdapter.prototype.setValue = function (el, value) { el.value = value; };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.getChecked = function (el) { return el.checked; };
    /**
     * @param {?} el
     * @param {?} value
     * @return {?}
     */
    BrowserDomAdapter.prototype.setChecked = function (el, value) { el.checked = value; };
    /**
     * @param {?} text
     * @return {?}
     */
    BrowserDomAdapter.prototype.createComment = function (text) { return document.createComment(text); };
    /**
     * @param {?} html
     * @return {?}
     */
    BrowserDomAdapter.prototype.createTemplate = function (html) {
        var /** @type {?} */ t = document.createElement('template');
        t.innerHTML = html;
        return t;
    };
    /**
     * @param {?} tagName
     * @param {?=} doc
     * @return {?}
     */
    BrowserDomAdapter.prototype.createElement = function (tagName, doc) {
        if (doc === void 0) { doc = document; }
        return doc.createElement(tagName);
    };
    /**
     * @param {?} ns
     * @param {?} tagName
     * @param {?=} doc
     * @return {?}
     */
    BrowserDomAdapter.prototype.createElementNS = function (ns, tagName, doc) {
        if (doc === void 0) { doc = document; }
        return doc.createElementNS(ns, tagName);
    };
    /**
     * @param {?} text
     * @param {?=} doc
     * @return {?}
     */
    BrowserDomAdapter.prototype.createTextNode = function (text, doc) {
        if (doc === void 0) { doc = document; }
        return doc.createTextNode(text);
    };
    /**
     * @param {?} attrName
     * @param {?} attrValue
     * @param {?=} doc
     * @return {?}
     */
    BrowserDomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) {
        if (doc === void 0) { doc = document; }
        var /** @type {?} */ el = (doc.createElement('SCRIPT'));
        el.setAttribute(attrName, attrValue);
        return el;
    };
    /**
     * @param {?} css
     * @param {?=} doc
     * @return {?}
     */
    BrowserDomAdapter.prototype.createStyleElement = function (css, doc) {
        if (doc === void 0) { doc = document; }
        var /** @type {?} */ style = (doc.createElement('style'));
        this.appendChild(style, this.createTextNode(css));
        return style;
    };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.createShadowRoot = function (el) { return ((el)).createShadowRoot(); };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.getShadowRoot = function (el) { return ((el)).shadowRoot; };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.getHost = function (el) { return ((el)).host; };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.clone = function (node) { return node.cloneNode(true); };
    /**
     * @param {?} element
     * @param {?} name
     * @return {?}
     */
    BrowserDomAdapter.prototype.getElementsByClassName = function (element, name) {
        return element.getElementsByClassName(name);
    };
    /**
     * @param {?} element
     * @param {?} name
     * @return {?}
     */
    BrowserDomAdapter.prototype.getElementsByTagName = function (element, name) {
        return element.getElementsByTagName(name);
    };
    /**
     * @param {?} element
     * @return {?}
     */
    BrowserDomAdapter.prototype.classList = function (element) { return Array.prototype.slice.call(element.classList, 0); };
    /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    BrowserDomAdapter.prototype.addClass = function (element, className) { element.classList.add(className); };
    /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    BrowserDomAdapter.prototype.removeClass = function (element, className) { element.classList.remove(className); };
    /**
     * @param {?} element
     * @param {?} className
     * @return {?}
     */
    BrowserDomAdapter.prototype.hasClass = function (element, className) {
        return element.classList.contains(className);
    };
    /**
     * @param {?} element
     * @param {?} styleName
     * @param {?} styleValue
     * @return {?}
     */
    BrowserDomAdapter.prototype.setStyle = function (element, styleName, styleValue) {
        element.style[styleName] = styleValue;
    };
    /**
     * @param {?} element
     * @param {?} stylename
     * @return {?}
     */
    BrowserDomAdapter.prototype.removeStyle = function (element, stylename) {
        // IE requires '' instead of null
        // see https://github.com/angular/angular/issues/7916
        element.style[stylename] = '';
    };
    /**
     * @param {?} element
     * @param {?} stylename
     * @return {?}
     */
    BrowserDomAdapter.prototype.getStyle = function (element, stylename) { return element.style[stylename]; };
    /**
     * @param {?} element
     * @param {?} styleName
     * @param {?=} styleValue
     * @return {?}
     */
    BrowserDomAdapter.prototype.hasStyle = function (element, styleName, styleValue) {
        var /** @type {?} */ value = this.getStyle(element, styleName) || '';
        return styleValue ? value == styleValue : value.length > 0;
    };
    /**
     * @param {?} element
     * @return {?}
     */
    BrowserDomAdapter.prototype.tagName = function (element) { return element.tagName; };
    /**
     * @param {?} element
     * @return {?}
     */
    BrowserDomAdapter.prototype.attributeMap = function (element) {
        var /** @type {?} */ res = new Map();
        var /** @type {?} */ elAttrs = element.attributes;
        for (var /** @type {?} */ i = 0; i < elAttrs.length; i++) {
            var /** @type {?} */ attrib = elAttrs[i];
            res.set(attrib.name, attrib.value);
        }
        return res;
    };
    /**
     * @param {?} element
     * @param {?} attribute
     * @return {?}
     */
    BrowserDomAdapter.prototype.hasAttribute = function (element, attribute) {
        return element.hasAttribute(attribute);
    };
    /**
     * @param {?} element
     * @param {?} ns
     * @param {?} attribute
     * @return {?}
     */
    BrowserDomAdapter.prototype.hasAttributeNS = function (element, ns, attribute) {
        return element.hasAttributeNS(ns, attribute);
    };
    /**
     * @param {?} element
     * @param {?} attribute
     * @return {?}
     */
    BrowserDomAdapter.prototype.getAttribute = function (element, attribute) {
        return element.getAttribute(attribute);
    };
    /**
     * @param {?} element
     * @param {?} ns
     * @param {?} name
     * @return {?}
     */
    BrowserDomAdapter.prototype.getAttributeNS = function (element, ns, name) {
        return element.getAttributeNS(ns, name);
    };
    /**
     * @param {?} element
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    BrowserDomAdapter.prototype.setAttribute = function (element, name, value) { element.setAttribute(name, value); };
    /**
     * @param {?} element
     * @param {?} ns
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    BrowserDomAdapter.prototype.setAttributeNS = function (element, ns, name, value) {
        element.setAttributeNS(ns, name, value);
    };
    /**
     * @param {?} element
     * @param {?} attribute
     * @return {?}
     */
    BrowserDomAdapter.prototype.removeAttribute = function (element, attribute) { element.removeAttribute(attribute); };
    /**
     * @param {?} element
     * @param {?} ns
     * @param {?} name
     * @return {?}
     */
    BrowserDomAdapter.prototype.removeAttributeNS = function (element, ns, name) {
        element.removeAttributeNS(ns, name);
    };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.templateAwareRoot = function (el) { return this.isTemplateElement(el) ? this.content(el) : el; };
    /**
     * @return {?}
     */
    BrowserDomAdapter.prototype.createHtmlDocument = function () {
        return document.implementation.createHTMLDocument('fakeTitle');
    };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.getBoundingClientRect = function (el) {
        try {
            return el.getBoundingClientRect();
        }
        catch (e) {
            return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };
        }
    };
    /**
     * @param {?} doc
     * @return {?}
     */
    BrowserDomAdapter.prototype.getTitle = function (doc) { return document.title; };
    /**
     * @param {?} doc
     * @param {?} newTitle
     * @return {?}
     */
    BrowserDomAdapter.prototype.setTitle = function (doc, newTitle) { document.title = newTitle || ''; };
    /**
     * @param {?} n
     * @param {?} selector
     * @return {?}
     */
    BrowserDomAdapter.prototype.elementMatches = function (n, selector) {
        if (n instanceof HTMLElement) {
            return n.matches && n.matches(selector) ||
                n.msMatchesSelector && n.msMatchesSelector(selector) ||
                n.webkitMatchesSelector && n.webkitMatchesSelector(selector);
        }
        return false;
    };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.isTemplateElement = function (el) {
        return el instanceof HTMLElement && el.nodeName == 'TEMPLATE';
    };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.isTextNode = function (node) { return node.nodeType === Node.TEXT_NODE; };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.isCommentNode = function (node) { return node.nodeType === Node.COMMENT_NODE; };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.isElementNode = function (node) { return node.nodeType === Node.ELEMENT_NODE; };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.hasShadowRoot = function (node) {
        return node.shadowRoot != null && node instanceof HTMLElement;
    };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.isShadowRoot = function (node) { return node instanceof DocumentFragment; };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.importIntoDoc = function (node) { return document.importNode(this.templateAwareRoot(node), true); };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserDomAdapter.prototype.adoptNode = function (node) { return document.adoptNode(node); };
    /**
     * @param {?} el
     * @return {?}
     */
    BrowserDomAdapter.prototype.getHref = function (el) { return ((el)).href; };
    /**
     * @param {?} event
     * @return {?}
     */
    BrowserDomAdapter.prototype.getEventKey = function (event) {
        var /** @type {?} */ key = event.key;
        if (key == null) {
            key = event.keyIdentifier;
            // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and
            // Safari cf
            // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces
            if (key == null) {
                return 'Unidentified';
            }
            if (key.startsWith('U+')) {
                key = String.fromCharCode(parseInt(key.substring(2), 16));
                if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
                    // There is a bug in Chrome for numeric keypad keys:
                    // https://code.google.com/p/chromium/issues/detail?id=155654
                    // 1, 2, 3 ... are reported as A, B, C ...
                    key = ((_chromeNumKeyPadMap))[key];
                }
            }
        }
        return _keyMap[key] || key;
    };
    /**
     * @param {?} doc
     * @param {?} target
     * @return {?}
     */
    BrowserDomAdapter.prototype.getGlobalEventTarget = function (doc, target) {
        if (target === 'window') {
            return window;
        }
        if (target === 'document') {
            return document;
        }
        if (target === 'body') {
            return document.body;
        }
        return null;
    };
    /**
     * @return {?}
     */
    BrowserDomAdapter.prototype.getHistory = function () { return window.history; };
    /**
     * @return {?}
     */
    BrowserDomAdapter.prototype.getLocation = function () { return window.location; };
    /**
     * @param {?} doc
     * @return {?}
     */
    BrowserDomAdapter.prototype.getBaseHref = function (doc) {
        var /** @type {?} */ href = getBaseElementHref();
        return href == null ? null : relativePath(href);
    };
    /**
     * @return {?}
     */
    BrowserDomAdapter.prototype.resetBaseElement = function () { baseElement = null; };
    /**
     * @return {?}
     */
    BrowserDomAdapter.prototype.getUserAgent = function () { return window.navigator.userAgent; };
    /**
     * @param {?} element
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    BrowserDomAdapter.prototype.setData = function (element, name, value) {
        this.setAttribute(element, 'data-' + name, value);
    };
    /**
     * @param {?} element
     * @param {?} name
     * @return {?}
     */
    BrowserDomAdapter.prototype.getData = function (element, name) {
        return this.getAttribute(element, 'data-' + name);
    };
    /**
     * @param {?} element
     * @return {?}
     */
    BrowserDomAdapter.prototype.getComputedStyle = function (element) { return getComputedStyle(element); };
    /**
     * @return {?}
     */
    BrowserDomAdapter.prototype.supportsWebAnimation = function () {
        return typeof ((Element)).prototype['animate'] === 'function';
    };
    /**
     * @return {?}
     */
    BrowserDomAdapter.prototype.performanceNow = function () {
        // performance.now() is not available in all browsers, see
        // http://caniuse.com/#search=performance.now
        return window.performance && window.performance.now ? window.performance.now() :
            new Date().getTime();
    };
    /**
     * @return {?}
     */
    BrowserDomAdapter.prototype.supportsCookies = function () { return true; };
    /**
     * @param {?} name
     * @return {?}
     */
    BrowserDomAdapter.prototype.getCookie = function (name) { return parseCookieValue(document.cookie, name); };
    /**
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    BrowserDomAdapter.prototype.setCookie = function (name, value) {
        // document.cookie is magical, assigning into it assigns/overrides one cookie value, but does
        // not clear other cookies.
        document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);
    };
    return BrowserDomAdapter;
}(GenericBrowserDomAdapter));
var baseElement = null;
/**
 * @return {?}
 */
function getBaseElementHref() {
    if (!baseElement) {
        baseElement = ((document.querySelector('base')));
        if (!baseElement) {
            return null;
        }
    }
    return baseElement.getAttribute('href');
}
// based on urlUtils.js in AngularJS 1
var urlParsingNode;
/**
 * @param {?} url
 * @return {?}
 */
function relativePath(url) {
    if (!urlParsingNode) {
        urlParsingNode = document.createElement('a');
    }
    urlParsingNode.setAttribute('href', url);
    return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :
        '/' + urlParsingNode.pathname;
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A DI Token representing the main rendering context. In a browser this is the DOM Document.
 *
 * Note: Document might not be available in the Application Context when Application and Rendering
 * Contexts are not the same (e.g. when running the application into a Web Worker).
 *
 * @deprecated import from `\@angular/common` instead.
 */
var DOCUMENT$1 = DOCUMENT;
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 * @return {?}
 */
function supportsState() {
    return !!window.history.pushState;
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * `PlatformLocation` encapsulates all of the direct calls to platform APIs.
 * This class should not be used directly by an application developer. Instead, use
 * {\@link Location}.
 */
var BrowserPlatformLocation = (function (_super) {
    __extends(BrowserPlatformLocation, _super);
    /**
     * @param {?} _doc
     */
    function BrowserPlatformLocation(_doc) {
        var _this = _super.call(this) || this;
        _this._doc = _doc;
        _this._init();
        return _this;
    }
    /**
     * \@internal
     * @return {?}
     */
    BrowserPlatformLocation.prototype._init = function () {
        this._location = getDOM().getLocation();
        this._history = getDOM().getHistory();
    };
    Object.defineProperty(BrowserPlatformLocation.prototype, "location", {
        /**
         * @return {?}
         */
        get: function () { return this._location; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function () { return ((getDOM().getBaseHref(this._doc))); };
    /**
     * @param {?} fn
     * @return {?}
     */
    BrowserPlatformLocation.prototype.onPopState = function (fn) {
        getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('popstate', fn, false);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    BrowserPlatformLocation.prototype.onHashChange = function (fn) {
        getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('hashchange', fn, false);
    };
    Object.defineProperty(BrowserPlatformLocation.prototype, "pathname", {
        /**
         * @return {?}
         */
        get: function () { return this._location.pathname; },
        /**
         * @param {?} newPath
         * @return {?}
         */
        set: function (newPath) { this._location.pathname = newPath; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BrowserPlatformLocation.prototype, "search", {
        /**
         * @return {?}
         */
        get: function () { return this._location.search; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BrowserPlatformLocation.prototype, "hash", {
        /**
         * @return {?}
         */
        get: function () { return this._location.hash; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @return {?}
     */
    BrowserPlatformLocation.prototype.pushState = function (state, title, url) {
        if (supportsState()) {
            this._history.pushState(state, title, url);
        }
        else {
            this._location.hash = url;
        }
    };
    /**
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @return {?}
     */
    BrowserPlatformLocation.prototype.replaceState = function (state, title, url) {
        if (supportsState()) {
            this._history.replaceState(state, title, url);
        }
        else {
            this._location.hash = url;
        }
    };
    /**
     * @return {?}
     */
    BrowserPlatformLocation.prototype.forward = function () { this._history.forward(); };
    /**
     * @return {?}
     */
    BrowserPlatformLocation.prototype.back = function () { this._history.back(); };
    return BrowserPlatformLocation;
}(PlatformLocation));
BrowserPlatformLocation.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
BrowserPlatformLocation.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] },] },
]; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A service that can be used to get and add meta tags.
 *
 * \@experimental
 */
var Meta = (function () {
    /**
     * @param {?} _doc
     */
    function Meta(_doc) {
        this._doc = _doc;
        this._dom = getDOM();
    }
    /**
     * @param {?} tag
     * @param {?=} forceCreation
     * @return {?}
     */
    Meta.prototype.addTag = function (tag, forceCreation) {
        if (forceCreation === void 0) { forceCreation = false; }
        if (!tag)
            return null;
        return this._getOrCreateElement(tag, forceCreation);
    };
    /**
     * @param {?} tags
     * @param {?=} forceCreation
     * @return {?}
     */
    Meta.prototype.addTags = function (tags, forceCreation) {
        var _this = this;
        if (forceCreation === void 0) { forceCreation = false; }
        if (!tags)
            return [];
        return tags.reduce(function (result, tag) {
            if (tag) {
                result.push(_this._getOrCreateElement(tag, forceCreation));
            }
            return result;
        }, []);
    };
    /**
     * @param {?} attrSelector
     * @return {?}
     */
    Meta.prototype.getTag = function (attrSelector) {
        if (!attrSelector)
            return null;
        return this._dom.querySelector(this._doc, "meta[" + attrSelector + "]");
    };
    /**
     * @param {?} attrSelector
     * @return {?}
     */
    Meta.prototype.getTags = function (attrSelector) {
        if (!attrSelector)
            return [];
        var /** @type {?} */ list /*NodeList*/ = this._dom.querySelectorAll(this._doc, "meta[" + attrSelector + "]");
        return list ? [].slice.call(list) : [];
    };
    /**
     * @param {?} tag
     * @param {?=} selector
     * @return {?}
     */
    Meta.prototype.updateTag = function (tag, selector) {
        if (!tag)
            return null;
        selector = selector || this._parseSelector(tag);
        var /** @type {?} */ meta = ((this.getTag(selector)));
        if (meta) {
            return this._setMetaElementAttributes(tag, meta);
        }
        return this._getOrCreateElement(tag, true);
    };
    /**
     * @param {?} attrSelector
     * @return {?}
     */
    Meta.prototype.removeTag = function (attrSelector) { this.removeTagElement(/** @type {?} */ ((this.getTag(attrSelector)))); };
    /**
     * @param {?} meta
     * @return {?}
     */
    Meta.prototype.removeTagElement = function (meta) {
        if (meta) {
            this._dom.remove(meta);
        }
    };
    /**
     * @param {?} meta
     * @param {?=} forceCreation
     * @return {?}
     */
    Meta.prototype._getOrCreateElement = function (meta, forceCreation) {
        if (forceCreation === void 0) { forceCreation = false; }
        if (!forceCreation) {
            var /** @type {?} */ selector = this._parseSelector(meta);
            var /** @type {?} */ elem = ((this.getTag(selector)));
            // It's allowed to have multiple elements with the same name so it's not enough to
            // just check that element with the same name already present on the page. We also need to
            // check if element has tag attributes
            if (elem && this._containsAttributes(meta, elem))
                return elem;
        }
        var /** @type {?} */ element = (this._dom.createElement('meta'));
        this._setMetaElementAttributes(meta, element);
        var /** @type {?} */ head = this._dom.getElementsByTagName(this._doc, 'head')[0];
        this._dom.appendChild(head, element);
        return element;
    };
    /**
     * @param {?} tag
     * @param {?} el
     * @return {?}
     */
    Meta.prototype._setMetaElementAttributes = function (tag, el) {
        var _this = this;
        Object.keys(tag).forEach(function (prop) { return _this._dom.setAttribute(el, prop, tag[prop]); });
        return el;
    };
    /**
     * @param {?} tag
     * @return {?}
     */
    Meta.prototype._parseSelector = function (tag) {
        var /** @type {?} */ attr = tag.name ? 'name' : 'property';
        return attr + "=\"" + tag[attr] + "\"";
    };
    /**
     * @param {?} tag
     * @param {?} elem
     * @return {?}
     */
    Meta.prototype._containsAttributes = function (tag, elem) {
        var _this = this;
        return Object.keys(tag).every(function (key) { return _this._dom.getAttribute(elem, key) === tag[key]; });
    };
    return Meta;
}());
Meta.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
Meta.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] },] },
]; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * An id that identifies a particular application being bootstrapped, that should
 * match across the client/server boundary.
 */
var TRANSITION_ID = new InjectionToken('TRANSITION_ID');
/**
 * @param {?} transitionId
 * @param {?} document
 * @param {?} injector
 * @return {?}
 */
function appInitializerFactory(transitionId, document, injector) {
    return function () {
        // Wait for all application initializers to be completed before removing the styles set by
        // the server.
        injector.get(ApplicationInitStatus).donePromise.then(function () {
            var /** @type {?} */ dom = getDOM();
            var /** @type {?} */ styles = Array.prototype.slice.apply(dom.querySelectorAll(document, "style[ng-transition]"));
            styles.filter(function (el) { return dom.getAttribute(el, 'ng-transition') === transitionId; })
                .forEach(function (el) { return dom.remove(el); });
        });
    };
}
var SERVER_TRANSITION_PROVIDERS = [
    {
        provide: APP_INITIALIZER,
        useFactory: appInitializerFactory,
        deps: [TRANSITION_ID, DOCUMENT$1, Injector],
        multi: true
    },
];
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var BrowserGetTestability = (function () {
    function BrowserGetTestability() {
    }
    /**
     * @return {?}
     */
    BrowserGetTestability.init = function () { setTestabilityGetter(new BrowserGetTestability()); };
    /**
     * @param {?} registry
     * @return {?}
     */
    BrowserGetTestability.prototype.addToWindow = function (registry) {
        _global['getAngularTestability'] = function (elem, findInAncestors) {
            if (findInAncestors === void 0) { findInAncestors = true; }
            var /** @type {?} */ testability = registry.findTestabilityInTree(elem, findInAncestors);
            if (testability == null) {
                throw new Error('Could not find testability for element.');
            }
            return testability;
        };
        _global['getAllAngularTestabilities'] = function () { return registry.getAllTestabilities(); };
        _global['getAllAngularRootElements'] = function () { return registry.getAllRootElements(); };
        var /** @type {?} */ whenAllStable = function (callback /** TODO #9100 */) {
            var /** @type {?} */ testabilities = _global['getAllAngularTestabilities']();
            var /** @type {?} */ count = testabilities.length;
            var /** @type {?} */ didWork = false;
            var /** @type {?} */ decrement = function (didWork_ /** TODO #9100 */) {
                didWork = didWork || didWork_;
                count--;
                if (count == 0) {
                    callback(didWork);
                }
            };
            testabilities.forEach(function (testability /** TODO #9100 */) {
                testability.whenStable(decrement);
            });
        };
        if (!_global['frameworkStabilizers']) {
            _global['frameworkStabilizers'] = [];
        }
        _global['frameworkStabilizers'].push(whenAllStable);
    };
    /**
     * @param {?} registry
     * @param {?} elem
     * @param {?} findInAncestors
     * @return {?}
     */
    BrowserGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
        if (elem == null) {
            return null;
        }
        var /** @type {?} */ t = registry.getTestability(elem);
        if (t != null) {
            return t;
        }
        else if (!findInAncestors) {
            return null;
        }
        if (getDOM().isShadowRoot(elem)) {
            return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);
        }
        return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);
    };
    return BrowserGetTestability;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A service that can be used to get and set the title of a current HTML document.
 *
 * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)
 * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements
 * (representing the `<title>` tag). Instead, this service can be used to set and get the current
 * title value.
 *
 * \@experimental
 */
var Title = (function () {
    /**
     * @param {?} _doc
     */
    function Title(_doc) {
        this._doc = _doc;
    }
    /**
     * Get the title of the current HTML document.
     * @return {?}
     */
    Title.prototype.getTitle = function () { return getDOM().getTitle(this._doc); };
    /**
     * Set the title of the current HTML document.
     * @param {?} newTitle
     * @return {?}
     */
    Title.prototype.setTitle = function (newTitle) { getDOM().setTitle(this._doc, newTitle); };
    return Title;
}());
Title.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
Title.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] },] },
]; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} input
 * @return {?}
 */
/**
 * @param {?} input
 * @return {?}
 */
/**
 * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if
 * `name` is `'probe'`.
 * @param {?} name Name under which it will be exported. Keep in mind this will be a property of the
 * global `ng` object.
 * @param {?} value The value to export.
 * @return {?}
 */
function exportNgVar(name, value) {
    if (!ng) {
        _global['ng'] = ng = ((_global['ng'])) || {};
    }
    ng[name] = value;
}
var ng;
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var CORE_TOKENS = {
    'ApplicationRef': ApplicationRef,
    'NgZone': NgZone,
};
var INSPECT_GLOBAL_NAME = 'probe';
var CORE_TOKENS_GLOBAL_NAME = 'coreTokens';
/**
 * Returns a {\@link DebugElement} for the given native DOM element, or
 * null if the given native element does not have an Angular view associated
 * with it.
 * @param {?} element
 * @return {?}
 */
function inspectNativeElement(element) {
    return getDebugNode(element);
}
/**
 * Deprecated. Use the one from '\@angular/core'.
 * @deprecated
 */
var NgProbeToken$1 = (function () {
    /**
     * @param {?} name
     * @param {?} token
     */
    function NgProbeToken$1(name, token) {
        this.name = name;
        this.token = token;
    }
    return NgProbeToken$1;
}());
/**
 * @param {?} extraTokens
 * @param {?} coreTokens
 * @return {?}
 */
function _createNgProbe(extraTokens, coreTokens) {
    var /** @type {?} */ tokens = (extraTokens || []).concat(coreTokens || []);
    exportNgVar(INSPECT_GLOBAL_NAME, inspectNativeElement);
    exportNgVar(CORE_TOKENS_GLOBAL_NAME, Object.assign({}, CORE_TOKENS, _ngProbeTokensToMap(tokens || [])));
    return function () { return inspectNativeElement; };
}
/**
 * @param {?} tokens
 * @return {?}
 */
function _ngProbeTokensToMap(tokens) {
    return tokens.reduce(function (prev, t) { return (prev[t.name] = t.token, prev); }, {});
}
/**
 * Providers which support debugging Angular applications (e.g. via `ng.probe`).
 */
var ELEMENT_PROBE_PROVIDERS = [
    {
        provide: APP_INITIALIZER,
        useFactory: _createNgProbe,
        deps: [
            [NgProbeToken$1, new Optional()],
            [NgProbeToken, new Optional()],
        ],
        multi: true,
    },
];
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@stable
 */
var EVENT_MANAGER_PLUGINS = new InjectionToken('EventManagerPlugins');
/**
 * \@stable
 */
var EventManager = (function () {
    /**
     * @param {?} plugins
     * @param {?} _zone
     */
    function EventManager(plugins, _zone) {
        var _this = this;
        this._zone = _zone;
        this._eventNameToPlugin = new Map();
        plugins.forEach(function (p) { return p.manager = _this; });
        this._plugins = plugins.slice().reverse();
    }
    /**
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */
    EventManager.prototype.addEventListener = function (element, eventName, handler) {
        var /** @type {?} */ plugin = this._findPluginFor(eventName);
        return plugin.addEventListener(element, eventName, handler);
    };
    /**
     * @param {?} target
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */
    EventManager.prototype.addGlobalEventListener = function (target, eventName, handler) {
        var /** @type {?} */ plugin = this._findPluginFor(eventName);
        return plugin.addGlobalEventListener(target, eventName, handler);
    };
    /**
     * @return {?}
     */
    EventManager.prototype.getZone = function () { return this._zone; };
    /**
     * \@internal
     * @param {?} eventName
     * @return {?}
     */
    EventManager.prototype._findPluginFor = function (eventName) {
        var /** @type {?} */ plugin = this._eventNameToPlugin.get(eventName);
        if (plugin) {
            return plugin;
        }
        var /** @type {?} */ plugins = this._plugins;
        for (var /** @type {?} */ i = 0; i < plugins.length; i++) {
            var /** @type {?} */ plugin_1 = plugins[i];
            if (plugin_1.supports(eventName)) {
                this._eventNameToPlugin.set(eventName, plugin_1);
                return plugin_1;
            }
        }
        throw new Error("No event manager plugin found for event " + eventName);
    };
    return EventManager;
}());
EventManager.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
EventManager.ctorParameters = function () { return [
    { type: Array, decorators: [{ type: Inject, args: [EVENT_MANAGER_PLUGINS,] },] },
    { type: NgZone, },
]; };
/**
 * @abstract
 */
var EventManagerPlugin = (function () {
    /**
     * @param {?} _doc
     */
    function EventManagerPlugin(_doc) {
        this._doc = _doc;
    }
    /**
     * @abstract
     * @param {?} eventName
     * @return {?}
     */
    EventManagerPlugin.prototype.supports = function (eventName) { };
    /**
     * @abstract
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */
    EventManagerPlugin.prototype.addEventListener = function (element, eventName, handler) { };
    /**
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */
    EventManagerPlugin.prototype.addGlobalEventListener = function (element, eventName, handler) {
        var /** @type {?} */ target = getDOM().getGlobalEventTarget(this._doc, element);
        if (!target) {
            throw new Error("Unsupported event target " + target + " for event " + eventName);
        }
        return this.addEventListener(target, eventName, handler);
    };
    
    return EventManagerPlugin;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var SharedStylesHost = (function () {
    function SharedStylesHost() {
        /**
         * \@internal
         */
        this._stylesSet = new Set();
    }
    /**
     * @param {?} styles
     * @return {?}
     */
    SharedStylesHost.prototype.addStyles = function (styles) {
        var _this = this;
        var /** @type {?} */ additions = new Set();
        styles.forEach(function (style) {
            if (!_this._stylesSet.has(style)) {
                _this._stylesSet.add(style);
                additions.add(style);
            }
        });
        this.onStylesAdded(additions);
    };
    /**
     * @param {?} additions
     * @return {?}
     */
    SharedStylesHost.prototype.onStylesAdded = function (additions) { };
    /**
     * @return {?}
     */
    SharedStylesHost.prototype.getAllStyles = function () { return Array.from(this._stylesSet); };
    return SharedStylesHost;
}());
SharedStylesHost.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
SharedStylesHost.ctorParameters = function () { return []; };
var DomSharedStylesHost = (function (_super) {
    __extends(DomSharedStylesHost, _super);
    /**
     * @param {?} _doc
     */
    function DomSharedStylesHost(_doc) {
        var _this = _super.call(this) || this;
        _this._doc = _doc;
        _this._hostNodes = new Set();
        _this._styleNodes = new Set();
        _this._hostNodes.add(_doc.head);
        return _this;
    }
    /**
     * @param {?} styles
     * @param {?} host
     * @return {?}
     */
    DomSharedStylesHost.prototype._addStylesToHost = function (styles, host) {
        var _this = this;
        styles.forEach(function (style) {
            var /** @type {?} */ styleEl = _this._doc.createElement('style');
            styleEl.textContent = style;
            _this._styleNodes.add(host.appendChild(styleEl));
        });
    };
    /**
     * @param {?} hostNode
     * @return {?}
     */
    DomSharedStylesHost.prototype.addHost = function (hostNode) {
        this._addStylesToHost(this._stylesSet, hostNode);
        this._hostNodes.add(hostNode);
    };
    /**
     * @param {?} hostNode
     * @return {?}
     */
    DomSharedStylesHost.prototype.removeHost = function (hostNode) { this._hostNodes.delete(hostNode); };
    /**
     * @param {?} additions
     * @return {?}
     */
    DomSharedStylesHost.prototype.onStylesAdded = function (additions) {
        var _this = this;
        this._hostNodes.forEach(function (hostNode) { return _this._addStylesToHost(additions, hostNode); });
    };
    /**
     * @return {?}
     */
    DomSharedStylesHost.prototype.ngOnDestroy = function () { this._styleNodes.forEach(function (styleNode) { return getDOM().remove(styleNode); }); };
    return DomSharedStylesHost;
}(SharedStylesHost));
DomSharedStylesHost.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
DomSharedStylesHost.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] },] },
]; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var NAMESPACE_URIS = {
    'svg': 'http://www.w3.org/2000/svg',
    'xhtml': 'http://www.w3.org/1999/xhtml',
    'xlink': 'http://www.w3.org/1999/xlink',
    'xml': 'http://www.w3.org/XML/1998/namespace',
    'xmlns': 'http://www.w3.org/2000/xmlns/',
};
var COMPONENT_REGEX = /%COMP%/g;
var COMPONENT_VARIABLE = '%COMP%';
var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
/**
 * @param {?} componentShortId
 * @return {?}
 */
function shimContentAttribute(componentShortId) {
    return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);
}
/**
 * @param {?} componentShortId
 * @return {?}
 */
function shimHostAttribute(componentShortId) {
    return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);
}
/**
 * @param {?} compId
 * @param {?} styles
 * @param {?} target
 * @return {?}
 */
function flattenStyles(compId, styles, target) {
    for (var /** @type {?} */ i = 0; i < styles.length; i++) {
        var /** @type {?} */ style = styles[i];
        if (Array.isArray(style)) {
            flattenStyles(compId, style, target);
        }
        else {
            style = style.replace(COMPONENT_REGEX, compId);
            target.push(style);
        }
    }
    return target;
}
/**
 * @param {?} eventHandler
 * @return {?}
 */
function decoratePreventDefault(eventHandler) {
    return function (event) {
        var /** @type {?} */ allowDefaultBehavior = eventHandler(event);
        if (allowDefaultBehavior === false) {
            // TODO(tbosch): move preventDefault into event plugins...
            event.preventDefault();
            event.returnValue = false;
        }
    };
}
var DomRendererFactory2 = (function () {
    /**
     * @param {?} eventManager
     * @param {?} sharedStylesHost
     */
    function DomRendererFactory2(eventManager, sharedStylesHost) {
        this.eventManager = eventManager;
        this.sharedStylesHost = sharedStylesHost;
        this.rendererByCompId = new Map();
        this.defaultRenderer = new DefaultDomRenderer2(eventManager);
    }
    
    /**
     * @param {?} element
     * @param {?} type
     * @return {?}
     */
    DomRendererFactory2.prototype.createRenderer = function (element, type) {
        if (!element || !type) {
            return this.defaultRenderer;
        }
        switch (type.encapsulation) {
            case ViewEncapsulation.Emulated: {
                var /** @type {?} */ renderer = this.rendererByCompId.get(type.id);
                if (!renderer) {
                    renderer =
                        new EmulatedEncapsulationDomRenderer2(this.eventManager, this.sharedStylesHost, type);
                    this.rendererByCompId.set(type.id, renderer);
                }
                ((renderer)).applyToHost(element);
                return renderer;
            }
            case ViewEncapsulation.Native:
                return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);
            default: {
                if (!this.rendererByCompId.has(type.id)) {
                    var /** @type {?} */ styles = flattenStyles(type.id, type.styles, []);
                    this.sharedStylesHost.addStyles(styles);
                    this.rendererByCompId.set(type.id, this.defaultRenderer);
                }
                return this.defaultRenderer;
            }
        }
    };
    /**
     * @return {?}
     */
    DomRendererFactory2.prototype.begin = function () { };
    /**
     * @return {?}
     */
    DomRendererFactory2.prototype.end = function () { };
    return DomRendererFactory2;
}());
DomRendererFactory2.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
DomRendererFactory2.ctorParameters = function () { return [
    { type: EventManager, },
    { type: DomSharedStylesHost, },
]; };
var DefaultDomRenderer2 = (function () {
    /**
     * @param {?} eventManager
     */
    function DefaultDomRenderer2(eventManager) {
        this.eventManager = eventManager;
        this.data = Object.create(null);
    }
    /**
     * @return {?}
     */
    DefaultDomRenderer2.prototype.destroy = function () { };
    /**
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    DefaultDomRenderer2.prototype.createElement = function (name, namespace) {
        if (namespace) {
            return document.createElementNS(NAMESPACE_URIS[namespace], name);
        }
        return document.createElement(name);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DefaultDomRenderer2.prototype.createComment = function (value) { return document.createComment(value); };
    /**
     * @param {?} value
     * @return {?}
     */
    DefaultDomRenderer2.prototype.createText = function (value) { return document.createTextNode(value); };
    /**
     * @param {?} parent
     * @param {?} newChild
     * @return {?}
     */
    DefaultDomRenderer2.prototype.appendChild = function (parent, newChild) { parent.appendChild(newChild); };
    /**
     * @param {?} parent
     * @param {?} newChild
     * @param {?} refChild
     * @return {?}
     */
    DefaultDomRenderer2.prototype.insertBefore = function (parent, newChild, refChild) {
        if (parent) {
            parent.insertBefore(newChild, refChild);
        }
    };
    /**
     * @param {?} parent
     * @param {?} oldChild
     * @return {?}
     */
    DefaultDomRenderer2.prototype.removeChild = function (parent, oldChild) {
        if (parent) {
            parent.removeChild(oldChild);
        }
    };
    /**
     * @param {?} selectorOrNode
     * @return {?}
     */
    DefaultDomRenderer2.prototype.selectRootElement = function (selectorOrNode) {
        var /** @type {?} */ el = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) :
            selectorOrNode;
        if (!el) {
            throw new Error("The selector \"" + selectorOrNode + "\" did not match any elements");
        }
        el.textContent = '';
        return el;
    };
    /**
     * @param {?} node
     * @return {?}
     */
    DefaultDomRenderer2.prototype.parentNode = function (node) { return node.parentNode; };
    /**
     * @param {?} node
     * @return {?}
     */
    DefaultDomRenderer2.prototype.nextSibling = function (node) { return node.nextSibling; };
    /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @param {?=} namespace
     * @return {?}
     */
    DefaultDomRenderer2.prototype.setAttribute = function (el, name, value, namespace) {
        if (namespace) {
            name = namespace + ":" + name;
            var /** @type {?} */ namespaceUri = NAMESPACE_URIS[namespace];
            if (namespaceUri) {
                el.setAttributeNS(namespaceUri, name, value);
            }
            else {
                el.setAttribute(name, value);
            }
        }
        else {
            el.setAttribute(name, value);
        }
    };
    /**
     * @param {?} el
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    DefaultDomRenderer2.prototype.removeAttribute = function (el, name, namespace) {
        if (namespace) {
            var /** @type {?} */ namespaceUri = NAMESPACE_URIS[namespace];
            if (namespaceUri) {
                el.removeAttributeNS(namespaceUri, name);
            }
            else {
                el.removeAttribute(namespace + ":" + name);
            }
        }
        else {
            el.removeAttribute(name);
        }
    };
    /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    DefaultDomRenderer2.prototype.addClass = function (el, name) { el.classList.add(name); };
    /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    DefaultDomRenderer2.prototype.removeClass = function (el, name) { el.classList.remove(name); };
    /**
     * @param {?} el
     * @param {?} style
     * @param {?} value
     * @param {?} flags
     * @return {?}
     */
    DefaultDomRenderer2.prototype.setStyle = function (el, style, value, flags) {
        if (flags & RendererStyleFlags2.DashCase) {
            el.style.setProperty(style, value, !!(flags & RendererStyleFlags2.Important) ? 'important' : '');
        }
        else {
            el.style[style] = value;
        }
    };
    /**
     * @param {?} el
     * @param {?} style
     * @param {?} flags
     * @return {?}
     */
    DefaultDomRenderer2.prototype.removeStyle = function (el, style, flags) {
        if (flags & RendererStyleFlags2.DashCase) {
            el.style.removeProperty(style);
        }
        else {
            // IE requires '' instead of null
            // see https://github.com/angular/angular/issues/7916
            el.style[style] = '';
        }
    };
    /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    DefaultDomRenderer2.prototype.setProperty = function (el, name, value) {
        checkNoSyntheticProp(name, 'property');
        el[name] = value;
    };
    /**
     * @param {?} node
     * @param {?} value
     * @return {?}
     */
    DefaultDomRenderer2.prototype.setValue = function (node, value) { node.nodeValue = value; };
    /**
     * @param {?} target
     * @param {?} event
     * @param {?} callback
     * @return {?}
     */
    DefaultDomRenderer2.prototype.listen = function (target, event, callback) {
        checkNoSyntheticProp(event, 'listener');
        if (typeof target === 'string') {
            return (this.eventManager.addGlobalEventListener(target, event, decoratePreventDefault(callback)));
        }
        return ((this.eventManager.addEventListener(target, event, decoratePreventDefault(callback))));
    };
    return DefaultDomRenderer2;
}());
var AT_CHARCODE = '@'.charCodeAt(0);
/**
 * @param {?} name
 * @param {?} nameKind
 * @return {?}
 */
function checkNoSyntheticProp(name, nameKind) {
    if (name.charCodeAt(0) === AT_CHARCODE) {
        throw new Error("Found the synthetic " + nameKind + " " + name + ". Please include either \"BrowserAnimationsModule\" or \"NoopAnimationsModule\" in your application.");
    }
}
var EmulatedEncapsulationDomRenderer2 = (function (_super) {
    __extends(EmulatedEncapsulationDomRenderer2, _super);
    /**
     * @param {?} eventManager
     * @param {?} sharedStylesHost
     * @param {?} component
     */
    function EmulatedEncapsulationDomRenderer2(eventManager, sharedStylesHost, component) {
        var _this = _super.call(this, eventManager) || this;
        _this.component = component;
        var styles = flattenStyles(component.id, component.styles, []);
        sharedStylesHost.addStyles(styles);
        _this.contentAttr = shimContentAttribute(component.id);
        _this.hostAttr = shimHostAttribute(component.id);
        return _this;
    }
    /**
     * @param {?} element
     * @return {?}
     */
    EmulatedEncapsulationDomRenderer2.prototype.applyToHost = function (element) { _super.prototype.setAttribute.call(this, element, this.hostAttr, ''); };
    /**
     * @param {?} parent
     * @param {?} name
     * @return {?}
     */
    EmulatedEncapsulationDomRenderer2.prototype.createElement = function (parent, name) {
        var /** @type {?} */ el = _super.prototype.createElement.call(this, parent, name);
        _super.prototype.setAttribute.call(this, el, this.contentAttr, '');
        return el;
    };
    return EmulatedEncapsulationDomRenderer2;
}(DefaultDomRenderer2));
var ShadowDomRenderer = (function (_super) {
    __extends(ShadowDomRenderer, _super);
    /**
     * @param {?} eventManager
     * @param {?} sharedStylesHost
     * @param {?} hostEl
     * @param {?} component
     */
    function ShadowDomRenderer(eventManager, sharedStylesHost, hostEl, component) {
        var _this = _super.call(this, eventManager) || this;
        _this.sharedStylesHost = sharedStylesHost;
        _this.hostEl = hostEl;
        _this.component = component;
        _this.shadowRoot = hostEl.createShadowRoot();
        _this.sharedStylesHost.addHost(_this.shadowRoot);
        var styles = flattenStyles(component.id, component.styles, []);
        for (var i = 0; i < styles.length; i++) {
            var styleEl = document.createElement('style');
            styleEl.textContent = styles[i];
            _this.shadowRoot.appendChild(styleEl);
        }
        return _this;
    }
    /**
     * @param {?} node
     * @return {?}
     */
    ShadowDomRenderer.prototype.nodeOrShadowRoot = function (node) { return node === this.hostEl ? this.shadowRoot : node; };
    /**
     * @return {?}
     */
    ShadowDomRenderer.prototype.destroy = function () { this.sharedStylesHost.removeHost(this.shadowRoot); };
    /**
     * @param {?} parent
     * @param {?} newChild
     * @return {?}
     */
    ShadowDomRenderer.prototype.appendChild = function (parent, newChild) {
        return _super.prototype.appendChild.call(this, this.nodeOrShadowRoot(parent), newChild);
    };
    /**
     * @param {?} parent
     * @param {?} newChild
     * @param {?} refChild
     * @return {?}
     */
    ShadowDomRenderer.prototype.insertBefore = function (parent, newChild, refChild) {
        return _super.prototype.insertBefore.call(this, this.nodeOrShadowRoot(parent), newChild, refChild);
    };
    /**
     * @param {?} parent
     * @param {?} oldChild
     * @return {?}
     */
    ShadowDomRenderer.prototype.removeChild = function (parent, oldChild) {
        return _super.prototype.removeChild.call(this, this.nodeOrShadowRoot(parent), oldChild);
    };
    /**
     * @param {?} node
     * @return {?}
     */
    ShadowDomRenderer.prototype.parentNode = function (node) {
        return this.nodeOrShadowRoot(_super.prototype.parentNode.call(this, this.nodeOrShadowRoot(node)));
    };
    return ShadowDomRenderer;
}(DefaultDomRenderer2));
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var DomEventsPlugin = (function (_super) {
    __extends(DomEventsPlugin, _super);
    /**
     * @param {?} doc
     */
    function DomEventsPlugin(doc) {
        return _super.call(this, doc) || this;
    }
    /**
     * @param {?} eventName
     * @return {?}
     */
    DomEventsPlugin.prototype.supports = function (eventName) { return true; };
    /**
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */
    DomEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
        element.addEventListener(eventName, /** @type {?} */ (handler), false);
        return function () { return element.removeEventListener(eventName, /** @type {?} */ (handler), false); };
    };
    return DomEventsPlugin;
}(EventManagerPlugin));
DomEventsPlugin.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
DomEventsPlugin.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] },] },
]; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var EVENT_NAMES = {
    // pan
    'pan': true,
    'panstart': true,
    'panmove': true,
    'panend': true,
    'pancancel': true,
    'panleft': true,
    'panright': true,
    'panup': true,
    'pandown': true,
    // pinch
    'pinch': true,
    'pinchstart': true,
    'pinchmove': true,
    'pinchend': true,
    'pinchcancel': true,
    'pinchin': true,
    'pinchout': true,
    // press
    'press': true,
    'pressup': true,
    // rotate
    'rotate': true,
    'rotatestart': true,
    'rotatemove': true,
    'rotateend': true,
    'rotatecancel': true,
    // swipe
    'swipe': true,
    'swipeleft': true,
    'swiperight': true,
    'swipeup': true,
    'swipedown': true,
    // tap
    'tap': true,
};
/**
 * A DI token that you can use to provide{\@link HammerGestureConfig} to Angular. Use it to configure
 * Hammer gestures.
 *
 * \@experimental
 */
var HAMMER_GESTURE_CONFIG = new InjectionToken('HammerGestureConfig');
/**
 * \@experimental
 */
var HammerGestureConfig = (function () {
    function HammerGestureConfig() {
        this.events = [];
        this.overrides = {};
    }
    /**
     * @param {?} element
     * @return {?}
     */
    HammerGestureConfig.prototype.buildHammer = function (element) {
        var /** @type {?} */ mc = new Hammer(element);
        mc.get('pinch').set({ enable: true });
        mc.get('rotate').set({ enable: true });
        for (var /** @type {?} */ eventName in this.overrides) {
            mc.get(eventName).set(this.overrides[eventName]);
        }
        return mc;
    };
    return HammerGestureConfig;
}());
HammerGestureConfig.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
HammerGestureConfig.ctorParameters = function () { return []; };
var HammerGesturesPlugin = (function (_super) {
    __extends(HammerGesturesPlugin, _super);
    /**
     * @param {?} doc
     * @param {?} _config
     */
    function HammerGesturesPlugin(doc, _config) {
        var _this = _super.call(this, doc) || this;
        _this._config = _config;
        return _this;
    }
    /**
     * @param {?} eventName
     * @return {?}
     */
    HammerGesturesPlugin.prototype.supports = function (eventName) {
        if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {
            return false;
        }
        if (!((window)).Hammer) {
            throw new Error("Hammer.js is not loaded, can not bind " + eventName + " event");
        }
        return true;
    };
    /**
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */
    HammerGesturesPlugin.prototype.addEventListener = function (element, eventName, handler) {
        var _this = this;
        var /** @type {?} */ zone = this.manager.getZone();
        eventName = eventName.toLowerCase();
        return zone.runOutsideAngular(function () {
            // Creating the manager bind events, must be done outside of angular
            var /** @type {?} */ mc = _this._config.buildHammer(element);
            var /** @type {?} */ callback = function (eventObj) {
                zone.runGuarded(function () { handler(eventObj); });
            };
            mc.on(eventName, callback);
            return function () { return mc.off(eventName, callback); };
        });
    };
    /**
     * @param {?} eventName
     * @return {?}
     */
    HammerGesturesPlugin.prototype.isCustomEvent = function (eventName) { return this._config.events.indexOf(eventName) > -1; };
    return HammerGesturesPlugin;
}(EventManagerPlugin));
HammerGesturesPlugin.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
HammerGesturesPlugin.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] },] },
    { type: HammerGestureConfig, decorators: [{ type: Inject, args: [HAMMER_GESTURE_CONFIG,] },] },
]; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];
var MODIFIER_KEY_GETTERS = {
    'alt': function (event) { return event.altKey; },
    'control': function (event) { return event.ctrlKey; },
    'meta': function (event) { return event.metaKey; },
    'shift': function (event) { return event.shiftKey; }
};
/**
 * \@experimental
 */
var KeyEventsPlugin = (function (_super) {
    __extends(KeyEventsPlugin, _super);
    /**
     * @param {?} doc
     */
    function KeyEventsPlugin(doc) {
        return _super.call(this, doc) || this;
    }
    /**
     * @param {?} eventName
     * @return {?}
     */
    KeyEventsPlugin.prototype.supports = function (eventName) { return KeyEventsPlugin.parseEventName(eventName) != null; };
    /**
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */
    KeyEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
        var /** @type {?} */ parsedEvent = ((KeyEventsPlugin.parseEventName(eventName)));
        var /** @type {?} */ outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());
        return this.manager.getZone().runOutsideAngular(function () {
            return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);
        });
    };
    /**
     * @param {?} eventName
     * @return {?}
     */
    KeyEventsPlugin.parseEventName = function (eventName) {
        var /** @type {?} */ parts = eventName.toLowerCase().split('.');
        var /** @type {?} */ domEventName = parts.shift();
        if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {
            return null;
        }
        var /** @type {?} */ key = KeyEventsPlugin._normalizeKey(/** @type {?} */ ((parts.pop())));
        var /** @type {?} */ fullKey = '';
        MODIFIER_KEYS.forEach(function (modifierName) {
            var /** @type {?} */ index = parts.indexOf(modifierName);
            if (index > -1) {
                parts.splice(index, 1);
                fullKey += modifierName + '.';
            }
        });
        fullKey += key;
        if (parts.length != 0 || key.length === 0) {
            // returning null instead of throwing to let another plugin process the event
            return null;
        }
        var /** @type {?} */ result = {};
        result['domEventName'] = domEventName;
        result['fullKey'] = fullKey;
        return result;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    KeyEventsPlugin.getEventFullKey = function (event) {
        var /** @type {?} */ fullKey = '';
        var /** @type {?} */ key = getDOM().getEventKey(event);
        key = key.toLowerCase();
        if (key === ' ') {
            key = 'space'; // for readability
        }
        else if (key === '.') {
            key = 'dot'; // because '.' is used as a separator in event names
        }
        MODIFIER_KEYS.forEach(function (modifierName) {
            if (modifierName != key) {
                var /** @type {?} */ modifierGetter = MODIFIER_KEY_GETTERS[modifierName];
                if (modifierGetter(event)) {
                    fullKey += modifierName + '.';
                }
            }
        });
        fullKey += key;
        return fullKey;
    };
    /**
     * @param {?} fullKey
     * @param {?} handler
     * @param {?} zone
     * @return {?}
     */
    KeyEventsPlugin.eventCallback = function (fullKey, handler, zone) {
        return function (event /** TODO #9100 */) {
            if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {
                zone.runGuarded(function () { return handler(event); });
            }
        };
    };
    /**
     * \@internal
     * @param {?} keyName
     * @return {?}
     */
    KeyEventsPlugin._normalizeKey = function (keyName) {
        // TODO: switch to a Map if the mapping grows too much
        switch (keyName) {
            case 'esc':
                return 'escape';
            default:
                return keyName;
        }
    };
    return KeyEventsPlugin;
}(EventManagerPlugin));
KeyEventsPlugin.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
KeyEventsPlugin.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] },] },
]; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A pattern that recognizes a commonly useful subset of URLs that are safe.
 *
 * This regular expression matches a subset of URLs that will not cause script
 * execution if used in URL context within a HTML document. Specifically, this
 * regular expression matches if (comment from here on and regex copied from
 * Soy's EscapingConventions):
 * (1) Either a protocol in a whitelist (http, https, mailto or ftp).
 * (2) or no protocol.  A protocol must be followed by a colon. The below
 *     allows that by allowing colons only after one of the characters [/?#].
 *     A colon after a hash (#) must be in the fragment.
 *     Otherwise, a colon after a (?) must be in a query.
 *     Otherwise, a colon after a single solidus (/) must be in a path.
 *     Otherwise, a colon after a double solidus (//) must be in the authority
 *     (before port).
 *
 * The pattern disallows &, used in HTML entity declarations before
 * one of the characters in [/?#]. This disallows HTML entities used in the
 * protocol name, which should never happen, e.g. "h&#116;tp" for "http".
 * It also disallows HTML entities in the first path part of a relative path,
 * e.g. "foo&lt;bar/baz".  Our existing escaping functions should not produce
 * that. More importantly, it disallows masking of a colon,
 * e.g. "javascript&#58;...".
 *
 * This regular expression was taken from the Closure sanitization library.
 */
var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;
/**
 * A pattern that matches safe data URLs. Only matches image, video and audio types.
 */
var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;
/**
 * @param {?} url
 * @return {?}
 */
function sanitizeUrl(url) {
    url = String(url);
    if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))
        return url;
    if (isDevMode()) {
        getDOM().log("WARNING: sanitizing unsafe URL value " + url + " (see http://g.co/ng/security#xss)");
    }
    return 'unsafe:' + url;
}
/**
 * @param {?} srcset
 * @return {?}
 */
function sanitizeSrcset(srcset) {
    srcset = String(srcset);
    return srcset.split(',').map(function (srcset) { return sanitizeUrl(srcset.trim()); }).join(', ');
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A <body> element that can be safely used to parse untrusted HTML. Lazily initialized below.
 */
var inertElement = null;
/**
 * Lazily initialized to make sure the DOM adapter gets set before use.
 */
var DOM = null;
/**
 * Returns an HTML element that is guaranteed to not execute code when creating elements in it.
 * @return {?}
 */
function getInertElement() {
    if (inertElement)
        return inertElement;
    DOM = getDOM();
    // Prefer using <template> element if supported.
    var /** @type {?} */ templateEl = DOM.createElement('template');
    if ('content' in templateEl)
        return templateEl;
    var /** @type {?} */ doc = DOM.createHtmlDocument();
    inertElement = DOM.querySelector(doc, 'body');
    if (inertElement == null) {
        // usually there should be only one body element in the document, but IE doesn't have any, so we
        // need to create one.
        var /** @type {?} */ html = DOM.createElement('html', doc);
        inertElement = DOM.createElement('body', doc);
        DOM.appendChild(html, inertElement);
        DOM.appendChild(doc, html);
    }
    return inertElement;
}
/**
 * @param {?} tags
 * @return {?}
 */
function tagSet(tags) {
    var /** @type {?} */ res = {};
    for (var _i = 0, _a = tags.split(','); _i < _a.length; _i++) {
        var t = _a[_i];
        res[t] = true;
    }
    return res;
}
/**
 * @param {...?} sets
 * @return {?}
 */
function merge$3() {
    var sets = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        sets[_i] = arguments[_i];
    }
    var /** @type {?} */ res = {};
    for (var _a = 0, sets_1 = sets; _a < sets_1.length; _a++) {
        var s = sets_1[_a];
        for (var /** @type {?} */ v in s) {
            if (s.hasOwnProperty(v))
                res[v] = true;
        }
    }
    return res;
}
// Good source of info about elements and attributes
// http://dev.w3.org/html5/spec/Overview.html#semantics
// http://simon.html5.org/html-elements
// Safe Void Elements - HTML5
// http://dev.w3.org/html5/spec/Overview.html#void-elements
var VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');
// Elements that you can, intentionally, leave open (and which close themselves)
// http://dev.w3.org/html5/spec/Overview.html#optional-tags
var OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');
var OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');
var OPTIONAL_END_TAG_ELEMENTS = merge$3(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);
// Safe Block Elements - HTML5
var BLOCK_ELEMENTS = merge$3(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +
    'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +
    'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));
// Inline Elements - HTML5
var INLINE_ELEMENTS = merge$3(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +
    'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +
    'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));
var VALID_ELEMENTS = merge$3(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);
// Attributes that have href and hence need to be sanitized
var URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');
// Attributes that have special href set hence need to be sanitized
var SRCSET_ATTRS = tagSet('srcset');
var HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +
    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +
    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +
    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +
    'valign,value,vspace,width');
// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security
// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via
// innerHTML is required, SVG attributes should be added here.
// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those
// can be sanitized, but they increase security surface area without a legitimate use case, so they
// are left out here.
var VALID_ATTRS = merge$3(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);
/**
 * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe
 * attributes.
 */
var SanitizingHtmlSerializer = (function () {
    function SanitizingHtmlSerializer() {
        this.sanitizedSomething = false;
        this.buf = [];
    }
    /**
     * @param {?} el
     * @return {?}
     */
    SanitizingHtmlSerializer.prototype.sanitizeChildren = function (el) {
        // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.
        // However this code never accesses properties off of `document` before deleting its contents
        // again, so it shouldn't be vulnerable to DOM clobbering.
        var /** @type {?} */ current = ((el.firstChild));
        while (current) {
            if (DOM.isElementNode(current)) {
                this.startElement(/** @type {?} */ (current));
            }
            else if (DOM.isTextNode(current)) {
                this.chars(/** @type {?} */ ((DOM.nodeValue(current))));
            }
            else {
                // Strip non-element, non-text nodes.
                this.sanitizedSomething = true;
            }
            if (DOM.firstChild(current)) {
                current = ((DOM.firstChild(current)));
                continue;
            }
            while (current) {
                // Leaving the element. Walk up and to the right, closing tags as we go.
                if (DOM.isElementNode(current)) {
                    this.endElement(/** @type {?} */ (current));
                }
                var /** @type {?} */ next = checkClobberedElement(current, /** @type {?} */ ((DOM.nextSibling(current))));
                if (next) {
                    current = next;
                    break;
                }
                current = checkClobberedElement(current, /** @type {?} */ ((DOM.parentElement(current))));
            }
        }
        return this.buf.join('');
    };
    /**
     * @param {?} element
     * @return {?}
     */
    SanitizingHtmlSerializer.prototype.startElement = function (element) {
        var _this = this;
        var /** @type {?} */ tagName = DOM.nodeName(element).toLowerCase();
        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
            this.sanitizedSomething = true;
            return;
        }
        this.buf.push('<');
        this.buf.push(tagName);
        DOM.attributeMap(element).forEach(function (value, attrName) {
            var /** @type {?} */ lower = attrName.toLowerCase();
            if (!VALID_ATTRS.hasOwnProperty(lower)) {
                _this.sanitizedSomething = true;
                return;
            }
            // TODO(martinprobst): Special case image URIs for data:image/...
            if (URI_ATTRS[lower])
                value = sanitizeUrl(value);
            if (SRCSET_ATTRS[lower])
                value = sanitizeSrcset(value);
            _this.buf.push(' ');
            _this.buf.push(attrName);
            _this.buf.push('="');
            _this.buf.push(encodeEntities(value));
            _this.buf.push('"');
        });
        this.buf.push('>');
    };
    /**
     * @param {?} current
     * @return {?}
     */
    SanitizingHtmlSerializer.prototype.endElement = function (current) {
        var /** @type {?} */ tagName = DOM.nodeName(current).toLowerCase();
        if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
            this.buf.push('</');
            this.buf.push(tagName);
            this.buf.push('>');
        }
    };
    /**
     * @param {?} chars
     * @return {?}
     */
    SanitizingHtmlSerializer.prototype.chars = function (chars) { this.buf.push(encodeEntities(chars)); };
    return SanitizingHtmlSerializer;
}());
/**
 * @param {?} node
 * @param {?} nextNode
 * @return {?}
 */
function checkClobberedElement(node, nextNode) {
    if (nextNode && DOM.contains(node, nextNode)) {
        throw new Error("Failed to sanitize html because the element is clobbered: " + DOM.getOuterHTML(node));
    }
    return nextNode;
}
// Regular Expressions for parsing tags and attributes
var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
// ! to ~ is the ASCII range.
var NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
/**
 * Escapes all potentially dangerous characters, so that the
 * resulting string can be safely inserted into attribute or
 * element text.
 * @param {?} value
 * @return {?}
 */
function encodeEntities(value) {
    return value.replace(/&/g, '&amp;')
        .replace(SURROGATE_PAIR_REGEXP, function (match) {
        var /** @type {?} */ hi = match.charCodeAt(0);
        var /** @type {?} */ low = match.charCodeAt(1);
        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';
    })
        .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;');
}
/**
 * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'
 * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo').
 *
 * This is undesirable since we don't want to allow any of these custom attributes. This method
 * strips them all.
 * @param {?} el
 * @return {?}
 */
function stripCustomNsAttrs(el) {
    DOM.attributeMap(el).forEach(function (_, attrName) {
        if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {
            DOM.removeAttribute(el, attrName);
        }
    });
    for (var _i = 0, _a = DOM.childNodesAsList(el); _i < _a.length; _i++) {
        var n = _a[_i];
        if (DOM.isElementNode(n))
            stripCustomNsAttrs(/** @type {?} */ (n));
    }
}
/**
 * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to
 * the DOM in a browser environment.
 * @param {?} defaultDoc
 * @param {?} unsafeHtmlInput
 * @return {?}
 */
function sanitizeHtml(defaultDoc, unsafeHtmlInput) {
    try {
        var /** @type {?} */ containerEl = getInertElement();
        // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).
        var /** @type {?} */ unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';
        // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser
        // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.
        var /** @type {?} */ mXSSAttempts = 5;
        var /** @type {?} */ parsedHtml = unsafeHtml;
        do {
            if (mXSSAttempts === 0) {
                throw new Error('Failed to sanitize html because the input is unstable');
            }
            mXSSAttempts--;
            unsafeHtml = parsedHtml;
            DOM.setInnerHTML(containerEl, unsafeHtml);
            if (defaultDoc.documentMode) {
                // strip custom-namespaced attributes on IE<=11
                stripCustomNsAttrs(containerEl);
            }
            parsedHtml = DOM.getInnerHTML(containerEl);
        } while (unsafeHtml !== parsedHtml);
        var /** @type {?} */ sanitizer = new SanitizingHtmlSerializer();
        var /** @type {?} */ safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(containerEl) || containerEl);
        // Clear out the body element.
        var /** @type {?} */ parent = DOM.getTemplateContent(containerEl) || containerEl;
        for (var _i = 0, _a = DOM.childNodesAsList(parent); _i < _a.length; _i++) {
            var child = _a[_i];
            DOM.removeChild(parent, child);
        }
        if (isDevMode() && sanitizer.sanitizedSomething) {
            DOM.log('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');
        }
        return safeHtml;
    }
    catch (e) {
        // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.
        inertElement = null;
        throw e;
    }
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Regular expression for safe style values.
 *
 * Quotes (" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.
 *
 * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or
 * font-family) and hence could allow multiple values to get injected, but that should pose no risk
 * of XSS.
 *
 * The function expression checks only for XSS safety, not for CSS validity.
 *
 * This regular expression was taken from the Closure sanitization library, and augmented for
 * transformation values.
 */
var VALUES = '[-,."\'%_!# a-zA-Z0-9]+';
var TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';
var COLOR_FNS = '(?:rgb|hsl)a?';
var GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';
var CSS3_FNS = '(?:calc|attr)';
var FN_ARGS = '\\([-0-9.%, #a-zA-Z]+\\)';
var SAFE_STYLE_VALUE = new RegExp("^(" + VALUES + "|" +
    ("(?:" + TRANSFORMATION_FNS + "|" + COLOR_FNS + "|" + GRADIENTS + "|" + CSS3_FNS + ")") +
    (FN_ARGS + ")$"), 'g');
/**
 * Matches a `url(...)` value with an arbitrary argument as long as it does
 * not contain parentheses.
 *
 * The URL value still needs to be sanitized separately.
 *
 * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted
 * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.
 * by observing whether scroll bars are displayed, or character ranges used by a font face
 * definition.
 *
 * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that
 * binding a URL value without further cooperation from the page will cause an information leak, and
 * if so, it is just a leak, not a full blown XSS vulnerability.
 *
 * Given the common use case, low likelihood of attack vector, and low impact of an attack, this
 * code is permissive and allows URLs that sanitize otherwise.
 */
var URL_RE = /^url\(([^)]+)\)$/;
/**
 * Checks that quotes (" and ') are properly balanced inside a string. Assumes
 * that neither escape (\) nor any other character that could result in
 * breaking out of a string parsing context are allowed;
 * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.
 *
 * This code was taken from the Closure sanitization library.
 * @param {?} value
 * @return {?}
 */
function hasBalancedQuotes(value) {
    var /** @type {?} */ outsideSingle = true;
    var /** @type {?} */ outsideDouble = true;
    for (var /** @type {?} */ i = 0; i < value.length; i++) {
        var /** @type {?} */ c = value.charAt(i);
        if (c === '\'' && outsideDouble) {
            outsideSingle = !outsideSingle;
        }
        else if (c === '"' && outsideSingle) {
            outsideDouble = !outsideDouble;
        }
    }
    return outsideSingle && outsideDouble;
}
/**
 * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single
 * value) and returns a value that is safe to use in a browser environment.
 * @param {?} value
 * @return {?}
 */
function sanitizeStyle(value) {
    value = String(value).trim(); // Make sure it's actually a string.
    if (!value)
        return '';
    // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for
    // reasoning behind this.
    var /** @type {?} */ urlMatch = value.match(URL_RE);
    if ((urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||
        value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {
        return value; // Safe style values.
    }
    if (isDevMode()) {
        getDOM().log("WARNING: sanitizing unsafe style value " + value + " (see http://g.co/ng/security#xss).");
    }
    return 'unsafe';
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing
 * values to be safe to use in the different DOM contexts.
 *
 * For example, when binding a URL in an `<a [href]="someValue">` hyperlink, `someValue` will be
 * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on
 * the website.
 *
 * In specific situations, it might be necessary to disable sanitization, for example if the
 * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.
 * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`
 * methods, and then binding to that value from the template.
 *
 * These situations should be very rare, and extraordinary care must be taken to avoid creating a
 * Cross Site Scripting (XSS) security bug!
 *
 * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as
 * close as possible to the source of the value, to make it easy to verify no security bug is
 * created by its use.
 *
 * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that
 * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous
 * code. The sanitizer leaves safe values intact.
 *
 * \@security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in
 * sanitization for the value passed in. Carefully check and audit all values and code paths going
 * into this call. Make sure any user data is appropriately escaped for this security context.
 * For more detail, see the [Security Guide](http://g.co/ng/security).
 *
 * \@stable
 * @abstract
 */
var DomSanitizer = (function () {
    function DomSanitizer() {
    }
    /**
     * Sanitizes a value for use in the given SecurityContext.
     *
     * If value is trusted for the context, this method will unwrap the contained safe value and use
     * it directly. Otherwise, value will be sanitized to be safe in the given context, for example
     * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation
     * is responsible to make sure that the value can definitely be safely used in the given context.
     * @abstract
     * @param {?} context
     * @param {?} value
     * @return {?}
     */
    DomSanitizer.prototype.sanitize = function (context, value) { };
    /**
     * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML
     * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will
     * leave safe HTML intact, so in most situations this method should not be used.
     *
     * **WARNING:** calling this method with untrusted user data exposes your application to XSS
     * security risks!
     * @abstract
     * @param {?} value
     * @return {?}
     */
    DomSanitizer.prototype.bypassSecurityTrustHtml = function (value) { };
    /**
     * Bypass security and trust the given value to be safe style value (CSS).
     *
     * **WARNING:** calling this method with untrusted user data exposes your application to XSS
     * security risks!
     * @abstract
     * @param {?} value
     * @return {?}
     */
    DomSanitizer.prototype.bypassSecurityTrustStyle = function (value) { };
    /**
     * Bypass security and trust the given value to be safe JavaScript.
     *
     * **WARNING:** calling this method with untrusted user data exposes your application to XSS
     * security risks!
     * @abstract
     * @param {?} value
     * @return {?}
     */
    DomSanitizer.prototype.bypassSecurityTrustScript = function (value) { };
    /**
     * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used
     * in hyperlinks or `<img src>`.
     *
     * **WARNING:** calling this method with untrusted user data exposes your application to XSS
     * security risks!
     * @abstract
     * @param {?} value
     * @return {?}
     */
    DomSanitizer.prototype.bypassSecurityTrustUrl = function (value) { };
    /**
     * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may
     * be used to load executable code from, like `<script src>`, or `<iframe src>`.
     *
     * **WARNING:** calling this method with untrusted user data exposes your application to XSS
     * security risks!
     * @abstract
     * @param {?} value
     * @return {?}
     */
    DomSanitizer.prototype.bypassSecurityTrustResourceUrl = function (value) { };
    return DomSanitizer;
}());
var DomSanitizerImpl = (function (_super) {
    __extends(DomSanitizerImpl, _super);
    /**
     * @param {?} _doc
     */
    function DomSanitizerImpl(_doc) {
        var _this = _super.call(this) || this;
        _this._doc = _doc;
        return _this;
    }
    /**
     * @param {?} ctx
     * @param {?} value
     * @return {?}
     */
    DomSanitizerImpl.prototype.sanitize = function (ctx, value) {
        if (value == null)
            return null;
        switch (ctx) {
            case SecurityContext.NONE:
                return (value);
            case SecurityContext.HTML:
                if (value instanceof SafeHtmlImpl)
                    return value.changingThisBreaksApplicationSecurity;
                this.checkNotSafeValue(value, 'HTML');
                return sanitizeHtml(this._doc, String(value));
            case SecurityContext.STYLE:
                if (value instanceof SafeStyleImpl)
                    return value.changingThisBreaksApplicationSecurity;
                this.checkNotSafeValue(value, 'Style');
                return sanitizeStyle(/** @type {?} */ (value));
            case SecurityContext.SCRIPT:
                if (value instanceof SafeScriptImpl)
                    return value.changingThisBreaksApplicationSecurity;
                this.checkNotSafeValue(value, 'Script');
                throw new Error('unsafe value used in a script context');
            case SecurityContext.URL:
                if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {
                    // Allow resource URLs in URL contexts, they are strictly more trusted.
                    return value.changingThisBreaksApplicationSecurity;
                }
                this.checkNotSafeValue(value, 'URL');
                return sanitizeUrl(String(value));
            case SecurityContext.RESOURCE_URL:
                if (value instanceof SafeResourceUrlImpl) {
                    return value.changingThisBreaksApplicationSecurity;
                }
                this.checkNotSafeValue(value, 'ResourceURL');
                throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');
            default:
                throw new Error("Unexpected SecurityContext " + ctx + " (see http://g.co/ng/security#xss)");
        }
    };
    /**
     * @param {?} value
     * @param {?} expectedType
     * @return {?}
     */
    DomSanitizerImpl.prototype.checkNotSafeValue = function (value, expectedType) {
        if (value instanceof SafeValueImpl) {
            throw new Error("Required a safe " + expectedType + ", got a " + value.getTypeName() + " " +
                "(see http://g.co/ng/security#xss)");
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DomSanitizerImpl.prototype.bypassSecurityTrustHtml = function (value) { return new SafeHtmlImpl(value); };
    /**
     * @param {?} value
     * @return {?}
     */
    DomSanitizerImpl.prototype.bypassSecurityTrustStyle = function (value) { return new SafeStyleImpl(value); };
    /**
     * @param {?} value
     * @return {?}
     */
    DomSanitizerImpl.prototype.bypassSecurityTrustScript = function (value) { return new SafeScriptImpl(value); };
    /**
     * @param {?} value
     * @return {?}
     */
    DomSanitizerImpl.prototype.bypassSecurityTrustUrl = function (value) { return new SafeUrlImpl(value); };
    /**
     * @param {?} value
     * @return {?}
     */
    DomSanitizerImpl.prototype.bypassSecurityTrustResourceUrl = function (value) {
        return new SafeResourceUrlImpl(value);
    };
    return DomSanitizerImpl;
}(DomSanitizer));
DomSanitizerImpl.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
DomSanitizerImpl.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT$1,] },] },
]; };
/**
 * @abstract
 */
var SafeValueImpl = (function () {
    /**
     * @param {?} changingThisBreaksApplicationSecurity
     */
    function SafeValueImpl(changingThisBreaksApplicationSecurity) {
        this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
        // empty
    }
    /**
     * @abstract
     * @return {?}
     */
    SafeValueImpl.prototype.getTypeName = function () { };
    /**
     * @return {?}
     */
    SafeValueImpl.prototype.toString = function () {
        return "SafeValue must use [property]=binding: " + this.changingThisBreaksApplicationSecurity +
            " (see http://g.co/ng/security#xss)";
    };
    return SafeValueImpl;
}());
var SafeHtmlImpl = (function (_super) {
    __extends(SafeHtmlImpl, _super);
    function SafeHtmlImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    SafeHtmlImpl.prototype.getTypeName = function () { return 'HTML'; };
    return SafeHtmlImpl;
}(SafeValueImpl));
var SafeStyleImpl = (function (_super) {
    __extends(SafeStyleImpl, _super);
    function SafeStyleImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    SafeStyleImpl.prototype.getTypeName = function () { return 'Style'; };
    return SafeStyleImpl;
}(SafeValueImpl));
var SafeScriptImpl = (function (_super) {
    __extends(SafeScriptImpl, _super);
    function SafeScriptImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    SafeScriptImpl.prototype.getTypeName = function () { return 'Script'; };
    return SafeScriptImpl;
}(SafeValueImpl));
var SafeUrlImpl = (function (_super) {
    __extends(SafeUrlImpl, _super);
    function SafeUrlImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    SafeUrlImpl.prototype.getTypeName = function () { return 'URL'; };
    return SafeUrlImpl;
}(SafeValueImpl));
var SafeResourceUrlImpl = (function (_super) {
    __extends(SafeResourceUrlImpl, _super);
    function SafeResourceUrlImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    SafeResourceUrlImpl.prototype.getTypeName = function () { return 'ResourceURL'; };
    return SafeResourceUrlImpl;
}(SafeValueImpl));
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var INTERNAL_BROWSER_PLATFORM_PROVIDERS = [
    { provide: PLATFORM_ID, useValue: PLATFORM_BROWSER_ID },
    { provide: PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true },
    { provide: PlatformLocation, useClass: BrowserPlatformLocation },
    { provide: DOCUMENT$1, useFactory: _document, deps: [] },
];
/**
 * \@security Replacing built-in sanitization providers exposes the application to XSS risks.
 * Attacker-controlled data introduced by an unsanitized provider could expose your
 * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).
 * \@experimental
 */
var BROWSER_SANITIZATION_PROVIDERS = [
    { provide: Sanitizer, useExisting: DomSanitizer },
    { provide: DomSanitizer, useClass: DomSanitizerImpl },
];
/**
 * \@stable
 */
var platformBrowser = createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);
/**
 * @return {?}
 */
function initDomAdapter() {
    BrowserDomAdapter.makeCurrent();
    BrowserGetTestability.init();
}
/**
 * @return {?}
 */
function errorHandler() {
    return new ErrorHandler();
}
/**
 * @return {?}
 */
function _document() {
    return document;
}
/**
 * The ng module for the browser.
 *
 * \@stable
 */
var BrowserModule = (function () {
    /**
     * @param {?} parentModule
     */
    function BrowserModule(parentModule) {
        if (parentModule) {
            throw new Error("BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.");
        }
    }
    /**
     * Configures a browser-based application to transition from a server-rendered app, if
     * one is present on the page. The specified parameters must include an application id,
     * which must match between the client and server applications.
     *
     * \@experimental
     * @param {?} params
     * @return {?}
     */
    BrowserModule.withServerTransition = function (params) {
        return {
            ngModule: BrowserModule,
            providers: [
                { provide: APP_ID, useValue: params.appId },
                { provide: TRANSITION_ID, useExisting: APP_ID },
                SERVER_TRANSITION_PROVIDERS,
            ],
        };
    };
    return BrowserModule;
}());
BrowserModule.decorators = [
    { type: NgModule, args: [{
                providers: [
                    BROWSER_SANITIZATION_PROVIDERS,
                    { provide: ErrorHandler, useFactory: errorHandler, deps: [] },
                    { provide: EVENT_MANAGER_PLUGINS, useClass: DomEventsPlugin, multi: true },
                    { provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true },
                    { provide: EVENT_MANAGER_PLUGINS, useClass: HammerGesturesPlugin, multi: true },
                    { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig },
                    DomRendererFactory2,
                    { provide: RendererFactory2, useExisting: DomRendererFactory2 },
                    { provide: SharedStylesHost, useExisting: DomSharedStylesHost },
                    DomSharedStylesHost,
                    Testability,
                    EventManager,
                    ELEMENT_PROBE_PROVIDERS,
                    Meta,
                    Title,
                ],
                exports: [CommonModule, ApplicationModule]
            },] },
];
/**
 * @nocollapse
 */
BrowserModule.ctorParameters = function () { return [
    { type: BrowserModule, decorators: [{ type: Optional }, { type: SkipSelf },] },
]; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @module
 * @description
 * Entry point for all public APIs of the common package.
 */
/**
 * \@stable
 */
var VERSION$1 = new Version('4.3.3');

var __extends$13 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};





/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var ForkJoinObservable = (function (_super) {
    __extends$13(ForkJoinObservable, _super);
    function ForkJoinObservable(sources, resultSelector) {
        _super.call(this);
        this.sources = sources;
        this.resultSelector = resultSelector;
    }
    /* tslint:enable:max-line-length */
    /**
     * @param sources
     * @return {any}
     * @static true
     * @name forkJoin
     * @owner Observable
     */
    ForkJoinObservable.create = function () {
        var sources = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            sources[_i - 0] = arguments[_i];
        }
        if (sources === null || arguments.length === 0) {
            return new EmptyObservable_1.EmptyObservable();
        }
        var resultSelector = null;
        if (typeof sources[sources.length - 1] === 'function') {
            resultSelector = sources.pop();
        }
        // if the first and only other argument besides the resultSelector is an array
        // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`
        if (sources.length === 1 && isArray.isArray(sources[0])) {
            sources = sources[0];
        }
        if (sources.length === 0) {
            return new EmptyObservable_1.EmptyObservable();
        }
        return new ForkJoinObservable(sources, resultSelector);
    };
    ForkJoinObservable.prototype._subscribe = function (subscriber) {
        return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);
    };
    return ForkJoinObservable;
}(Observable_1.Observable));
var ForkJoinObservable_2 = ForkJoinObservable;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ForkJoinSubscriber = (function (_super) {
    __extends$13(ForkJoinSubscriber, _super);
    function ForkJoinSubscriber(destination, sources, resultSelector) {
        _super.call(this, destination);
        this.sources = sources;
        this.resultSelector = resultSelector;
        this.completed = 0;
        this.haveValues = 0;
        var len = sources.length;
        this.total = len;
        this.values = new Array(len);
        for (var i = 0; i < len; i++) {
            var source = sources[i];
            var innerSubscription = subscribeToResult_1.subscribeToResult(this, source, null, i);
            if (innerSubscription) {
                innerSubscription.outerIndex = i;
                this.add(innerSubscription);
            }
        }
    }
    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.values[outerIndex] = innerValue;
        if (!innerSub._hasValue) {
            innerSub._hasValue = true;
            this.haveValues++;
        }
    };
    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {
        var destination = this.destination;
        var _a = this, haveValues = _a.haveValues, resultSelector = _a.resultSelector, values = _a.values;
        var len = values.length;
        if (!innerSub._hasValue) {
            destination.complete();
            return;
        }
        this.completed++;
        if (this.completed !== len) {
            return;
        }
        if (haveValues === len) {
            var value = resultSelector ? resultSelector.apply(this, values) : values;
            destination.next(value);
        }
        destination.complete();
    };
    return ForkJoinSubscriber;
}(OuterSubscriber_1.OuterSubscriber));


var ForkJoinObservable_1 = {
	ForkJoinObservable: ForkJoinObservable_2
};

var forkJoin_1 = ForkJoinObservable_1.ForkJoinObservable.create;

var __extends$14 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};


/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var PromiseObservable = (function (_super) {
    __extends$14(PromiseObservable, _super);
    function PromiseObservable(promise, scheduler) {
        _super.call(this);
        this.promise = promise;
        this.scheduler = scheduler;
    }
    /**
     * Converts a Promise to an Observable.
     *
     * <span class="informal">Returns an Observable that just emits the Promise's
     * resolved value, then completes.</span>
     *
     * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an
     * Observable. If the Promise resolves with a value, the output Observable
     * emits that resolved value as a `next`, and then completes. If the Promise
     * is rejected, then the output Observable emits the corresponding Error.
     *
     * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>
     * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));
     * result.subscribe(x => console.log(x), e => console.error(e));
     *
     * @see {@link bindCallback}
     * @see {@link from}
     *
     * @param {PromiseLike<T>} promise The promise to be converted.
     * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling
     * the delivery of the resolved value (or the rejection).
     * @return {Observable<T>} An Observable which wraps the Promise.
     * @static true
     * @name fromPromise
     * @owner Observable
     */
    PromiseObservable.create = function (promise, scheduler) {
        return new PromiseObservable(promise, scheduler);
    };
    PromiseObservable.prototype._subscribe = function (subscriber) {
        var _this = this;
        var promise = this.promise;
        var scheduler = this.scheduler;
        if (scheduler == null) {
            if (this._isScalar) {
                if (!subscriber.closed) {
                    subscriber.next(this.value);
                    subscriber.complete();
                }
            }
            else {
                promise.then(function (value) {
                    _this.value = value;
                    _this._isScalar = true;
                    if (!subscriber.closed) {
                        subscriber.next(value);
                        subscriber.complete();
                    }
                }, function (err) {
                    if (!subscriber.closed) {
                        subscriber.error(err);
                    }
                })
                    .then(null, function (err) {
                    // escape the promise trap, throw unhandled errors
                    root.root.setTimeout(function () { throw err; });
                });
            }
        }
        else {
            if (this._isScalar) {
                if (!subscriber.closed) {
                    return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });
                }
            }
            else {
                promise.then(function (value) {
                    _this.value = value;
                    _this._isScalar = true;
                    if (!subscriber.closed) {
                        subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));
                    }
                }, function (err) {
                    if (!subscriber.closed) {
                        subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));
                    }
                })
                    .then(null, function (err) {
                    // escape the promise trap, throw unhandled errors
                    root.root.setTimeout(function () { throw err; });
                });
            }
        }
    };
    return PromiseObservable;
}(Observable_1.Observable));
var PromiseObservable_2 = PromiseObservable;
function dispatchNext(arg) {
    var value = arg.value, subscriber = arg.subscriber;
    if (!subscriber.closed) {
        subscriber.next(value);
        subscriber.complete();
    }
}
function dispatchError(arg) {
    var err = arg.err, subscriber = arg.subscriber;
    if (!subscriber.closed) {
        subscriber.error(err);
    }
}


var PromiseObservable_1 = {
	PromiseObservable: PromiseObservable_2
};

var fromPromise_1 = PromiseObservable_1.PromiseObservable.create;

var __extends$15 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};

/**
 * Applies a given `project` function to each value emitted by the source
 * Observable, and emits the resulting values as an Observable.
 *
 * <span class="informal">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),
 * it passes each source value through a transformation function to get
 * corresponding output values.</span>
 *
 * <img src="./img/map.png" width="100%">
 *
 * Similar to the well known `Array.prototype.map` function, this operator
 * applies a projection to each value and emits that projection in the output
 * Observable.
 *
 * @example <caption>Map every click to the clientX position of that click</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var positions = clicks.map(ev => ev.clientX);
 * positions.subscribe(x => console.log(x));
 *
 * @see {@link mapTo}
 * @see {@link pluck}
 *
 * @param {function(value: T, index: number): R} project The function to apply
 * to each `value` emitted by the source Observable. The `index` parameter is
 * the number `i` for the i-th emission that has happened since the
 * subscription, starting from the number `0`.
 * @param {any} [thisArg] An optional argument to define what `this` is in the
 * `project` function.
 * @return {Observable<R>} An Observable that emits the values from the source
 * Observable transformed by the given `project` function.
 * @method map
 * @owner Observable
 */
function map(project, thisArg) {
    if (typeof project !== 'function') {
        throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
    }
    return this.lift(new MapOperator(project, thisArg));
}
var map_2 = map;
var MapOperator = (function () {
    function MapOperator(project, thisArg) {
        this.project = project;
        this.thisArg = thisArg;
    }
    MapOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
    };
    return MapOperator;
}());
var MapOperator_1 = MapOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MapSubscriber = (function (_super) {
    __extends$15(MapSubscriber, _super);
    function MapSubscriber(destination, project, thisArg) {
        _super.call(this, destination);
        this.project = project;
        this.count = 0;
        this.thisArg = thisArg || this;
    }
    // NOTE: This looks unoptimized, but it's actually purposefully NOT
    // using try/catch optimizations.
    MapSubscriber.prototype._next = function (value) {
        var result;
        try {
            result = this.project.call(this.thisArg, value, this.count++);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    return MapSubscriber;
}(Subscriber_1.Subscriber));


var map_1 = {
	map: map_2,
	MapOperator: MapOperator_1
};

/**
 * @license Angular v4.3.3
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Base class for control directives.
 *
 * Only used internally in the forms module.
 *
 * \@stable
 * @abstract
 */
var AbstractControlDirective = (function () {
    function AbstractControlDirective() {
    }
    /**
     * @abstract
     * @return {?}
     */
    AbstractControlDirective.prototype.control = function () { };
    Object.defineProperty(AbstractControlDirective.prototype, "value", {
        /**
         * @return {?}
         */
        get: function () { return this.control ? this.control.value : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "valid", {
        /**
         * @return {?}
         */
        get: function () { return this.control ? this.control.valid : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "invalid", {
        /**
         * @return {?}
         */
        get: function () { return this.control ? this.control.invalid : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "pending", {
        /**
         * @return {?}
         */
        get: function () { return this.control ? this.control.pending : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "errors", {
        /**
         * @return {?}
         */
        get: function () { return this.control ? this.control.errors : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "pristine", {
        /**
         * @return {?}
         */
        get: function () { return this.control ? this.control.pristine : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "dirty", {
        /**
         * @return {?}
         */
        get: function () { return this.control ? this.control.dirty : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "touched", {
        /**
         * @return {?}
         */
        get: function () { return this.control ? this.control.touched : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "untouched", {
        /**
         * @return {?}
         */
        get: function () { return this.control ? this.control.untouched : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "disabled", {
        /**
         * @return {?}
         */
        get: function () { return this.control ? this.control.disabled : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "enabled", {
        /**
         * @return {?}
         */
        get: function () { return this.control ? this.control.enabled : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "statusChanges", {
        /**
         * @return {?}
         */
        get: function () {
            return this.control ? this.control.statusChanges : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "valueChanges", {
        /**
         * @return {?}
         */
        get: function () {
            return this.control ? this.control.valueChanges : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlDirective.prototype, "path", {
        /**
         * @return {?}
         */
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?=} value
     * @return {?}
     */
    AbstractControlDirective.prototype.reset = function (value) {
        if (value === void 0) { value = undefined; }
        if (this.control)
            this.control.reset(value);
    };
    /**
     * @param {?} errorCode
     * @param {?=} path
     * @return {?}
     */
    AbstractControlDirective.prototype.hasError = function (errorCode, path) {
        return this.control ? this.control.hasError(errorCode, path) : false;
    };
    /**
     * @param {?} errorCode
     * @param {?=} path
     * @return {?}
     */
    AbstractControlDirective.prototype.getError = function (errorCode, path) {
        return this.control ? this.control.getError(errorCode, path) : null;
    };
    return AbstractControlDirective;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A directive that contains multiple {\@link NgControl}s.
 *
 * Only used by the forms module.
 *
 * \@stable
 * @abstract
 */
var ControlContainer = (function (_super) {
    __extends(ControlContainer, _super);
    function ControlContainer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ControlContainer.prototype, "formDirective", {
        /**
         * Get the form to which this container belongs.
         * @return {?}
         */
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ControlContainer.prototype, "path", {
        /**
         * Get the path to this container.
         * @return {?}
         */
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    return ControlContainer;
}(AbstractControlDirective));
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} value
 * @return {?}
 */
function isEmptyInputValue(value) {
    // we don't check for string here so it also works with arrays
    return value == null || value.length === 0;
}
/**
 * Providers for validators to be used for {\@link FormControl}s in a form.
 *
 * Provide this using `multi: true` to add validators.
 *
 * \@stable
 */
var NG_VALIDATORS = new InjectionToken('NgValidators');
/**
 * Providers for asynchronous validators to be used for {\@link FormControl}s
 * in a form.
 *
 * Provide this using `multi: true` to add validators.
 *
 * See {\@link NG_VALIDATORS} for more details.
 *
 * \@stable
 */
var NG_ASYNC_VALIDATORS = new InjectionToken('NgAsyncValidators');
var EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;
/**
 * Provides a set of validators used by form controls.
 *
 * A validator is a function that processes a {\@link FormControl} or collection of
 * controls and returns a map of errors. A null map means that validation has passed.
 *
 * ### Example
 *
 * ```typescript
 * var loginControl = new FormControl("", Validators.required)
 * ```
 *
 * \@stable
 */
var Validators = (function () {
    function Validators() {
    }
    /**
     * Validator that requires controls to have a value greater than a number.
     * @param {?} min
     * @return {?}
     */
    Validators.min = function (min) {
        return function (control) {
            if (isEmptyInputValue(control.value) || isEmptyInputValue(min)) {
                return null; // don't validate empty values to allow optional controls
            }
            var /** @type {?} */ value = parseFloat(control.value);
            // Controls with NaN values after parsing should be treated as not having a
            // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min
            return !isNaN(value) && value < min ? { 'min': { 'min': min, 'actual': control.value } } : null;
        };
    };
    /**
     * Validator that requires controls to have a value less than a number.
     * @param {?} max
     * @return {?}
     */
    Validators.max = function (max) {
        return function (control) {
            if (isEmptyInputValue(control.value) || isEmptyInputValue(max)) {
                return null; // don't validate empty values to allow optional controls
            }
            var /** @type {?} */ value = parseFloat(control.value);
            // Controls with NaN values after parsing should be treated as not having a
            // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max
            return !isNaN(value) && value > max ? { 'max': { 'max': max, 'actual': control.value } } : null;
        };
    };
    /**
     * Validator that requires controls to have a non-empty value.
     * @param {?} control
     * @return {?}
     */
    Validators.required = function (control) {
        return isEmptyInputValue(control.value) ? { 'required': true } : null;
    };
    /**
     * Validator that requires control value to be true.
     * @param {?} control
     * @return {?}
     */
    Validators.requiredTrue = function (control) {
        return control.value === true ? null : { 'required': true };
    };
    /**
     * Validator that performs email validation.
     * @param {?} control
     * @return {?}
     */
    Validators.email = function (control) {
        return EMAIL_REGEXP.test(control.value) ? null : { 'email': true };
    };
    /**
     * Validator that requires controls to have a value of a minimum length.
     * @param {?} minLength
     * @return {?}
     */
    Validators.minLength = function (minLength) {
        return function (control) {
            if (isEmptyInputValue(control.value)) {
                return null; // don't validate empty values to allow optional controls
            }
            var /** @type {?} */ length = control.value ? control.value.length : 0;
            return length < minLength ?
                { 'minlength': { 'requiredLength': minLength, 'actualLength': length } } :
                null;
        };
    };
    /**
     * Validator that requires controls to have a value of a maximum length.
     * @param {?} maxLength
     * @return {?}
     */
    Validators.maxLength = function (maxLength) {
        return function (control) {
            var /** @type {?} */ length = control.value ? control.value.length : 0;
            return length > maxLength ?
                { 'maxlength': { 'requiredLength': maxLength, 'actualLength': length } } :
                null;
        };
    };
    /**
     * Validator that requires a control to match a regex to its value.
     * @param {?} pattern
     * @return {?}
     */
    Validators.pattern = function (pattern) {
        if (!pattern)
            return Validators.nullValidator;
        var /** @type {?} */ regex;
        var /** @type {?} */ regexStr;
        if (typeof pattern === 'string') {
            regexStr = "^" + pattern + "$";
            regex = new RegExp(regexStr);
        }
        else {
            regexStr = pattern.toString();
            regex = pattern;
        }
        return function (control) {
            if (isEmptyInputValue(control.value)) {
                return null; // don't validate empty values to allow optional controls
            }
            var /** @type {?} */ value = control.value;
            return regex.test(value) ? null :
                { 'pattern': { 'requiredPattern': regexStr, 'actualValue': value } };
        };
    };
    /**
     * No-op validator.
     * @param {?} c
     * @return {?}
     */
    Validators.nullValidator = function (c) { return null; };
    /**
     * @param {?} validators
     * @return {?}
     */
    Validators.compose = function (validators) {
        if (!validators)
            return null;
        var /** @type {?} */ presentValidators = (validators.filter(isPresent));
        if (presentValidators.length == 0)
            return null;
        return function (control) {
            return _mergeErrors(_executeValidators(control, presentValidators));
        };
    };
    /**
     * @param {?} validators
     * @return {?}
     */
    Validators.composeAsync = function (validators) {
        if (!validators)
            return null;
        var /** @type {?} */ presentValidators = (validators.filter(isPresent));
        if (presentValidators.length == 0)
            return null;
        return function (control) {
            var /** @type {?} */ observables = _executeAsyncValidators(control, presentValidators).map(toObservable);
            return map_2.call(forkJoin_1(observables), _mergeErrors);
        };
    };
    return Validators;
}());
/**
 * @param {?} o
 * @return {?}
 */
function isPresent(o) {
    return o != null;
}
/**
 * @param {?} r
 * @return {?}
 */
function toObservable(r) {
    var /** @type {?} */ obs = isPromise(r) ? fromPromise_1(r) : r;
    if (!(isObservable(obs))) {
        throw new Error("Expected validator to return Promise or Observable.");
    }
    return obs;
}
/**
 * @param {?} control
 * @param {?} validators
 * @return {?}
 */
function _executeValidators(control, validators) {
    return validators.map(function (v) { return v(control); });
}
/**
 * @param {?} control
 * @param {?} validators
 * @return {?}
 */
function _executeAsyncValidators(control, validators) {
    return validators.map(function (v) { return v(control); });
}
/**
 * @param {?} arrayOfErrors
 * @return {?}
 */
function _mergeErrors(arrayOfErrors) {
    var /** @type {?} */ res = arrayOfErrors.reduce(function (res, errors) {
        return errors != null ? Object.assign({}, /** @type {?} */ ((res)), errors) : ((res));
    }, {});
    return Object.keys(res).length === 0 ? null : res;
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Used to provide a {\@link ControlValueAccessor} for form controls.
 *
 * See {\@link DefaultValueAccessor} for how to implement one.
 * \@stable
 */
var NG_VALUE_ACCESSOR = new InjectionToken('NgValueAccessor');
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var CHECKBOX_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return CheckboxControlValueAccessor; }),
    multi: true,
};
/**
 * The accessor for writing a value and listening to changes on a checkbox input element.
 *
 *  ### Example
 *  ```
 *  <input type="checkbox" name="rememberLogin" ngModel>
 *  ```
 *
 *  \@stable
 */
var CheckboxControlValueAccessor = (function () {
    /**
     * @param {?} _renderer
     * @param {?} _elementRef
     */
    function CheckboxControlValueAccessor(_renderer, _elementRef) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this.onChange = function (_) { };
        this.onTouched = function () { };
    }
    /**
     * @param {?} value
     * @return {?}
     */
    CheckboxControlValueAccessor.prototype.writeValue = function (value) {
        this._renderer.setProperty(this._elementRef.nativeElement, 'checked', value);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
    /**
     * @param {?} fn
     * @return {?}
     */
    CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    CheckboxControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    };
    return CheckboxControlValueAccessor;
}());
CheckboxControlValueAccessor.decorators = [
    { type: Directive, args: [{
                selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',
                host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },
                providers: [CHECKBOX_VALUE_ACCESSOR]
            },] },
];
/**
 * @nocollapse
 */
CheckboxControlValueAccessor.ctorParameters = function () { return [
    { type: Renderer2, },
    { type: ElementRef, },
]; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var DEFAULT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return DefaultValueAccessor; }),
    multi: true
};
/**
 * We must check whether the agent is Android because composition events
 * behave differently between iOS and Android.
 * @return {?}
 */
function _isAndroid() {
    var /** @type {?} */ userAgent = getDOM() ? getDOM().getUserAgent() : '';
    return /android (\d+)/.test(userAgent.toLowerCase());
}
/**
 * Turn this mode on if you want form directives to buffer IME input until compositionend
 * \@experimental
 */
var COMPOSITION_BUFFER_MODE = new InjectionToken('CompositionEventMode');
/**
 * The default accessor for writing a value and listening to changes that is used by the
 * {\@link NgModel}, {\@link FormControlDirective}, and {\@link FormControlName} directives.
 *
 *  ### Example
 *  ```
 *  <input type="text" name="searchQuery" ngModel>
 *  ```
 *
 *  \@stable
 */
var DefaultValueAccessor = (function () {
    /**
     * @param {?} _renderer
     * @param {?} _elementRef
     * @param {?} _compositionMode
     */
    function DefaultValueAccessor(_renderer, _elementRef, _compositionMode) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this._compositionMode = _compositionMode;
        this.onChange = function (_) { };
        this.onTouched = function () { };
        /**
         * Whether the user is creating a composition string (IME events).
         */
        this._composing = false;
        if (this._compositionMode == null) {
            this._compositionMode = !_isAndroid();
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    DefaultValueAccessor.prototype.writeValue = function (value) {
        var /** @type {?} */ normalizedValue = value == null ? '' : value;
        this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
    /**
     * @param {?} fn
     * @return {?}
     */
    DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    DefaultValueAccessor.prototype.setDisabledState = function (isDisabled) {
        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DefaultValueAccessor.prototype._handleInput = function (value) {
        if (!this._compositionMode || (this._compositionMode && !this._composing)) {
            this.onChange(value);
        }
    };
    /**
     * @return {?}
     */
    DefaultValueAccessor.prototype._compositionStart = function () { this._composing = true; };
    /**
     * @param {?} value
     * @return {?}
     */
    DefaultValueAccessor.prototype._compositionEnd = function (value) {
        this._composing = false;
        this._compositionMode && this.onChange(value);
    };
    return DefaultValueAccessor;
}());
DefaultValueAccessor.decorators = [
    { type: Directive, args: [{
                selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',
                // TODO: vsavkin replace the above selector with the one below it once
                // https://github.com/angular/angular/issues/3011 is implemented
                // selector: '[ngModel],[formControl],[formControlName]',
                host: {
                    '(input)': '_handleInput($event.target.value)',
                    '(blur)': 'onTouched()',
                    '(compositionstart)': '_compositionStart()',
                    '(compositionend)': '_compositionEnd($event.target.value)'
                },
                providers: [DEFAULT_VALUE_ACCESSOR]
            },] },
];
/**
 * @nocollapse
 */
DefaultValueAccessor.ctorParameters = function () { return [
    { type: Renderer2, },
    { type: ElementRef, },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE,] },] },
]; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} validator
 * @return {?}
 */
function normalizeValidator(validator) {
    if (((validator)).validate) {
        return function (c) { return ((validator)).validate(c); };
    }
    else {
        return (validator);
    }
}
/**
 * @param {?} validator
 * @return {?}
 */
function normalizeAsyncValidator(validator) {
    if (((validator)).validate) {
        return function (c) { return ((validator)).validate(c); };
    }
    else {
        return (validator);
    }
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var NUMBER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NumberValueAccessor; }),
    multi: true
};
/**
 * The accessor for writing a number value and listening to changes that is used by the
 * {\@link NgModel}, {\@link FormControlDirective}, and {\@link FormControlName} directives.
 *
 *  ### Example
 *  ```
 *  <input type="number" [(ngModel)]="age">
 *  ```
 */
var NumberValueAccessor = (function () {
    /**
     * @param {?} _renderer
     * @param {?} _elementRef
     */
    function NumberValueAccessor(_renderer, _elementRef) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this.onChange = function (_) { };
        this.onTouched = function () { };
    }
    /**
     * @param {?} value
     * @return {?}
     */
    NumberValueAccessor.prototype.writeValue = function (value) {
        // The value needs to be normalized for IE9, otherwise it is set to 'null' when null
        var /** @type {?} */ normalizedValue = value == null ? '' : value;
        this._renderer.setProperty(this._elementRef.nativeElement, 'value', normalizedValue);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NumberValueAccessor.prototype.registerOnChange = function (fn) {
        this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    NumberValueAccessor.prototype.setDisabledState = function (isDisabled) {
        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    };
    return NumberValueAccessor;
}());
NumberValueAccessor.decorators = [
    { type: Directive, args: [{
                selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',
                host: {
                    '(change)': 'onChange($event.target.value)',
                    '(input)': 'onChange($event.target.value)',
                    '(blur)': 'onTouched()'
                },
                providers: [NUMBER_VALUE_ACCESSOR]
            },] },
];
/**
 * @nocollapse
 */
NumberValueAccessor.ctorParameters = function () { return [
    { type: Renderer2, },
    { type: ElementRef, },
]; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @return {?}
 */
function unimplemented() {
    throw new Error('unimplemented');
}
/**
 * A base class that all control directive extend.
 * It binds a {\@link FormControl} object to a DOM element.
 *
 * Used internally by Angular forms.
 *
 * \@stable
 * @abstract
 */
var NgControl = (function (_super) {
    __extends(NgControl, _super);
    function NgControl() {
        var _this = _super.apply(this, arguments) || this;
        /**
         * \@internal
         */
        _this._parent = null;
        _this.name = null;
        _this.valueAccessor = null;
        /**
         * \@internal
         */
        _this._rawValidators = [];
        /**
         * \@internal
         */
        _this._rawAsyncValidators = [];
        return _this;
    }
    Object.defineProperty(NgControl.prototype, "validator", {
        /**
         * @return {?}
         */
        get: function () { return (unimplemented()); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgControl.prototype, "asyncValidator", {
        /**
         * @return {?}
         */
        get: function () { return (unimplemented()); },
        enumerable: true,
        configurable: true
    });
    /**
     * @abstract
     * @param {?} newValue
     * @return {?}
     */
    NgControl.prototype.viewToModelUpdate = function (newValue) { };
    return NgControl;
}(AbstractControlDirective));
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var RADIO_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return RadioControlValueAccessor; }),
    multi: true
};
/**
 * Internal class used by Angular to uncheck radio buttons with the matching name.
 */
var RadioControlRegistry = (function () {
    function RadioControlRegistry() {
        this._accessors = [];
    }
    /**
     * @param {?} control
     * @param {?} accessor
     * @return {?}
     */
    RadioControlRegistry.prototype.add = function (control, accessor) {
        this._accessors.push([control, accessor]);
    };
    /**
     * @param {?} accessor
     * @return {?}
     */
    RadioControlRegistry.prototype.remove = function (accessor) {
        for (var /** @type {?} */ i = this._accessors.length - 1; i >= 0; --i) {
            if (this._accessors[i][1] === accessor) {
                this._accessors.splice(i, 1);
                return;
            }
        }
    };
    /**
     * @param {?} accessor
     * @return {?}
     */
    RadioControlRegistry.prototype.select = function (accessor) {
        var _this = this;
        this._accessors.forEach(function (c) {
            if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {
                c[1].fireUncheck(accessor.value);
            }
        });
    };
    /**
     * @param {?} controlPair
     * @param {?} accessor
     * @return {?}
     */
    RadioControlRegistry.prototype._isSameGroup = function (controlPair, accessor) {
        if (!controlPair[0].control)
            return false;
        return controlPair[0]._parent === accessor._control._parent &&
            controlPair[1].name === accessor.name;
    };
    return RadioControlRegistry;
}());
RadioControlRegistry.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
RadioControlRegistry.ctorParameters = function () { return []; };
/**
 * \@whatItDoes Writes radio control values and listens to radio control changes.
 *
 * Used by {\@link NgModel}, {\@link FormControlDirective}, and {\@link FormControlName}
 * to keep the view synced with the {\@link FormControl} model.
 *
 * \@howToUse
 *
 * If you have imported the {\@link FormsModule} or the {\@link ReactiveFormsModule}, this
 * value accessor will be active on any radio control that has a form directive. You do
 * **not** need to add a special selector to activate it.
 *
 * ### How to use radio buttons with form directives
 *
 * To use radio buttons in a template-driven form, you'll want to ensure that radio buttons
 * in the same group have the same `name` attribute.  Radio buttons with different `name`
 * attributes do not affect each other.
 *
 * {\@example forms/ts/radioButtons/radio_button_example.ts region='TemplateDriven'}
 *
 * When using radio buttons in a reactive form, radio buttons in the same group should have the
 * same `formControlName`. You can also add a `name` attribute, but it's optional.
 *
 * {\@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}
 *
 *  * **npm package**: `\@angular/forms`
 *
 *  \@stable
 */
var RadioControlValueAccessor = (function () {
    /**
     * @param {?} _renderer
     * @param {?} _elementRef
     * @param {?} _registry
     * @param {?} _injector
     */
    function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this._registry = _registry;
        this._injector = _injector;
        this.onChange = function () { };
        this.onTouched = function () { };
    }
    /**
     * @return {?}
     */
    RadioControlValueAccessor.prototype.ngOnInit = function () {
        this._control = this._injector.get(NgControl);
        this._checkName();
        this._registry.add(this._control, this);
    };
    /**
     * @return {?}
     */
    RadioControlValueAccessor.prototype.ngOnDestroy = function () { this._registry.remove(this); };
    /**
     * @param {?} value
     * @return {?}
     */
    RadioControlValueAccessor.prototype.writeValue = function (value) {
        this._state = value === this.value;
        this._renderer.setProperty(this._elementRef.nativeElement, 'checked', this._state);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    RadioControlValueAccessor.prototype.registerOnChange = function (fn) {
        var _this = this;
        this._fn = fn;
        this.onChange = function () {
            fn(_this.value);
            _this._registry.select(_this);
        };
    };
    /**
     * @param {?} value
     * @return {?}
     */
    RadioControlValueAccessor.prototype.fireUncheck = function (value) { this.writeValue(value); };
    /**
     * @param {?} fn
     * @return {?}
     */
    RadioControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    RadioControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    };
    /**
     * @return {?}
     */
    RadioControlValueAccessor.prototype._checkName = function () {
        if (this.name && this.formControlName && this.name !== this.formControlName) {
            this._throwNameError();
        }
        if (!this.name && this.formControlName)
            this.name = this.formControlName;
    };
    /**
     * @return {?}
     */
    RadioControlValueAccessor.prototype._throwNameError = function () {
        throw new Error("\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    ");
    };
    return RadioControlValueAccessor;
}());
RadioControlValueAccessor.decorators = [
    { type: Directive, args: [{
                selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',
                host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },
                providers: [RADIO_VALUE_ACCESSOR]
            },] },
];
/**
 * @nocollapse
 */
RadioControlValueAccessor.ctorParameters = function () { return [
    { type: Renderer2, },
    { type: ElementRef, },
    { type: RadioControlRegistry, },
    { type: Injector, },
]; };
RadioControlValueAccessor.propDecorators = {
    'name': [{ type: Input },],
    'formControlName': [{ type: Input },],
    'value': [{ type: Input },],
};
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var RANGE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return RangeValueAccessor; }),
    multi: true
};
/**
 * The accessor for writing a range value and listening to changes that is used by the
 * {\@link NgModel}, {\@link FormControlDirective}, and {\@link FormControlName} directives.
 *
 *  ### Example
 *  ```
 *  <input type="range" [(ngModel)]="age" >
 *  ```
 */
var RangeValueAccessor = (function () {
    /**
     * @param {?} _renderer
     * @param {?} _elementRef
     */
    function RangeValueAccessor(_renderer, _elementRef) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this.onChange = function (_) { };
        this.onTouched = function () { };
    }
    /**
     * @param {?} value
     * @return {?}
     */
    RangeValueAccessor.prototype.writeValue = function (value) {
        this._renderer.setProperty(this._elementRef.nativeElement, 'value', parseFloat(value));
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    RangeValueAccessor.prototype.registerOnChange = function (fn) {
        this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    RangeValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    RangeValueAccessor.prototype.setDisabledState = function (isDisabled) {
        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    };
    return RangeValueAccessor;
}());
RangeValueAccessor.decorators = [
    { type: Directive, args: [{
                selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',
                host: {
                    '(change)': 'onChange($event.target.value)',
                    '(input)': 'onChange($event.target.value)',
                    '(blur)': 'onTouched()'
                },
                providers: [RANGE_VALUE_ACCESSOR]
            },] },
];
/**
 * @nocollapse
 */
RangeValueAccessor.ctorParameters = function () { return [
    { type: Renderer2, },
    { type: ElementRef, },
]; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var SELECT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return SelectControlValueAccessor; }),
    multi: true
};
/**
 * @param {?} id
 * @param {?} value
 * @return {?}
 */
function _buildValueString(id, value) {
    if (id == null)
        return "" + value;
    if (value && typeof value === 'object')
        value = 'Object';
    return (id + ": " + value).slice(0, 50);
}
/**
 * @param {?} valueString
 * @return {?}
 */
function _extractId(valueString) {
    return valueString.split(':')[0];
}
/**
 * \@whatItDoes Writes values and listens to changes on a select element.
 *
 * Used by {\@link NgModel}, {\@link FormControlDirective}, and {\@link FormControlName}
 * to keep the view synced with the {\@link FormControl} model.
 *
 * \@howToUse
 *
 * If you have imported the {\@link FormsModule} or the {\@link ReactiveFormsModule}, this
 * value accessor will be active on any select control that has a form directive. You do
 * **not** need to add a special selector to activate it.
 *
 * ### How to use select controls with form directives
 *
 * To use a select in a template-driven form, simply add an `ngModel` and a `name`
 * attribute to the main `<select>` tag.
 *
 * If your option values are simple strings, you can bind to the normal `value` property
 * on the option.  If your option values happen to be objects (and you'd like to save the
 * selection in your form as an object), use `ngValue` instead:
 *
 * {\@example forms/ts/selectControl/select_control_example.ts region='Component'}
 *
 * In reactive forms, you'll also want to add your form directive (`formControlName` or
 * `formControl`) on the main `<select>` tag. Like in the former example, you have the
 * choice of binding to the  `value` or `ngValue` property on the select's options.
 *
 * {\@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}
 *
 * ### Caveat: Option selection
 *
 * Angular uses object identity to select option. It's possible for the identities of items
 * to change while the data does not. This can happen, for example, if the items are produced
 * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the
 * second response will produce objects with different identities.
 *
 * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.
 * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.
 * If `compareWith` is given, Angular selects option by the return value of the function.
 *
 * #### Syntax
 *
 * ```
 * <select [compareWith]="compareFn"  [(ngModel)]="selectedCountries">
 *     <option *ngFor="let country of countries" [ngValue]="country">
 *         {{country.name}}
 *     </option>
 * </select>
 *
 * compareFn(c1: Country, c2: Country): boolean {
 *     return c1 && c2 ? c1.id === c2.id : c1 === c2;
 * }
 * ```
 *
 * Note: We listen to the 'change' event because 'input' events aren't fired
 * for selects in Firefox and IE:
 * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350
 * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/
 *
 * * **npm package**: `\@angular/forms`
 *
 * \@stable
 */
var SelectControlValueAccessor = (function () {
    /**
     * @param {?} _renderer
     * @param {?} _elementRef
     */
    function SelectControlValueAccessor(_renderer, _elementRef) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        /**
         * \@internal
         */
        this._optionMap = new Map();
        /**
         * \@internal
         */
        this._idCounter = 0;
        this.onChange = function (_) { };
        this.onTouched = function () { };
        this._compareWith = looseIdentical;
    }
    Object.defineProperty(SelectControlValueAccessor.prototype, "compareWith", {
        /**
         * @param {?} fn
         * @return {?}
         */
        set: function (fn) {
            if (typeof fn !== 'function') {
                throw new Error("compareWith must be a function, but received " + JSON.stringify(fn));
            }
            this._compareWith = fn;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    SelectControlValueAccessor.prototype.writeValue = function (value) {
        this.value = value;
        var /** @type {?} */ id = this._getOptionId(value);
        if (id == null) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'selectedIndex', -1);
        }
        var /** @type {?} */ valueString = _buildValueString(id, value);
        this._renderer.setProperty(this._elementRef.nativeElement, 'value', valueString);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    SelectControlValueAccessor.prototype.registerOnChange = function (fn) {
        var _this = this;
        this.onChange = function (valueString) {
            _this.value = valueString;
            fn(_this._getOptionValue(valueString));
        };
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    SelectControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    };
    /**
     * \@internal
     * @return {?}
     */
    SelectControlValueAccessor.prototype._registerOption = function () { return (this._idCounter++).toString(); };
    /**
     * \@internal
     * @param {?} value
     * @return {?}
     */
    SelectControlValueAccessor.prototype._getOptionId = function (value) {
        for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {
            var id = _a[_i];
            if (this._compareWith(this._optionMap.get(id), value))
                return id;
        }
        return null;
    };
    /**
     * \@internal
     * @param {?} valueString
     * @return {?}
     */
    SelectControlValueAccessor.prototype._getOptionValue = function (valueString) {
        var /** @type {?} */ id = _extractId(valueString);
        return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;
    };
    return SelectControlValueAccessor;
}());
SelectControlValueAccessor.decorators = [
    { type: Directive, args: [{
                selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',
                host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },
                providers: [SELECT_VALUE_ACCESSOR]
            },] },
];
/**
 * @nocollapse
 */
SelectControlValueAccessor.ctorParameters = function () { return [
    { type: Renderer2, },
    { type: ElementRef, },
]; };
SelectControlValueAccessor.propDecorators = {
    'compareWith': [{ type: Input },],
};
/**
 * \@whatItDoes Marks `<option>` as dynamic, so Angular can be notified when options change.
 *
 * \@howToUse
 *
 * See docs for {\@link SelectControlValueAccessor} for usage examples.
 *
 * \@stable
 */
var NgSelectOption = (function () {
    /**
     * @param {?} _element
     * @param {?} _renderer
     * @param {?} _select
     */
    function NgSelectOption(_element, _renderer, _select) {
        this._element = _element;
        this._renderer = _renderer;
        this._select = _select;
        if (this._select)
            this.id = this._select._registerOption();
    }
    Object.defineProperty(NgSelectOption.prototype, "ngValue", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            if (this._select == null)
                return;
            this._select._optionMap.set(this.id, value);
            this._setElementValue(_buildValueString(this.id, value));
            this._select.writeValue(this._select.value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgSelectOption.prototype, "value", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this._setElementValue(value);
            if (this._select)
                this._select.writeValue(this._select.value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * \@internal
     * @param {?} value
     * @return {?}
     */
    NgSelectOption.prototype._setElementValue = function (value) {
        this._renderer.setProperty(this._element.nativeElement, 'value', value);
    };
    /**
     * @return {?}
     */
    NgSelectOption.prototype.ngOnDestroy = function () {
        if (this._select) {
            this._select._optionMap.delete(this.id);
            this._select.writeValue(this._select.value);
        }
    };
    return NgSelectOption;
}());
NgSelectOption.decorators = [
    { type: Directive, args: [{ selector: 'option' },] },
];
/**
 * @nocollapse
 */
NgSelectOption.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: SelectControlValueAccessor, decorators: [{ type: Optional }, { type: Host },] },
]; };
NgSelectOption.propDecorators = {
    'ngValue': [{ type: Input, args: ['ngValue',] },],
    'value': [{ type: Input, args: ['value',] },],
};
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var SELECT_MULTIPLE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return SelectMultipleControlValueAccessor; }),
    multi: true
};
/**
 * @param {?} id
 * @param {?} value
 * @return {?}
 */
function _buildValueString$1(id, value) {
    if (id == null)
        return "" + value;
    if (typeof value === 'string')
        value = "'" + value + "'";
    if (value && typeof value === 'object')
        value = 'Object';
    return (id + ": " + value).slice(0, 50);
}
/**
 * @param {?} valueString
 * @return {?}
 */
function _extractId$1(valueString) {
    return valueString.split(':')[0];
}
/**
 * The accessor for writing a value and listening to changes on a select element.
 *
 *  ### Caveat: Options selection
 *
 * Angular uses object identity to select options. It's possible for the identities of items
 * to change while the data does not. This can happen, for example, if the items are produced
 * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the
 * second response will produce objects with different identities.
 *
 * To customize the default option comparison algorithm, `<select multiple>` supports `compareWith`
 * input. `compareWith` takes a **function** which has two arguments: `option1` and `option2`.
 * If `compareWith` is given, Angular selects options by the return value of the function.
 *
 * #### Syntax
 *
 * ```
 * <select multiple [compareWith]="compareFn"  [(ngModel)]="selectedCountries">
 *     <option *ngFor="let country of countries" [ngValue]="country">
 *         {{country.name}}
 *     </option>
 * </select>
 *
 * compareFn(c1: Country, c2: Country): boolean {
 *     return c1 && c2 ? c1.id === c2.id : c1 === c2;
 * }
 * ```
 *
 * \@stable
 */
var SelectMultipleControlValueAccessor = (function () {
    /**
     * @param {?} _renderer
     * @param {?} _elementRef
     */
    function SelectMultipleControlValueAccessor(_renderer, _elementRef) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        /**
         * \@internal
         */
        this._optionMap = new Map();
        /**
         * \@internal
         */
        this._idCounter = 0;
        this.onChange = function (_) { };
        this.onTouched = function () { };
        this._compareWith = looseIdentical;
    }
    Object.defineProperty(SelectMultipleControlValueAccessor.prototype, "compareWith", {
        /**
         * @param {?} fn
         * @return {?}
         */
        set: function (fn) {
            if (typeof fn !== 'function') {
                throw new Error("compareWith must be a function, but received " + JSON.stringify(fn));
            }
            this._compareWith = fn;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    SelectMultipleControlValueAccessor.prototype.writeValue = function (value) {
        var _this = this;
        this.value = value;
        var /** @type {?} */ optionSelectedStateSetter;
        if (Array.isArray(value)) {
            // convert values to ids
            var /** @type {?} */ ids_1 = value.map(function (v) { return _this._getOptionId(v); });
            optionSelectedStateSetter = function (opt, o) { opt._setSelected(ids_1.indexOf(o.toString()) > -1); };
        }
        else {
            optionSelectedStateSetter = function (opt, o) { opt._setSelected(false); };
        }
        this._optionMap.forEach(optionSelectedStateSetter);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    SelectMultipleControlValueAccessor.prototype.registerOnChange = function (fn) {
        var _this = this;
        this.onChange = function (_) {
            var /** @type {?} */ selected = [];
            if (_.hasOwnProperty('selectedOptions')) {
                var /** @type {?} */ options = _.selectedOptions;
                for (var /** @type {?} */ i = 0; i < options.length; i++) {
                    var /** @type {?} */ opt = options.item(i);
                    var /** @type {?} */ val = _this._getOptionValue(opt.value);
                    selected.push(val);
                }
            }
            else {
                var /** @type {?} */ options = (_.options);
                for (var /** @type {?} */ i = 0; i < options.length; i++) {
                    var /** @type {?} */ opt = options.item(i);
                    if (opt.selected) {
                        var /** @type {?} */ val = _this._getOptionValue(opt.value);
                        selected.push(val);
                    }
                }
            }
            _this.value = selected;
            fn(selected);
        };
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    SelectMultipleControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    SelectMultipleControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    };
    /**
     * \@internal
     * @param {?} value
     * @return {?}
     */
    SelectMultipleControlValueAccessor.prototype._registerOption = function (value) {
        var /** @type {?} */ id = (this._idCounter++).toString();
        this._optionMap.set(id, value);
        return id;
    };
    /**
     * \@internal
     * @param {?} value
     * @return {?}
     */
    SelectMultipleControlValueAccessor.prototype._getOptionId = function (value) {
        for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {
            var id = _a[_i];
            if (this._compareWith(/** @type {?} */ ((this._optionMap.get(id)))._value, value))
                return id;
        }
        return null;
    };
    /**
     * \@internal
     * @param {?} valueString
     * @return {?}
     */
    SelectMultipleControlValueAccessor.prototype._getOptionValue = function (valueString) {
        var /** @type {?} */ id = _extractId$1(valueString);
        return this._optionMap.has(id) ? ((this._optionMap.get(id)))._value : valueString;
    };
    return SelectMultipleControlValueAccessor;
}());
SelectMultipleControlValueAccessor.decorators = [
    { type: Directive, args: [{
                selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',
                host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },
                providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]
            },] },
];
/**
 * @nocollapse
 */
SelectMultipleControlValueAccessor.ctorParameters = function () { return [
    { type: Renderer2, },
    { type: ElementRef, },
]; };
SelectMultipleControlValueAccessor.propDecorators = {
    'compareWith': [{ type: Input },],
};
/**
 * Marks `<option>` as dynamic, so Angular can be notified when options change.
 *
 * ### Example
 *
 * ```
 * <select multiple name="city" ngModel>
 *   <option *ngFor="let c of cities" [value]="c"></option>
 * </select>
 * ```
 */
var NgSelectMultipleOption = (function () {
    /**
     * @param {?} _element
     * @param {?} _renderer
     * @param {?} _select
     */
    function NgSelectMultipleOption(_element, _renderer, _select) {
        this._element = _element;
        this._renderer = _renderer;
        this._select = _select;
        if (this._select) {
            this.id = this._select._registerOption(this);
        }
    }
    Object.defineProperty(NgSelectMultipleOption.prototype, "ngValue", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            if (this._select == null)
                return;
            this._value = value;
            this._setElementValue(_buildValueString$1(this.id, value));
            this._select.writeValue(this._select.value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgSelectMultipleOption.prototype, "value", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            if (this._select) {
                this._value = value;
                this._setElementValue(_buildValueString$1(this.id, value));
                this._select.writeValue(this._select.value);
            }
            else {
                this._setElementValue(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * \@internal
     * @param {?} value
     * @return {?}
     */
    NgSelectMultipleOption.prototype._setElementValue = function (value) {
        this._renderer.setProperty(this._element.nativeElement, 'value', value);
    };
    /**
     * \@internal
     * @param {?} selected
     * @return {?}
     */
    NgSelectMultipleOption.prototype._setSelected = function (selected) {
        this._renderer.setProperty(this._element.nativeElement, 'selected', selected);
    };
    /**
     * @return {?}
     */
    NgSelectMultipleOption.prototype.ngOnDestroy = function () {
        if (this._select) {
            this._select._optionMap.delete(this.id);
            this._select.writeValue(this._select.value);
        }
    };
    return NgSelectMultipleOption;
}());
NgSelectMultipleOption.decorators = [
    { type: Directive, args: [{ selector: 'option' },] },
];
/**
 * @nocollapse
 */
NgSelectMultipleOption.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: SelectMultipleControlValueAccessor, decorators: [{ type: Optional }, { type: Host },] },
]; };
NgSelectMultipleOption.propDecorators = {
    'ngValue': [{ type: Input, args: ['ngValue',] },],
    'value': [{ type: Input, args: ['value',] },],
};
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} name
 * @param {?} parent
 * @return {?}
 */
function controlPath(name, parent) {
    return ((parent.path)).concat([name]);
}
/**
 * @param {?} control
 * @param {?} dir
 * @return {?}
 */
function setUpControl(control, dir) {
    if (!control)
        _throwError$1(dir, 'Cannot find control with');
    if (!dir.valueAccessor)
        _throwError$1(dir, 'No value accessor for form control with');
    control.validator = Validators.compose([/** @type {?} */ ((control.validator)), dir.validator]);
    control.asyncValidator = Validators.composeAsync([/** @type {?} */ ((control.asyncValidator)), dir.asyncValidator]); /** @type {?} */
    ((dir.valueAccessor)).writeValue(control.value); /** @type {?} */
    ((
    // view -> model
    dir.valueAccessor)).registerOnChange(function (newValue) {
        dir.viewToModelUpdate(newValue);
        control.markAsDirty();
        control.setValue(newValue, { emitModelToViewChange: false });
    }); /** @type {?} */
    ((
    // touched
    dir.valueAccessor)).registerOnTouched(function () { return control.markAsTouched(); });
    control.registerOnChange(function (newValue, emitModelEvent) {
        ((
        // control -> view
        dir.valueAccessor)).writeValue(newValue);
        // control -> ngModel
        if (emitModelEvent)
            dir.viewToModelUpdate(newValue);
    });
    if (((dir.valueAccessor)).setDisabledState) {
        control.registerOnDisabledChange(function (isDisabled) { /** @type {?} */ ((((dir.valueAccessor)).setDisabledState))(isDisabled); });
    }
    // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4
    dir._rawValidators.forEach(function (validator) {
        if (((validator)).registerOnValidatorChange)
            ((((validator)).registerOnValidatorChange))(function () { return control.updateValueAndValidity(); });
    });
    dir._rawAsyncValidators.forEach(function (validator) {
        if (((validator)).registerOnValidatorChange)
            ((((validator)).registerOnValidatorChange))(function () { return control.updateValueAndValidity(); });
    });
}
/**
 * @param {?} control
 * @param {?} dir
 * @return {?}
 */
function cleanUpControl(control, dir) {
    ((dir.valueAccessor)).registerOnChange(function () { return _noControlError(dir); }); /** @type {?} */
    ((dir.valueAccessor)).registerOnTouched(function () { return _noControlError(dir); });
    dir._rawValidators.forEach(function (validator) {
        if (validator.registerOnValidatorChange) {
            validator.registerOnValidatorChange(null);
        }
    });
    dir._rawAsyncValidators.forEach(function (validator) {
        if (validator.registerOnValidatorChange) {
            validator.registerOnValidatorChange(null);
        }
    });
    if (control)
        control._clearChangeFns();
}
/**
 * @param {?} control
 * @param {?} dir
 * @return {?}
 */
function setUpFormContainer(control, dir) {
    if (control == null)
        _throwError$1(dir, 'Cannot find control with');
    control.validator = Validators.compose([control.validator, dir.validator]);
    control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
}
/**
 * @param {?} dir
 * @return {?}
 */
function _noControlError(dir) {
    return _throwError$1(dir, 'There is no FormControl instance attached to form control element with');
}
/**
 * @param {?} dir
 * @param {?} message
 * @return {?}
 */
function _throwError$1(dir, message) {
    var /** @type {?} */ messageEnd;
    if (((dir.path)).length > 1) {
        messageEnd = "path: '" + ((dir.path)).join(' -> ') + "'";
    }
    else if (((dir.path))[0]) {
        messageEnd = "name: '" + dir.path + "'";
    }
    else {
        messageEnd = 'unspecified name attribute';
    }
    throw new Error(message + " " + messageEnd);
}
/**
 * @param {?} validators
 * @return {?}
 */
function composeValidators(validators) {
    return validators != null ? Validators.compose(validators.map(normalizeValidator)) : null;
}
/**
 * @param {?} validators
 * @return {?}
 */
function composeAsyncValidators(validators) {
    return validators != null ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :
        null;
}
/**
 * @param {?} changes
 * @param {?} viewModel
 * @return {?}
 */
function isPropertyUpdated(changes, viewModel) {
    if (!changes.hasOwnProperty('model'))
        return false;
    var /** @type {?} */ change = changes['model'];
    if (change.isFirstChange())
        return true;
    return !looseIdentical(viewModel, change.currentValue);
}
var BUILTIN_ACCESSORS = [
    CheckboxControlValueAccessor,
    RangeValueAccessor,
    NumberValueAccessor,
    SelectControlValueAccessor,
    SelectMultipleControlValueAccessor,
    RadioControlValueAccessor,
];
/**
 * @param {?} valueAccessor
 * @return {?}
 */
function isBuiltInAccessor(valueAccessor) {
    return BUILTIN_ACCESSORS.some(function (a) { return valueAccessor.constructor === a; });
}
/**
 * @param {?} dir
 * @param {?} valueAccessors
 * @return {?}
 */
function selectValueAccessor(dir, valueAccessors) {
    if (!valueAccessors)
        return null;
    var /** @type {?} */ defaultAccessor = undefined;
    var /** @type {?} */ builtinAccessor = undefined;
    var /** @type {?} */ customAccessor = undefined;
    valueAccessors.forEach(function (v) {
        if (v.constructor === DefaultValueAccessor) {
            defaultAccessor = v;
        }
        else if (isBuiltInAccessor(v)) {
            if (builtinAccessor)
                _throwError$1(dir, 'More than one built-in value accessor matches form control with');
            builtinAccessor = v;
        }
        else {
            if (customAccessor)
                _throwError$1(dir, 'More than one custom value accessor matches form control with');
            customAccessor = v;
        }
    });
    if (customAccessor)
        return customAccessor;
    if (builtinAccessor)
        return builtinAccessor;
    if (defaultAccessor)
        return defaultAccessor;
    _throwError$1(dir, 'No valid value accessor for form control with');
    return null;
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * This is a base class for code shared between {\@link NgModelGroup} and {\@link FormGroupName}.
 *
 * \@stable
 */
var AbstractFormGroupDirective = (function (_super) {
    __extends(AbstractFormGroupDirective, _super);
    function AbstractFormGroupDirective() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    AbstractFormGroupDirective.prototype.ngOnInit = function () {
        this._checkParentType(); /** @type {?} */
        ((this.formDirective)).addFormGroup(this);
    };
    /**
     * @return {?}
     */
    AbstractFormGroupDirective.prototype.ngOnDestroy = function () {
        if (this.formDirective) {
            this.formDirective.removeFormGroup(this);
        }
    };
    Object.defineProperty(AbstractFormGroupDirective.prototype, "control", {
        /**
         * Get the {\@link FormGroup} backing this binding.
         * @return {?}
         */
        get: function () { return ((this.formDirective)).getFormGroup(this); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractFormGroupDirective.prototype, "path", {
        /**
         * Get the path to this control group.
         * @return {?}
         */
        get: function () { return controlPath(this.name, this._parent); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractFormGroupDirective.prototype, "formDirective", {
        /**
         * Get the {\@link Form} to which this group belongs.
         * @return {?}
         */
        get: function () { return this._parent ? this._parent.formDirective : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractFormGroupDirective.prototype, "validator", {
        /**
         * @return {?}
         */
        get: function () { return composeValidators(this._validators); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractFormGroupDirective.prototype, "asyncValidator", {
        /**
         * @return {?}
         */
        get: function () {
            return composeAsyncValidators(this._asyncValidators);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * \@internal
     * @return {?}
     */
    AbstractFormGroupDirective.prototype._checkParentType = function () { };
    return AbstractFormGroupDirective;
}(ControlContainer));
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var AbstractControlStatus = (function () {
    /**
     * @param {?} cd
     */
    function AbstractControlStatus(cd) {
        this._cd = cd;
    }
    Object.defineProperty(AbstractControlStatus.prototype, "ngClassUntouched", {
        /**
         * @return {?}
         */
        get: function () { return this._cd.control ? this._cd.control.untouched : false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlStatus.prototype, "ngClassTouched", {
        /**
         * @return {?}
         */
        get: function () { return this._cd.control ? this._cd.control.touched : false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlStatus.prototype, "ngClassPristine", {
        /**
         * @return {?}
         */
        get: function () { return this._cd.control ? this._cd.control.pristine : false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlStatus.prototype, "ngClassDirty", {
        /**
         * @return {?}
         */
        get: function () { return this._cd.control ? this._cd.control.dirty : false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlStatus.prototype, "ngClassValid", {
        /**
         * @return {?}
         */
        get: function () { return this._cd.control ? this._cd.control.valid : false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlStatus.prototype, "ngClassInvalid", {
        /**
         * @return {?}
         */
        get: function () { return this._cd.control ? this._cd.control.invalid : false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControlStatus.prototype, "ngClassPending", {
        /**
         * @return {?}
         */
        get: function () { return this._cd.control ? this._cd.control.pending : false; },
        enumerable: true,
        configurable: true
    });
    return AbstractControlStatus;
}());
var ngControlStatusHost = {
    '[class.ng-untouched]': 'ngClassUntouched',
    '[class.ng-touched]': 'ngClassTouched',
    '[class.ng-pristine]': 'ngClassPristine',
    '[class.ng-dirty]': 'ngClassDirty',
    '[class.ng-valid]': 'ngClassValid',
    '[class.ng-invalid]': 'ngClassInvalid',
    '[class.ng-pending]': 'ngClassPending',
};
/**
 * Directive automatically applied to Angular form controls that sets CSS classes
 * based on control status (valid/invalid/dirty/etc).
 *
 * \@stable
 */
var NgControlStatus = (function (_super) {
    __extends(NgControlStatus, _super);
    /**
     * @param {?} cd
     */
    function NgControlStatus(cd) {
        return _super.call(this, cd) || this;
    }
    return NgControlStatus;
}(AbstractControlStatus));
NgControlStatus.decorators = [
    { type: Directive, args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost },] },
];
/**
 * @nocollapse
 */
NgControlStatus.ctorParameters = function () { return [
    { type: NgControl, decorators: [{ type: Self },] },
]; };
/**
 * Directive automatically applied to Angular form groups that sets CSS classes
 * based on control status (valid/invalid/dirty/etc).
 *
 * \@stable
 */
var NgControlStatusGroup = (function (_super) {
    __extends(NgControlStatusGroup, _super);
    /**
     * @param {?} cd
     */
    function NgControlStatusGroup(cd) {
        return _super.call(this, cd) || this;
    }
    return NgControlStatusGroup;
}(AbstractControlStatus));
NgControlStatusGroup.decorators = [
    { type: Directive, args: [{
                selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',
                host: ngControlStatusHost
            },] },
];
/**
 * @nocollapse
 */
NgControlStatusGroup.ctorParameters = function () { return [
    { type: ControlContainer, decorators: [{ type: Self },] },
]; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Indicates that a FormControl is valid, i.e. that no errors exist in the input value.
 */
var VALID = 'VALID';
/**
 * Indicates that a FormControl is invalid, i.e. that an error exists in the input value.
 */
var INVALID = 'INVALID';
/**
 * Indicates that a FormControl is pending, i.e. that async validation is occurring and
 * errors are not yet available for the input value.
 */
var PENDING = 'PENDING';
/**
 * Indicates that a FormControl is disabled, i.e. that the control is exempt from ancestor
 * calculations of validity or value.
 */
var DISABLED = 'DISABLED';
/**
 * @param {?} control
 * @param {?} path
 * @param {?} delimiter
 * @return {?}
 */
function _find(control, path, delimiter) {
    if (path == null)
        return null;
    if (!(path instanceof Array)) {
        path = ((path)).split(delimiter);
    }
    if (path instanceof Array && (path.length === 0))
        return null;
    return ((path)).reduce(function (v, name) {
        if (v instanceof FormGroup) {
            return v.controls[name] || null;
        }
        if (v instanceof FormArray) {
            return v.at(/** @type {?} */ (name)) || null;
        }
        return null;
    }, control);
}
/**
 * @param {?=} validator
 * @return {?}
 */
function coerceToValidator(validator) {
    return Array.isArray(validator) ? composeValidators(validator) : validator || null;
}
/**
 * @param {?=} asyncValidator
 * @return {?}
 */
function coerceToAsyncValidator(asyncValidator) {
    return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) :
        asyncValidator || null;
}
/**
 * \@whatItDoes This is the base class for {\@link FormControl}, {\@link FormGroup}, and
 * {\@link FormArray}.
 *
 * It provides some of the shared behavior that all controls and groups of controls have, like
 * running validators, calculating status, and resetting state. It also defines the properties
 * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be
 * instantiated directly.
 *
 * \@stable
 * @abstract
 */
var AbstractControl = (function () {
    /**
     * @param {?} validator
     * @param {?} asyncValidator
     */
    function AbstractControl(validator, asyncValidator) {
        this.validator = validator;
        this.asyncValidator = asyncValidator;
        /**
         * \@internal
         */
        this._onCollectionChange = function () { };
        this._pristine = true;
        this._touched = false;
        /**
         * \@internal
         */
        this._onDisabledChange = [];
    }
    Object.defineProperty(AbstractControl.prototype, "value", {
        /**
         * The value of the control.
         * @return {?}
         */
        get: function () { return this._value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "parent", {
        /**
         * The parent control.
         * @return {?}
         */
        get: function () { return this._parent; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "status", {
        /**
         * The validation status of the control. There are four possible
         * validation statuses:
         *
         * * **VALID**:  control has passed all validation checks
         * * **INVALID**: control has failed at least one validation check
         * * **PENDING**: control is in the midst of conducting a validation check
         * * **DISABLED**: control is exempt from validation checks
         *
         * These statuses are mutually exclusive, so a control cannot be
         * both valid AND invalid or invalid AND disabled.
         * @return {?}
         */
        get: function () { return this._status; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "valid", {
        /**
         * A control is `valid` when its `status === VALID`.
         *
         * In order to have this status, the control must have passed all its
         * validation checks.
         * @return {?}
         */
        get: function () { return this._status === VALID; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "invalid", {
        /**
         * A control is `invalid` when its `status === INVALID`.
         *
         * In order to have this status, the control must have failed
         * at least one of its validation checks.
         * @return {?}
         */
        get: function () { return this._status === INVALID; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "pending", {
        /**
         * A control is `pending` when its `status === PENDING`.
         *
         * In order to have this status, the control must be in the
         * middle of conducting a validation check.
         * @return {?}
         */
        get: function () { return this._status == PENDING; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "disabled", {
        /**
         * A control is `disabled` when its `status === DISABLED`.
         *
         * Disabled controls are exempt from validation checks and
         * are not included in the aggregate value of their ancestor
         * controls.
         * @return {?}
         */
        get: function () { return this._status === DISABLED; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "enabled", {
        /**
         * A control is `enabled` as long as its `status !== DISABLED`.
         *
         * In other words, it has a status of `VALID`, `INVALID`, or
         * `PENDING`.
         * @return {?}
         */
        get: function () { return this._status !== DISABLED; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "errors", {
        /**
         * Returns any errors generated by failing validation. If there
         * are no errors, it will return null.
         * @return {?}
         */
        get: function () { return this._errors; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "pristine", {
        /**
         * A control is `pristine` if the user has not yet changed
         * the value in the UI.
         *
         * Note that programmatic changes to a control's value will
         * *not* mark it dirty.
         * @return {?}
         */
        get: function () { return this._pristine; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "dirty", {
        /**
         * A control is `dirty` if the user has changed the value
         * in the UI.
         *
         * Note that programmatic changes to a control's value will
         * *not* mark it dirty.
         * @return {?}
         */
        get: function () { return !this.pristine; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "touched", {
        /**
         * A control is marked `touched` once the user has triggered
         * a `blur` event on it.
         * @return {?}
         */
        get: function () { return this._touched; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "untouched", {
        /**
         * A control is `untouched` if the user has not yet triggered
         * a `blur` event on it.
         * @return {?}
         */
        get: function () { return !this._touched; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "valueChanges", {
        /**
         * Emits an event every time the value of the control changes, in
         * the UI or programmatically.
         * @return {?}
         */
        get: function () { return this._valueChanges; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractControl.prototype, "statusChanges", {
        /**
         * Emits an event every time the validation status of the control
         * is re-calculated.
         * @return {?}
         */
        get: function () { return this._statusChanges; },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets the synchronous validators that are active on this control.  Calling
     * this will overwrite any existing sync validators.
     * @param {?} newValidator
     * @return {?}
     */
    AbstractControl.prototype.setValidators = function (newValidator) {
        this.validator = coerceToValidator(newValidator);
    };
    /**
     * Sets the async validators that are active on this control. Calling this
     * will overwrite any existing async validators.
     * @param {?} newValidator
     * @return {?}
     */
    AbstractControl.prototype.setAsyncValidators = function (newValidator) {
        this.asyncValidator = coerceToAsyncValidator(newValidator);
    };
    /**
     * Empties out the sync validator list.
     * @return {?}
     */
    AbstractControl.prototype.clearValidators = function () { this.validator = null; };
    /**
     * Empties out the async validator list.
     * @return {?}
     */
    AbstractControl.prototype.clearAsyncValidators = function () { this.asyncValidator = null; };
    /**
     * Marks the control as `touched`.
     *
     * This will also mark all direct ancestors as `touched` to maintain
     * the model.
     * @param {?=} opts
     * @return {?}
     */
    AbstractControl.prototype.markAsTouched = function (opts) {
        if (opts === void 0) { opts = {}; }
        this._touched = true;
        if (this._parent && !opts.onlySelf) {
            this._parent.markAsTouched(opts);
        }
    };
    /**
     * Marks the control as `untouched`.
     *
     * If the control has any children, it will also mark all children as `untouched`
     * to maintain the model, and re-calculate the `touched` status of all parent
     * controls.
     * @param {?=} opts
     * @return {?}
     */
    AbstractControl.prototype.markAsUntouched = function (opts) {
        if (opts === void 0) { opts = {}; }
        this._touched = false;
        this._forEachChild(function (control) { control.markAsUntouched({ onlySelf: true }); });
        if (this._parent && !opts.onlySelf) {
            this._parent._updateTouched(opts);
        }
    };
    /**
     * Marks the control as `dirty`.
     *
     * This will also mark all direct ancestors as `dirty` to maintain
     * the model.
     * @param {?=} opts
     * @return {?}
     */
    AbstractControl.prototype.markAsDirty = function (opts) {
        if (opts === void 0) { opts = {}; }
        this._pristine = false;
        if (this._parent && !opts.onlySelf) {
            this._parent.markAsDirty(opts);
        }
    };
    /**
     * Marks the control as `pristine`.
     *
     * If the control has any children, it will also mark all children as `pristine`
     * to maintain the model, and re-calculate the `pristine` status of all parent
     * controls.
     * @param {?=} opts
     * @return {?}
     */
    AbstractControl.prototype.markAsPristine = function (opts) {
        if (opts === void 0) { opts = {}; }
        this._pristine = true;
        this._forEachChild(function (control) { control.markAsPristine({ onlySelf: true }); });
        if (this._parent && !opts.onlySelf) {
            this._parent._updatePristine(opts);
        }
    };
    /**
     * Marks the control as `pending`.
     * @param {?=} opts
     * @return {?}
     */
    AbstractControl.prototype.markAsPending = function (opts) {
        if (opts === void 0) { opts = {}; }
        this._status = PENDING;
        if (this._parent && !opts.onlySelf) {
            this._parent.markAsPending(opts);
        }
    };
    /**
     * Disables the control. This means the control will be exempt from validation checks and
     * excluded from the aggregate value of any parent. Its status is `DISABLED`.
     *
     * If the control has children, all children will be disabled to maintain the model.
     * @param {?=} opts
     * @return {?}
     */
    AbstractControl.prototype.disable = function (opts) {
        if (opts === void 0) { opts = {}; }
        this._status = DISABLED;
        this._errors = null;
        this._forEachChild(function (control) { control.disable({ onlySelf: true }); });
        this._updateValue();
        if (opts.emitEvent !== false) {
            this._valueChanges.emit(this._value);
            this._statusChanges.emit(this._status);
        }
        this._updateAncestors(!!opts.onlySelf);
        this._onDisabledChange.forEach(function (changeFn) { return changeFn(true); });
    };
    /**
     * Enables the control. This means the control will be included in validation checks and
     * the aggregate value of its parent. Its status is re-calculated based on its value and
     * its validators.
     *
     * If the control has children, all children will be enabled.
     * @param {?=} opts
     * @return {?}
     */
    AbstractControl.prototype.enable = function (opts) {
        if (opts === void 0) { opts = {}; }
        this._status = VALID;
        this._forEachChild(function (control) { control.enable({ onlySelf: true }); });
        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });
        this._updateAncestors(!!opts.onlySelf);
        this._onDisabledChange.forEach(function (changeFn) { return changeFn(false); });
    };
    /**
     * @param {?} onlySelf
     * @return {?}
     */
    AbstractControl.prototype._updateAncestors = function (onlySelf) {
        if (this._parent && !onlySelf) {
            this._parent.updateValueAndValidity();
            this._parent._updatePristine();
            this._parent._updateTouched();
        }
    };
    /**
     * @param {?} parent
     * @return {?}
     */
    AbstractControl.prototype.setParent = function (parent) { this._parent = parent; };
    /**
     * Sets the value of the control. Abstract method (implemented in sub-classes).
     * @abstract
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    AbstractControl.prototype.setValue = function (value, options) { };
    /**
     * Patches the value of the control. Abstract method (implemented in sub-classes).
     * @abstract
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    AbstractControl.prototype.patchValue = function (value, options) { };
    /**
     * Resets the control. Abstract method (implemented in sub-classes).
     * @abstract
     * @param {?=} value
     * @param {?=} options
     * @return {?}
     */
    AbstractControl.prototype.reset = function (value, options) { };
    /**
     * Re-calculates the value and validation status of the control.
     *
     * By default, it will also update the value and validity of its ancestors.
     * @param {?=} opts
     * @return {?}
     */
    AbstractControl.prototype.updateValueAndValidity = function (opts) {
        if (opts === void 0) { opts = {}; }
        this._setInitialStatus();
        this._updateValue();
        if (this.enabled) {
            this._cancelExistingSubscription();
            this._errors = this._runValidator();
            this._status = this._calculateStatus();
            if (this._status === VALID || this._status === PENDING) {
                this._runAsyncValidator(opts.emitEvent);
            }
        }
        if (opts.emitEvent !== false) {
            this._valueChanges.emit(this._value);
            this._statusChanges.emit(this._status);
        }
        if (this._parent && !opts.onlySelf) {
            this._parent.updateValueAndValidity(opts);
        }
    };
    /**
     * \@internal
     * @param {?=} opts
     * @return {?}
     */
    AbstractControl.prototype._updateTreeValidity = function (opts) {
        if (opts === void 0) { opts = { emitEvent: true }; }
        this._forEachChild(function (ctrl) { return ctrl._updateTreeValidity(opts); });
        this.updateValueAndValidity({ onlySelf: true, emitEvent: opts.emitEvent });
    };
    /**
     * @return {?}
     */
    AbstractControl.prototype._setInitialStatus = function () { this._status = this._allControlsDisabled() ? DISABLED : VALID; };
    /**
     * @return {?}
     */
    AbstractControl.prototype._runValidator = function () {
        return this.validator ? this.validator(this) : null;
    };
    /**
     * @param {?=} emitEvent
     * @return {?}
     */
    AbstractControl.prototype._runAsyncValidator = function (emitEvent) {
        var _this = this;
        if (this.asyncValidator) {
            this._status = PENDING;
            var /** @type {?} */ obs = toObservable(this.asyncValidator(this));
            this._asyncValidationSubscription =
                obs.subscribe(function (errors) { return _this.setErrors(errors, { emitEvent: emitEvent }); });
        }
    };
    /**
     * @return {?}
     */
    AbstractControl.prototype._cancelExistingSubscription = function () {
        if (this._asyncValidationSubscription) {
            this._asyncValidationSubscription.unsubscribe();
        }
    };
    /**
     * Sets errors on a form control.
     *
     * This is used when validations are run manually by the user, rather than automatically.
     *
     * Calling `setErrors` will also update the validity of the parent control.
     *
     * ### Example
     *
     * ```
     * const login = new FormControl("someLogin");
     * login.setErrors({
     *   "notUnique": true
     * });
     *
     * expect(login.valid).toEqual(false);
     * expect(login.errors).toEqual({"notUnique": true});
     *
     * login.setValue("someOtherLogin");
     *
     * expect(login.valid).toEqual(true);
     * ```
     * @param {?} errors
     * @param {?=} opts
     * @return {?}
     */
    AbstractControl.prototype.setErrors = function (errors, opts) {
        if (opts === void 0) { opts = {}; }
        this._errors = errors;
        this._updateControlsErrors(opts.emitEvent !== false);
    };
    /**
     * Retrieves a child control given the control's name or path.
     *
     * Paths can be passed in as an array or a string delimited by a dot.
     *
     * To get a control nested within a `person` sub-group:
     *
     * * `this.form.get('person.name');`
     *
     * -OR-
     *
     * * `this.form.get(['person', 'name']);`
     * @param {?} path
     * @return {?}
     */
    AbstractControl.prototype.get = function (path) { return _find(this, path, '.'); };
    /**
     * Returns true if the control with the given path has the error specified. Otherwise
     * returns null or undefined.
     *
     * If no path is given, it checks for the error on the present control.
     * @param {?} errorCode
     * @param {?=} path
     * @return {?}
     */
    AbstractControl.prototype.getError = function (errorCode, path) {
        var /** @type {?} */ control = path ? this.get(path) : this;
        return control && control._errors ? control._errors[errorCode] : null;
    };
    /**
     * Returns true if the control with the given path has the error specified. Otherwise
     * returns false.
     *
     * If no path is given, it checks for the error on the present control.
     * @param {?} errorCode
     * @param {?=} path
     * @return {?}
     */
    AbstractControl.prototype.hasError = function (errorCode, path) { return !!this.getError(errorCode, path); };
    Object.defineProperty(AbstractControl.prototype, "root", {
        /**
         * Retrieves the top-level ancestor of this control.
         * @return {?}
         */
        get: function () {
            var /** @type {?} */ x = this;
            while (x._parent) {
                x = x._parent;
            }
            return x;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * \@internal
     * @param {?} emitEvent
     * @return {?}
     */
    AbstractControl.prototype._updateControlsErrors = function (emitEvent) {
        this._status = this._calculateStatus();
        if (emitEvent) {
            this._statusChanges.emit(this._status);
        }
        if (this._parent) {
            this._parent._updateControlsErrors(emitEvent);
        }
    };
    /**
     * \@internal
     * @return {?}
     */
    AbstractControl.prototype._initObservables = function () {
        this._valueChanges = new EventEmitter();
        this._statusChanges = new EventEmitter();
    };
    /**
     * @return {?}
     */
    AbstractControl.prototype._calculateStatus = function () {
        if (this._allControlsDisabled())
            return DISABLED;
        if (this._errors)
            return INVALID;
        if (this._anyControlsHaveStatus(PENDING))
            return PENDING;
        if (this._anyControlsHaveStatus(INVALID))
            return INVALID;
        return VALID;
    };
    /**
     * \@internal
     * @abstract
     * @return {?}
     */
    AbstractControl.prototype._updateValue = function () { };
    /**
     * \@internal
     * @abstract
     * @param {?} cb
     * @return {?}
     */
    AbstractControl.prototype._forEachChild = function (cb) { };
    /**
     * \@internal
     * @abstract
     * @param {?} condition
     * @return {?}
     */
    AbstractControl.prototype._anyControls = function (condition) { };
    /**
     * \@internal
     * @abstract
     * @return {?}
     */
    AbstractControl.prototype._allControlsDisabled = function () { };
    /**
     * \@internal
     * @param {?} status
     * @return {?}
     */
    AbstractControl.prototype._anyControlsHaveStatus = function (status) {
        return this._anyControls(function (control) { return control.status === status; });
    };
    /**
     * \@internal
     * @return {?}
     */
    AbstractControl.prototype._anyControlsDirty = function () {
        return this._anyControls(function (control) { return control.dirty; });
    };
    /**
     * \@internal
     * @return {?}
     */
    AbstractControl.prototype._anyControlsTouched = function () {
        return this._anyControls(function (control) { return control.touched; });
    };
    /**
     * \@internal
     * @param {?=} opts
     * @return {?}
     */
    AbstractControl.prototype._updatePristine = function (opts) {
        if (opts === void 0) { opts = {}; }
        this._pristine = !this._anyControlsDirty();
        if (this._parent && !opts.onlySelf) {
            this._parent._updatePristine(opts);
        }
    };
    /**
     * \@internal
     * @param {?=} opts
     * @return {?}
     */
    AbstractControl.prototype._updateTouched = function (opts) {
        if (opts === void 0) { opts = {}; }
        this._touched = this._anyControlsTouched();
        if (this._parent && !opts.onlySelf) {
            this._parent._updateTouched(opts);
        }
    };
    /**
     * \@internal
     * @param {?} formState
     * @return {?}
     */
    AbstractControl.prototype._isBoxedValue = function (formState) {
        return typeof formState === 'object' && formState !== null &&
            Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;
    };
    /**
     * \@internal
     * @param {?} fn
     * @return {?}
     */
    AbstractControl.prototype._registerOnCollectionChange = function (fn) { this._onCollectionChange = fn; };
    return AbstractControl;
}());
/**
 * \@whatItDoes Tracks the value and validation status of an individual form control.
 *
 * It is one of the three fundamental building blocks of Angular forms, along with
 * {\@link FormGroup} and {\@link FormArray}.
 *
 * \@howToUse
 *
 * When instantiating a {\@link FormControl}, you can pass in an initial value as the
 * first argument. Example:
 *
 * ```ts
 * const ctrl = new FormControl('some value');
 * console.log(ctrl.value);     // 'some value'
 * ```
 *
 * You can also initialize the control with a form state object on instantiation,
 * which includes both the value and whether or not the control is disabled.
 * You can't use the value key without the disabled key; both are required
 * to use this way of initialization.
 *
 * ```ts
 * const ctrl = new FormControl({value: 'n/a', disabled: true});
 * console.log(ctrl.value);     // 'n/a'
 * console.log(ctrl.status);   // 'DISABLED'
 * ```
 *
 * To include a sync validator (or an array of sync validators) with the control,
 * pass it in as the second argument. Async validators are also supported, but
 * have to be passed in separately as the third arg.
 *
 * ```ts
 * const ctrl = new FormControl('', Validators.required);
 * console.log(ctrl.value);     // ''
 * console.log(ctrl.status);   // 'INVALID'
 * ```
 *
 * See its superclass, {\@link AbstractControl}, for more properties and methods.
 *
 * * **npm package**: `\@angular/forms`
 *
 * \@stable
 */
var FormControl = (function (_super) {
    __extends(FormControl, _super);
    /**
     * @param {?=} formState
     * @param {?=} validator
     * @param {?=} asyncValidator
     */
    function FormControl(formState, validator, asyncValidator) {
        if (formState === void 0) { formState = null; }
        var _this = _super.call(this, coerceToValidator(validator), coerceToAsyncValidator(asyncValidator)) || this;
        /**
         * \@internal
         */
        _this._onChange = [];
        _this._applyFormState(formState);
        _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
        _this._initObservables();
        return _this;
    }
    /**
     * Set the value of the form control to `value`.
     *
     * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`
     * and not its parent component. This defaults to false.
     *
     * If `emitEvent` is `true`, this
     * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults
     * to true (as it falls through to `updateValueAndValidity`).
     *
     * If `emitModelToViewChange` is `true`, the view will be notified about the new value
     * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not
     * specified.
     *
     * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the
     * model.  This is the default behavior if `emitViewToModelChange` is not specified.
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    FormControl.prototype.setValue = function (value, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        this._value = value;
        if (this._onChange.length && options.emitModelToViewChange !== false) {
            this._onChange.forEach(function (changeFn) { return changeFn(_this._value, options.emitViewToModelChange !== false); });
        }
        this.updateValueAndValidity(options);
    };
    /**
     * Patches the value of a control.
     *
     * This function is functionally the same as {\@link FormControl#setValue} at this level.
     * It exists for symmetry with {\@link FormGroup#patchValue} on `FormGroups` and `FormArrays`,
     * where it does behave differently.
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    FormControl.prototype.patchValue = function (value, options) {
        if (options === void 0) { options = {}; }
        this.setValue(value, options);
    };
    /**
     * Resets the form control. This means by default:
     *
     * * it is marked as `pristine`
     * * it is marked as `untouched`
     * * value is set to null
     *
     * You can also reset to a specific form state by passing through a standalone
     * value or a form state object that contains both a value and a disabled state
     * (these are the only two properties that cannot be calculated).
     *
     * Ex:
     *
     * ```ts
     * this.control.reset('Nancy');
     *
     * console.log(this.control.value);  // 'Nancy'
     * ```
     *
     * OR
     *
     * ```
     * this.control.reset({value: 'Nancy', disabled: true});
     *
     * console.log(this.control.value);  // 'Nancy'
     * console.log(this.control.status);  // 'DISABLED'
     * ```
     * @param {?=} formState
     * @param {?=} options
     * @return {?}
     */
    FormControl.prototype.reset = function (formState, options) {
        if (formState === void 0) { formState = null; }
        if (options === void 0) { options = {}; }
        this._applyFormState(formState);
        this.markAsPristine(options);
        this.markAsUntouched(options);
        this.setValue(this._value, options);
    };
    /**
     * \@internal
     * @return {?}
     */
    FormControl.prototype._updateValue = function () { };
    /**
     * \@internal
     * @param {?} condition
     * @return {?}
     */
    FormControl.prototype._anyControls = function (condition) { return false; };
    /**
     * \@internal
     * @return {?}
     */
    FormControl.prototype._allControlsDisabled = function () { return this.disabled; };
    /**
     * Register a listener for change events.
     * @param {?} fn
     * @return {?}
     */
    FormControl.prototype.registerOnChange = function (fn) { this._onChange.push(fn); };
    /**
     * \@internal
     * @return {?}
     */
    FormControl.prototype._clearChangeFns = function () {
        this._onChange = [];
        this._onDisabledChange = [];
        this._onCollectionChange = function () { };
    };
    /**
     * Register a listener for disabled events.
     * @param {?} fn
     * @return {?}
     */
    FormControl.prototype.registerOnDisabledChange = function (fn) {
        this._onDisabledChange.push(fn);
    };
    /**
     * \@internal
     * @param {?} cb
     * @return {?}
     */
    FormControl.prototype._forEachChild = function (cb) { };
    /**
     * @param {?} formState
     * @return {?}
     */
    FormControl.prototype._applyFormState = function (formState) {
        if (this._isBoxedValue(formState)) {
            this._value = formState.value;
            formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :
                this.enable({ onlySelf: true, emitEvent: false });
        }
        else {
            this._value = formState;
        }
    };
    return FormControl;
}(AbstractControl));
/**
 * \@whatItDoes Tracks the value and validity state of a group of {\@link FormControl}
 * instances.
 *
 * A `FormGroup` aggregates the values of each child {\@link FormControl} into one object,
 * with each control name as the key.  It calculates its status by reducing the statuses
 * of its children. For example, if one of the controls in a group is invalid, the entire
 * group becomes invalid.
 *
 * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,
 * along with {\@link FormControl} and {\@link FormArray}.
 *
 * \@howToUse
 *
 * When instantiating a {\@link FormGroup}, pass in a collection of child controls as the first
 * argument. The key for each child will be the name under which it is registered.
 *
 * ### Example
 *
 * ```
 * const form = new FormGroup({
 *   first: new FormControl('Nancy', Validators.minLength(2)),
 *   last: new FormControl('Drew'),
 * });
 *
 * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}
 * console.log(form.status);  // 'VALID'
 * ```
 *
 * You can also include group-level validators as the second arg, or group-level async
 * validators as the third arg. These come in handy when you want to perform validation
 * that considers the value of more than one child control.
 *
 * ### Example
 *
 * ```
 * const form = new FormGroup({
 *   password: new FormControl('', Validators.minLength(2)),
 *   passwordConfirm: new FormControl('', Validators.minLength(2)),
 * }, passwordMatchValidator);
 *
 *
 * function passwordMatchValidator(g: FormGroup) {
 *    return g.get('password').value === g.get('passwordConfirm').value
 *       ? null : {'mismatch': true};
 * }
 * ```
 *
 * * **npm package**: `\@angular/forms`
 *
 * \@stable
 */
var FormGroup = (function (_super) {
    __extends(FormGroup, _super);
    /**
     * @param {?} controls
     * @param {?=} validator
     * @param {?=} asyncValidator
     */
    function FormGroup(controls, validator, asyncValidator) {
        var _this = _super.call(this, validator || null, asyncValidator || null) || this;
        _this.controls = controls;
        _this._initObservables();
        _this._setUpControls();
        _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
        return _this;
    }
    /**
     * Registers a control with the group's list of controls.
     *
     * This method does not update value or validity of the control, so for
     * most cases you'll want to use {\@link FormGroup#addControl} instead.
     * @param {?} name
     * @param {?} control
     * @return {?}
     */
    FormGroup.prototype.registerControl = function (name, control) {
        if (this.controls[name])
            return this.controls[name];
        this.controls[name] = control;
        control.setParent(this);
        control._registerOnCollectionChange(this._onCollectionChange);
        return control;
    };
    /**
     * Add a control to this group.
     * @param {?} name
     * @param {?} control
     * @return {?}
     */
    FormGroup.prototype.addControl = function (name, control) {
        this.registerControl(name, control);
        this.updateValueAndValidity();
        this._onCollectionChange();
    };
    /**
     * Remove a control from this group.
     * @param {?} name
     * @return {?}
     */
    FormGroup.prototype.removeControl = function (name) {
        if (this.controls[name])
            this.controls[name]._registerOnCollectionChange(function () { });
        delete (this.controls[name]);
        this.updateValueAndValidity();
        this._onCollectionChange();
    };
    /**
     * Replace an existing control.
     * @param {?} name
     * @param {?} control
     * @return {?}
     */
    FormGroup.prototype.setControl = function (name, control) {
        if (this.controls[name])
            this.controls[name]._registerOnCollectionChange(function () { });
        delete (this.controls[name]);
        if (control)
            this.registerControl(name, control);
        this.updateValueAndValidity();
        this._onCollectionChange();
    };
    /**
     * Check whether there is an enabled control with the given name in the group.
     *
     * It will return false for disabled controls. If you'd like to check for
     * existence in the group only, use {\@link AbstractControl#get} instead.
     * @param {?} controlName
     * @return {?}
     */
    FormGroup.prototype.contains = function (controlName) {
        return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;
    };
    /**
     *  Sets the value of the {\@link FormGroup}. It accepts an object that matches
     *  the structure of the group, with control names as keys.
     *
     * This method performs strict checks, so it will throw an error if you try
     * to set the value of a control that doesn't exist or if you exclude the
     * value of a control.
     *
     *  ### Example
     *
     *  ```
     *  const form = new FormGroup({
     *     first: new FormControl(),
     *     last: new FormControl()
     *  });
     *  console.log(form.value);   // {first: null, last: null}
     *
     *  form.setValue({first: 'Nancy', last: 'Drew'});
     *  console.log(form.value);   // {first: 'Nancy', last: 'Drew'}
     *
     *  ```
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    FormGroup.prototype.setValue = function (value, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        this._checkAllValuesPresent(value);
        Object.keys(value).forEach(function (name) {
            _this._throwIfControlMissing(name);
            _this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });
        });
        this.updateValueAndValidity(options);
    };
    /**
     *  Patches the value of the {\@link FormGroup}. It accepts an object with control
     *  names as keys, and will do its best to match the values to the correct controls
     *  in the group.
     *
     *  It accepts both super-sets and sub-sets of the group without throwing an error.
     *
     *  ### Example
     *
     *  ```
     *  const form = new FormGroup({
     *     first: new FormControl(),
     *     last: new FormControl()
     *  });
     *  console.log(form.value);   // {first: null, last: null}
     *
     *  form.patchValue({first: 'Nancy'});
     *  console.log(form.value);   // {first: 'Nancy', last: null}
     *
     *  ```
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    FormGroup.prototype.patchValue = function (value, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        Object.keys(value).forEach(function (name) {
            if (_this.controls[name]) {
                _this.controls[name].patchValue(value[name], { onlySelf: true, emitEvent: options.emitEvent });
            }
        });
        this.updateValueAndValidity(options);
    };
    /**
     * Resets the {\@link FormGroup}. This means by default:
     *
     * * The group and all descendants are marked `pristine`
     * * The group and all descendants are marked `untouched`
     * * The value of all descendants will be null or null maps
     *
     * You can also reset to a specific form state by passing in a map of states
     * that matches the structure of your form, with control names as keys. The state
     * can be a standalone value or a form state object with both a value and a disabled
     * status.
     *
     * ### Example
     *
     * ```ts
     * this.form.reset({first: 'name', last: 'last name'});
     *
     * console.log(this.form.value);  // {first: 'name', last: 'last name'}
     * ```
     *
     * - OR -
     *
     * ```
     * this.form.reset({
     *   first: {value: 'name', disabled: true},
     *   last: 'last'
     * });
     *
     * console.log(this.form.value);  // {first: 'name', last: 'last name'}
     * console.log(this.form.get('first').status);  // 'DISABLED'
     * ```
     * @param {?=} value
     * @param {?=} options
     * @return {?}
     */
    FormGroup.prototype.reset = function (value, options) {
        if (value === void 0) { value = {}; }
        if (options === void 0) { options = {}; }
        this._forEachChild(function (control, name) {
            control.reset(value[name], { onlySelf: true, emitEvent: options.emitEvent });
        });
        this.updateValueAndValidity(options);
        this._updatePristine(options);
        this._updateTouched(options);
    };
    /**
     * The aggregate value of the {\@link FormGroup}, including any disabled controls.
     *
     * If you'd like to include all values regardless of disabled status, use this method.
     * Otherwise, the `value` property is the best way to get the value of the group.
     * @return {?}
     */
    FormGroup.prototype.getRawValue = function () {
        return this._reduceChildren({}, function (acc, control, name) {
            acc[name] = control instanceof FormControl ? control.value : ((control)).getRawValue();
            return acc;
        });
    };
    /**
     * \@internal
     * @param {?} name
     * @return {?}
     */
    FormGroup.prototype._throwIfControlMissing = function (name) {
        if (!Object.keys(this.controls).length) {
            throw new Error("\n        There are no form controls registered with this group yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
        }
        if (!this.controls[name]) {
            throw new Error("Cannot find form control with name: " + name + ".");
        }
    };
    /**
     * \@internal
     * @param {?} cb
     * @return {?}
     */
    FormGroup.prototype._forEachChild = function (cb) {
        var _this = this;
        Object.keys(this.controls).forEach(function (k) { return cb(_this.controls[k], k); });
    };
    /**
     * \@internal
     * @return {?}
     */
    FormGroup.prototype._setUpControls = function () {
        var _this = this;
        this._forEachChild(function (control) {
            control.setParent(_this);
            control._registerOnCollectionChange(_this._onCollectionChange);
        });
    };
    /**
     * \@internal
     * @return {?}
     */
    FormGroup.prototype._updateValue = function () { this._value = this._reduceValue(); };
    /**
     * \@internal
     * @param {?} condition
     * @return {?}
     */
    FormGroup.prototype._anyControls = function (condition) {
        var _this = this;
        var /** @type {?} */ res = false;
        this._forEachChild(function (control, name) {
            res = res || (_this.contains(name) && condition(control));
        });
        return res;
    };
    /**
     * \@internal
     * @return {?}
     */
    FormGroup.prototype._reduceValue = function () {
        var _this = this;
        return this._reduceChildren({}, function (acc, control, name) {
            if (control.enabled || _this.disabled) {
                acc[name] = control.value;
            }
            return acc;
        });
    };
    /**
     * \@internal
     * @param {?} initValue
     * @param {?} fn
     * @return {?}
     */
    FormGroup.prototype._reduceChildren = function (initValue, fn) {
        var /** @type {?} */ res = initValue;
        this._forEachChild(function (control, name) { res = fn(res, control, name); });
        return res;
    };
    /**
     * \@internal
     * @return {?}
     */
    FormGroup.prototype._allControlsDisabled = function () {
        for (var _i = 0, _a = Object.keys(this.controls); _i < _a.length; _i++) {
            var controlName = _a[_i];
            if (this.controls[controlName].enabled) {
                return false;
            }
        }
        return Object.keys(this.controls).length > 0 || this.disabled;
    };
    /**
     * \@internal
     * @param {?} value
     * @return {?}
     */
    FormGroup.prototype._checkAllValuesPresent = function (value) {
        this._forEachChild(function (control, name) {
            if (value[name] === undefined) {
                throw new Error("Must supply a value for form control with name: '" + name + "'.");
            }
        });
    };
    return FormGroup;
}(AbstractControl));
/**
 * \@whatItDoes Tracks the value and validity state of an array of {\@link FormControl},
 * {\@link FormGroup} or {\@link FormArray} instances.
 *
 * A `FormArray` aggregates the values of each child {\@link FormControl} into an array.
 * It calculates its status by reducing the statuses of its children. For example, if one of
 * the controls in a `FormArray` is invalid, the entire array becomes invalid.
 *
 * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,
 * along with {\@link FormControl} and {\@link FormGroup}.
 *
 * \@howToUse
 *
 * When instantiating a {\@link FormArray}, pass in an array of child controls as the first
 * argument.
 *
 * ### Example
 *
 * ```
 * const arr = new FormArray([
 *   new FormControl('Nancy', Validators.minLength(2)),
 *   new FormControl('Drew'),
 * ]);
 *
 * console.log(arr.value);   // ['Nancy', 'Drew']
 * console.log(arr.status);  // 'VALID'
 * ```
 *
 * You can also include array-level validators as the second arg, or array-level async
 * validators as the third arg. These come in handy when you want to perform validation
 * that considers the value of more than one child control.
 *
 * ### Adding or removing controls
 *
 * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods
 * in `FormArray` itself. These methods ensure the controls are properly tracked in the
 * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate
 * the `FormArray` directly, as that will result in strange and unexpected behavior such
 * as broken change detection.
 *
 * * **npm package**: `\@angular/forms`
 *
 * \@stable
 */
var FormArray = (function (_super) {
    __extends(FormArray, _super);
    /**
     * @param {?} controls
     * @param {?=} validator
     * @param {?=} asyncValidator
     */
    function FormArray(controls, validator, asyncValidator) {
        var _this = _super.call(this, validator || null, asyncValidator || null) || this;
        _this.controls = controls;
        _this._initObservables();
        _this._setUpControls();
        _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
        return _this;
    }
    /**
     * Get the {\@link AbstractControl} at the given `index` in the array.
     * @param {?} index
     * @return {?}
     */
    FormArray.prototype.at = function (index) { return this.controls[index]; };
    /**
     * Insert a new {\@link AbstractControl} at the end of the array.
     * @param {?} control
     * @return {?}
     */
    FormArray.prototype.push = function (control) {
        this.controls.push(control);
        this._registerControl(control);
        this.updateValueAndValidity();
        this._onCollectionChange();
    };
    /**
     * Insert a new {\@link AbstractControl} at the given `index` in the array.
     * @param {?} index
     * @param {?} control
     * @return {?}
     */
    FormArray.prototype.insert = function (index, control) {
        this.controls.splice(index, 0, control);
        this._registerControl(control);
        this.updateValueAndValidity();
        this._onCollectionChange();
    };
    /**
     * Remove the control at the given `index` in the array.
     * @param {?} index
     * @return {?}
     */
    FormArray.prototype.removeAt = function (index) {
        if (this.controls[index])
            this.controls[index]._registerOnCollectionChange(function () { });
        this.controls.splice(index, 1);
        this.updateValueAndValidity();
        this._onCollectionChange();
    };
    /**
     * Replace an existing control.
     * @param {?} index
     * @param {?} control
     * @return {?}
     */
    FormArray.prototype.setControl = function (index, control) {
        if (this.controls[index])
            this.controls[index]._registerOnCollectionChange(function () { });
        this.controls.splice(index, 1);
        if (control) {
            this.controls.splice(index, 0, control);
            this._registerControl(control);
        }
        this.updateValueAndValidity();
        this._onCollectionChange();
    };
    Object.defineProperty(FormArray.prototype, "length", {
        /**
         * Length of the control array.
         * @return {?}
         */
        get: function () { return this.controls.length; },
        enumerable: true,
        configurable: true
    });
    /**
     *  Sets the value of the {\@link FormArray}. It accepts an array that matches
     *  the structure of the control.
     *
     * This method performs strict checks, so it will throw an error if you try
     * to set the value of a control that doesn't exist or if you exclude the
     * value of a control.
     *
     *  ### Example
     *
     *  ```
     *  const arr = new FormArray([
     *     new FormControl(),
     *     new FormControl()
     *  ]);
     *  console.log(arr.value);   // [null, null]
     *
     *  arr.setValue(['Nancy', 'Drew']);
     *  console.log(arr.value);   // ['Nancy', 'Drew']
     *  ```
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    FormArray.prototype.setValue = function (value, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        this._checkAllValuesPresent(value);
        value.forEach(function (newValue, index) {
            _this._throwIfControlMissing(index);
            _this.at(index).setValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });
        });
        this.updateValueAndValidity(options);
    };
    /**
     *  Patches the value of the {\@link FormArray}. It accepts an array that matches the
     *  structure of the control, and will do its best to match the values to the correct
     *  controls in the group.
     *
     *  It accepts both super-sets and sub-sets of the array without throwing an error.
     *
     *  ### Example
     *
     *  ```
     *  const arr = new FormArray([
     *     new FormControl(),
     *     new FormControl()
     *  ]);
     *  console.log(arr.value);   // [null, null]
     *
     *  arr.patchValue(['Nancy']);
     *  console.log(arr.value);   // ['Nancy', null]
     *  ```
     * @param {?} value
     * @param {?=} options
     * @return {?}
     */
    FormArray.prototype.patchValue = function (value, options) {
        var _this = this;
        if (options === void 0) { options = {}; }
        value.forEach(function (newValue, index) {
            if (_this.at(index)) {
                _this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: options.emitEvent });
            }
        });
        this.updateValueAndValidity(options);
    };
    /**
     * Resets the {\@link FormArray}. This means by default:
     *
     * * The array and all descendants are marked `pristine`
     * * The array and all descendants are marked `untouched`
     * * The value of all descendants will be null or null maps
     *
     * You can also reset to a specific form state by passing in an array of states
     * that matches the structure of the control. The state can be a standalone value
     * or a form state object with both a value and a disabled status.
     *
     * ### Example
     *
     * ```ts
     * this.arr.reset(['name', 'last name']);
     *
     * console.log(this.arr.value);  // ['name', 'last name']
     * ```
     *
     * - OR -
     *
     * ```
     * this.arr.reset([
     *   {value: 'name', disabled: true},
     *   'last'
     * ]);
     *
     * console.log(this.arr.value);  // ['name', 'last name']
     * console.log(this.arr.get(0).status);  // 'DISABLED'
     * ```
     * @param {?=} value
     * @param {?=} options
     * @return {?}
     */
    FormArray.prototype.reset = function (value, options) {
        if (value === void 0) { value = []; }
        if (options === void 0) { options = {}; }
        this._forEachChild(function (control, index) {
            control.reset(value[index], { onlySelf: true, emitEvent: options.emitEvent });
        });
        this.updateValueAndValidity(options);
        this._updatePristine(options);
        this._updateTouched(options);
    };
    /**
     * The aggregate value of the array, including any disabled controls.
     *
     * If you'd like to include all values regardless of disabled status, use this method.
     * Otherwise, the `value` property is the best way to get the value of the array.
     * @return {?}
     */
    FormArray.prototype.getRawValue = function () {
        return this.controls.map(function (control) {
            return control instanceof FormControl ? control.value : ((control)).getRawValue();
        });
    };
    /**
     * \@internal
     * @param {?} index
     * @return {?}
     */
    FormArray.prototype._throwIfControlMissing = function (index) {
        if (!this.controls.length) {
            throw new Error("\n        There are no form controls registered with this array yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
        }
        if (!this.at(index)) {
            throw new Error("Cannot find form control at index " + index);
        }
    };
    /**
     * \@internal
     * @param {?} cb
     * @return {?}
     */
    FormArray.prototype._forEachChild = function (cb) {
        this.controls.forEach(function (control, index) { cb(control, index); });
    };
    /**
     * \@internal
     * @return {?}
     */
    FormArray.prototype._updateValue = function () {
        var _this = this;
        this._value = this.controls.filter(function (control) { return control.enabled || _this.disabled; })
            .map(function (control) { return control.value; });
    };
    /**
     * \@internal
     * @param {?} condition
     * @return {?}
     */
    FormArray.prototype._anyControls = function (condition) {
        return this.controls.some(function (control) { return control.enabled && condition(control); });
    };
    /**
     * \@internal
     * @return {?}
     */
    FormArray.prototype._setUpControls = function () {
        var _this = this;
        this._forEachChild(function (control) { return _this._registerControl(control); });
    };
    /**
     * \@internal
     * @param {?} value
     * @return {?}
     */
    FormArray.prototype._checkAllValuesPresent = function (value) {
        this._forEachChild(function (control, i) {
            if (value[i] === undefined) {
                throw new Error("Must supply a value for form control at index: " + i + ".");
            }
        });
    };
    /**
     * \@internal
     * @return {?}
     */
    FormArray.prototype._allControlsDisabled = function () {
        for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {
            var control = _a[_i];
            if (control.enabled)
                return false;
        }
        return this.controls.length > 0 || this.disabled;
    };
    /**
     * @param {?} control
     * @return {?}
     */
    FormArray.prototype._registerControl = function (control) {
        control.setParent(this);
        control._registerOnCollectionChange(this._onCollectionChange);
    };
    return FormArray;
}(AbstractControl));
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var formDirectiveProvider = {
    provide: ControlContainer,
    useExisting: forwardRef(function () { return NgForm; })
};
var resolvedPromise = Promise.resolve(null);
/**
 * \@whatItDoes Creates a top-level {\@link FormGroup} instance and binds it to a form
 * to track aggregate form value and validation status.
 *
 * \@howToUse
 *
 * As soon as you import the `FormsModule`, this directive becomes active by default on
 * all `<form>` tags.  You don't need to add a special selector.
 *
 * You can export the directive into a local template variable using `ngForm` as the key
 * (ex: `#myForm="ngForm"`). This is optional, but useful.  Many properties from the underlying
 * {\@link FormGroup} instance are duplicated on the directive itself, so a reference to it
 * will give you access to the aggregate value and validity status of the form, as well as
 * user interaction properties like `dirty` and `touched`.
 *
 * To register child controls with the form, you'll want to use {\@link NgModel} with a
 * `name` attribute.  You can also use {\@link NgModelGroup} if you'd like to create
 * sub-groups within the form.
 *
 * You can listen to the directive's `ngSubmit` event to be notified when the user has
 * triggered a form submission. The `ngSubmit` event will be emitted with the original form
 * submission event.
 *
 * {\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}
 *
 * * **npm package**: `\@angular/forms`
 *
 * * **NgModule**: `FormsModule`
 *
 *  \@stable
 */
var NgForm = (function (_super) {
    __extends(NgForm, _super);
    /**
     * @param {?} validators
     * @param {?} asyncValidators
     */
    function NgForm(validators, asyncValidators) {
        var _this = _super.call(this) || this;
        _this._submitted = false;
        _this.ngSubmit = new EventEmitter();
        _this.form =
            new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));
        return _this;
    }
    Object.defineProperty(NgForm.prototype, "submitted", {
        /**
         * @return {?}
         */
        get: function () { return this._submitted; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForm.prototype, "formDirective", {
        /**
         * @return {?}
         */
        get: function () { return this; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForm.prototype, "control", {
        /**
         * @return {?}
         */
        get: function () { return this.form; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForm.prototype, "path", {
        /**
         * @return {?}
         */
        get: function () { return []; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgForm.prototype, "controls", {
        /**
         * @return {?}
         */
        get: function () { return this.form.controls; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} dir
     * @return {?}
     */
    NgForm.prototype.addControl = function (dir) {
        var _this = this;
        resolvedPromise.then(function () {
            var /** @type {?} */ container = _this._findContainer(dir.path);
            dir._control = (container.registerControl(dir.name, dir.control));
            setUpControl(dir.control, dir);
            dir.control.updateValueAndValidity({ emitEvent: false });
        });
    };
    /**
     * @param {?} dir
     * @return {?}
     */
    NgForm.prototype.getControl = function (dir) { return (this.form.get(dir.path)); };
    /**
     * @param {?} dir
     * @return {?}
     */
    NgForm.prototype.removeControl = function (dir) {
        var _this = this;
        resolvedPromise.then(function () {
            var /** @type {?} */ container = _this._findContainer(dir.path);
            if (container) {
                container.removeControl(dir.name);
            }
        });
    };
    /**
     * @param {?} dir
     * @return {?}
     */
    NgForm.prototype.addFormGroup = function (dir) {
        var _this = this;
        resolvedPromise.then(function () {
            var /** @type {?} */ container = _this._findContainer(dir.path);
            var /** @type {?} */ group = new FormGroup({});
            setUpFormContainer(group, dir);
            container.registerControl(dir.name, group);
            group.updateValueAndValidity({ emitEvent: false });
        });
    };
    /**
     * @param {?} dir
     * @return {?}
     */
    NgForm.prototype.removeFormGroup = function (dir) {
        var _this = this;
        resolvedPromise.then(function () {
            var /** @type {?} */ container = _this._findContainer(dir.path);
            if (container) {
                container.removeControl(dir.name);
            }
        });
    };
    /**
     * @param {?} dir
     * @return {?}
     */
    NgForm.prototype.getFormGroup = function (dir) { return (this.form.get(dir.path)); };
    /**
     * @param {?} dir
     * @param {?} value
     * @return {?}
     */
    NgForm.prototype.updateModel = function (dir, value) {
        var _this = this;
        resolvedPromise.then(function () {
            var /** @type {?} */ ctrl = (_this.form.get(/** @type {?} */ ((dir.path))));
            ctrl.setValue(value);
        });
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NgForm.prototype.setValue = function (value) { this.control.setValue(value); };
    /**
     * @param {?} $event
     * @return {?}
     */
    NgForm.prototype.onSubmit = function ($event) {
        this._submitted = true;
        this.ngSubmit.emit($event);
        return false;
    };
    /**
     * @return {?}
     */
    NgForm.prototype.onReset = function () { this.resetForm(); };
    /**
     * @param {?=} value
     * @return {?}
     */
    NgForm.prototype.resetForm = function (value) {
        if (value === void 0) { value = undefined; }
        this.form.reset(value);
        this._submitted = false;
    };
    /**
     * \@internal
     * @param {?} path
     * @return {?}
     */
    NgForm.prototype._findContainer = function (path) {
        path.pop();
        return path.length ? (this.form.get(path)) : this.form;
    };
    return NgForm;
}(ControlContainer));
NgForm.decorators = [
    { type: Directive, args: [{
                selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',
                providers: [formDirectiveProvider],
                host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },
                outputs: ['ngSubmit'],
                exportAs: 'ngForm'
            },] },
];
/**
 * @nocollapse
 */
NgForm.ctorParameters = function () { return [
    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },
    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },
]; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var FormErrorExamples = {
    formControlName: "\n    <div [formGroup]=\"myGroup\">\n      <input formControlName=\"firstName\">\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       firstName: new FormControl()\n    });",
    formGroupName: "\n    <div [formGroup]=\"myGroup\">\n       <div formGroupName=\"person\">\n          <input formControlName=\"firstName\">\n       </div>\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       person: new FormGroup({ firstName: new FormControl() })\n    });",
    formArrayName: "\n    <div [formGroup]=\"myGroup\">\n      <div formArrayName=\"cities\">\n        <div *ngFor=\"let city of cityArray.controls; index as i\">\n          <input [formControlName]=\"i\">\n        </div>\n      </div>\n    </div>\n\n    In your class:\n\n    this.cityArray = new FormArray([new FormControl('SF')]);\n    this.myGroup = new FormGroup({\n      cities: this.cityArray\n    });",
    ngModelGroup: "\n    <form>\n       <div ngModelGroup=\"person\">\n          <input [(ngModel)]=\"person.name\" name=\"firstName\">\n       </div>\n    </form>",
    ngModelWithFormGroup: "\n    <div [formGroup]=\"myGroup\">\n       <input formControlName=\"firstName\">\n       <input [(ngModel)]=\"showMoreControls\" [ngModelOptions]=\"{standalone: true}\">\n    </div>\n  "
};
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var TemplateDrivenErrors = (function () {
    function TemplateDrivenErrors() {
    }
    /**
     * @return {?}
     */
    TemplateDrivenErrors.modelParentException = function () {
        throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n      formGroup's partner directive \"formControlName\" instead.  Example:\n\n      " + FormErrorExamples.formControlName + "\n\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n      Example:\n\n      " + FormErrorExamples.ngModelWithFormGroup);
    };
    /**
     * @return {?}
     */
    TemplateDrivenErrors.formGroupNameException = function () {
        throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n      " + FormErrorExamples.formGroupName + "\n\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n      " + FormErrorExamples.ngModelGroup);
    };
    /**
     * @return {?}
     */
    TemplateDrivenErrors.missingNameException = function () {
        throw new Error("If ngModel is used within a form tag, either the name attribute must be set or the form\n      control must be defined as 'standalone' in ngModelOptions.\n\n      Example 1: <input [(ngModel)]=\"person.firstName\" name=\"first\">\n      Example 2: <input [(ngModel)]=\"person.firstName\" [ngModelOptions]=\"{standalone: true}\">");
    };
    /**
     * @return {?}
     */
    TemplateDrivenErrors.modelGroupParentException = function () {
        throw new Error("\n      ngModelGroup cannot be used with a parent formGroup directive.\n\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n      " + FormErrorExamples.formGroupName + "\n\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n      " + FormErrorExamples.ngModelGroup);
    };
    return TemplateDrivenErrors;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var modelGroupProvider = {
    provide: ControlContainer,
    useExisting: forwardRef(function () { return NgModelGroup; })
};
/**
 * \@whatItDoes Creates and binds a {\@link FormGroup} instance to a DOM element.
 *
 * \@howToUse
 *
 * This directive can only be used as a child of {\@link NgForm} (or in other words,
 * within `<form>` tags).
 *
 * Use this directive if you'd like to create a sub-group within a form. This can
 * come in handy if you want to validate a sub-group of your form separately from
 * the rest of your form, or if some values in your domain model make more sense to
 * consume together in a nested object.
 *
 * Pass in the name you'd like this sub-group to have and it will become the key
 * for the sub-group in the form's full value. You can also export the directive into
 * a local template variable using `ngModelGroup` (ex: `#myGroup="ngModelGroup"`).
 *
 * {\@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}
 *
 * * **npm package**: `\@angular/forms`
 *
 * * **NgModule**: `FormsModule`
 *
 * \@stable
 */
var NgModelGroup = (function (_super) {
    __extends(NgModelGroup, _super);
    /**
     * @param {?} parent
     * @param {?} validators
     * @param {?} asyncValidators
     */
    function NgModelGroup(parent, validators, asyncValidators) {
        var _this = _super.call(this) || this;
        _this._parent = parent;
        _this._validators = validators;
        _this._asyncValidators = asyncValidators;
        return _this;
    }
    /**
     * \@internal
     * @return {?}
     */
    NgModelGroup.prototype._checkParentType = function () {
        if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
            TemplateDrivenErrors.modelGroupParentException();
        }
    };
    return NgModelGroup;
}(AbstractFormGroupDirective));
NgModelGroup.decorators = [
    { type: Directive, args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' },] },
];
/**
 * @nocollapse
 */
NgModelGroup.ctorParameters = function () { return [
    { type: ControlContainer, decorators: [{ type: Host }, { type: SkipSelf },] },
    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },
    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },
]; };
NgModelGroup.propDecorators = {
    'name': [{ type: Input, args: ['ngModelGroup',] },],
};
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var formControlBinding = {
    provide: NgControl,
    useExisting: forwardRef(function () { return NgModel; })
};
/**
 * `ngModel` forces an additional change detection run when its inputs change:
 * E.g.:
 * ```
 * <div>{{myModel.valid}}</div>
 * <input [(ngModel)]="myValue" #myModel="ngModel">
 * ```
 * I.e. `ngModel` can export itself on the element and then be used in the template.
 * Normally, this would result in expressions before the `input` that use the exported directive
 * to have and old value as they have been
 * dirty checked before. As this is a very common case for `ngModel`, we added this second change
 * detection run.
 *
 * Notes:
 * - this is just one extra run no matter how many `ngModel` have been changed.
 * - this is a general problem when using `exportAs` for directives!
 */
var resolvedPromise$1 = Promise.resolve(null);
/**
 * \@whatItDoes Creates a {\@link FormControl} instance from a domain model and binds it
 * to a form control element.
 *
 * The {\@link FormControl} instance will track the value, user interaction, and
 * validation status of the control and keep the view synced with the model. If used
 * within a parent form, the directive will also register itself with the form as a child
 * control.
 *
 * \@howToUse
 *
 * This directive can be used by itself or as part of a larger form. All you need is the
 * `ngModel` selector to activate it.
 *
 * It accepts a domain model as an optional {\@link Input}. If you have a one-way binding
 * to `ngModel` with `[]` syntax, changing the value of the domain model in the component
 * class will set the value in the view. If you have a two-way binding with `[()]` syntax
 * (also known as 'banana-box syntax'), the value in the UI will always be synced back to
 * the domain model in your class as well.
 *
 * If you wish to inspect the properties of the associated {\@link FormControl} (like
 * validity state), you can also export the directive into a local template variable using
 * `ngModel` as the key (ex: `#myVar="ngModel"`). You can then access the control using the
 * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)
 * will fall through to the control anyway, so you can access them directly. You can see a
 * full list of properties directly available in {\@link AbstractControlDirective}.
 *
 * The following is an example of a simple standalone control using `ngModel`:
 *
 * {\@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}
 *
 * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute
 * so that the control can be registered with the parent form under that name.
 *
 * It's worth noting that in the context of a parent form, you often can skip one-way or
 * two-way binding because the parent form will sync the value for you. You can access
 * its properties by exporting it into a local template variable using `ngForm` (ex:
 * `#f="ngForm"`). Then you can pass it where it needs to go on submit.
 *
 * If you do need to populate initial values into your form, using a one-way binding for
 * `ngModel` tends to be sufficient as long as you use the exported form's value rather
 * than the domain model's value on submit.
 *
 * Take a look at an example of using `ngModel` within a form:
 *
 * {\@example forms/ts/simpleForm/simple_form_example.ts region='Component'}
 *
 * To see `ngModel` examples with different form control types, see:
 *
 * * Radio buttons: {\@link RadioControlValueAccessor}
 * * Selects: {\@link SelectControlValueAccessor}
 *
 * **npm package**: `\@angular/forms`
 *
 * **NgModule**: `FormsModule`
 *
 *  \@stable
 */
var NgModel = (function (_super) {
    __extends(NgModel, _super);
    /**
     * @param {?} parent
     * @param {?} validators
     * @param {?} asyncValidators
     * @param {?} valueAccessors
     */
    function NgModel(parent, validators, asyncValidators, valueAccessors) {
        var _this = _super.call(this) || this;
        /**
         * \@internal
         */
        _this._control = new FormControl();
        /**
         * \@internal
         */
        _this._registered = false;
        _this.update = new EventEmitter();
        _this._parent = parent;
        _this._rawValidators = validators || [];
        _this._rawAsyncValidators = asyncValidators || [];
        _this.valueAccessor = selectValueAccessor(_this, valueAccessors);
        return _this;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    NgModel.prototype.ngOnChanges = function (changes) {
        this._checkForErrors();
        if (!this._registered)
            this._setUpControl();
        if ('isDisabled' in changes) {
            this._updateDisabled(changes);
        }
        if (isPropertyUpdated(changes, this.viewModel)) {
            this._updateValue(this.model);
            this.viewModel = this.model;
        }
    };
    /**
     * @return {?}
     */
    NgModel.prototype.ngOnDestroy = function () { this.formDirective && this.formDirective.removeControl(this); };
    Object.defineProperty(NgModel.prototype, "control", {
        /**
         * @return {?}
         */
        get: function () { return this._control; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgModel.prototype, "path", {
        /**
         * @return {?}
         */
        get: function () {
            return this._parent ? controlPath(this.name, this._parent) : [this.name];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgModel.prototype, "formDirective", {
        /**
         * @return {?}
         */
        get: function () { return this._parent ? this._parent.formDirective : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgModel.prototype, "validator", {
        /**
         * @return {?}
         */
        get: function () { return composeValidators(this._rawValidators); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgModel.prototype, "asyncValidator", {
        /**
         * @return {?}
         */
        get: function () {
            return composeAsyncValidators(this._rawAsyncValidators);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} newValue
     * @return {?}
     */
    NgModel.prototype.viewToModelUpdate = function (newValue) {
        this.viewModel = newValue;
        this.update.emit(newValue);
    };
    /**
     * @return {?}
     */
    NgModel.prototype._setUpControl = function () {
        this._isStandalone() ? this._setUpStandalone() :
            this.formDirective.addControl(this);
        this._registered = true;
    };
    /**
     * @return {?}
     */
    NgModel.prototype._isStandalone = function () {
        return !this._parent || !!(this.options && this.options.standalone);
    };
    /**
     * @return {?}
     */
    NgModel.prototype._setUpStandalone = function () {
        setUpControl(this._control, this);
        this._control.updateValueAndValidity({ emitEvent: false });
    };
    /**
     * @return {?}
     */
    NgModel.prototype._checkForErrors = function () {
        if (!this._isStandalone()) {
            this._checkParentType();
        }
        this._checkName();
    };
    /**
     * @return {?}
     */
    NgModel.prototype._checkParentType = function () {
        if (!(this._parent instanceof NgModelGroup) &&
            this._parent instanceof AbstractFormGroupDirective) {
            TemplateDrivenErrors.formGroupNameException();
        }
        else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
            TemplateDrivenErrors.modelParentException();
        }
    };
    /**
     * @return {?}
     */
    NgModel.prototype._checkName = function () {
        if (this.options && this.options.name)
            this.name = this.options.name;
        if (!this._isStandalone() && !this.name) {
            TemplateDrivenErrors.missingNameException();
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NgModel.prototype._updateValue = function (value) {
        var _this = this;
        resolvedPromise$1.then(function () { _this.control.setValue(value, { emitViewToModelChange: false }); });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgModel.prototype._updateDisabled = function (changes) {
        var _this = this;
        var /** @type {?} */ disabledValue = changes['isDisabled'].currentValue;
        var /** @type {?} */ isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');
        resolvedPromise$1.then(function () {
            if (isDisabled && !_this.control.disabled) {
                _this.control.disable();
            }
            else if (!isDisabled && _this.control.disabled) {
                _this.control.enable();
            }
        });
    };
    return NgModel;
}(NgControl));
NgModel.decorators = [
    { type: Directive, args: [{
                selector: '[ngModel]:not([formControlName]):not([formControl])',
                providers: [formControlBinding],
                exportAs: 'ngModel'
            },] },
];
/**
 * @nocollapse
 */
NgModel.ctorParameters = function () { return [
    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host },] },
    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },
    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },
    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] },] },
]; };
NgModel.propDecorators = {
    'name': [{ type: Input },],
    'isDisabled': [{ type: Input, args: ['disabled',] },],
    'model': [{ type: Input, args: ['ngModel',] },],
    'options': [{ type: Input, args: ['ngModelOptions',] },],
    'update': [{ type: Output, args: ['ngModelChange',] },],
};
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ReactiveErrors = (function () {
    function ReactiveErrors() {
    }
    /**
     * @return {?}
     */
    ReactiveErrors.controlParentException = function () {
        throw new Error("formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + FormErrorExamples.formControlName);
    };
    /**
     * @return {?}
     */
    ReactiveErrors.ngModelGroupException = function () {
        throw new Error("formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n       that also have a \"form\" prefix: formGroupName, formArrayName, or formGroup.\n\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n        " + FormErrorExamples.formGroupName + "\n\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n        " + FormErrorExamples.ngModelGroup);
    };
    /**
     * @return {?}
     */
    ReactiveErrors.missingFormException = function () {
        throw new Error("formGroup expects a FormGroup instance. Please pass one in.\n\n       Example:\n\n       " + FormErrorExamples.formControlName);
    };
    /**
     * @return {?}
     */
    ReactiveErrors.groupParentException = function () {
        throw new Error("formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + FormErrorExamples.formGroupName);
    };
    /**
     * @return {?}
     */
    ReactiveErrors.arrayParentException = function () {
        throw new Error("formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n        Example:\n\n        " + FormErrorExamples.formArrayName);
    };
    /**
     * @return {?}
     */
    ReactiveErrors.disabledAttrWarning = function () {
        console.warn("\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n      you. We recommend using this approach to avoid 'changed after checked' errors.\n       \n      Example: \n      form = new FormGroup({\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n        last: new FormControl('Drew', Validators.required)\n      });\n    ");
    };
    return ReactiveErrors;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var formControlBinding$1 = {
    provide: NgControl,
    useExisting: forwardRef(function () { return FormControlDirective; })
};
/**
 * \@whatItDoes Syncs a standalone {\@link FormControl} instance to a form control element.
 *
 * In other words, this directive ensures that any values written to the {\@link FormControl}
 * instance programmatically will be written to the DOM element (model -> view). Conversely,
 * any values written to the DOM element through user input will be reflected in the
 * {\@link FormControl} instance (view -> model).
 *
 * \@howToUse
 *
 * Use this directive if you'd like to create and manage a {\@link FormControl} instance directly.
 * Simply create a {\@link FormControl}, save it to your component class, and pass it into the
 * {\@link FormControlDirective}.
 *
 * This directive is designed to be used as a standalone control.  Unlike {\@link FormControlName},
 * it does not require that your {\@link FormControl} instance be part of any parent
 * {\@link FormGroup}, and it won't be registered to any {\@link FormGroupDirective} that
 * exists above it.
 *
 * **Get the value**: the `value` property is always synced and available on the
 * {\@link FormControl} instance. See a full list of available properties in
 * {\@link AbstractControl}.
 *
 * **Set the value**: You can pass in an initial value when instantiating the {\@link FormControl},
 * or you can set it programmatically later using {\@link AbstractControl#setValue} or
 * {\@link AbstractControl#patchValue}.
 *
 * **Listen to value**: If you want to listen to changes in the value of the control, you can
 * subscribe to the {\@link AbstractControl#valueChanges} event.  You can also listen to
 * {\@link AbstractControl#statusChanges} to be notified when the validation status is
 * re-calculated.
 *
 * ### Example
 *
 * {\@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}
 *
 * * **npm package**: `\@angular/forms`
 *
 * * **NgModule**: `ReactiveFormsModule`
 *
 *  \@stable
 */
var FormControlDirective = (function (_super) {
    __extends(FormControlDirective, _super);
    /**
     * @param {?} validators
     * @param {?} asyncValidators
     * @param {?} valueAccessors
     */
    function FormControlDirective(validators, asyncValidators, valueAccessors) {
        var _this = _super.call(this) || this;
        _this.update = new EventEmitter();
        _this._rawValidators = validators || [];
        _this._rawAsyncValidators = asyncValidators || [];
        _this.valueAccessor = selectValueAccessor(_this, valueAccessors);
        return _this;
    }
    Object.defineProperty(FormControlDirective.prototype, "isDisabled", {
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    FormControlDirective.prototype.ngOnChanges = function (changes) {
        if (this._isControlChanged(changes)) {
            setUpControl(this.form, this);
            if (this.control.disabled && ((this.valueAccessor)).setDisabledState) {
                ((((this.valueAccessor)).setDisabledState))(true);
            }
            this.form.updateValueAndValidity({ emitEvent: false });
        }
        if (isPropertyUpdated(changes, this.viewModel)) {
            this.form.setValue(this.model);
            this.viewModel = this.model;
        }
    };
    Object.defineProperty(FormControlDirective.prototype, "path", {
        /**
         * @return {?}
         */
        get: function () { return []; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormControlDirective.prototype, "validator", {
        /**
         * @return {?}
         */
        get: function () { return composeValidators(this._rawValidators); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormControlDirective.prototype, "asyncValidator", {
        /**
         * @return {?}
         */
        get: function () {
            return composeAsyncValidators(this._rawAsyncValidators);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormControlDirective.prototype, "control", {
        /**
         * @return {?}
         */
        get: function () { return this.form; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} newValue
     * @return {?}
     */
    FormControlDirective.prototype.viewToModelUpdate = function (newValue) {
        this.viewModel = newValue;
        this.update.emit(newValue);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    FormControlDirective.prototype._isControlChanged = function (changes) {
        return changes.hasOwnProperty('form');
    };
    return FormControlDirective;
}(NgControl));
FormControlDirective.decorators = [
    { type: Directive, args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' },] },
];
/**
 * @nocollapse
 */
FormControlDirective.ctorParameters = function () { return [
    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },
    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },
    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] },] },
]; };
FormControlDirective.propDecorators = {
    'form': [{ type: Input, args: ['formControl',] },],
    'model': [{ type: Input, args: ['ngModel',] },],
    'update': [{ type: Output, args: ['ngModelChange',] },],
    'isDisabled': [{ type: Input, args: ['disabled',] },],
};
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var formDirectiveProvider$1 = {
    provide: ControlContainer,
    useExisting: forwardRef(function () { return FormGroupDirective; })
};
/**
 * \@whatItDoes Binds an existing {\@link FormGroup} to a DOM element.
 *
 * \@howToUse
 *
 * This directive accepts an existing {\@link FormGroup} instance. It will then use this
 * {\@link FormGroup} instance to match any child {\@link FormControl}, {\@link FormGroup},
 * and {\@link FormArray} instances to child {\@link FormControlName}, {\@link FormGroupName},
 * and {\@link FormArrayName} directives.
 *
 * **Set value**: You can set the form's initial value when instantiating the
 * {\@link FormGroup}, or you can set it programmatically later using the {\@link FormGroup}'s
 * {\@link AbstractControl#setValue} or {\@link AbstractControl#patchValue} methods.
 *
 * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe
 * to the {\@link FormGroup}'s {\@link AbstractControl#valueChanges} event.  You can also listen to
 * its {\@link AbstractControl#statusChanges} event to be notified when the validation status is
 * re-calculated.
 *
 * Furthermore, you can listen to the directive's `ngSubmit` event to be notified when the user has
 * triggered a form submission. The `ngSubmit` event will be emitted with the original form
 * submission event.
 *
 * ### Example
 *
 * In this example, we create form controls for first name and last name.
 *
 * {\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}
 *
 * **npm package**: `\@angular/forms`
 *
 * **NgModule**: {\@link ReactiveFormsModule}
 *
 *  \@stable
 */
var FormGroupDirective = (function (_super) {
    __extends(FormGroupDirective, _super);
    /**
     * @param {?} _validators
     * @param {?} _asyncValidators
     */
    function FormGroupDirective(_validators, _asyncValidators) {
        var _this = _super.call(this) || this;
        _this._validators = _validators;
        _this._asyncValidators = _asyncValidators;
        _this._submitted = false;
        _this.directives = [];
        _this.form = ((null));
        _this.ngSubmit = new EventEmitter();
        return _this;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    FormGroupDirective.prototype.ngOnChanges = function (changes) {
        this._checkFormPresent();
        if (changes.hasOwnProperty('form')) {
            this._updateValidators();
            this._updateDomValue();
            this._updateRegistrations();
        }
    };
    Object.defineProperty(FormGroupDirective.prototype, "submitted", {
        /**
         * @return {?}
         */
        get: function () { return this._submitted; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormGroupDirective.prototype, "formDirective", {
        /**
         * @return {?}
         */
        get: function () { return this; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormGroupDirective.prototype, "control", {
        /**
         * @return {?}
         */
        get: function () { return this.form; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormGroupDirective.prototype, "path", {
        /**
         * @return {?}
         */
        get: function () { return []; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} dir
     * @return {?}
     */
    FormGroupDirective.prototype.addControl = function (dir) {
        var /** @type {?} */ ctrl = this.form.get(dir.path);
        setUpControl(ctrl, dir);
        ctrl.updateValueAndValidity({ emitEvent: false });
        this.directives.push(dir);
        return ctrl;
    };
    /**
     * @param {?} dir
     * @return {?}
     */
    FormGroupDirective.prototype.getControl = function (dir) { return (this.form.get(dir.path)); };
    /**
     * @param {?} dir
     * @return {?}
     */
    FormGroupDirective.prototype.removeControl = function (dir) { remove$1(this.directives, dir); };
    /**
     * @param {?} dir
     * @return {?}
     */
    FormGroupDirective.prototype.addFormGroup = function (dir) {
        var /** @type {?} */ ctrl = this.form.get(dir.path);
        setUpFormContainer(ctrl, dir);
        ctrl.updateValueAndValidity({ emitEvent: false });
    };
    /**
     * @param {?} dir
     * @return {?}
     */
    FormGroupDirective.prototype.removeFormGroup = function (dir) { };
    /**
     * @param {?} dir
     * @return {?}
     */
    FormGroupDirective.prototype.getFormGroup = function (dir) { return (this.form.get(dir.path)); };
    /**
     * @param {?} dir
     * @return {?}
     */
    FormGroupDirective.prototype.addFormArray = function (dir) {
        var /** @type {?} */ ctrl = this.form.get(dir.path);
        setUpFormContainer(ctrl, dir);
        ctrl.updateValueAndValidity({ emitEvent: false });
    };
    /**
     * @param {?} dir
     * @return {?}
     */
    FormGroupDirective.prototype.removeFormArray = function (dir) { };
    /**
     * @param {?} dir
     * @return {?}
     */
    FormGroupDirective.prototype.getFormArray = function (dir) { return (this.form.get(dir.path)); };
    /**
     * @param {?} dir
     * @param {?} value
     * @return {?}
     */
    FormGroupDirective.prototype.updateModel = function (dir, value) {
        var /** @type {?} */ ctrl = (this.form.get(dir.path));
        ctrl.setValue(value);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    FormGroupDirective.prototype.onSubmit = function ($event) {
        this._submitted = true;
        this.ngSubmit.emit($event);
        return false;
    };
    /**
     * @return {?}
     */
    FormGroupDirective.prototype.onReset = function () { this.resetForm(); };
    /**
     * @param {?=} value
     * @return {?}
     */
    FormGroupDirective.prototype.resetForm = function (value) {
        if (value === void 0) { value = undefined; }
        this.form.reset(value);
        this._submitted = false;
    };
    /**
     * \@internal
     * @return {?}
     */
    FormGroupDirective.prototype._updateDomValue = function () {
        var _this = this;
        this.directives.forEach(function (dir) {
            var /** @type {?} */ newCtrl = _this.form.get(dir.path);
            if (dir._control !== newCtrl) {
                cleanUpControl(dir._control, dir);
                if (newCtrl)
                    setUpControl(newCtrl, dir);
                dir._control = newCtrl;
            }
        });
        this.form._updateTreeValidity({ emitEvent: false });
    };
    /**
     * @return {?}
     */
    FormGroupDirective.prototype._updateRegistrations = function () {
        var _this = this;
        this.form._registerOnCollectionChange(function () { return _this._updateDomValue(); });
        if (this._oldForm)
            this._oldForm._registerOnCollectionChange(function () { });
        this._oldForm = this.form;
    };
    /**
     * @return {?}
     */
    FormGroupDirective.prototype._updateValidators = function () {
        var /** @type {?} */ sync = composeValidators(this._validators);
        this.form.validator = Validators.compose([/** @type {?} */ ((this.form.validator)), /** @type {?} */ ((sync))]);
        var /** @type {?} */ async = composeAsyncValidators(this._asyncValidators);
        this.form.asyncValidator = Validators.composeAsync([/** @type {?} */ ((this.form.asyncValidator)), /** @type {?} */ ((async))]);
    };
    /**
     * @return {?}
     */
    FormGroupDirective.prototype._checkFormPresent = function () {
        if (!this.form) {
            ReactiveErrors.missingFormException();
        }
    };
    return FormGroupDirective;
}(ControlContainer));
FormGroupDirective.decorators = [
    { type: Directive, args: [{
                selector: '[formGroup]',
                providers: [formDirectiveProvider$1],
                host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },
                exportAs: 'ngForm'
            },] },
];
/**
 * @nocollapse
 */
FormGroupDirective.ctorParameters = function () { return [
    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },
    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },
]; };
FormGroupDirective.propDecorators = {
    'form': [{ type: Input, args: ['formGroup',] },],
    'ngSubmit': [{ type: Output },],
};
/**
 * @template T
 * @param {?} list
 * @param {?} el
 * @return {?}
 */
function remove$1(list, el) {
    var /** @type {?} */ index = list.indexOf(el);
    if (index > -1) {
        list.splice(index, 1);
    }
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var formGroupNameProvider = {
    provide: ControlContainer,
    useExisting: forwardRef(function () { return FormGroupName; })
};
/**
 * \@whatItDoes Syncs a nested {\@link FormGroup} to a DOM element.
 *
 * \@howToUse
 *
 * This directive can only be used with a parent {\@link FormGroupDirective} (selector:
 * `[formGroup]`).
 *
 * It accepts the string name of the nested {\@link FormGroup} you want to link, and
 * will look for a {\@link FormGroup} registered with that name in the parent
 * {\@link FormGroup} instance you passed into {\@link FormGroupDirective}.
 *
 * Nested form groups can come in handy when you want to validate a sub-group of a
 * form separately from the rest or when you'd like to group the values of certain
 * controls into their own nested object.
 *
 * **Access the group**: You can access the associated {\@link FormGroup} using the
 * {\@link AbstractControl#get} method. Ex: `this.form.get('name')`.
 *
 * You can also access individual controls within the group using dot syntax.
 * Ex: `this.form.get('name.first')`
 *
 * **Get the value**: the `value` property is always synced and available on the
 * {\@link FormGroup}. See a full list of available properties in {\@link AbstractControl}.
 *
 * **Set the value**: You can set an initial value for each child control when instantiating
 * the {\@link FormGroup}, or you can set it programmatically later using
 * {\@link AbstractControl#setValue} or {\@link AbstractControl#patchValue}.
 *
 * **Listen to value**: If you want to listen to changes in the value of the group, you can
 * subscribe to the {\@link AbstractControl#valueChanges} event.  You can also listen to
 * {\@link AbstractControl#statusChanges} to be notified when the validation status is
 * re-calculated.
 *
 * ### Example
 *
 * {\@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}
 *
 * * **npm package**: `\@angular/forms`
 *
 * * **NgModule**: `ReactiveFormsModule`
 *
 * \@stable
 */
var FormGroupName = (function (_super) {
    __extends(FormGroupName, _super);
    /**
     * @param {?} parent
     * @param {?} validators
     * @param {?} asyncValidators
     */
    function FormGroupName(parent, validators, asyncValidators) {
        var _this = _super.call(this) || this;
        _this._parent = parent;
        _this._validators = validators;
        _this._asyncValidators = asyncValidators;
        return _this;
    }
    /**
     * \@internal
     * @return {?}
     */
    FormGroupName.prototype._checkParentType = function () {
        if (_hasInvalidParent(this._parent)) {
            ReactiveErrors.groupParentException();
        }
    };
    return FormGroupName;
}(AbstractFormGroupDirective));
FormGroupName.decorators = [
    { type: Directive, args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] },] },
];
/**
 * @nocollapse
 */
FormGroupName.ctorParameters = function () { return [
    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf },] },
    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },
    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },
]; };
FormGroupName.propDecorators = {
    'name': [{ type: Input, args: ['formGroupName',] },],
};
var formArrayNameProvider = {
    provide: ControlContainer,
    useExisting: forwardRef(function () { return FormArrayName; })
};
/**
 * \@whatItDoes Syncs a nested {\@link FormArray} to a DOM element.
 *
 * \@howToUse
 *
 * This directive is designed to be used with a parent {\@link FormGroupDirective} (selector:
 * `[formGroup]`).
 *
 * It accepts the string name of the nested {\@link FormArray} you want to link, and
 * will look for a {\@link FormArray} registered with that name in the parent
 * {\@link FormGroup} instance you passed into {\@link FormGroupDirective}.
 *
 * Nested form arrays can come in handy when you have a group of form controls but
 * you're not sure how many there will be. Form arrays allow you to create new
 * form controls dynamically.
 *
 * **Access the array**: You can access the associated {\@link FormArray} using the
 * {\@link AbstractControl#get} method on the parent {\@link FormGroup}.
 * Ex: `this.form.get('cities')`.
 *
 * **Get the value**: the `value` property is always synced and available on the
 * {\@link FormArray}. See a full list of available properties in {\@link AbstractControl}.
 *
 * **Set the value**: You can set an initial value for each child control when instantiating
 * the {\@link FormArray}, or you can set the value programmatically later using the
 * {\@link FormArray}'s {\@link AbstractControl#setValue} or {\@link AbstractControl#patchValue}
 * methods.
 *
 * **Listen to value**: If you want to listen to changes in the value of the array, you can
 * subscribe to the {\@link FormArray}'s {\@link AbstractControl#valueChanges} event.  You can also
 * listen to its {\@link AbstractControl#statusChanges} event to be notified when the validation
 * status is re-calculated.
 *
 * **Add new controls**: You can add new controls to the {\@link FormArray} dynamically by
 * calling its {\@link FormArray#push} method.
 *  Ex: `this.form.get('cities').push(new FormControl());`
 *
 * ### Example
 *
 * {\@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}
 *
 * * **npm package**: `\@angular/forms`
 *
 * * **NgModule**: `ReactiveFormsModule`
 *
 * \@stable
 */
var FormArrayName = (function (_super) {
    __extends(FormArrayName, _super);
    /**
     * @param {?} parent
     * @param {?} validators
     * @param {?} asyncValidators
     */
    function FormArrayName(parent, validators, asyncValidators) {
        var _this = _super.call(this) || this;
        _this._parent = parent;
        _this._validators = validators;
        _this._asyncValidators = asyncValidators;
        return _this;
    }
    /**
     * @return {?}
     */
    FormArrayName.prototype.ngOnInit = function () {
        this._checkParentType(); /** @type {?} */
        ((this.formDirective)).addFormArray(this);
    };
    /**
     * @return {?}
     */
    FormArrayName.prototype.ngOnDestroy = function () {
        if (this.formDirective) {
            this.formDirective.removeFormArray(this);
        }
    };
    Object.defineProperty(FormArrayName.prototype, "control", {
        /**
         * @return {?}
         */
        get: function () { return ((this.formDirective)).getFormArray(this); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormArrayName.prototype, "formDirective", {
        /**
         * @return {?}
         */
        get: function () {
            return this._parent ? (this._parent.formDirective) : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormArrayName.prototype, "path", {
        /**
         * @return {?}
         */
        get: function () { return controlPath(this.name, this._parent); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormArrayName.prototype, "validator", {
        /**
         * @return {?}
         */
        get: function () { return composeValidators(this._validators); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormArrayName.prototype, "asyncValidator", {
        /**
         * @return {?}
         */
        get: function () {
            return composeAsyncValidators(this._asyncValidators);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FormArrayName.prototype._checkParentType = function () {
        if (_hasInvalidParent(this._parent)) {
            ReactiveErrors.arrayParentException();
        }
    };
    return FormArrayName;
}(ControlContainer));
FormArrayName.decorators = [
    { type: Directive, args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] },] },
];
/**
 * @nocollapse
 */
FormArrayName.ctorParameters = function () { return [
    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf },] },
    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },
    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },
]; };
FormArrayName.propDecorators = {
    'name': [{ type: Input, args: ['formArrayName',] },],
};
/**
 * @param {?} parent
 * @return {?}
 */
function _hasInvalidParent(parent) {
    return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&
        !(parent instanceof FormArrayName);
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var controlNameBinding = {
    provide: NgControl,
    useExisting: forwardRef(function () { return FormControlName; })
};
/**
 * \@whatItDoes Syncs a {\@link FormControl} in an existing {\@link FormGroup} to a form control
 * element by name.
 *
 * In other words, this directive ensures that any values written to the {\@link FormControl}
 * instance programmatically will be written to the DOM element (model -> view). Conversely,
 * any values written to the DOM element through user input will be reflected in the
 * {\@link FormControl} instance (view -> model).
 *
 * \@howToUse
 *
 * This directive is designed to be used with a parent {\@link FormGroupDirective} (selector:
 * `[formGroup]`).
 *
 * It accepts the string name of the {\@link FormControl} instance you want to
 * link, and will look for a {\@link FormControl} registered with that name in the
 * closest {\@link FormGroup} or {\@link FormArray} above it.
 *
 * **Access the control**: You can access the {\@link FormControl} associated with
 * this directive by using the {\@link AbstractControl#get} method.
 * Ex: `this.form.get('first');`
 *
 * **Get value**: the `value` property is always synced and available on the {\@link FormControl}.
 * See a full list of available properties in {\@link AbstractControl}.
 *
 *  **Set value**: You can set an initial value for the control when instantiating the
 *  {\@link FormControl}, or you can set it programmatically later using
 *  {\@link AbstractControl#setValue} or {\@link AbstractControl#patchValue}.
 *
 * **Listen to value**: If you want to listen to changes in the value of the control, you can
 * subscribe to the {\@link AbstractControl#valueChanges} event.  You can also listen to
 * {\@link AbstractControl#statusChanges} to be notified when the validation status is
 * re-calculated.
 *
 * ### Example
 *
 * In this example, we create form controls for first name and last name.
 *
 * {\@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}
 *
 * To see `formControlName` examples with different form control types, see:
 *
 * * Radio buttons: {\@link RadioControlValueAccessor}
 * * Selects: {\@link SelectControlValueAccessor}
 *
 * **npm package**: `\@angular/forms`
 *
 * **NgModule**: {\@link ReactiveFormsModule}
 *
 *  \@stable
 */
var FormControlName = (function (_super) {
    __extends(FormControlName, _super);
    /**
     * @param {?} parent
     * @param {?} validators
     * @param {?} asyncValidators
     * @param {?} valueAccessors
     */
    function FormControlName(parent, validators, asyncValidators, valueAccessors) {
        var _this = _super.call(this) || this;
        _this._added = false;
        _this.update = new EventEmitter();
        _this._parent = parent;
        _this._rawValidators = validators || [];
        _this._rawAsyncValidators = asyncValidators || [];
        _this.valueAccessor = selectValueAccessor(_this, valueAccessors);
        return _this;
    }
    Object.defineProperty(FormControlName.prototype, "isDisabled", {
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    FormControlName.prototype.ngOnChanges = function (changes) {
        if (!this._added)
            this._setUpControl();
        if (isPropertyUpdated(changes, this.viewModel)) {
            this.viewModel = this.model;
            this.formDirective.updateModel(this, this.model);
        }
    };
    /**
     * @return {?}
     */
    FormControlName.prototype.ngOnDestroy = function () {
        if (this.formDirective) {
            this.formDirective.removeControl(this);
        }
    };
    /**
     * @param {?} newValue
     * @return {?}
     */
    FormControlName.prototype.viewToModelUpdate = function (newValue) {
        this.viewModel = newValue;
        this.update.emit(newValue);
    };
    Object.defineProperty(FormControlName.prototype, "path", {
        /**
         * @return {?}
         */
        get: function () { return controlPath(this.name, /** @type {?} */ ((this._parent))); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormControlName.prototype, "formDirective", {
        /**
         * @return {?}
         */
        get: function () { return this._parent ? this._parent.formDirective : null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormControlName.prototype, "validator", {
        /**
         * @return {?}
         */
        get: function () { return composeValidators(this._rawValidators); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormControlName.prototype, "asyncValidator", {
        /**
         * @return {?}
         */
        get: function () {
            return ((composeAsyncValidators(this._rawAsyncValidators)));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormControlName.prototype, "control", {
        /**
         * @return {?}
         */
        get: function () { return this._control; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FormControlName.prototype._checkParentType = function () {
        if (!(this._parent instanceof FormGroupName) &&
            this._parent instanceof AbstractFormGroupDirective) {
            ReactiveErrors.ngModelGroupException();
        }
        else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&
            !(this._parent instanceof FormArrayName)) {
            ReactiveErrors.controlParentException();
        }
    };
    /**
     * @return {?}
     */
    FormControlName.prototype._setUpControl = function () {
        this._checkParentType();
        this._control = this.formDirective.addControl(this);
        if (this.control.disabled && ((this.valueAccessor)).setDisabledState) {
            ((((this.valueAccessor)).setDisabledState))(true);
        }
        this._added = true;
    };
    return FormControlName;
}(NgControl));
FormControlName.decorators = [
    { type: Directive, args: [{ selector: '[formControlName]', providers: [controlNameBinding] },] },
];
/**
 * @nocollapse
 */
FormControlName.ctorParameters = function () { return [
    { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf },] },
    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },
    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },
    { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] },] },
]; };
FormControlName.propDecorators = {
    'name': [{ type: Input, args: ['formControlName',] },],
    'model': [{ type: Input, args: ['ngModel',] },],
    'update': [{ type: Output, args: ['ngModelChange',] },],
    'isDisabled': [{ type: Input, args: ['disabled',] },],
};
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var REQUIRED_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(function () { return RequiredValidator; }),
    multi: true
};
var CHECKBOX_REQUIRED_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(function () { return CheckboxRequiredValidator; }),
    multi: true
};
/**
 * A Directive that adds the `required` validator to any controls marked with the
 * `required` attribute, via the {\@link NG_VALIDATORS} binding.
 *
 * ### Example
 *
 * ```
 * <input name="fullName" ngModel required>
 * ```
 *
 * \@stable
 */
var RequiredValidator = (function () {
    function RequiredValidator() {
    }
    Object.defineProperty(RequiredValidator.prototype, "required", {
        /**
         * @return {?}
         */
        get: function () { return this._required; },
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this._required = value != null && value !== false && "" + value !== 'false';
            if (this._onChange)
                this._onChange();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} c
     * @return {?}
     */
    RequiredValidator.prototype.validate = function (c) {
        return this.required ? Validators.required(c) : null;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    RequiredValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
    return RequiredValidator;
}());
RequiredValidator.decorators = [
    { type: Directive, args: [{
                selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',
                providers: [REQUIRED_VALIDATOR],
                host: { '[attr.required]': 'required ? "" : null' }
            },] },
];
/**
 * @nocollapse
 */
RequiredValidator.ctorParameters = function () { return []; };
RequiredValidator.propDecorators = {
    'required': [{ type: Input },],
};
/**
 * A Directive that adds the `required` validator to checkbox controls marked with the
 * `required` attribute, via the {\@link NG_VALIDATORS} binding.
 *
 * ### Example
 *
 * ```
 * <input type="checkbox" name="active" ngModel required>
 * ```
 *
 * \@experimental
 */
var CheckboxRequiredValidator = (function (_super) {
    __extends(CheckboxRequiredValidator, _super);
    function CheckboxRequiredValidator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} c
     * @return {?}
     */
    CheckboxRequiredValidator.prototype.validate = function (c) {
        return this.required ? Validators.requiredTrue(c) : null;
    };
    return CheckboxRequiredValidator;
}(RequiredValidator));
CheckboxRequiredValidator.decorators = [
    { type: Directive, args: [{
                selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',
                providers: [CHECKBOX_REQUIRED_VALIDATOR],
                host: { '[attr.required]': 'required ? "" : null' }
            },] },
];
/**
 * @nocollapse
 */
CheckboxRequiredValidator.ctorParameters = function () { return []; };
/**
 * Provider which adds {\@link EmailValidator} to {\@link NG_VALIDATORS}.
 */
var EMAIL_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(function () { return EmailValidator; }),
    multi: true
};
/**
 * A Directive that adds the `email` validator to controls marked with the
 * `email` attribute, via the {\@link NG_VALIDATORS} binding.
 *
 * ### Example
 *
 * ```
 * <input type="email" name="email" ngModel email>
 * <input type="email" name="email" ngModel email="true">
 * <input type="email" name="email" ngModel [email]="true">
 * ```
 *
 * \@experimental
 */
var EmailValidator = (function () {
    function EmailValidator() {
    }
    Object.defineProperty(EmailValidator.prototype, "email", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            this._enabled = value === '' || value === true || value === 'true';
            if (this._onChange)
                this._onChange();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} c
     * @return {?}
     */
    EmailValidator.prototype.validate = function (c) {
        return this._enabled ? Validators.email(c) : null;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    EmailValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
    return EmailValidator;
}());
EmailValidator.decorators = [
    { type: Directive, args: [{
                selector: '[email][formControlName],[email][formControl],[email][ngModel]',
                providers: [EMAIL_VALIDATOR]
            },] },
];
/**
 * @nocollapse
 */
EmailValidator.ctorParameters = function () { return []; };
EmailValidator.propDecorators = {
    'email': [{ type: Input },],
};
/**
 * Provider which adds {\@link MinLengthValidator} to {\@link NG_VALIDATORS}.
 *
 * ## Example:
 *
 * {\@example common/forms/ts/validators/validators.ts region='min'}
 */
var MIN_LENGTH_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(function () { return MinLengthValidator; }),
    multi: true
};
/**
 * A directive which installs the {\@link MinLengthValidator} for any `formControlName`,
 * `formControl`, or control with `ngModel` that also has a `minlength` attribute.
 *
 * \@stable
 */
var MinLengthValidator = (function () {
    function MinLengthValidator() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    MinLengthValidator.prototype.ngOnChanges = function (changes) {
        if ('minlength' in changes) {
            this._createValidator();
            if (this._onChange)
                this._onChange();
        }
    };
    /**
     * @param {?} c
     * @return {?}
     */
    MinLengthValidator.prototype.validate = function (c) {
        return this.minlength == null ? null : this._validator(c);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    MinLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
    /**
     * @return {?}
     */
    MinLengthValidator.prototype._createValidator = function () {
        this._validator = Validators.minLength(parseInt(this.minlength, 10));
    };
    return MinLengthValidator;
}());
MinLengthValidator.decorators = [
    { type: Directive, args: [{
                selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',
                providers: [MIN_LENGTH_VALIDATOR],
                host: { '[attr.minlength]': 'minlength ? minlength : null' }
            },] },
];
/**
 * @nocollapse
 */
MinLengthValidator.ctorParameters = function () { return []; };
MinLengthValidator.propDecorators = {
    'minlength': [{ type: Input },],
};
/**
 * Provider which adds {\@link MaxLengthValidator} to {\@link NG_VALIDATORS}.
 *
 * ## Example:
 *
 * {\@example common/forms/ts/validators/validators.ts region='max'}
 */
var MAX_LENGTH_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(function () { return MaxLengthValidator; }),
    multi: true
};
/**
 * A directive which installs the {\@link MaxLengthValidator} for any `formControlName,
 * `formControl`,
 * or control with `ngModel` that also has a `maxlength` attribute.
 *
 * \@stable
 */
var MaxLengthValidator = (function () {
    function MaxLengthValidator() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    MaxLengthValidator.prototype.ngOnChanges = function (changes) {
        if ('maxlength' in changes) {
            this._createValidator();
            if (this._onChange)
                this._onChange();
        }
    };
    /**
     * @param {?} c
     * @return {?}
     */
    MaxLengthValidator.prototype.validate = function (c) {
        return this.maxlength != null ? this._validator(c) : null;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    MaxLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
    /**
     * @return {?}
     */
    MaxLengthValidator.prototype._createValidator = function () {
        this._validator = Validators.maxLength(parseInt(this.maxlength, 10));
    };
    return MaxLengthValidator;
}());
MaxLengthValidator.decorators = [
    { type: Directive, args: [{
                selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',
                providers: [MAX_LENGTH_VALIDATOR],
                host: { '[attr.maxlength]': 'maxlength ? maxlength : null' }
            },] },
];
/**
 * @nocollapse
 */
MaxLengthValidator.ctorParameters = function () { return []; };
MaxLengthValidator.propDecorators = {
    'maxlength': [{ type: Input },],
};
var PATTERN_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(function () { return PatternValidator; }),
    multi: true
};
/**
 * A Directive that adds the `pattern` validator to any controls marked with the
 * `pattern` attribute, via the {\@link NG_VALIDATORS} binding. Uses attribute value
 * as the regex to validate Control value against.  Follows pattern attribute
 * semantics; i.e. regex must match entire Control value.
 *
 * ### Example
 *
 * ```
 * <input [name]="fullName" pattern="[a-zA-Z ]*" ngModel>
 * ```
 * \@stable
 */
var PatternValidator = (function () {
    function PatternValidator() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    PatternValidator.prototype.ngOnChanges = function (changes) {
        if ('pattern' in changes) {
            this._createValidator();
            if (this._onChange)
                this._onChange();
        }
    };
    /**
     * @param {?} c
     * @return {?}
     */
    PatternValidator.prototype.validate = function (c) { return this._validator(c); };
    /**
     * @param {?} fn
     * @return {?}
     */
    PatternValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
    /**
     * @return {?}
     */
    PatternValidator.prototype._createValidator = function () { this._validator = Validators.pattern(this.pattern); };
    return PatternValidator;
}());
PatternValidator.decorators = [
    { type: Directive, args: [{
                selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',
                providers: [PATTERN_VALIDATOR],
                host: { '[attr.pattern]': 'pattern ? pattern : null' }
            },] },
];
/**
 * @nocollapse
 */
PatternValidator.ctorParameters = function () { return []; };
PatternValidator.propDecorators = {
    'pattern': [{ type: Input },],
};
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@whatItDoes Creates an {\@link AbstractControl} from a user-specified configuration.
 *
 * It is essentially syntactic sugar that shortens the `new FormGroup()`,
 * `new FormControl()`, and `new FormArray()` boilerplate that can build up in larger
 * forms.
 *
 * \@howToUse
 *
 * To use, inject `FormBuilder` into your component class. You can then call its methods
 * directly.
 *
 * {\@example forms/ts/formBuilder/form_builder_example.ts region='Component'}
 *
 *  * **npm package**: `\@angular/forms`
 *
 *  * **NgModule**: {\@link ReactiveFormsModule}
 *
 * \@stable
 */
var FormBuilder = (function () {
    function FormBuilder() {
    }
    /**
     * Construct a new {\@link FormGroup} with the given map of configuration.
     * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.
     *
     * See the {\@link FormGroup} constructor for more details.
     * @param {?} controlsConfig
     * @param {?=} extra
     * @return {?}
     */
    FormBuilder.prototype.group = function (controlsConfig, extra) {
        if (extra === void 0) { extra = null; }
        var /** @type {?} */ controls = this._reduceControls(controlsConfig);
        var /** @type {?} */ validator = extra != null ? extra['validator'] : null;
        var /** @type {?} */ asyncValidator = extra != null ? extra['asyncValidator'] : null;
        return new FormGroup(controls, validator, asyncValidator);
    };
    /**
     * Construct a new {\@link FormControl} with the given `formState`,`validator`, and
     * `asyncValidator`.
     *
     * `formState` can either be a standalone value for the form control or an object
     * that contains both a value and a disabled status.
     *
     * @param {?} formState
     * @param {?=} validator
     * @param {?=} asyncValidator
     * @return {?}
     */
    FormBuilder.prototype.control = function (formState, validator, asyncValidator) {
        return new FormControl(formState, validator, asyncValidator);
    };
    /**
     * Construct a {\@link FormArray} from the given `controlsConfig` array of
     * configuration, with the given optional `validator` and `asyncValidator`.
     * @param {?} controlsConfig
     * @param {?=} validator
     * @param {?=} asyncValidator
     * @return {?}
     */
    FormBuilder.prototype.array = function (controlsConfig, validator, asyncValidator) {
        var _this = this;
        var /** @type {?} */ controls = controlsConfig.map(function (c) { return _this._createControl(c); });
        return new FormArray(controls, validator, asyncValidator);
    };
    /**
     * \@internal
     * @param {?} controlsConfig
     * @return {?}
     */
    FormBuilder.prototype._reduceControls = function (controlsConfig) {
        var _this = this;
        var /** @type {?} */ controls = {};
        Object.keys(controlsConfig).forEach(function (controlName) {
            controls[controlName] = _this._createControl(controlsConfig[controlName]);
        });
        return controls;
    };
    /**
     * \@internal
     * @param {?} controlConfig
     * @return {?}
     */
    FormBuilder.prototype._createControl = function (controlConfig) {
        if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||
            controlConfig instanceof FormArray) {
            return controlConfig;
        }
        else if (Array.isArray(controlConfig)) {
            var /** @type {?} */ value = controlConfig[0];
            var /** @type {?} */ validator = controlConfig.length > 1 ? controlConfig[1] : null;
            var /** @type {?} */ asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;
            return this.control(value, validator, asyncValidator);
        }
        else {
            return this.control(controlConfig);
        }
    };
    return FormBuilder;
}());
FormBuilder.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
FormBuilder.ctorParameters = function () { return []; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @module
 * @description
 * Entry point for all public APIs of the common package.
 */
/**
 * \@stable
 */
var VERSION$3 = new Version('4.3.3');
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@whatItDoes Adds `novalidate` attribute to all forms by default.
 *
 * `novalidate` is used to disable browser's native form validation.
 *
 * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:
 *
 * ```
 * <form ngNativeValidate></form>
 * ```
 *
 * \@experimental
 */
var NgNoValidate = (function () {
    function NgNoValidate() {
    }
    return NgNoValidate;
}());
NgNoValidate.decorators = [
    { type: Directive, args: [{
                selector: 'form:not([ngNoForm]):not([ngNativeValidate])',
                host: { 'novalidate': '' },
            },] },
];
/**
 * @nocollapse
 */
NgNoValidate.ctorParameters = function () { return []; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var SHARED_FORM_DIRECTIVES = [
    NgNoValidate,
    NgSelectOption,
    NgSelectMultipleOption,
    DefaultValueAccessor,
    NumberValueAccessor,
    RangeValueAccessor,
    CheckboxControlValueAccessor,
    SelectControlValueAccessor,
    SelectMultipleControlValueAccessor,
    RadioControlValueAccessor,
    NgControlStatus,
    NgControlStatusGroup,
    RequiredValidator,
    MinLengthValidator,
    MaxLengthValidator,
    PatternValidator,
    CheckboxRequiredValidator,
    EmailValidator,
];
var TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];
var REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];
/**
 * Internal module used for sharing directives between FormsModule and ReactiveFormsModule
 */
var InternalFormsSharedModule = (function () {
    function InternalFormsSharedModule() {
    }
    return InternalFormsSharedModule;
}());
InternalFormsSharedModule.decorators = [
    { type: NgModule, args: [{
                declarations: SHARED_FORM_DIRECTIVES,
                exports: SHARED_FORM_DIRECTIVES,
            },] },
];
/**
 * @nocollapse
 */
InternalFormsSharedModule.ctorParameters = function () { return []; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * The ng module for forms.
 * \@stable
 */
var FormsModule = (function () {
    function FormsModule() {
    }
    return FormsModule;
}());
FormsModule.decorators = [
    { type: NgModule, args: [{
                declarations: TEMPLATE_DRIVEN_DIRECTIVES,
                providers: [RadioControlRegistry],
                exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]
            },] },
];
/**
 * @nocollapse
 */
FormsModule.ctorParameters = function () { return []; };
/**
 * The ng module for reactive forms.
 * \@stable
 */
var ReactiveFormsModule = (function () {
    function ReactiveFormsModule() {
    }
    return ReactiveFormsModule;
}());
ReactiveFormsModule.decorators = [
    { type: NgModule, args: [{
                declarations: [REACTIVE_DRIVEN_DIRECTIVES],
                providers: [FormBuilder, RadioControlRegistry],
                exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]
            },] },
];
/**
 * @nocollapse
 */
ReactiveFormsModule.ctorParameters = function () { return []; };




var forms_es5 = Object.freeze({
	AbstractControlDirective: AbstractControlDirective,
	AbstractFormGroupDirective: AbstractFormGroupDirective,
	CheckboxControlValueAccessor: CheckboxControlValueAccessor,
	ControlContainer: ControlContainer,
	NG_VALUE_ACCESSOR: NG_VALUE_ACCESSOR,
	COMPOSITION_BUFFER_MODE: COMPOSITION_BUFFER_MODE,
	DefaultValueAccessor: DefaultValueAccessor,
	NgControl: NgControl,
	NgControlStatus: NgControlStatus,
	NgControlStatusGroup: NgControlStatusGroup,
	NgForm: NgForm,
	NgModel: NgModel,
	NgModelGroup: NgModelGroup,
	RadioControlValueAccessor: RadioControlValueAccessor,
	FormControlDirective: FormControlDirective,
	FormControlName: FormControlName,
	FormGroupDirective: FormGroupDirective,
	FormArrayName: FormArrayName,
	FormGroupName: FormGroupName,
	NgSelectOption: NgSelectOption,
	SelectControlValueAccessor: SelectControlValueAccessor,
	SelectMultipleControlValueAccessor: SelectMultipleControlValueAccessor,
	CheckboxRequiredValidator: CheckboxRequiredValidator,
	EmailValidator: EmailValidator,
	MaxLengthValidator: MaxLengthValidator,
	MinLengthValidator: MinLengthValidator,
	PatternValidator: PatternValidator,
	RequiredValidator: RequiredValidator,
	FormBuilder: FormBuilder,
	AbstractControl: AbstractControl,
	FormArray: FormArray,
	FormControl: FormControl,
	FormGroup: FormGroup,
	NG_ASYNC_VALIDATORS: NG_ASYNC_VALIDATORS,
	NG_VALIDATORS: NG_VALIDATORS,
	Validators: Validators,
	VERSION: VERSION$3,
	FormsModule: FormsModule,
	ReactiveFormsModule: ReactiveFormsModule,
	ɵba: InternalFormsSharedModule,
	ɵz: REACTIVE_DRIVEN_DIRECTIVES,
	ɵx: SHARED_FORM_DIRECTIVES,
	ɵy: TEMPLATE_DRIVEN_DIRECTIVES,
	ɵa: CHECKBOX_VALUE_ACCESSOR,
	ɵb: DEFAULT_VALUE_ACCESSOR,
	ɵc: AbstractControlStatus,
	ɵd: ngControlStatusHost,
	ɵe: formDirectiveProvider,
	ɵf: formControlBinding,
	ɵg: modelGroupProvider,
	ɵbf: NgNoValidate,
	ɵbb: NUMBER_VALUE_ACCESSOR,
	ɵbc: NumberValueAccessor,
	ɵh: RADIO_VALUE_ACCESSOR,
	ɵi: RadioControlRegistry,
	ɵbd: RANGE_VALUE_ACCESSOR,
	ɵbe: RangeValueAccessor,
	ɵj: formControlBinding$1,
	ɵk: controlNameBinding,
	ɵl: formDirectiveProvider$1,
	ɵn: formArrayNameProvider,
	ɵm: formGroupNameProvider,
	ɵo: SELECT_VALUE_ACCESSOR,
	ɵq: NgSelectMultipleOption,
	ɵp: SELECT_MULTIPLE_VALUE_ACCESSOR,
	ɵs: CHECKBOX_REQUIRED_VALIDATOR,
	ɵt: EMAIL_VALIDATOR,
	ɵv: MAX_LENGTH_VALIDATOR,
	ɵu: MIN_LENGTH_VALIDATOR,
	ɵw: PATTERN_VALIDATOR,
	ɵr: REQUIRED_VALIDATOR
});

/**
 * @license Angular v4.3.3
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A backend for http that uses the `XMLHttpRequest` browser API.
 *
 * Take care not to evaluate this in non-browser contexts.
 *
 * \@experimental
 */
var BrowserXhr = (function () {
    function BrowserXhr() {
    }
    /**
     * @return {?}
     */
    BrowserXhr.prototype.build = function () { return ((new XMLHttpRequest())); };
    return BrowserXhr;
}());
BrowserXhr.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
BrowserXhr.ctorParameters = function () { return []; };
var RequestMethod = {};
RequestMethod.Get = 0;
RequestMethod.Post = 1;
RequestMethod.Put = 2;
RequestMethod.Delete = 3;
RequestMethod.Options = 4;
RequestMethod.Head = 5;
RequestMethod.Patch = 6;
RequestMethod[RequestMethod.Get] = "Get";
RequestMethod[RequestMethod.Post] = "Post";
RequestMethod[RequestMethod.Put] = "Put";
RequestMethod[RequestMethod.Delete] = "Delete";
RequestMethod[RequestMethod.Options] = "Options";
RequestMethod[RequestMethod.Head] = "Head";
RequestMethod[RequestMethod.Patch] = "Patch";
var ReadyState = {};
ReadyState.Unsent = 0;
ReadyState.Open = 1;
ReadyState.HeadersReceived = 2;
ReadyState.Loading = 3;
ReadyState.Done = 4;
ReadyState.Cancelled = 5;
ReadyState[ReadyState.Unsent] = "Unsent";
ReadyState[ReadyState.Open] = "Open";
ReadyState[ReadyState.HeadersReceived] = "HeadersReceived";
ReadyState[ReadyState.Loading] = "Loading";
ReadyState[ReadyState.Done] = "Done";
ReadyState[ReadyState.Cancelled] = "Cancelled";
var ResponseType = {};
ResponseType.Basic = 0;
ResponseType.Cors = 1;
ResponseType.Default = 2;
ResponseType.Error = 3;
ResponseType.Opaque = 4;
ResponseType[ResponseType.Basic] = "Basic";
ResponseType[ResponseType.Cors] = "Cors";
ResponseType[ResponseType.Default] = "Default";
ResponseType[ResponseType.Error] = "Error";
ResponseType[ResponseType.Opaque] = "Opaque";
var ContentType = {};
ContentType.NONE = 0;
ContentType.JSON = 1;
ContentType.FORM = 2;
ContentType.FORM_DATA = 3;
ContentType.TEXT = 4;
ContentType.BLOB = 5;
ContentType.ARRAY_BUFFER = 6;
ContentType[ContentType.NONE] = "NONE";
ContentType[ContentType.JSON] = "JSON";
ContentType[ContentType.FORM] = "FORM";
ContentType[ContentType.FORM_DATA] = "FORM_DATA";
ContentType[ContentType.TEXT] = "TEXT";
ContentType[ContentType.BLOB] = "BLOB";
ContentType[ContentType.ARRAY_BUFFER] = "ARRAY_BUFFER";
var ResponseContentType = {};
ResponseContentType.Text = 0;
ResponseContentType.Json = 1;
ResponseContentType.ArrayBuffer = 2;
ResponseContentType.Blob = 3;
ResponseContentType[ResponseContentType.Text] = "Text";
ResponseContentType[ResponseContentType.Json] = "Json";
ResponseContentType[ResponseContentType.ArrayBuffer] = "ArrayBuffer";
ResponseContentType[ResponseContentType.Blob] = "Blob";
/**
 * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as
 * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).
 *
 * The only known difference between this `Headers` implementation and the spec is the
 * lack of an `entries` method.
 *
 * ### Example
 *
 * ```
 * import {Headers} from '\@angular/http';
 *
 * var firstHeaders = new Headers();
 * firstHeaders.append('Content-Type', 'image/jpeg');
 * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'
 *
 * // Create headers from Plain Old JavaScript Object
 * var secondHeaders = new Headers({
 *   'X-My-Custom-Header': 'Angular'
 * });
 * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'
 *
 * var thirdHeaders = new Headers(secondHeaders);
 * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'
 * ```
 *
 * \@experimental
 */
var Headers = (function () {
    /**
     * @param {?=} headers
     */
    function Headers(headers) {
        var _this = this;
        /**
         * \@internal header names are lower case
         */
        this._headers = new Map();
        /**
         * \@internal map lower case names to actual names
         */
        this._normalizedNames = new Map();
        if (!headers) {
            return;
        }
        if (headers instanceof Headers) {
            headers.forEach(function (values, name) {
                values.forEach(function (value) { return _this.append(name, value); });
            });
            return;
        }
        Object.keys(headers).forEach(function (name) {
            var values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];
            _this.delete(name);
            values.forEach(function (value) { return _this.append(name, value); });
        });
    }
    /**
     * Returns a new Headers instance from the given DOMString of Response Headers
     * @param {?} headersString
     * @return {?}
     */
    Headers.fromResponseHeaderString = function (headersString) {
        var /** @type {?} */ headers = new Headers();
        headersString.split('\n').forEach(function (line) {
            var /** @type {?} */ index = line.indexOf(':');
            if (index > 0) {
                var /** @type {?} */ name = line.slice(0, index);
                var /** @type {?} */ value = line.slice(index + 1).trim();
                headers.set(name, value);
            }
        });
        return headers;
    };
    /**
     * Appends a header to existing list of header values for a given header name.
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    Headers.prototype.append = function (name, value) {
        var /** @type {?} */ values = this.getAll(name);
        if (values === null) {
            this.set(name, value);
        }
        else {
            values.push(value);
        }
    };
    /**
     * Deletes all header values for the given name.
     * @param {?} name
     * @return {?}
     */
    Headers.prototype.delete = function (name) {
        var /** @type {?} */ lcName = name.toLowerCase();
        this._normalizedNames.delete(lcName);
        this._headers.delete(lcName);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    Headers.prototype.forEach = function (fn) {
        var _this = this;
        this._headers.forEach(function (values, lcName) { return fn(values, _this._normalizedNames.get(lcName), _this._headers); });
    };
    /**
     * Returns first header that matches given name.
     * @param {?} name
     * @return {?}
     */
    Headers.prototype.get = function (name) {
        var /** @type {?} */ values = this.getAll(name);
        if (values === null) {
            return null;
        }
        return values.length > 0 ? values[0] : null;
    };
    /**
     * Checks for existence of header by given name.
     * @param {?} name
     * @return {?}
     */
    Headers.prototype.has = function (name) { return this._headers.has(name.toLowerCase()); };
    /**
     * Returns the names of the headers
     * @return {?}
     */
    Headers.prototype.keys = function () { return Array.from(this._normalizedNames.values()); };
    /**
     * Sets or overrides header value for given name.
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    Headers.prototype.set = function (name, value) {
        if (Array.isArray(value)) {
            if (value.length) {
                this._headers.set(name.toLowerCase(), [value.join(',')]);
            }
        }
        else {
            this._headers.set(name.toLowerCase(), [value]);
        }
        this.mayBeSetNormalizedName(name);
    };
    /**
     * Returns values of all headers.
     * @return {?}
     */
    Headers.prototype.values = function () { return Array.from(this._headers.values()); };
    /**
     * @return {?}
     */
    Headers.prototype.toJSON = function () {
        var _this = this;
        var /** @type {?} */ serialized = {};
        this._headers.forEach(function (values, name) {
            var /** @type {?} */ split = [];
            values.forEach(function (v) { return split.push.apply(split, v.split(',')); });
            serialized[((_this._normalizedNames.get(name)))] = split;
        });
        return serialized;
    };
    /**
     * Returns list of header values for a given name.
     * @param {?} name
     * @return {?}
     */
    Headers.prototype.getAll = function (name) {
        return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;
    };
    /**
     * This method is not implemented.
     * @return {?}
     */
    Headers.prototype.entries = function () { throw new Error('"entries" method is not implemented on Headers class'); };
    /**
     * @param {?} name
     * @return {?}
     */
    Headers.prototype.mayBeSetNormalizedName = function (name) {
        var /** @type {?} */ lcName = name.toLowerCase();
        if (!this._normalizedNames.has(lcName)) {
            this._normalizedNames.set(lcName, name);
        }
    };
    return Headers;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Creates a response options object to be optionally provided when instantiating a
 * {\@link Response}.
 *
 * This class is based on the `ResponseInit` description in the [Fetch
 * Spec](https://fetch.spec.whatwg.org/#responseinit).
 *
 * All values are null by default. Typical defaults can be found in the
 * {\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.
 *
 * This class may be used in tests to build {\@link Response Responses} for
 * mock responses (see {\@link MockBackend}).
 *
 * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))
 *
 * ```typescript
 * import {ResponseOptions, Response} from '\@angular/http';
 *
 * var options = new ResponseOptions({
 *   body: '{"name":"Jeff"}'
 * });
 * var res = new Response(options);
 *
 * console.log('res.json():', res.json()); // Object {name: "Jeff"}
 * ```
 *
 * \@experimental
 */
var ResponseOptions = (function () {
    /**
     * @param {?=} opts
     */
    function ResponseOptions(opts) {
        if (opts === void 0) { opts = {}; }
        var body = opts.body, status = opts.status, headers = opts.headers, statusText = opts.statusText, type = opts.type, url = opts.url;
        this.body = body != null ? body : null;
        this.status = status != null ? status : null;
        this.headers = headers != null ? headers : null;
        this.statusText = statusText != null ? statusText : null;
        this.type = type != null ? type : null;
        this.url = url != null ? url : null;
    }
    /**
     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to
     * override
     * existing values. This method will not change the values of the instance on which it is being
     * called.
     *
     * This may be useful when sharing a base `ResponseOptions` object inside tests,
     * where certain properties may change from test to test.
     *
     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))
     *
     * ```typescript
     * import {ResponseOptions, Response} from '\@angular/http';
     *
     * var options = new ResponseOptions({
     *   body: {name: 'Jeff'}
     * });
     * var res = new Response(options.merge({
     *   url: 'https://google.com'
     * }));
     * console.log('options.url:', options.url); // null
     * console.log('res.json():', res.json()); // Object {name: "Jeff"}
     * console.log('res.url:', res.url); // https://google.com
     * ```
     * @param {?=} options
     * @return {?}
     */
    ResponseOptions.prototype.merge = function (options) {
        return new ResponseOptions({
            body: options && options.body != null ? options.body : this.body,
            status: options && options.status != null ? options.status : this.status,
            headers: options && options.headers != null ? options.headers : this.headers,
            statusText: options && options.statusText != null ? options.statusText : this.statusText,
            type: options && options.type != null ? options.type : this.type,
            url: options && options.url != null ? options.url : this.url,
        });
    };
    return ResponseOptions;
}());
/**
 * Subclass of {\@link ResponseOptions}, with default values.
 *
 * Default values:
 *  * status: 200
 *  * headers: empty {\@link Headers} object
 *
 * This class could be extended and bound to the {\@link ResponseOptions} class
 * when configuring an {\@link Injector}, in order to override the default options
 * used by {\@link Http} to create {\@link Response Responses}.
 *
 * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))
 *
 * ```typescript
 * import {provide} from '\@angular/core';
 * import {bootstrap} from '\@angular/platform-browser/browser';
 * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from
 * '\@angular/http';
 * import {App} from './myapp';
 *
 * class MyOptions extends BaseResponseOptions {
 *   headers:Headers = new Headers({network: 'github'});
 * }
 *
 * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);
 * ```
 *
 * The options could also be extended when manually creating a {\@link Response}
 * object.
 *
 * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))
 *
 * ```
 * import {BaseResponseOptions, Response} from '\@angular/http';
 *
 * var options = new BaseResponseOptions();
 * var res = new Response(options.merge({
 *   body: 'Angular',
 *   headers: new Headers({framework: 'angular'})
 * }));
 * console.log('res.headers.get("framework"):', res.headers.get('framework')); // angular
 * console.log('res.text():', res.text()); // Angular;
 * ```
 *
 * \@experimental
 */
var BaseResponseOptions = (function (_super) {
    __extends(BaseResponseOptions, _super);
    function BaseResponseOptions() {
        return _super.call(this, { status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers() }) || this;
    }
    return BaseResponseOptions;
}(ResponseOptions));
BaseResponseOptions.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
BaseResponseOptions.ctorParameters = function () { return []; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Abstract class from which real backends are derived.
 *
 * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given
 * {\@link Request}.
 *
 * \@experimental
 * @abstract
 */
var ConnectionBackend = (function () {
    function ConnectionBackend() {
    }
    /**
     * @abstract
     * @param {?} request
     * @return {?}
     */
    ConnectionBackend.prototype.createConnection = function (request) { };
    return ConnectionBackend;
}());
/**
 * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.
 *
 * \@experimental
 * @abstract
 */
var XSRFStrategy = (function () {
    function XSRFStrategy() {
    }
    /**
     * @abstract
     * @param {?} req
     * @return {?}
     */
    XSRFStrategy.prototype.configureRequest = function (req) { };
    return XSRFStrategy;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} method
 * @return {?}
 */
function normalizeMethodName(method) {
    if (typeof method !== 'string')
        return method;
    switch (method.toUpperCase()) {
        case 'GET':
            return RequestMethod.Get;
        case 'POST':
            return RequestMethod.Post;
        case 'PUT':
            return RequestMethod.Put;
        case 'DELETE':
            return RequestMethod.Delete;
        case 'OPTIONS':
            return RequestMethod.Options;
        case 'HEAD':
            return RequestMethod.Head;
        case 'PATCH':
            return RequestMethod.Patch;
    }
    throw new Error("Invalid request method. The method \"" + method + "\" is not supported.");
}
var isSuccess = function (status) { return (status >= 200 && status < 300); };
/**
 * @param {?} xhr
 * @return {?}
 */
function getResponseURL(xhr) {
    if ('responseURL' in xhr) {
        return xhr.responseURL;
    }
    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
        return xhr.getResponseHeader('X-Request-URL');
    }
    return null;
}
/**
 * @param {?} input
 * @return {?}
 */
/**
 * @param {?} input
 * @return {?}
 */
function stringToArrayBuffer(input) {
    var /** @type {?} */ view = new Uint16Array(input.length);
    for (var /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {
        view[i] = input.charCodeAt(i);
    }
    return view.buffer;
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 * @param {?=} rawParams
 * @return {?}
 */
function paramParser(rawParams) {
    if (rawParams === void 0) { rawParams = ''; }
    var /** @type {?} */ map = new Map();
    if (rawParams.length > 0) {
        var /** @type {?} */ params = rawParams.split('&');
        params.forEach(function (param) {
            var /** @type {?} */ eqIdx = param.indexOf('=');
            var _a = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)], key = _a[0], val = _a[1];
            var /** @type {?} */ list = map.get(key) || [];
            list.push(val);
            map.set(key, list);
        });
    }
    return map;
}
/**
 * \@experimental
 *
 */
var QueryEncoder = (function () {
    function QueryEncoder() {
    }
    /**
     * @param {?} k
     * @return {?}
     */
    QueryEncoder.prototype.encodeKey = function (k) { return standardEncoding(k); };
    /**
     * @param {?} v
     * @return {?}
     */
    QueryEncoder.prototype.encodeValue = function (v) { return standardEncoding(v); };
    return QueryEncoder;
}());
/**
 * @param {?} v
 * @return {?}
 */
function standardEncoding(v) {
    return encodeURIComponent(v)
        .replace(/%40/gi, '@')
        .replace(/%3A/gi, ':')
        .replace(/%24/gi, '$')
        .replace(/%2C/gi, ',')
        .replace(/%3B/gi, ';')
        .replace(/%2B/gi, '+')
        .replace(/%3D/gi, '=')
        .replace(/%3F/gi, '?')
        .replace(/%2F/gi, '/');
}
/**
 * Map-like representation of url search parameters, based on
 * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,
 * with several extensions for merging URLSearchParams objects:
 *   - setAll()
 *   - appendAll()
 *   - replaceAll()
 *
 * This class accepts an optional second parameter of ${\@link QueryEncoder},
 * which is used to serialize parameters before making a request. By default,
 * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,
 * and then un-encodes certain characters that are allowed to be part of the query
 * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.
 *
 * These are the characters that are not encoded: `! $ \' ( ) * + , ; A 9 - . _ ~ ? /`
 *
 * If the set of allowed query characters is not acceptable for a particular backend,
 * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.
 *
 * ```
 * import {URLSearchParams, QueryEncoder} from '\@angular/http';
 * class MyQueryEncoder extends QueryEncoder {
 *   encodeKey(k: string): string {
 *     return myEncodingFunction(k);
 *   }
 *
 *   encodeValue(v: string): string {
 *     return myEncodingFunction(v);
 *   }
 * }
 *
 * let params = new URLSearchParams('', new MyQueryEncoder());
 * ```
 * \@experimental
 */
var URLSearchParams = (function () {
    /**
     * @param {?=} rawParams
     * @param {?=} queryEncoder
     */
    function URLSearchParams(rawParams, queryEncoder) {
        if (rawParams === void 0) { rawParams = ''; }
        if (queryEncoder === void 0) { queryEncoder = new QueryEncoder(); }
        this.rawParams = rawParams;
        this.queryEncoder = queryEncoder;
        this.paramsMap = paramParser(rawParams);
    }
    /**
     * @return {?}
     */
    URLSearchParams.prototype.clone = function () {
        var /** @type {?} */ clone = new URLSearchParams('', this.queryEncoder);
        clone.appendAll(this);
        return clone;
    };
    /**
     * @param {?} param
     * @return {?}
     */
    URLSearchParams.prototype.has = function (param) { return this.paramsMap.has(param); };
    /**
     * @param {?} param
     * @return {?}
     */
    URLSearchParams.prototype.get = function (param) {
        var /** @type {?} */ storedParam = this.paramsMap.get(param);
        return Array.isArray(storedParam) ? storedParam[0] : null;
    };
    /**
     * @param {?} param
     * @return {?}
     */
    URLSearchParams.prototype.getAll = function (param) { return this.paramsMap.get(param) || []; };
    /**
     * @param {?} param
     * @param {?} val
     * @return {?}
     */
    URLSearchParams.prototype.set = function (param, val) {
        if (val === void 0 || val === null) {
            this.delete(param);
            return;
        }
        var /** @type {?} */ list = this.paramsMap.get(param) || [];
        list.length = 0;
        list.push(val);
        this.paramsMap.set(param, list);
    };
    /**
     * @param {?} searchParams
     * @return {?}
     */
    URLSearchParams.prototype.setAll = function (searchParams) {
        var _this = this;
        searchParams.paramsMap.forEach(function (value, param) {
            var /** @type {?} */ list = _this.paramsMap.get(param) || [];
            list.length = 0;
            list.push(value[0]);
            _this.paramsMap.set(param, list);
        });
    };
    /**
     * @param {?} param
     * @param {?} val
     * @return {?}
     */
    URLSearchParams.prototype.append = function (param, val) {
        if (val === void 0 || val === null)
            return;
        var /** @type {?} */ list = this.paramsMap.get(param) || [];
        list.push(val);
        this.paramsMap.set(param, list);
    };
    /**
     * @param {?} searchParams
     * @return {?}
     */
    URLSearchParams.prototype.appendAll = function (searchParams) {
        var _this = this;
        searchParams.paramsMap.forEach(function (value, param) {
            var /** @type {?} */ list = _this.paramsMap.get(param) || [];
            for (var /** @type {?} */ i = 0; i < value.length; ++i) {
                list.push(value[i]);
            }
            _this.paramsMap.set(param, list);
        });
    };
    /**
     * @param {?} searchParams
     * @return {?}
     */
    URLSearchParams.prototype.replaceAll = function (searchParams) {
        var _this = this;
        searchParams.paramsMap.forEach(function (value, param) {
            var /** @type {?} */ list = _this.paramsMap.get(param) || [];
            list.length = 0;
            for (var /** @type {?} */ i = 0; i < value.length; ++i) {
                list.push(value[i]);
            }
            _this.paramsMap.set(param, list);
        });
    };
    /**
     * @return {?}
     */
    URLSearchParams.prototype.toString = function () {
        var _this = this;
        var /** @type {?} */ paramsList = [];
        this.paramsMap.forEach(function (values, k) {
            values.forEach(function (v) { return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v)); });
        });
        return paramsList.join('&');
    };
    /**
     * @param {?} param
     * @return {?}
     */
    URLSearchParams.prototype.delete = function (param) { this.paramsMap.delete(param); };
    return URLSearchParams;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * HTTP request body used by both {\@link Request} and {\@link Response}
 * https://fetch.spec.whatwg.org/#body
 * @abstract
 */
var Body = (function () {
    function Body() {
    }
    /**
     * Attempts to return body as parsed `JSON` object, or raises an exception.
     * @return {?}
     */
    Body.prototype.json = function () {
        if (typeof this._body === 'string') {
            return JSON.parse(/** @type {?} */ (this._body));
        }
        if (this._body instanceof ArrayBuffer) {
            return JSON.parse(this.text());
        }
        return this._body;
    };
    /**
     * Returns the body as a string, presuming `toString()` can be called on the response body.
     *
     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the
     * bytes in the buffer will be interpreted. Valid values are:
     *
     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters
     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.
     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken
     *   into consideration. This is the default behavior to avoid breaking apps, but should be
     *   considered deprecated.
     *
     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).
     * @param {?=} encodingHint
     * @return {?}
     */
    Body.prototype.text = function (encodingHint) {
        if (encodingHint === void 0) { encodingHint = 'legacy'; }
        if (this._body instanceof URLSearchParams) {
            return this._body.toString();
        }
        if (this._body instanceof ArrayBuffer) {
            switch (encodingHint) {
                case 'legacy':
                    return String.fromCharCode.apply(null, new Uint16Array(/** @type {?} */ (this._body)));
                case 'iso-8859':
                    return String.fromCharCode.apply(null, new Uint8Array(/** @type {?} */ (this._body)));
                default:
                    throw new Error("Invalid value for encodingHint: " + encodingHint);
            }
        }
        if (this._body == null) {
            return '';
        }
        if (typeof this._body === 'object') {
            return JSON.stringify(this._body, null, 2);
        }
        return this._body.toString();
    };
    /**
     * Return the body as an ArrayBuffer
     * @return {?}
     */
    Body.prototype.arrayBuffer = function () {
        if (this._body instanceof ArrayBuffer) {
            return (this._body);
        }
        return stringToArrayBuffer(this.text());
    };
    /**
     * Returns the request's body as a Blob, assuming that body exists.
     * @return {?}
     */
    Body.prototype.blob = function () {
        if (this._body instanceof Blob) {
            return (this._body);
        }
        if (this._body instanceof ArrayBuffer) {
            return new Blob([this._body]);
        }
        throw new Error('The request body isn\'t either a blob or an array buffer');
    };
    return Body;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Creates `Response` instances from provided values.
 *
 * Though this object isn't
 * usually instantiated by end-users, it is the primary object interacted with when it comes time to
 * add data to a view.
 *
 * ### Example
 *
 * ```
 * http.request('my-friends.txt').subscribe(response => this.friends = response.text());
 * ```
 *
 * The Response's interface is inspired by the Response constructor defined in the [Fetch
 * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body
 * can be accessed many times. There are other differences in the implementation, but this is the
 * most significant.
 *
 * \@experimental
 */
var Response = (function (_super) {
    __extends(Response, _super);
    /**
     * @param {?} responseOptions
     */
    function Response(responseOptions) {
        var _this = _super.call(this) || this;
        _this._body = responseOptions.body;
        _this.status = responseOptions.status;
        _this.ok = (_this.status >= 200 && _this.status <= 299);
        _this.statusText = responseOptions.statusText;
        _this.headers = responseOptions.headers;
        _this.type = responseOptions.type;
        _this.url = responseOptions.url;
        return _this;
    }
    /**
     * @return {?}
     */
    Response.prototype.toString = function () {
        return "Response with status: " + this.status + " " + this.statusText + " for URL: " + this.url;
    };
    return Response;
}(Body));
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var _nextRequestId = 0;
var JSONP_HOME = '__ng_jsonp__';
var _jsonpConnections = null;
/**
 * @return {?}
 */
function _getJsonpConnections() {
    var /** @type {?} */ w = typeof window == 'object' ? window : {};
    if (_jsonpConnections === null) {
        _jsonpConnections = w[JSONP_HOME] = {};
    }
    return _jsonpConnections;
}
var BrowserJsonp = (function () {
    function BrowserJsonp() {
    }
    /**
     * @param {?} url
     * @return {?}
     */
    BrowserJsonp.prototype.build = function (url) {
        var /** @type {?} */ node = document.createElement('script');
        node.src = url;
        return node;
    };
    /**
     * @return {?}
     */
    BrowserJsonp.prototype.nextRequestID = function () { return "__req" + _nextRequestId++; };
    /**
     * @param {?} id
     * @return {?}
     */
    BrowserJsonp.prototype.requestCallback = function (id) { return JSONP_HOME + "." + id + ".finished"; };
    /**
     * @param {?} id
     * @param {?} connection
     * @return {?}
     */
    BrowserJsonp.prototype.exposeConnection = function (id, connection) {
        var /** @type {?} */ connections = _getJsonpConnections();
        connections[id] = connection;
    };
    /**
     * @param {?} id
     * @return {?}
     */
    BrowserJsonp.prototype.removeConnection = function (id) {
        var /** @type {?} */ connections = _getJsonpConnections();
        connections[id] = null;
    };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserJsonp.prototype.send = function (node) { document.body.appendChild(/** @type {?} */ ((node))); };
    /**
     * @param {?} node
     * @return {?}
     */
    BrowserJsonp.prototype.cleanup = function (node) {
        if (node.parentNode) {
            node.parentNode.removeChild(/** @type {?} */ ((node)));
        }
    };
    return BrowserJsonp;
}());
BrowserJsonp.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
BrowserJsonp.ctorParameters = function () { return []; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';
var JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';
/**
 * Abstract base class for an in-flight JSONP request.
 *
 * \@experimental
 * @abstract
 */
var JSONPConnection = (function () {
    function JSONPConnection() {
    }
    /**
     * Callback called when the JSONP request completes, to notify the application
     * of the new data.
     * @abstract
     * @param {?=} data
     * @return {?}
     */
    JSONPConnection.prototype.finished = function (data) { };
    return JSONPConnection;
}());
var JSONPConnection_ = (function (_super) {
    __extends(JSONPConnection_, _super);
    /**
     * @param {?} req
     * @param {?} _dom
     * @param {?=} baseResponseOptions
     */
    function JSONPConnection_(req, _dom, baseResponseOptions) {
        var _this = _super.call(this) || this;
        _this._dom = _dom;
        _this.baseResponseOptions = baseResponseOptions;
        _this._finished = false;
        if (req.method !== RequestMethod.Get) {
            throw new TypeError(JSONP_ERR_WRONG_METHOD);
        }
        _this.request = req;
        _this.response = new Observable_2(function (responseObserver) {
            _this.readyState = ReadyState.Loading;
            var id = _this._id = _dom.nextRequestID();
            _dom.exposeConnection(id, _this);
            // Workaround Dart
            // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);
            var callback = _dom.requestCallback(_this._id);
            var url = req.url;
            if (url.indexOf('=JSONP_CALLBACK&') > -1) {
                url = url.replace('=JSONP_CALLBACK&', "=" + callback + "&");
            }
            else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {
                url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + ("=" + callback);
            }
            var script = _this._script = _dom.build(url);
            var onLoad = function (event) {
                if (_this.readyState === ReadyState.Cancelled)
                    return;
                _this.readyState = ReadyState.Done;
                _dom.cleanup(script);
                if (!_this._finished) {
                    var responseOptions_1 = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url: url });
                    if (baseResponseOptions) {
                        responseOptions_1 = baseResponseOptions.merge(responseOptions_1);
                    }
                    responseObserver.error(new Response(responseOptions_1));
                    return;
                }
                var responseOptions = new ResponseOptions({ body: _this._responseData, url: url });
                if (_this.baseResponseOptions) {
                    responseOptions = _this.baseResponseOptions.merge(responseOptions);
                }
                responseObserver.next(new Response(responseOptions));
                responseObserver.complete();
            };
            var onError = function (error) {
                if (_this.readyState === ReadyState.Cancelled)
                    return;
                _this.readyState = ReadyState.Done;
                _dom.cleanup(script);
                var responseOptions = new ResponseOptions({ body: error.message, type: ResponseType.Error });
                if (baseResponseOptions) {
                    responseOptions = baseResponseOptions.merge(responseOptions);
                }
                responseObserver.error(new Response(responseOptions));
            };
            script.addEventListener('load', onLoad);
            script.addEventListener('error', onError);
            _dom.send(script);
            return function () {
                _this.readyState = ReadyState.Cancelled;
                script.removeEventListener('load', onLoad);
                script.removeEventListener('error', onError);
                _this._dom.cleanup(script);
            };
        });
        return _this;
    }
    /**
     * @param {?=} data
     * @return {?}
     */
    JSONPConnection_.prototype.finished = function (data) {
        // Don't leak connections
        this._finished = true;
        this._dom.removeConnection(this._id);
        if (this.readyState === ReadyState.Cancelled)
            return;
        this._responseData = data;
    };
    return JSONPConnection_;
}(JSONPConnection));
/**
 * A {\@link ConnectionBackend} that uses the JSONP strategy of making requests.
 *
 * \@experimental
 * @abstract
 */
var JSONPBackend = (function (_super) {
    __extends(JSONPBackend, _super);
    function JSONPBackend() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return JSONPBackend;
}(ConnectionBackend));
var JSONPBackend_ = (function (_super) {
    __extends(JSONPBackend_, _super);
    /**
     * @param {?} _browserJSONP
     * @param {?} _baseResponseOptions
     */
    function JSONPBackend_(_browserJSONP, _baseResponseOptions) {
        var _this = _super.call(this) || this;
        _this._browserJSONP = _browserJSONP;
        _this._baseResponseOptions = _baseResponseOptions;
        return _this;
    }
    /**
     * @param {?} request
     * @return {?}
     */
    JSONPBackend_.prototype.createConnection = function (request) {
        return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);
    };
    return JSONPBackend_;
}(JSONPBackend));
JSONPBackend_.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
JSONPBackend_.ctorParameters = function () { return [
    { type: BrowserJsonp, },
    { type: ResponseOptions, },
]; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var XSSI_PREFIX = /^\)\]\}',?\n/;
/**
 * Creates connections using `XMLHttpRequest`. Given a fully-qualified
 * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the
 * request.
 *
 * This class would typically not be created or interacted with directly inside applications, though
 * the {\@link MockConnection} may be interacted with in tests.
 *
 * \@experimental
 */
var XHRConnection = (function () {
    /**
     * @param {?} req
     * @param {?} browserXHR
     * @param {?=} baseResponseOptions
     */
    function XHRConnection(req, browserXHR, baseResponseOptions) {
        var _this = this;
        this.request = req;
        this.response = new Observable_2(function (responseObserver) {
            var _xhr = browserXHR.build();
            _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);
            if (req.withCredentials != null) {
                _xhr.withCredentials = req.withCredentials;
            }
            // load event handler
            var onLoad = function () {
                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
                var status = _xhr.status === 1223 ? 204 : _xhr.status;
                var body = null;
                // HTTP 204 means no content
                if (status !== 204) {
                    // responseText is the old-school way of retrieving response (supported by IE8 & 9)
                    // response/responseType properties were introduced in ResourceLoader Level2 spec
                    // (supported by IE10)
                    body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;
                    // Implicitly strip a potential XSSI prefix.
                    if (typeof body === 'string') {
                        body = body.replace(XSSI_PREFIX, '');
                    }
                }
                // fix status code when it is 0 (0 status is undocumented).
                // Occurs when accessing file resources or on Android 4.1 stock browser
                // while retrieving files from application cache.
                if (status === 0) {
                    status = body ? 200 : 0;
                }
                var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());
                // IE 9 does not provide the way to get URL of response
                var url = getResponseURL(_xhr) || req.url;
                var statusText = _xhr.statusText || 'OK';
                var responseOptions = new ResponseOptions({ body: body, status: status, headers: headers, statusText: statusText, url: url });
                if (baseResponseOptions != null) {
                    responseOptions = baseResponseOptions.merge(responseOptions);
                }
                var response = new Response(responseOptions);
                response.ok = isSuccess(status);
                if (response.ok) {
                    responseObserver.next(response);
                    // TODO(gdi2290): defer complete if array buffer until done
                    responseObserver.complete();
                    return;
                }
                responseObserver.error(response);
            };
            // error event handler
            var onError = function (err) {
                var responseOptions = new ResponseOptions({
                    body: err,
                    type: ResponseType.Error,
                    status: _xhr.status,
                    statusText: _xhr.statusText,
                });
                if (baseResponseOptions != null) {
                    responseOptions = baseResponseOptions.merge(responseOptions);
                }
                responseObserver.error(new Response(responseOptions));
            };
            _this.setDetectedContentType(req, _xhr);
            if (req.headers == null) {
                req.headers = new Headers();
            }
            if (!req.headers.has('Accept')) {
                req.headers.append('Accept', 'application/json, text/plain, */*');
            }
            req.headers.forEach(function (values, name) { return _xhr.setRequestHeader(name, values.join(',')); });
            // Select the correct buffer type to store the response
            if (req.responseType != null && _xhr.responseType != null) {
                switch (req.responseType) {
                    case ResponseContentType.ArrayBuffer:
                        _xhr.responseType = 'arraybuffer';
                        break;
                    case ResponseContentType.Json:
                        _xhr.responseType = 'json';
                        break;
                    case ResponseContentType.Text:
                        _xhr.responseType = 'text';
                        break;
                    case ResponseContentType.Blob:
                        _xhr.responseType = 'blob';
                        break;
                    default:
                        throw new Error('The selected responseType is not supported');
                }
            }
            _xhr.addEventListener('load', onLoad);
            _xhr.addEventListener('error', onError);
            _xhr.send(_this.request.getBody());
            return function () {
                _xhr.removeEventListener('load', onLoad);
                _xhr.removeEventListener('error', onError);
                _xhr.abort();
            };
        });
    }
    /**
     * @param {?} req
     * @param {?} _xhr
     * @return {?}
     */
    XHRConnection.prototype.setDetectedContentType = function (req /** TODO Request */, _xhr /** XMLHttpRequest */) {
        // Skip if a custom Content-Type header is provided
        if (req.headers != null && req.headers.get('Content-Type') != null) {
            return;
        }
        // Set the detected content type
        switch (req.contentType) {
            case ContentType.NONE:
                break;
            case ContentType.JSON:
                _xhr.setRequestHeader('content-type', 'application/json');
                break;
            case ContentType.FORM:
                _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
                break;
            case ContentType.TEXT:
                _xhr.setRequestHeader('content-type', 'text/plain');
                break;
            case ContentType.BLOB:
                var /** @type {?} */ blob = req.blob();
                if (blob.type) {
                    _xhr.setRequestHeader('content-type', blob.type);
                }
                break;
        }
    };
    return XHRConnection;
}());
/**
 * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application
 * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)
 * for more information on XSRF.
 *
 * Applications can configure custom cookie and header names by binding an instance of this class
 * with different `cookieName` and `headerName` values. See the main HTTP documentation for more
 * details.
 *
 * \@experimental
 */
var CookieXSRFStrategy = (function () {
    /**
     * @param {?=} _cookieName
     * @param {?=} _headerName
     */
    function CookieXSRFStrategy(_cookieName, _headerName) {
        if (_cookieName === void 0) { _cookieName = 'XSRF-TOKEN'; }
        if (_headerName === void 0) { _headerName = 'X-XSRF-TOKEN'; }
        this._cookieName = _cookieName;
        this._headerName = _headerName;
    }
    /**
     * @param {?} req
     * @return {?}
     */
    CookieXSRFStrategy.prototype.configureRequest = function (req) {
        var /** @type {?} */ xsrfToken = getDOM().getCookie(this._cookieName);
        if (xsrfToken) {
            req.headers.set(this._headerName, xsrfToken);
        }
    };
    return CookieXSRFStrategy;
}());
/**
 * Creates {\@link XHRConnection} instances.
 *
 * This class would typically not be used by end users, but could be
 * overridden if a different backend implementation should be used,
 * such as in a node backend.
 *
 * ### Example
 *
 * ```
 * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\@angular/http';
 * \@Component({
 *   viewProviders: [
 *     HTTP_PROVIDERS,
 *     {provide: Http, useFactory: (backend, options) => {
 *       return new Http(backend, options);
 *     }, deps: [MyNodeBackend, BaseRequestOptions]}]
 * })
 * class MyComponent {
 *   constructor(http:Http) {
 *     http.request('people.json').subscribe(res => this.people = res.json());
 *   }
 * }
 * ```
 * \@experimental
 */
var XHRBackend = (function () {
    /**
     * @param {?} _browserXHR
     * @param {?} _baseResponseOptions
     * @param {?} _xsrfStrategy
     */
    function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {
        this._browserXHR = _browserXHR;
        this._baseResponseOptions = _baseResponseOptions;
        this._xsrfStrategy = _xsrfStrategy;
    }
    /**
     * @param {?} request
     * @return {?}
     */
    XHRBackend.prototype.createConnection = function (request) {
        this._xsrfStrategy.configureRequest(request);
        return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);
    };
    return XHRBackend;
}());
XHRBackend.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
XHRBackend.ctorParameters = function () { return [
    { type: BrowserXhr, },
    { type: ResponseOptions, },
    { type: XSRFStrategy, },
]; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Creates a request options object to be optionally provided when instantiating a
 * {\@link Request}.
 *
 * This class is based on the `RequestInit` description in the [Fetch
 * Spec](https://fetch.spec.whatwg.org/#requestinit).
 *
 * All values are null by default. Typical defaults can be found in the {\@link BaseRequestOptions}
 * class, which sub-classes `RequestOptions`.
 *
 * ```typescript
 * import {RequestOptions, Request, RequestMethod} from '\@angular/http';
 *
 * const options = new RequestOptions({
 *   method: RequestMethod.Post,
 *   url: 'https://google.com'
 * });
 * const req = new Request(options);
 * console.log('req.method:', RequestMethod[req.method]); // Post
 * console.log('options.url:', options.url); // https://google.com
 * ```
 *
 * \@experimental
 */
var RequestOptions = (function () {
    /**
     * @param {?=} opts
     */
    function RequestOptions(opts) {
        if (opts === void 0) { opts = {}; }
        var method = opts.method, headers = opts.headers, body = opts.body, url = opts.url, search = opts.search, params = opts.params, withCredentials = opts.withCredentials, responseType = opts.responseType;
        this.method = method != null ? normalizeMethodName(method) : null;
        this.headers = headers != null ? headers : null;
        this.body = body != null ? body : null;
        this.url = url != null ? url : null;
        this.params = this._mergeSearchParams(params || search);
        this.withCredentials = withCredentials != null ? withCredentials : null;
        this.responseType = responseType != null ? responseType : null;
    }
    Object.defineProperty(RequestOptions.prototype, "search", {
        /**
         * @deprecated from 4.0.0. Use params instead.
         * @return {?}
         */
        get: function () { return this.params; },
        /**
         * @deprecated from 4.0.0. Use params instead.
         * @param {?} params
         * @return {?}
         */
        set: function (params) { this.params = params; },
        enumerable: true,
        configurable: true
    });
    /**
     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override
     * existing values. This method will not change the values of the instance on which it is being
     * called.
     *
     * Note that `headers` and `search` will override existing values completely if present in
     * the `options` object. If these values should be merged, it should be done prior to calling
     * `merge` on the `RequestOptions` instance.
     *
     * ```typescript
     * import {RequestOptions, Request, RequestMethod} from '\@angular/http';
     *
     * const options = new RequestOptions({
     *   method: RequestMethod.Post
     * });
     * const req = new Request(options.merge({
     *   url: 'https://google.com'
     * }));
     * console.log('req.method:', RequestMethod[req.method]); // Post
     * console.log('options.url:', options.url); // null
     * console.log('req.url:', req.url); // https://google.com
     * ```
     * @param {?=} options
     * @return {?}
     */
    RequestOptions.prototype.merge = function (options) {
        return new RequestOptions({
            method: options && options.method != null ? options.method : this.method,
            headers: options && options.headers != null ? options.headers : new Headers(this.headers),
            body: options && options.body != null ? options.body : this.body,
            url: options && options.url != null ? options.url : this.url,
            params: options && this._mergeSearchParams(options.params || options.search),
            withCredentials: options && options.withCredentials != null ? options.withCredentials :
                this.withCredentials,
            responseType: options && options.responseType != null ? options.responseType :
                this.responseType
        });
    };
    /**
     * @param {?=} params
     * @return {?}
     */
    RequestOptions.prototype._mergeSearchParams = function (params) {
        if (!params)
            return this.params;
        if (params instanceof URLSearchParams) {
            return params.clone();
        }
        if (typeof params === 'string') {
            return new URLSearchParams(params);
        }
        return this._parseParams(params);
    };
    /**
     * @param {?=} objParams
     * @return {?}
     */
    RequestOptions.prototype._parseParams = function (objParams) {
        var _this = this;
        if (objParams === void 0) { objParams = {}; }
        var /** @type {?} */ params = new URLSearchParams();
        Object.keys(objParams).forEach(function (key) {
            var /** @type {?} */ value = objParams[key];
            if (Array.isArray(value)) {
                value.forEach(function (item) { return _this._appendParam(key, item, params); });
            }
            else {
                _this._appendParam(key, value, params);
            }
        });
        return params;
    };
    /**
     * @param {?} key
     * @param {?} value
     * @param {?} params
     * @return {?}
     */
    RequestOptions.prototype._appendParam = function (key, value, params) {
        if (typeof value !== 'string') {
            value = JSON.stringify(value);
        }
        params.append(key, value);
    };
    return RequestOptions;
}());
/**
 * Subclass of {\@link RequestOptions}, with default values.
 *
 * Default values:
 *  * method: {\@link RequestMethod RequestMethod.Get}
 *  * headers: empty {\@link Headers} object
 *
 * This class could be extended and bound to the {\@link RequestOptions} class
 * when configuring an {\@link Injector}, in order to override the default options
 * used by {\@link Http} to create and send {\@link Request Requests}.
 *
 * ```typescript
 * import {BaseRequestOptions, RequestOptions} from '\@angular/http';
 *
 * class MyOptions extends BaseRequestOptions {
 *   search: string = 'coreTeam=true';
 * }
 *
 * {provide: RequestOptions, useClass: MyOptions};
 * ```
 *
 * The options could also be extended when manually creating a {\@link Request}
 * object.
 *
 * ```
 * import {BaseRequestOptions, Request, RequestMethod} from '\@angular/http';
 *
 * const options = new BaseRequestOptions();
 * const req = new Request(options.merge({
 *   method: RequestMethod.Post,
 *   url: 'https://google.com'
 * }));
 * console.log('req.method:', RequestMethod[req.method]); // Post
 * console.log('options.url:', options.url); // null
 * console.log('req.url:', req.url); // https://google.com
 * ```
 *
 * \@experimental
 */
var BaseRequestOptions = (function (_super) {
    __extends(BaseRequestOptions, _super);
    function BaseRequestOptions() {
        return _super.call(this, { method: RequestMethod.Get, headers: new Headers() }) || this;
    }
    return BaseRequestOptions;
}(RequestOptions));
BaseRequestOptions.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
BaseRequestOptions.ctorParameters = function () { return []; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Creates `Request` instances from provided values.
 *
 * The Request's interface is inspired by the Request constructor defined in the [Fetch
 * Spec](https://fetch.spec.whatwg.org/#request-class),
 * but is considered a static value whose body can be accessed many times. There are other
 * differences in the implementation, but this is the most significant.
 *
 * `Request` instances are typically created by higher-level classes, like {\@link Http} and
 * {\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.
 * One such example is when creating services that wrap higher-level services, like {\@link Http},
 * where it may be useful to generate a `Request` with arbitrary headers and search params.
 *
 * ```typescript
 * import {Injectable, Injector} from '\@angular/core';
 * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\@angular/http';
 *
 * \@Injectable()
 * class AutoAuthenticator {
 *   constructor(public http:Http) {}
 *   request(url:string) {
 *     return this.http.request(new Request({
 *       method: RequestMethod.Get,
 *       url: url,
 *       search: 'password=123'
 *     }));
 *   }
 * }
 *
 * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);
 * var authenticator = injector.get(AutoAuthenticator);
 * authenticator.request('people.json').subscribe(res => {
 *   //URL should have included '?password=123'
 *   console.log('people', res.json());
 * });
 * ```
 *
 * \@experimental
 */
var Request = (function (_super) {
    __extends(Request, _super);
    /**
     * @param {?} requestOptions
     */
    function Request(requestOptions) {
        var _this = _super.call(this) || this;
        // TODO: assert that url is present
        var url = requestOptions.url;
        _this.url = requestOptions.url;
        var paramsArg = requestOptions.params || requestOptions.search;
        if (paramsArg) {
            var params = void 0;
            if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {
                params = urlEncodeParams(paramsArg).toString();
            }
            else {
                params = paramsArg.toString();
            }
            if (params.length > 0) {
                var prefix = '?';
                if (_this.url.indexOf('?') != -1) {
                    prefix = (_this.url[_this.url.length - 1] == '&') ? '' : '&';
                }
                // TODO: just delete search-query-looking string in url?
                _this.url = url + prefix + params;
            }
        }
        _this._body = requestOptions.body;
        _this.method = normalizeMethodName(requestOptions.method);
        // TODO(jeffbcross): implement behavior
        // Defaults to 'omit', consistent with browser
        _this.headers = new Headers(requestOptions.headers);
        _this.contentType = _this.detectContentType();
        _this.withCredentials = requestOptions.withCredentials;
        _this.responseType = requestOptions.responseType;
        return _this;
    }
    /**
     * Returns the content type enum based on header options.
     * @return {?}
     */
    Request.prototype.detectContentType = function () {
        switch (this.headers.get('content-type')) {
            case 'application/json':
                return ContentType.JSON;
            case 'application/x-www-form-urlencoded':
                return ContentType.FORM;
            case 'multipart/form-data':
                return ContentType.FORM_DATA;
            case 'text/plain':
            case 'text/html':
                return ContentType.TEXT;
            case 'application/octet-stream':
                return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;
            default:
                return this.detectContentTypeFromBody();
        }
    };
    /**
     * Returns the content type of request's body based on its type.
     * @return {?}
     */
    Request.prototype.detectContentTypeFromBody = function () {
        if (this._body == null) {
            return ContentType.NONE;
        }
        else if (this._body instanceof URLSearchParams) {
            return ContentType.FORM;
        }
        else if (this._body instanceof FormData) {
            return ContentType.FORM_DATA;
        }
        else if (this._body instanceof Blob$1) {
            return ContentType.BLOB;
        }
        else if (this._body instanceof ArrayBuffer$1) {
            return ContentType.ARRAY_BUFFER;
        }
        else if (this._body && typeof this._body === 'object') {
            return ContentType.JSON;
        }
        else {
            return ContentType.TEXT;
        }
    };
    /**
     * Returns the request's body according to its type. If body is undefined, return
     * null.
     * @return {?}
     */
    Request.prototype.getBody = function () {
        switch (this.contentType) {
            case ContentType.JSON:
                return this.text();
            case ContentType.FORM:
                return this.text();
            case ContentType.FORM_DATA:
                return this._body;
            case ContentType.TEXT:
                return this.text();
            case ContentType.BLOB:
                return this.blob();
            case ContentType.ARRAY_BUFFER:
                return this.arrayBuffer();
            default:
                return null;
        }
    };
    return Request;
}(Body));
/**
 * @param {?} params
 * @return {?}
 */
function urlEncodeParams(params) {
    var /** @type {?} */ searchParams = new URLSearchParams();
    Object.keys(params).forEach(function (key) {
        var /** @type {?} */ value = params[key];
        if (value && Array.isArray(value)) {
            value.forEach(function (element) { return searchParams.append(key, element.toString()); });
        }
        else {
            searchParams.append(key, value.toString());
        }
    });
    return searchParams;
}
var noop = function () { };
var w = typeof window == 'object' ? window : noop;
var FormData = ((w) /** TODO #9100 */)['FormData'] || noop;
var Blob$1 = ((w) /** TODO #9100 */)['Blob'] || noop;
var ArrayBuffer$1 = ((w) /** TODO #9100 */)['ArrayBuffer'] || noop;
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} backend
 * @param {?} request
 * @return {?}
 */
function httpRequest(backend, request) {
    return backend.createConnection(request).response;
}
/**
 * @param {?} defaultOpts
 * @param {?} providedOpts
 * @param {?} method
 * @param {?} url
 * @return {?}
 */
function mergeOptions(defaultOpts, providedOpts, method, url) {
    var /** @type {?} */ newOptions = defaultOpts;
    if (providedOpts) {
        // Hack so Dart can used named parameters
        return (newOptions.merge(new RequestOptions({
            method: providedOpts.method || method,
            url: providedOpts.url || url,
            search: providedOpts.search,
            params: providedOpts.params,
            headers: providedOpts.headers,
            body: providedOpts.body,
            withCredentials: providedOpts.withCredentials,
            responseType: providedOpts.responseType
        })));
    }
    return (newOptions.merge(new RequestOptions({ method: method, url: url })));
}
/**
 * Performs http requests using `XMLHttpRequest` as the default backend.
 *
 * `Http` is available as an injectable class, with methods to perform http requests. Calling
 * `request` returns an `Observable` which will emit a single {\@link Response} when a
 * response is received.
 *
 * ### Example
 *
 * ```typescript
 * import {Http, HTTP_PROVIDERS} from '\@angular/http';
 * import 'rxjs/add/operator/map'
 * \@Component({
 *   selector: 'http-app',
 *   viewProviders: [HTTP_PROVIDERS],
 *   templateUrl: 'people.html'
 * })
 * class PeopleComponent {
 *   constructor(http: Http) {
 *     http.get('people.json')
 *       // Call map on the response observable to get the parsed people object
 *       .map(res => res.json())
 *       // Subscribe to the observable to get the parsed people object and attach it to the
 *       // component
 *       .subscribe(people => this.people = people);
 *   }
 * }
 * ```
 *
 *
 * ### Example
 *
 * ```
 * http.get('people.json').subscribe((res:Response) => this.people = res.json());
 * ```
 *
 * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a "Backend" (
 * {\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing
 * the {\@link XHRBackend} provider, as in the following example:
 *
 * ### Example
 *
 * ```typescript
 * import {BaseRequestOptions, Http} from '\@angular/http';
 * import {MockBackend} from '\@angular/http/testing';
 * var injector = Injector.resolveAndCreate([
 *   BaseRequestOptions,
 *   MockBackend,
 *   {provide: Http, useFactory:
 *       function(backend, defaultOptions) {
 *         return new Http(backend, defaultOptions);
 *       },
 *       deps: [MockBackend, BaseRequestOptions]}
 * ]);
 * var http = injector.get(Http);
 * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));
 * ```
 *
 * \@experimental
 */
var Http = (function () {
    /**
     * @param {?} _backend
     * @param {?} _defaultOptions
     */
    function Http(_backend, _defaultOptions) {
        this._backend = _backend;
        this._defaultOptions = _defaultOptions;
    }
    /**
     * Performs any type of http request. First argument is required, and can either be a url or
     * a {\@link Request} instance. If the first argument is a url, an optional {\@link RequestOptions}
     * object can be provided as the 2nd argument. The options object will be merged with the values
     * of {\@link BaseRequestOptions} before performing the request.
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    Http.prototype.request = function (url, options) {
        var /** @type {?} */ responseObservable;
        if (typeof url === 'string') {
            responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url))));
        }
        else if (url instanceof Request) {
            responseObservable = httpRequest(this._backend, url);
        }
        else {
            throw new Error('First argument must be a url string or Request instance.');
        }
        return responseObservable;
    };
    /**
     * Performs a request with `get` http method.
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    Http.prototype.get = function (url, options) {
        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));
    };
    /**
     * Performs a request with `post` http method.
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    Http.prototype.post = function (url, body, options) {
        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Post, url)));
    };
    /**
     * Performs a request with `put` http method.
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    Http.prototype.put = function (url, body, options) {
        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Put, url)));
    };
    /**
     * Performs a request with `delete` http method.
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    Http.prototype.delete = function (url, options) {
        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));
    };
    /**
     * Performs a request with `patch` http method.
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    Http.prototype.patch = function (url, body, options) {
        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Patch, url)));
    };
    /**
     * Performs a request with `head` http method.
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    Http.prototype.head = function (url, options) {
        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));
    };
    /**
     * Performs a request with `options` http method.
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    Http.prototype.options = function (url, options) {
        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));
    };
    return Http;
}());
Http.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
Http.ctorParameters = function () { return [
    { type: ConnectionBackend, },
    { type: RequestOptions, },
]; };
/**
 * \@experimental
 */
var Jsonp = (function (_super) {
    __extends(Jsonp, _super);
    /**
     * @param {?} backend
     * @param {?} defaultOptions
     */
    function Jsonp(backend, defaultOptions) {
        return _super.call(this, backend, defaultOptions) || this;
    }
    /**
     * Performs any type of http request. First argument is required, and can either be a url or
     * a {\@link Request} instance. If the first argument is a url, an optional {\@link RequestOptions}
     * object can be provided as the 2nd argument. The options object will be merged with the values
     * of {\@link BaseRequestOptions} before performing the request.
     *
     * \@security Regular XHR is the safest alternative to JSONP for most applications, and is
     * supported by all current browsers. Because JSONP creates a `<script>` element with
     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted
     * source could expose your application to XSS risks. Data exposed by JSONP may also be
     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for
     * future security issues (e.g. content sniffing).  For more detail, see the
     * [Security Guide](http://g.co/ng/security).
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    Jsonp.prototype.request = function (url, options) {
        var /** @type {?} */ responseObservable;
        if (typeof url === 'string') {
            url =
                new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url)));
        }
        if (url instanceof Request) {
            if (url.method !== RequestMethod.Get) {
                throw new Error('JSONP requests must use GET request method.');
            }
            responseObservable = httpRequest(this._backend, url);
        }
        else {
            throw new Error('First argument must be a url string or Request instance.');
        }
        return responseObservable;
    };
    return Jsonp;
}(Http));
Jsonp.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
Jsonp.ctorParameters = function () { return [
    { type: ConnectionBackend, },
    { type: RequestOptions, },
]; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @module
 * @description
 * The http module provides services to perform http requests. To get started, see the {@link Http}
 * class.
 */
/**
 * @return {?}
 */
function _createDefaultCookieXSRFStrategy() {
    return new CookieXSRFStrategy();
}
/**
 * @param {?} xhrBackend
 * @param {?} requestOptions
 * @return {?}
 */
function httpFactory(xhrBackend, requestOptions) {
    return new Http(xhrBackend, requestOptions);
}
/**
 * @param {?} jsonpBackend
 * @param {?} requestOptions
 * @return {?}
 */
function jsonpFactory(jsonpBackend, requestOptions) {
    return new Jsonp(jsonpBackend, requestOptions);
}
/**
 * The module that includes http's providers
 *
 * \@experimental
 */
var HttpModule = (function () {
    function HttpModule() {
    }
    return HttpModule;
}());
HttpModule.decorators = [
    { type: NgModule, args: [{
                providers: [
                    // TODO(pascal): use factory type annotations once supported in DI
                    // issue: https://github.com/angular/angular/issues/3183
                    { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },
                    BrowserXhr,
                    { provide: RequestOptions, useClass: BaseRequestOptions },
                    { provide: ResponseOptions, useClass: BaseResponseOptions },
                    XHRBackend,
                    { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },
                ],
            },] },
];
/**
 * @nocollapse
 */
HttpModule.ctorParameters = function () { return []; };
/**
 * The module that includes jsonp's providers
 *
 * \@experimental
 */
var JsonpModule = (function () {
    function JsonpModule() {
    }
    return JsonpModule;
}());
JsonpModule.decorators = [
    { type: NgModule, args: [{
                providers: [
                    // TODO(pascal): use factory type annotations once supported in DI
                    // issue: https://github.com/angular/angular/issues/3183
                    { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },
                    BrowserJsonp,
                    { provide: RequestOptions, useClass: BaseRequestOptions },
                    { provide: ResponseOptions, useClass: BaseResponseOptions },
                    { provide: JSONPBackend, useClass: JSONPBackend_ },
                ],
            },] },
];
/**
 * @nocollapse
 */
JsonpModule.ctorParameters = function () { return []; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @module
 * @description
 * Entry point for all public APIs of the common package.
 */
/**
 * \@stable
 */
var VERSION$4 = new Version('4.3.3');

var __extends$16 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};


/**
 * @class BehaviorSubject<T>
 */
var BehaviorSubject = (function (_super) {
    __extends$16(BehaviorSubject, _super);
    function BehaviorSubject(_value) {
        _super.call(this);
        this._value = _value;
    }
    Object.defineProperty(BehaviorSubject.prototype, "value", {
        get: function () {
            return this.getValue();
        },
        enumerable: true,
        configurable: true
    });
    BehaviorSubject.prototype._subscribe = function (subscriber) {
        var subscription = _super.prototype._subscribe.call(this, subscriber);
        if (subscription && !subscription.closed) {
            subscriber.next(this._value);
        }
        return subscription;
    };
    BehaviorSubject.prototype.getValue = function () {
        if (this.hasError) {
            throw this.thrownError;
        }
        else if (this.closed) {
            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
        }
        else {
            return this._value;
        }
    };
    BehaviorSubject.prototype.next = function (value) {
        _super.prototype.next.call(this, this._value = value);
    };
    return BehaviorSubject;
}(Subject_1.Subject));
var BehaviorSubject_2 = BehaviorSubject;

var __extends$18 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};



/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var IteratorObservable = (function (_super) {
    __extends$18(IteratorObservable, _super);
    function IteratorObservable(iterator$$2, scheduler) {
        _super.call(this);
        this.scheduler = scheduler;
        if (iterator$$2 == null) {
            throw new Error('iterator cannot be null.');
        }
        this.iterator = getIterator(iterator$$2);
    }
    IteratorObservable.create = function (iterator$$2, scheduler) {
        return new IteratorObservable(iterator$$2, scheduler);
    };
    IteratorObservable.dispatch = function (state) {
        var index = state.index, hasError = state.hasError, iterator$$2 = state.iterator, subscriber = state.subscriber;
        if (hasError) {
            subscriber.error(state.error);
            return;
        }
        var result = iterator$$2.next();
        if (result.done) {
            subscriber.complete();
            return;
        }
        subscriber.next(result.value);
        state.index = index + 1;
        if (subscriber.closed) {
            if (typeof iterator$$2.return === 'function') {
                iterator$$2.return();
            }
            return;
        }
        this.schedule(state);
    };
    IteratorObservable.prototype._subscribe = function (subscriber) {
        var index = 0;
        var _a = this, iterator$$2 = _a.iterator, scheduler = _a.scheduler;
        if (scheduler) {
            return scheduler.schedule(IteratorObservable.dispatch, 0, {
                index: index, iterator: iterator$$2, subscriber: subscriber
            });
        }
        else {
            do {
                var result = iterator$$2.next();
                if (result.done) {
                    subscriber.complete();
                    break;
                }
                else {
                    subscriber.next(result.value);
                }
                if (subscriber.closed) {
                    if (typeof iterator$$2.return === 'function') {
                        iterator$$2.return();
                    }
                    break;
                }
            } while (true);
        }
    };
    return IteratorObservable;
}(Observable_1.Observable));
var IteratorObservable_2 = IteratorObservable;
var StringIterator = (function () {
    function StringIterator(str, idx, len) {
        if (idx === void 0) { idx = 0; }
        if (len === void 0) { len = str.length; }
        this.str = str;
        this.idx = idx;
        this.len = len;
    }
    StringIterator.prototype[iterator.iterator] = function () { return (this); };
    StringIterator.prototype.next = function () {
        return this.idx < this.len ? {
            done: false,
            value: this.str.charAt(this.idx++)
        } : {
            done: true,
            value: undefined
        };
    };
    return StringIterator;
}());
var ArrayIterator = (function () {
    function ArrayIterator(arr, idx, len) {
        if (idx === void 0) { idx = 0; }
        if (len === void 0) { len = toLength(arr); }
        this.arr = arr;
        this.idx = idx;
        this.len = len;
    }
    ArrayIterator.prototype[iterator.iterator] = function () { return this; };
    ArrayIterator.prototype.next = function () {
        return this.idx < this.len ? {
            done: false,
            value: this.arr[this.idx++]
        } : {
            done: true,
            value: undefined
        };
    };
    return ArrayIterator;
}());
function getIterator(obj) {
    var i = obj[iterator.iterator];
    if (!i && typeof obj === 'string') {
        return new StringIterator(obj);
    }
    if (!i && obj.length !== undefined) {
        return new ArrayIterator(obj);
    }
    if (!i) {
        throw new TypeError('object is not iterable');
    }
    return obj[iterator.iterator]();
}
var maxSafeInteger = Math.pow(2, 53) - 1;
function toLength(o) {
    var len = +o.length;
    if (isNaN(len)) {
        return 0;
    }
    if (len === 0 || !numberIsFinite(len)) {
        return len;
    }
    len = sign(len) * Math.floor(Math.abs(len));
    if (len <= 0) {
        return 0;
    }
    if (len > maxSafeInteger) {
        return maxSafeInteger;
    }
    return len;
}
function numberIsFinite(value) {
    return typeof value === 'number' && root.root.isFinite(value);
}
function sign(value) {
    var valueAsNumber = +value;
    if (valueAsNumber === 0) {
        return valueAsNumber;
    }
    if (isNaN(valueAsNumber)) {
        return valueAsNumber;
    }
    return valueAsNumber < 0 ? -1 : 1;
}


var IteratorObservable_1 = {
	IteratorObservable: IteratorObservable_2
};

var __extends$19 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};



/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var ArrayLikeObservable = (function (_super) {
    __extends$19(ArrayLikeObservable, _super);
    function ArrayLikeObservable(arrayLike, scheduler) {
        _super.call(this);
        this.arrayLike = arrayLike;
        this.scheduler = scheduler;
        if (!scheduler && arrayLike.length === 1) {
            this._isScalar = true;
            this.value = arrayLike[0];
        }
    }
    ArrayLikeObservable.create = function (arrayLike, scheduler) {
        var length = arrayLike.length;
        if (length === 0) {
            return new EmptyObservable_1.EmptyObservable();
        }
        else if (length === 1) {
            return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);
        }
        else {
            return new ArrayLikeObservable(arrayLike, scheduler);
        }
    };
    ArrayLikeObservable.dispatch = function (state) {
        var arrayLike = state.arrayLike, index = state.index, length = state.length, subscriber = state.subscriber;
        if (subscriber.closed) {
            return;
        }
        if (index >= length) {
            subscriber.complete();
            return;
        }
        subscriber.next(arrayLike[index]);
        state.index = index + 1;
        this.schedule(state);
    };
    ArrayLikeObservable.prototype._subscribe = function (subscriber) {
        var index = 0;
        var _a = this, arrayLike = _a.arrayLike, scheduler = _a.scheduler;
        var length = arrayLike.length;
        if (scheduler) {
            return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {
                arrayLike: arrayLike, index: index, length: length, subscriber: subscriber
            });
        }
        else {
            for (var i = 0; i < length && !subscriber.closed; i++) {
                subscriber.next(arrayLike[i]);
            }
            subscriber.complete();
        }
    };
    return ArrayLikeObservable;
}(Observable_1.Observable));
var ArrayLikeObservable_2 = ArrayLikeObservable;


var ArrayLikeObservable_1 = {
	ArrayLikeObservable: ArrayLikeObservable_2
};

/**
 * Represents a push-based event or value that an {@link Observable} can emit.
 * This class is particularly useful for operators that manage notifications,
 * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and
 * others. Besides wrapping the actual delivered value, it also annotates it
 * with metadata of, for instance, what type of push message it is (`next`,
 * `error`, or `complete`).
 *
 * @see {@link materialize}
 * @see {@link dematerialize}
 * @see {@link observeOn}
 *
 * @class Notification<T>
 */
var Notification = (function () {
    function Notification(kind, value, error) {
        this.kind = kind;
        this.value = value;
        this.error = error;
        this.hasValue = kind === 'N';
    }
    /**
     * Delivers to the given `observer` the value wrapped by this Notification.
     * @param {Observer} observer
     * @return
     */
    Notification.prototype.observe = function (observer) {
        switch (this.kind) {
            case 'N':
                return observer.next && observer.next(this.value);
            case 'E':
                return observer.error && observer.error(this.error);
            case 'C':
                return observer.complete && observer.complete();
        }
    };
    /**
     * Given some {@link Observer} callbacks, deliver the value represented by the
     * current Notification to the correctly corresponding callback.
     * @param {function(value: T): void} next An Observer `next` callback.
     * @param {function(err: any): void} [error] An Observer `error` callback.
     * @param {function(): void} [complete] An Observer `complete` callback.
     * @return {any}
     */
    Notification.prototype.do = function (next, error, complete) {
        var kind = this.kind;
        switch (kind) {
            case 'N':
                return next && next(this.value);
            case 'E':
                return error && error(this.error);
            case 'C':
                return complete && complete();
        }
    };
    /**
     * Takes an Observer or its individual callback functions, and calls `observe`
     * or `do` methods accordingly.
     * @param {Observer|function(value: T): void} nextOrObserver An Observer or
     * the `next` callback.
     * @param {function(err: any): void} [error] An Observer `error` callback.
     * @param {function(): void} [complete] An Observer `complete` callback.
     * @return {any}
     */
    Notification.prototype.accept = function (nextOrObserver, error, complete) {
        if (nextOrObserver && typeof nextOrObserver.next === 'function') {
            return this.observe(nextOrObserver);
        }
        else {
            return this.do(nextOrObserver, error, complete);
        }
    };
    /**
     * Returns a simple Observable that just delivers the notification represented
     * by this Notification instance.
     * @return {any}
     */
    Notification.prototype.toObservable = function () {
        var kind = this.kind;
        switch (kind) {
            case 'N':
                return Observable_1.Observable.of(this.value);
            case 'E':
                return Observable_1.Observable.throw(this.error);
            case 'C':
                return Observable_1.Observable.empty();
        }
        throw new Error('unexpected notification kind value');
    };
    /**
     * A shortcut to create a Notification instance of the type `next` from a
     * given value.
     * @param {T} value The `next` value.
     * @return {Notification<T>} The "next" Notification representing the
     * argument.
     */
    Notification.createNext = function (value) {
        if (typeof value !== 'undefined') {
            return new Notification('N', value);
        }
        return Notification.undefinedValueNotification;
    };
    /**
     * A shortcut to create a Notification instance of the type `error` from a
     * given error.
     * @param {any} [err] The `error` error.
     * @return {Notification<T>} The "error" Notification representing the
     * argument.
     */
    Notification.createError = function (err) {
        return new Notification('E', undefined, err);
    };
    /**
     * A shortcut to create a Notification instance of the type `complete`.
     * @return {Notification<any>} The valueless "complete" Notification.
     */
    Notification.createComplete = function () {
        return Notification.completeNotification;
    };
    Notification.completeNotification = new Notification('C');
    Notification.undefinedValueNotification = new Notification('N', undefined);
    return Notification;
}());
var Notification_2 = Notification;


var Notification_1 = {
	Notification: Notification_2
};

var __extends$20 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};


/**
 *
 * Re-emits all notifications from source Observable with specified scheduler.
 *
 * <span class="informal">Ensure a specific scheduler is used, from outside of an Observable.</span>
 *
 * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule
 * notifications emitted by the source Observable. It might be useful, if you do not have control over
 * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.
 *
 * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,
 * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal
 * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits
 * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.
 * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split
 * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source
 * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a
 * little bit more, to ensure that they are emitted at expected moments.
 *
 * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications
 * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`
 * will delay all notifications - including error notifications - while `delay` will pass through error
 * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator
 * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used
 * for notification emissions in general.
 *
 * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>
 * const intervals = Rx.Observable.interval(10); // Intervals are scheduled
 *                                               // with async scheduler by default...
 *
 * intervals
 * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame
 * .subscribe(val => {                           // scheduler to ensure smooth animation.
 *   someDiv.style.height = val + 'px';
 * });
 *
 * @see {@link delay}
 *
 * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.
 * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.
 * @return {Observable<T>} Observable that emits the same notifications as the source Observable,
 * but with provided scheduler.
 *
 * @method observeOn
 * @owner Observable
 */
function observeOn(scheduler, delay) {
    if (delay === void 0) { delay = 0; }
    return this.lift(new ObserveOnOperator(scheduler, delay));
}
var observeOn_2 = observeOn;
var ObserveOnOperator = (function () {
    function ObserveOnOperator(scheduler, delay) {
        if (delay === void 0) { delay = 0; }
        this.scheduler = scheduler;
        this.delay = delay;
    }
    ObserveOnOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
    };
    return ObserveOnOperator;
}());
var ObserveOnOperator_1 = ObserveOnOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ObserveOnSubscriber = (function (_super) {
    __extends$20(ObserveOnSubscriber, _super);
    function ObserveOnSubscriber(destination, scheduler, delay) {
        if (delay === void 0) { delay = 0; }
        _super.call(this, destination);
        this.scheduler = scheduler;
        this.delay = delay;
    }
    ObserveOnSubscriber.dispatch = function (arg) {
        var notification = arg.notification, destination = arg.destination;
        notification.observe(destination);
        this.unsubscribe();
    };
    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
    };
    ObserveOnSubscriber.prototype._next = function (value) {
        this.scheduleMessage(Notification_1.Notification.createNext(value));
    };
    ObserveOnSubscriber.prototype._error = function (err) {
        this.scheduleMessage(Notification_1.Notification.createError(err));
    };
    ObserveOnSubscriber.prototype._complete = function () {
        this.scheduleMessage(Notification_1.Notification.createComplete());
    };
    return ObserveOnSubscriber;
}(Subscriber_1.Subscriber));
var ObserveOnSubscriber_1 = ObserveOnSubscriber;
var ObserveOnMessage = (function () {
    function ObserveOnMessage(notification, destination) {
        this.notification = notification;
        this.destination = destination;
    }
    return ObserveOnMessage;
}());
var ObserveOnMessage_1 = ObserveOnMessage;


var observeOn_1 = {
	observeOn: observeOn_2,
	ObserveOnOperator: ObserveOnOperator_1,
	ObserveOnSubscriber: ObserveOnSubscriber_1,
	ObserveOnMessage: ObserveOnMessage_1
};

var __extends$17 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};











/**
 * We need this JSDoc comment for affecting ESDoc.
 * @extends {Ignored}
 * @hide true
 */
var FromObservable = (function (_super) {
    __extends$17(FromObservable, _super);
    function FromObservable(ish, scheduler) {
        _super.call(this, null);
        this.ish = ish;
        this.scheduler = scheduler;
    }
    /**
     * Creates an Observable from an Array, an array-like object, a Promise, an
     * iterable object, or an Observable-like object.
     *
     * <span class="informal">Converts almost anything to an Observable.</span>
     *
     * <img src="./img/from.png" width="100%">
     *
     * Convert various other objects and data types into Observables. `from`
     * converts a Promise or an array-like or an
     * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)
     * object into an Observable that emits the items in that promise or array or
     * iterable. A String, in this context, is treated as an array of characters.
     * Observable-like objects (contains a function named with the ES2015 Symbol
     * for Observable) can also be converted through this operator.
     *
     * @example <caption>Converts an array to an Observable</caption>
     * var array = [10, 20, 30];
     * var result = Rx.Observable.from(array);
     * result.subscribe(x => console.log(x));
     *
     * // Results in the following:
     * // 10 20 30
     *
     * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>
     * function* generateDoubles(seed) {
     *   var i = seed;
     *   while (true) {
     *     yield i;
     *     i = 2 * i; // double it
     *   }
     * }
     *
     * var iterator = generateDoubles(3);
     * var result = Rx.Observable.from(iterator).take(10);
     * result.subscribe(x => console.log(x));
     *
     * // Results in the following:
     * // 3 6 12 24 48 96 192 384 768 1536
     *
     * @see {@link create}
     * @see {@link fromEvent}
     * @see {@link fromEventPattern}
     * @see {@link fromPromise}
     *
     * @param {ObservableInput<T>} ish A subscribable object, a Promise, an
     * Observable-like, an Array, an iterable or an array-like object to be
     * converted.
     * @param {Scheduler} [scheduler] The scheduler on which to schedule the
     * emissions of values.
     * @return {Observable<T>} The Observable whose values are originally from the
     * input object that was converted.
     * @static true
     * @name from
     * @owner Observable
     */
    FromObservable.create = function (ish, scheduler) {
        if (ish != null) {
            if (typeof ish[observable.observable] === 'function') {
                if (ish instanceof Observable_1.Observable && !scheduler) {
                    return ish;
                }
                return new FromObservable(ish, scheduler);
            }
            else if (isArray.isArray(ish)) {
                return new ArrayObservable_1.ArrayObservable(ish, scheduler);
            }
            else if (isPromise_1.isPromise(ish)) {
                return new PromiseObservable_1.PromiseObservable(ish, scheduler);
            }
            else if (typeof ish[iterator.iterator] === 'function' || typeof ish === 'string') {
                return new IteratorObservable_1.IteratorObservable(ish, scheduler);
            }
            else if (isArrayLike.isArrayLike(ish)) {
                return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);
            }
        }
        throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');
    };
    FromObservable.prototype._subscribe = function (subscriber) {
        var ish = this.ish;
        var scheduler = this.scheduler;
        if (scheduler == null) {
            return ish[observable.observable]().subscribe(subscriber);
        }
        else {
            return ish[observable.observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));
        }
    };
    return FromObservable;
}(Observable_1.Observable));
var FromObservable_2 = FromObservable;


var FromObservable_1 = {
	FromObservable: FromObservable_2
};

var from_1 = FromObservable_1.FromObservable.create;

var of_1 = ArrayObservable_1.ArrayObservable.of;

var __extends$21 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};


/* tslint:enable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link mergeAll}.</span>
 *
 * <img src="./img/mergeMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an Observable, and then merging those resulting Observables and
 * emitting the results of this merger.
 *
 * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>
 * var letters = Rx.Observable.of('a', 'b', 'c');
 * var result = letters.mergeMap(x =>
 *   Rx.Observable.interval(1000).map(i => x+i)
 * );
 * result.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // a0
 * // b0
 * // c0
 * // a1
 * // b1
 * // c1
 * // continues to list a,b,c with respective ascending integers
 *
 * @see {@link concatMap}
 * @see {@link exhaustMap}
 * @see {@link merge}
 * @see {@link mergeAll}
 * @see {@link mergeMapTo}
 * @see {@link mergeScan}
 * @see {@link switchMap}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
 * Observables being subscribed to concurrently.
 * @return {Observable} An Observable that emits the result of applying the
 * projection function (and the optional `resultSelector`) to each item emitted
 * by the source Observable and merging the results of the Observables obtained
 * from this transformation.
 * @method mergeMap
 * @owner Observable
 */
function mergeMap(project, resultSelector, concurrent) {
    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
    if (typeof resultSelector === 'number') {
        concurrent = resultSelector;
        resultSelector = null;
    }
    return this.lift(new MergeMapOperator(project, resultSelector, concurrent));
}
var mergeMap_2 = mergeMap;
var MergeMapOperator = (function () {
    function MergeMapOperator(project, resultSelector, concurrent) {
        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
        this.project = project;
        this.resultSelector = resultSelector;
        this.concurrent = concurrent;
    }
    MergeMapOperator.prototype.call = function (observer, source) {
        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));
    };
    return MergeMapOperator;
}());
var MergeMapOperator_1 = MergeMapOperator;
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var MergeMapSubscriber = (function (_super) {
    __extends$21(MergeMapSubscriber, _super);
    function MergeMapSubscriber(destination, project, resultSelector, concurrent) {
        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
        _super.call(this, destination);
        this.project = project;
        this.resultSelector = resultSelector;
        this.concurrent = concurrent;
        this.hasCompleted = false;
        this.buffer = [];
        this.active = 0;
        this.index = 0;
    }
    MergeMapSubscriber.prototype._next = function (value) {
        if (this.active < this.concurrent) {
            this._tryNext(value);
        }
        else {
            this.buffer.push(value);
        }
    };
    MergeMapSubscriber.prototype._tryNext = function (value) {
        var result;
        var index = this.index++;
        try {
            result = this.project(value, index);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.active++;
        this._innerSub(result, value, index);
    };
    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {
        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
    };
    MergeMapSubscriber.prototype._complete = function () {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            this.destination.complete();
        }
    };
    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        if (this.resultSelector) {
            this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);
        }
        else {
            this.destination.next(innerValue);
        }
    };
    MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {
        var result;
        try {
            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    };
    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {
        var buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        }
        else if (this.active === 0 && this.hasCompleted) {
            this.destination.complete();
        }
    };
    return MergeMapSubscriber;
}(OuterSubscriber_1.OuterSubscriber));
var MergeMapSubscriber_1 = MergeMapSubscriber;


var mergeMap_1 = {
	mergeMap: mergeMap_2,
	MergeMapOperator: MergeMapOperator_1,
	MergeMapSubscriber: MergeMapSubscriber_1
};

/* tslint:enable:max-line-length */
/**
 * Projects each source value to an Observable which is merged in the output
 * Observable, in a serialized fashion waiting for each one to complete before
 * merging the next.
 *
 * <span class="informal">Maps each value to an Observable, then flattens all of
 * these inner Observables using {@link concatAll}.</span>
 *
 * <img src="./img/concatMap.png" width="100%">
 *
 * Returns an Observable that emits items based on applying a function that you
 * supply to each item emitted by the source Observable, where that function
 * returns an (so-called "inner") Observable. Each new inner Observable is
 * concatenated with the previous inner Observable.
 *
 * __Warning:__ if source values arrive endlessly and faster than their
 * corresponding inner Observables can complete, it will result in memory issues
 * as inner Observables amass in an unbounded buffer waiting for their turn to
 * be subscribed to.
 *
 * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set
 * to `1`.
 *
 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));
 * result.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // (results are not concurrent)
 * // For every click on the "document" it will emit values 0 to 3 spaced
 * // on a 1000ms interval
 * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
 *
 * @see {@link concat}
 * @see {@link concatAll}
 * @see {@link concatMapTo}
 * @see {@link exhaustMap}
 * @see {@link mergeMap}
 * @see {@link switchMap}
 *
 * @param {function(value: T, ?index: number): ObservableInput} project A function
 * that, when applied to an item emitted by the source Observable, returns an
 * Observable.
 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
 * A function to produce the value on the output Observable based on the values
 * and the indices of the source (outer) emission and the inner Observable
 * emission. The arguments passed to this function are:
 * - `outerValue`: the value that came from the source
 * - `innerValue`: the value that came from the projected Observable
 * - `outerIndex`: the "index" of the value that came from the source
 * - `innerIndex`: the "index" of the value from the projected Observable
 * @return {Observable} An Observable that emits the result of applying the
 * projection function (and the optional `resultSelector`) to each item emitted
 * by the source Observable and taking values from each projected inner
 * Observable sequentially.
 * @method concatMap
 * @owner Observable
 */
function concatMap(project, resultSelector) {
    return this.lift(new mergeMap_1.MergeMapOperator(project, resultSelector, 1));
}
var concatMap_2 = concatMap;

var __extends$22 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};

/**
 * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.
 *
 * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>
 *  Observable.of(1, 2, 3, 4, 5, 6)
 *     .every(x => x < 5)
 *     .subscribe(x => console.log(x)); // -> false
 *
 * @param {function} predicate A function for determining if an item meets a specified condition.
 * @param {any} [thisArg] Optional object to use for `this` in the callback.
 * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.
 * @method every
 * @owner Observable
 */
function every(predicate, thisArg) {
    return this.lift(new EveryOperator(predicate, thisArg, this));
}
var every_2 = every;
var EveryOperator = (function () {
    function EveryOperator(predicate, thisArg, source) {
        this.predicate = predicate;
        this.thisArg = thisArg;
        this.source = source;
    }
    EveryOperator.prototype.call = function (observer, source) {
        return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));
    };
    return EveryOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var EverySubscriber = (function (_super) {
    __extends$22(EverySubscriber, _super);
    function EverySubscriber(destination, predicate, thisArg, source) {
        _super.call(this, destination);
        this.predicate = predicate;
        this.thisArg = thisArg;
        this.source = source;
        this.index = 0;
        this.thisArg = thisArg || this;
    }
    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {
        this.destination.next(everyValueMatch);
        this.destination.complete();
    };
    EverySubscriber.prototype._next = function (value) {
        var result = false;
        try {
            result = this.predicate.call(this.thisArg, value, this.index++, this.source);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (!result) {
            this.notifyComplete(false);
        }
    };
    EverySubscriber.prototype._complete = function () {
        this.notifyComplete(true);
    };
    return EverySubscriber;
}(Subscriber_1.Subscriber));

var __extends$24 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
/**
 * An error thrown when an Observable or a sequence was queried but has no
 * elements.
 *
 * @see {@link first}
 * @see {@link last}
 * @see {@link single}
 *
 * @class EmptyError
 */
var EmptyError = (function (_super) {
    __extends$24(EmptyError, _super);
    function EmptyError() {
        var err = _super.call(this, 'no elements in sequence');
        this.name = err.name = 'EmptyError';
        this.stack = err.stack;
        this.message = err.message;
    }
    return EmptyError;
}(Error));
var EmptyError_2 = EmptyError;


var EmptyError_1 = {
	EmptyError: EmptyError_2
};

var __extends$23 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};


/**
 * Emits only the first value (or the first value that meets some condition)
 * emitted by the source Observable.
 *
 * <span class="informal">Emits only the first value. Or emits only the first
 * value that passes some test.</span>
 *
 * <img src="./img/first.png" width="100%">
 *
 * If called with no arguments, `first` emits the first value of the source
 * Observable, then completes. If called with a `predicate` function, `first`
 * emits the first value of the source that matches the specified condition. It
 * may also take a `resultSelector` function to produce the output value from
 * the input value, and a `defaultValue` to emit in case the source completes
 * before it is able to emit a valid value. Throws an error if `defaultValue`
 * was not provided and a matching element is not found.
 *
 * @example <caption>Emit only the first click that happens on the DOM</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.first();
 * result.subscribe(x => console.log(x));
 *
 * @example <caption>Emits the first click that happens on a DIV</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var result = clicks.first(ev => ev.target.tagName === 'DIV');
 * result.subscribe(x => console.log(x));
 *
 * @see {@link filter}
 * @see {@link find}
 * @see {@link take}
 *
 * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
 * callback if the Observable completes before any `next` notification was sent.
 *
 * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]
 * An optional function called with each item to test for condition matching.
 * @param {function(value: T, index: number): R} [resultSelector] A function to
 * produce the value on the output Observable based on the values
 * and the indices of the source Observable. The arguments passed to this
 * function are:
 * - `value`: the value that was emitted on the source.
 * - `index`: the "index" of the value from the source.
 * @param {R} [defaultValue] The default value emitted in case no valid value
 * was found on the source.
 * @return {Observable<T|R>} An Observable of the first item that matches the
 * condition.
 * @method first
 * @owner Observable
 */
function first(predicate, resultSelector, defaultValue) {
    return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));
}
var first_2 = first;
var FirstOperator = (function () {
    function FirstOperator(predicate, resultSelector, defaultValue, source) {
        this.predicate = predicate;
        this.resultSelector = resultSelector;
        this.defaultValue = defaultValue;
        this.source = source;
    }
    FirstOperator.prototype.call = function (observer, source) {
        return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
    };
    return FirstOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var FirstSubscriber = (function (_super) {
    __extends$23(FirstSubscriber, _super);
    function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {
        _super.call(this, destination);
        this.predicate = predicate;
        this.resultSelector = resultSelector;
        this.defaultValue = defaultValue;
        this.source = source;
        this.index = 0;
        this.hasCompleted = false;
        this._emitted = false;
    }
    FirstSubscriber.prototype._next = function (value) {
        var index = this.index++;
        if (this.predicate) {
            this._tryPredicate(value, index);
        }
        else {
            this._emit(value, index);
        }
    };
    FirstSubscriber.prototype._tryPredicate = function (value, index) {
        var result;
        try {
            result = this.predicate(value, index, this.source);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            this._emit(value, index);
        }
    };
    FirstSubscriber.prototype._emit = function (value, index) {
        if (this.resultSelector) {
            this._tryResultSelector(value, index);
            return;
        }
        this._emitFinal(value);
    };
    FirstSubscriber.prototype._tryResultSelector = function (value, index) {
        var result;
        try {
            result = this.resultSelector(value, index);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this._emitFinal(result);
    };
    FirstSubscriber.prototype._emitFinal = function (value) {
        var destination = this.destination;
        if (!this._emitted) {
            this._emitted = true;
            destination.next(value);
            destination.complete();
            this.hasCompleted = true;
        }
    };
    FirstSubscriber.prototype._complete = function () {
        var destination = this.destination;
        if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {
            destination.next(this.defaultValue);
            destination.complete();
        }
        else if (!this.hasCompleted) {
            destination.error(new EmptyError_1.EmptyError);
        }
    };
    return FirstSubscriber;
}(Subscriber_1.Subscriber));

var __extends$25 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};


/* tslint:enable:max-line-length */
/**
 * Returns an Observable that emits only the last item emitted by the source Observable.
 * It optionally takes a predicate function as a parameter, in which case, rather than emitting
 * the last item from the source Observable, the resulting Observable will emit the last item
 * from the source Observable that satisfies the predicate.
 *
 * <img src="./img/last.png" width="100%">
 *
 * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
 * callback if the Observable completes before any `next` notification was sent.
 * @param {function} predicate - The condition any source emitted item has to satisfy.
 * @return {Observable} An Observable that emits only the last item satisfying the given condition
 * from the source, or an NoSuchElementException if no such items are emitted.
 * @throws - Throws if no items that match the predicate are emitted by the source Observable.
 * @method last
 * @owner Observable
 */
function last(predicate, resultSelector, defaultValue) {
    return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));
}
var last_2 = last;
var LastOperator = (function () {
    function LastOperator(predicate, resultSelector, defaultValue, source) {
        this.predicate = predicate;
        this.resultSelector = resultSelector;
        this.defaultValue = defaultValue;
        this.source = source;
    }
    LastOperator.prototype.call = function (observer, source) {
        return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
    };
    return LastOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var LastSubscriber = (function (_super) {
    __extends$25(LastSubscriber, _super);
    function LastSubscriber(destination, predicate, resultSelector, defaultValue, source) {
        _super.call(this, destination);
        this.predicate = predicate;
        this.resultSelector = resultSelector;
        this.defaultValue = defaultValue;
        this.source = source;
        this.hasValue = false;
        this.index = 0;
        if (typeof defaultValue !== 'undefined') {
            this.lastValue = defaultValue;
            this.hasValue = true;
        }
    }
    LastSubscriber.prototype._next = function (value) {
        var index = this.index++;
        if (this.predicate) {
            this._tryPredicate(value, index);
        }
        else {
            if (this.resultSelector) {
                this._tryResultSelector(value, index);
                return;
            }
            this.lastValue = value;
            this.hasValue = true;
        }
    };
    LastSubscriber.prototype._tryPredicate = function (value, index) {
        var result;
        try {
            result = this.predicate(value, index, this.source);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            if (this.resultSelector) {
                this._tryResultSelector(value, index);
                return;
            }
            this.lastValue = value;
            this.hasValue = true;
        }
    };
    LastSubscriber.prototype._tryResultSelector = function (value, index) {
        var result;
        try {
            result = this.resultSelector(value, index);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.lastValue = result;
        this.hasValue = true;
    };
    LastSubscriber.prototype._complete = function () {
        var destination = this.destination;
        if (this.hasValue) {
            destination.next(this.lastValue);
            destination.complete();
        }
        else {
            destination.error(new EmptyError_1.EmptyError);
        }
    };
    return LastSubscriber;
}(Subscriber_1.Subscriber));

var __extends$26 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};

/* tslint:enable:max-line-length */
/**
 * Applies an accumulator function over the source Observable, and returns the
 * accumulated result when the source completes, given an optional seed value.
 *
 * <span class="informal">Combines together all values emitted on the source,
 * using an accumulator function that knows how to join a new source value into
 * the accumulation from the past.</span>
 *
 * <img src="./img/reduce.png" width="100%">
 *
 * Like
 * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),
 * `reduce` applies an `accumulator` function against an accumulation and each
 * value of the source Observable (from the past) to reduce it to a single
 * value, emitted on the output Observable. Note that `reduce` will only emit
 * one value, only when the source Observable completes. It is equivalent to
 * applying operator {@link scan} followed by operator {@link last}.
 *
 * Returns an Observable that applies a specified `accumulator` function to each
 * item emitted by the source Observable. If a `seed` value is specified, then
 * that value will be used as the initial value for the accumulator. If no seed
 * value is specified, the first item of the source is used as the seed.
 *
 * @example <caption>Count the number of click events that happened in 5 seconds</caption>
 * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')
 *   .takeUntil(Rx.Observable.interval(5000));
 * var ones = clicksInFiveSeconds.mapTo(1);
 * var seed = 0;
 * var count = ones.reduce((acc, one) => acc + one, seed);
 * count.subscribe(x => console.log(x));
 *
 * @see {@link count}
 * @see {@link expand}
 * @see {@link mergeScan}
 * @see {@link scan}
 *
 * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function
 * called on each source value.
 * @param {R} [seed] The initial accumulation value.
 * @return {Observable<R>} An Observable that emits a single value that is the
 * result of accumulating the values emitted by the source Observable.
 * @method reduce
 * @owner Observable
 */
function reduce(accumulator, seed) {
    var hasSeed = false;
    // providing a seed of `undefined` *should* be valid and trigger
    // hasSeed! so don't use `seed !== undefined` checks!
    // For this reason, we have to check it here at the original call site
    // otherwise inside Operator/Subscriber we won't know if `undefined`
    // means they didn't provide anything or if they literally provided `undefined`
    if (arguments.length >= 2) {
        hasSeed = true;
    }
    return this.lift(new ReduceOperator(accumulator, seed, hasSeed));
}
var reduce_2 = reduce;
var ReduceOperator = (function () {
    function ReduceOperator(accumulator, seed, hasSeed) {
        if (hasSeed === void 0) { hasSeed = false; }
        this.accumulator = accumulator;
        this.seed = seed;
        this.hasSeed = hasSeed;
    }
    ReduceOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new ReduceSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
    };
    return ReduceOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var ReduceSubscriber = (function (_super) {
    __extends$26(ReduceSubscriber, _super);
    function ReduceSubscriber(destination, accumulator, seed, hasSeed) {
        _super.call(this, destination);
        this.accumulator = accumulator;
        this.hasSeed = hasSeed;
        this.index = 0;
        this.hasValue = false;
        this.acc = seed;
        if (!this.hasSeed) {
            this.index++;
        }
    }
    ReduceSubscriber.prototype._next = function (value) {
        if (this.hasValue || (this.hasValue = this.hasSeed)) {
            this._tryReduce(value);
        }
        else {
            this.acc = value;
            this.hasValue = true;
        }
    };
    ReduceSubscriber.prototype._tryReduce = function (value) {
        var result;
        try {
            result = this.accumulator(this.acc, value, this.index++);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.acc = result;
    };
    ReduceSubscriber.prototype._complete = function () {
        if (this.hasValue || this.hasSeed) {
            this.destination.next(this.acc);
        }
        this.destination.complete();
    };
    return ReduceSubscriber;
}(Subscriber_1.Subscriber));

var __extends$27 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};


/**
 * Catches errors on the observable to be handled by returning a new observable or throwing an error.
 *
 * <img src="./img/catch.png" width="100%">
 *
 * @example <caption>Continues with a different Observable when there's an error</caption>
 *
 * Observable.of(1, 2, 3, 4, 5)
 *   .map(n => {
 * 	   if (n == 4) {
 * 	     throw 'four!';
 *     }
 *	   return n;
 *   })
 *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))
 *   .subscribe(x => console.log(x));
 *   // 1, 2, 3, I, II, III, IV, V
 *
 * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>
 *
 * Observable.of(1, 2, 3, 4, 5)
 *   .map(n => {
 * 	   if (n === 4) {
 * 	     throw 'four!';
 *     }
 * 	   return n;
 *   })
 *   .catch((err, caught) => caught)
 *   .take(30)
 *   .subscribe(x => console.log(x));
 *   // 1, 2, 3, 1, 2, 3, ...
 *
 * @example <caption>Throws a new error when the source Observable throws an error</caption>
 *
 * Observable.of(1, 2, 3, 4, 5)
 *   .map(n => {
 *     if (n == 4) {
 *       throw 'four!';
 *     }
 *     return n;
 *   })
 *   .catch(err => {
 *     throw 'error in source. Details: ' + err;
 *   })
 *   .subscribe(
 *     x => console.log(x),
 *     err => console.log(err)
 *   );
 *   // 1, 2, 3, error in source. Details: four!
 *
 * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which
 *  is the source observable, in case you'd like to "retry" that observable by returning it again. Whatever observable
 *  is returned by the `selector` will be used to continue the observable chain.
 * @return {Observable} An observable that originates from either the source or the observable returned by the
 *  catch `selector` function.
 * @method catch
 * @name catch
 * @owner Observable
 */
function _catch(selector) {
    var operator = new CatchOperator(selector);
    var caught = this.lift(operator);
    return (operator.caught = caught);
}
var _catch_2 = _catch;
var CatchOperator = (function () {
    function CatchOperator(selector) {
        this.selector = selector;
    }
    CatchOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
    };
    return CatchOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var CatchSubscriber = (function (_super) {
    __extends$27(CatchSubscriber, _super);
    function CatchSubscriber(destination, selector, caught) {
        _super.call(this, destination);
        this.selector = selector;
        this.caught = caught;
    }
    // NOTE: overriding `error` instead of `_error` because we don't want
    // to have this flag this subscriber as `isStopped`. We can mimic the
    // behavior of the RetrySubscriber (from the `retry` operator), where
    // we unsubscribe from our source chain, reset our Subscriber flags,
    // then subscribe to the selector result.
    CatchSubscriber.prototype.error = function (err) {
        if (!this.isStopped) {
            var result = void 0;
            try {
                result = this.selector(err, this.caught);
            }
            catch (err2) {
                _super.prototype.error.call(this, err2);
                return;
            }
            this._unsubscribeAndRecycle();
            this.add(subscribeToResult_1.subscribeToResult(this, result));
        }
    };
    return CatchSubscriber;
}(OuterSubscriber_1.OuterSubscriber));

/* tslint:enable:max-line-length */
/**
 * Converts a higher-order Observable into a first-order Observable by
 * concatenating the inner Observables in order.
 *
 * <span class="informal">Flattens an Observable-of-Observables by putting one
 * inner Observable after the other.</span>
 *
 * <img src="./img/concatAll.png" width="100%">
 *
 * Joins every Observable emitted by the source (a higher-order Observable), in
 * a serial fashion. It subscribes to each inner Observable only after the
 * previous inner Observable has completed, and merges all of their values into
 * the returned observable.
 *
 * __Warning:__ If the source Observable emits Observables quickly and
 * endlessly, and the inner Observables it emits generally complete slower than
 * the source emits, you can run into memory issues as the incoming Observables
 * collect in an unbounded buffer.
 *
 * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set
 * to `1`.
 *
 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));
 * var firstOrder = higherOrder.concatAll();
 * firstOrder.subscribe(x => console.log(x));
 *
 * // Results in the following:
 * // (results are not concurrent)
 * // For every click on the "document" it will emit values 0 to 3 spaced
 * // on a 1000ms interval
 * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3
 *
 * @see {@link combineAll}
 * @see {@link concat}
 * @see {@link concatMap}
 * @see {@link concatMapTo}
 * @see {@link exhaust}
 * @see {@link mergeAll}
 * @see {@link switch}
 * @see {@link zipAll}
 *
 * @return {Observable} An Observable emitting values from all the inner
 * Observables concatenated.
 * @method concatAll
 * @owner Observable
 */
function concatAll() {
    return this.lift(new mergeAll_1.MergeAllOperator(1));
}
var concatAll_2 = concatAll;

var __extends$28 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};

/* tslint:enable:max-line-length */
/**
 * Filter items emitted by the source Observable by only emitting those that
 * satisfy a specified predicate.
 *
 * <span class="informal">Like
 * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),
 * it only emits a value from the source if it passes a criterion function.</span>
 *
 * <img src="./img/filter.png" width="100%">
 *
 * Similar to the well-known `Array.prototype.filter` method, this operator
 * takes values from the source Observable, passes them through a `predicate`
 * function and only emits those values that yielded `true`.
 *
 * @example <caption>Emit only click events whose target was a DIV element</caption>
 * var clicks = Rx.Observable.fromEvent(document, 'click');
 * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');
 * clicksOnDivs.subscribe(x => console.log(x));
 *
 * @see {@link distinct}
 * @see {@link distinctUntilChanged}
 * @see {@link distinctUntilKeyChanged}
 * @see {@link ignoreElements}
 * @see {@link partition}
 * @see {@link skip}
 *
 * @param {function(value: T, index: number): boolean} predicate A function that
 * evaluates each value emitted by the source Observable. If it returns `true`,
 * the value is emitted, if `false` the value is not passed to the output
 * Observable. The `index` parameter is the number `i` for the i-th source
 * emission that has happened since the subscription, starting from the number
 * `0`.
 * @param {any} [thisArg] An optional argument to determine the value of `this`
 * in the `predicate` function.
 * @return {Observable} An Observable of values from the source that were
 * allowed by the `predicate` function.
 * @method filter
 * @owner Observable
 */
function filter(predicate, thisArg) {
    return this.lift(new FilterOperator(predicate, thisArg));
}
var filter_2 = filter;
var FilterOperator = (function () {
    function FilterOperator(predicate, thisArg) {
        this.predicate = predicate;
        this.thisArg = thisArg;
    }
    FilterOperator.prototype.call = function (subscriber, source) {
        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
    };
    return FilterOperator;
}());
/**
 * We need this JSDoc comment for affecting ESDoc.
 * @ignore
 * @extends {Ignored}
 */
var FilterSubscriber = (function (_super) {
    __extends$28(FilterSubscriber, _super);
    function FilterSubscriber(destination, predicate, thisArg) {
        _super.call(this, destination);
        this.predicate = predicate;
        this.thisArg = thisArg;
        this.count = 0;
        this.predicate = predicate;
    }
    // the try catch block below is left specifically for
    // optimization and perf reasons. a tryCatcher is not necessary here.
    FilterSubscriber.prototype._next = function (value) {
        var result;
        try {
            result = this.predicate.call(this.thisArg, value, this.count++);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            this.destination.next(value);
        }
    };
    return FilterSubscriber;
}(Subscriber_1.Subscriber));


var filter_1 = {
	filter: filter_2
};

/**
 * @license Angular v4.3.3
 * (c) 2010-2017 Google, Inc. https://angular.io/
 * License: MIT
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@whatItDoes Represents an event triggered when a navigation starts.
 *
 * \@stable
 */
var NavigationStart = (function () {
    /**
     * @param {?} id
     * @param {?} url
     */
    function NavigationStart(id, url) {
        this.id = id;
        this.url = url;
    }
    /**
     * \@docsNotRequired
     * @return {?}
     */
    NavigationStart.prototype.toString = function () { return "NavigationStart(id: " + this.id + ", url: '" + this.url + "')"; };
    return NavigationStart;
}());
/**
 * \@whatItDoes Represents an event triggered when a navigation ends successfully.
 *
 * \@stable
 */
var NavigationEnd = (function () {
    /**
     * @param {?} id
     * @param {?} url
     * @param {?} urlAfterRedirects
     */
    function NavigationEnd(id, url, urlAfterRedirects) {
        this.id = id;
        this.url = url;
        this.urlAfterRedirects = urlAfterRedirects;
    }
    /**
     * \@docsNotRequired
     * @return {?}
     */
    NavigationEnd.prototype.toString = function () {
        return "NavigationEnd(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "')";
    };
    return NavigationEnd;
}());
/**
 * \@whatItDoes Represents an event triggered when a navigation is canceled.
 *
 * \@stable
 */
var NavigationCancel = (function () {
    /**
     * @param {?} id
     * @param {?} url
     * @param {?} reason
     */
    function NavigationCancel(id, url, reason) {
        this.id = id;
        this.url = url;
        this.reason = reason;
    }
    /**
     * \@docsNotRequired
     * @return {?}
     */
    NavigationCancel.prototype.toString = function () { return "NavigationCancel(id: " + this.id + ", url: '" + this.url + "')"; };
    return NavigationCancel;
}());
/**
 * \@whatItDoes Represents an event triggered when a navigation fails due to an unexpected error.
 *
 * \@stable
 */
var NavigationError = (function () {
    /**
     * @param {?} id
     * @param {?} url
     * @param {?} error
     */
    function NavigationError(id, url, error) {
        this.id = id;
        this.url = url;
        this.error = error;
    }
    /**
     * \@docsNotRequired
     * @return {?}
     */
    NavigationError.prototype.toString = function () {
        return "NavigationError(id: " + this.id + ", url: '" + this.url + "', error: " + this.error + ")";
    };
    return NavigationError;
}());
/**
 * \@whatItDoes Represents an event triggered when routes are recognized.
 *
 * \@stable
 */
var RoutesRecognized = (function () {
    /**
     * @param {?} id
     * @param {?} url
     * @param {?} urlAfterRedirects
     * @param {?} state
     */
    function RoutesRecognized(id, url, urlAfterRedirects, state) {
        this.id = id;
        this.url = url;
        this.urlAfterRedirects = urlAfterRedirects;
        this.state = state;
    }
    /**
     * \@docsNotRequired
     * @return {?}
     */
    RoutesRecognized.prototype.toString = function () {
        return "RoutesRecognized(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "', state: " + this.state + ")";
    };
    return RoutesRecognized;
}());
/**
 * \@whatItDoes Represents an event triggered before lazy loading a route config.
 *
 * \@experimental
 */
var RouteConfigLoadStart = (function () {
    /**
     * @param {?} route
     */
    function RouteConfigLoadStart(route) {
        this.route = route;
    }
    /**
     * @return {?}
     */
    RouteConfigLoadStart.prototype.toString = function () { return "RouteConfigLoadStart(path: " + this.route.path + ")"; };
    return RouteConfigLoadStart;
}());
/**
 * \@whatItDoes Represents an event triggered when a route has been lazy loaded.
 *
 * \@experimental
 */
var RouteConfigLoadEnd = (function () {
    /**
     * @param {?} route
     */
    function RouteConfigLoadEnd(route) {
        this.route = route;
    }
    /**
     * @return {?}
     */
    RouteConfigLoadEnd.prototype.toString = function () { return "RouteConfigLoadEnd(path: " + this.route.path + ")"; };
    return RouteConfigLoadEnd;
}());
/**
 * \@whatItDoes Represents the start of the Guard phase of routing.
 *
 * \@experimental
 */
var GuardsCheckStart = (function () {
    /**
     * @param {?} id
     * @param {?} url
     * @param {?} urlAfterRedirects
     * @param {?} state
     */
    function GuardsCheckStart(id, url, urlAfterRedirects, state) {
        this.id = id;
        this.url = url;
        this.urlAfterRedirects = urlAfterRedirects;
        this.state = state;
    }
    /**
     * @return {?}
     */
    GuardsCheckStart.prototype.toString = function () {
        return "GuardsCheckStart(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "', state: " + this.state + ")";
    };
    return GuardsCheckStart;
}());
/**
 * \@whatItDoes Represents the end of the Guard phase of routing.
 *
 * \@experimental
 */
var GuardsCheckEnd = (function () {
    /**
     * @param {?} id
     * @param {?} url
     * @param {?} urlAfterRedirects
     * @param {?} state
     * @param {?} shouldActivate
     */
    function GuardsCheckEnd(id, url, urlAfterRedirects, state, shouldActivate) {
        this.id = id;
        this.url = url;
        this.urlAfterRedirects = urlAfterRedirects;
        this.state = state;
        this.shouldActivate = shouldActivate;
    }
    /**
     * @return {?}
     */
    GuardsCheckEnd.prototype.toString = function () {
        return "GuardsCheckEnd(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "', state: " + this.state + ", shouldActivate: " + this.shouldActivate + ")";
    };
    return GuardsCheckEnd;
}());
/**
 * \@whatItDoes Represents the start of the Resolve phase of routing. The timing of this
 * event may change, thus it's experimental. In the current iteration it will run
 * in the "resolve" phase whether there's things to resolve or not. In the future this
 * behavior may change to only run when there are things to be resolved.
 *
 * \@experimental
 */
var ResolveStart = (function () {
    /**
     * @param {?} id
     * @param {?} url
     * @param {?} urlAfterRedirects
     * @param {?} state
     */
    function ResolveStart(id, url, urlAfterRedirects, state) {
        this.id = id;
        this.url = url;
        this.urlAfterRedirects = urlAfterRedirects;
        this.state = state;
    }
    /**
     * @return {?}
     */
    ResolveStart.prototype.toString = function () {
        return "ResolveStart(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "', state: " + this.state + ")";
    };
    return ResolveStart;
}());
/**
 * \@whatItDoes Represents the end of the Resolve phase of routing. See note on
 * {\@link ResolveStart} for use of this experimental API.
 *
 * \@experimental
 */
var ResolveEnd = (function () {
    /**
     * @param {?} id
     * @param {?} url
     * @param {?} urlAfterRedirects
     * @param {?} state
     */
    function ResolveEnd(id, url, urlAfterRedirects, state) {
        this.id = id;
        this.url = url;
        this.urlAfterRedirects = urlAfterRedirects;
        this.state = state;
    }
    /**
     * @return {?}
     */
    ResolveEnd.prototype.toString = function () {
        return "ResolveEnd(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "', state: " + this.state + ")";
    };
    return ResolveEnd;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@whatItDoes Name of the primary outlet.
 *
 * \@stable
 */
var PRIMARY_OUTLET = 'primary';
var ParamsAsMap = (function () {
    /**
     * @param {?} params
     */
    function ParamsAsMap(params) {
        this.params = params || {};
    }
    /**
     * @param {?} name
     * @return {?}
     */
    ParamsAsMap.prototype.has = function (name) { return this.params.hasOwnProperty(name); };
    /**
     * @param {?} name
     * @return {?}
     */
    ParamsAsMap.prototype.get = function (name) {
        if (this.has(name)) {
            var /** @type {?} */ v = this.params[name];
            return Array.isArray(v) ? v[0] : v;
        }
        return null;
    };
    /**
     * @param {?} name
     * @return {?}
     */
    ParamsAsMap.prototype.getAll = function (name) {
        if (this.has(name)) {
            var /** @type {?} */ v = this.params[name];
            return Array.isArray(v) ? v : [v];
        }
        return [];
    };
    Object.defineProperty(ParamsAsMap.prototype, "keys", {
        /**
         * @return {?}
         */
        get: function () { return Object.keys(this.params); },
        enumerable: true,
        configurable: true
    });
    return ParamsAsMap;
}());
/**
 * Convert a {\@link Params} instance to a {\@link ParamMap}.
 *
 * \@stable
 * @param {?} params
 * @return {?}
 */
function convertToParamMap(params) {
    return new ParamsAsMap(params);
}
var NAVIGATION_CANCELING_ERROR = 'ngNavigationCancelingError';
/**
 * @param {?} message
 * @return {?}
 */
function navigationCancelingError(message) {
    var /** @type {?} */ error = Error('NavigationCancelingError: ' + message);
    ((error))[NAVIGATION_CANCELING_ERROR] = true;
    return error;
}
/**
 * @param {?} error
 * @return {?}
 */
function isNavigationCancelingError(error) {
    return ((error))[NAVIGATION_CANCELING_ERROR];
}
/**
 * @param {?} segments
 * @param {?} segmentGroup
 * @param {?} route
 * @return {?}
 */
function defaultUrlMatcher(segments, segmentGroup, route) {
    var /** @type {?} */ parts = ((route.path)).split('/');
    if (parts.length > segments.length) {
        // The actual URL is shorter than the config, no match
        return null;
    }
    if (route.pathMatch === 'full' &&
        (segmentGroup.hasChildren() || parts.length < segments.length)) {
        // The config is longer than the actual URL but we are looking for a full match, return null
        return null;
    }
    var /** @type {?} */ posParams = {};
    // Check each config part against the actual URL
    for (var /** @type {?} */ index = 0; index < parts.length; index++) {
        var /** @type {?} */ part = parts[index];
        var /** @type {?} */ segment = segments[index];
        var /** @type {?} */ isParameter = part.startsWith(':');
        if (isParameter) {
            posParams[part.substring(1)] = segment;
        }
        else if (part !== segment.path) {
            // The actual URL part does not match the config, no match
            return null;
        }
    }
    return { consumed: segments.slice(0, parts.length), posParams: posParams };
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var LoadedRouterConfig = (function () {
    /**
     * @param {?} routes
     * @param {?} module
     */
    function LoadedRouterConfig(routes, module) {
        this.routes = routes;
        this.module = module;
    }
    return LoadedRouterConfig;
}());
/**
 * @param {?} config
 * @param {?=} parentPath
 * @return {?}
 */
function validateConfig(config, parentPath) {
    if (parentPath === void 0) { parentPath = ''; }
    // forEach doesn't iterate undefined values
    for (var /** @type {?} */ i = 0; i < config.length; i++) {
        var /** @type {?} */ route = config[i];
        var /** @type {?} */ fullPath = getFullPath(parentPath, route);
        validateNode$1(route, fullPath);
    }
}
/**
 * @param {?} route
 * @param {?} fullPath
 * @return {?}
 */
function validateNode$1(route, fullPath) {
    if (!route) {
        throw new Error("\n      Invalid configuration of route '" + fullPath + "': Encountered undefined route.\n      The reason might be an extra comma.\n\n      Example:\n      const routes: Routes = [\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\n        { path: 'detail/:id', component: HeroDetailComponent }\n      ];\n    ");
    }
    if (Array.isArray(route)) {
        throw new Error("Invalid configuration of route '" + fullPath + "': Array cannot be specified");
    }
    if (!route.component && (route.outlet && route.outlet !== PRIMARY_OUTLET)) {
        throw new Error("Invalid configuration of route '" + fullPath + "': a componentless route cannot have a named outlet set");
    }
    if (route.redirectTo && route.children) {
        throw new Error("Invalid configuration of route '" + fullPath + "': redirectTo and children cannot be used together");
    }
    if (route.redirectTo && route.loadChildren) {
        throw new Error("Invalid configuration of route '" + fullPath + "': redirectTo and loadChildren cannot be used together");
    }
    if (route.children && route.loadChildren) {
        throw new Error("Invalid configuration of route '" + fullPath + "': children and loadChildren cannot be used together");
    }
    if (route.redirectTo && route.component) {
        throw new Error("Invalid configuration of route '" + fullPath + "': redirectTo and component cannot be used together");
    }
    if (route.path && route.matcher) {
        throw new Error("Invalid configuration of route '" + fullPath + "': path and matcher cannot be used together");
    }
    if (route.redirectTo === void 0 && !route.component && !route.children && !route.loadChildren) {
        throw new Error("Invalid configuration of route '" + fullPath + "'. One of the following must be provided: component, redirectTo, children or loadChildren");
    }
    if (route.path === void 0 && route.matcher === void 0) {
        throw new Error("Invalid configuration of route '" + fullPath + "': routes must have either a path or a matcher specified");
    }
    if (typeof route.path === 'string' && route.path.charAt(0) === '/') {
        throw new Error("Invalid configuration of route '" + fullPath + "': path cannot start with a slash");
    }
    if (route.path === '' && route.redirectTo !== void 0 && route.pathMatch === void 0) {
        var /** @type {?} */ exp = "The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.";
        throw new Error("Invalid configuration of route '{path: \"" + fullPath + "\", redirectTo: \"" + route.redirectTo + "\"}': please provide 'pathMatch'. " + exp);
    }
    if (route.pathMatch !== void 0 && route.pathMatch !== 'full' && route.pathMatch !== 'prefix') {
        throw new Error("Invalid configuration of route '" + fullPath + "': pathMatch can only be set to 'prefix' or 'full'");
    }
    if (route.children) {
        validateConfig(route.children, fullPath);
    }
}
/**
 * @param {?} parentPath
 * @param {?} currentRoute
 * @return {?}
 */
function getFullPath(parentPath, currentRoute) {
    if (!currentRoute) {
        return parentPath;
    }
    if (!parentPath && !currentRoute.path) {
        return '';
    }
    else if (parentPath && !currentRoute.path) {
        return parentPath + "/";
    }
    else if (!parentPath && currentRoute.path) {
        return currentRoute.path;
    }
    else {
        return parentPath + "/" + currentRoute.path;
    }
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function shallowEqualArrays(a, b) {
    if (a.length !== b.length)
        return false;
    for (var /** @type {?} */ i = 0; i < a.length; ++i) {
        if (!shallowEqual(a[i], b[i]))
            return false;
    }
    return true;
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function shallowEqual(a, b) {
    var /** @type {?} */ k1 = Object.keys(a);
    var /** @type {?} */ k2 = Object.keys(b);
    if (k1.length != k2.length) {
        return false;
    }
    var /** @type {?} */ key;
    for (var /** @type {?} */ i = 0; i < k1.length; i++) {
        key = k1[i];
        if (a[key] !== b[key]) {
            return false;
        }
    }
    return true;
}
/**
 * @template T
 * @param {?} arr
 * @return {?}
 */
function flatten$1(arr) {
    return Array.prototype.concat.apply([], arr);
}
/**
 * @template T
 * @param {?} a
 * @return {?}
 */
function last$1(a) {
    return a.length > 0 ? a[a.length - 1] : null;
}
/**
 * @param {?} bools
 * @return {?}
 */
/**
 * @template K, V
 * @param {?} map
 * @param {?} callback
 * @return {?}
 */
function forEach(map$$1, callback) {
    for (var /** @type {?} */ prop in map$$1) {
        if (map$$1.hasOwnProperty(prop)) {
            callback(map$$1[prop], prop);
        }
    }
}
/**
 * @template A, B
 * @param {?} obj
 * @param {?} fn
 * @return {?}
 */
function waitForMap(obj, fn) {
    if (Object.keys(obj).length === 0) {
        return of_1({});
    }
    var /** @type {?} */ waitHead = [];
    var /** @type {?} */ waitTail = [];
    var /** @type {?} */ res = {};
    forEach(obj, function (a, k) {
        var /** @type {?} */ mapped = map_2.call(fn(k, a), function (r) { return res[k] = r; });
        if (k === PRIMARY_OUTLET) {
            waitHead.push(mapped);
        }
        else {
            waitTail.push(mapped);
        }
    });
    var /** @type {?} */ concat$ = concatAll_2.call(of_1.apply(void 0, waitHead.concat(waitTail)));
    var /** @type {?} */ last$ = last_2.call(concat$);
    return map_2.call(last$, function () { return res; });
}
/**
 * @param {?} observables
 * @return {?}
 */
function andObservables(observables) {
    var /** @type {?} */ merged$ = mergeAll_2.call(observables);
    return every_2.call(merged$, function (result) { return result === true; });
}
/**
 * @template T
 * @param {?} value
 * @return {?}
 */
function wrapIntoObservable(value) {
    if (isObservable(value)) {
        return value;
    }
    if (isPromise(value)) {
        // Use `Promise.resolve()` to wrap promise-like instances.
        // Required ie when a Resolver returns a AngularJS `$q` promise to correctly trigger the
        // change detection.
        return fromPromise_1(Promise.resolve(value));
    }
    return of_1(value);
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @return {?}
 */
function createEmptyUrlTree() {
    return new UrlTree(new UrlSegmentGroup([], {}), {}, null);
}
/**
 * @param {?} container
 * @param {?} containee
 * @param {?} exact
 * @return {?}
 */
function containsTree(container, containee, exact) {
    if (exact) {
        return equalQueryParams(container.queryParams, containee.queryParams) &&
            equalSegmentGroups(container.root, containee.root);
    }
    return containsQueryParams(container.queryParams, containee.queryParams) &&
        containsSegmentGroup(container.root, containee.root);
}
/**
 * @param {?} container
 * @param {?} containee
 * @return {?}
 */
function equalQueryParams(container, containee) {
    return shallowEqual(container, containee);
}
/**
 * @param {?} container
 * @param {?} containee
 * @return {?}
 */
function equalSegmentGroups(container, containee) {
    if (!equalPath(container.segments, containee.segments))
        return false;
    if (container.numberOfChildren !== containee.numberOfChildren)
        return false;
    for (var /** @type {?} */ c in containee.children) {
        if (!container.children[c])
            return false;
        if (!equalSegmentGroups(container.children[c], containee.children[c]))
            return false;
    }
    return true;
}
/**
 * @param {?} container
 * @param {?} containee
 * @return {?}
 */
function containsQueryParams(container, containee) {
    return Object.keys(containee).length <= Object.keys(container).length &&
        Object.keys(containee).every(function (key) { return containee[key] === container[key]; });
}
/**
 * @param {?} container
 * @param {?} containee
 * @return {?}
 */
function containsSegmentGroup(container, containee) {
    return containsSegmentGroupHelper(container, containee, containee.segments);
}
/**
 * @param {?} container
 * @param {?} containee
 * @param {?} containeePaths
 * @return {?}
 */
function containsSegmentGroupHelper(container, containee, containeePaths) {
    if (container.segments.length > containeePaths.length) {
        var /** @type {?} */ current = container.segments.slice(0, containeePaths.length);
        if (!equalPath(current, containeePaths))
            return false;
        if (containee.hasChildren())
            return false;
        return true;
    }
    else if (container.segments.length === containeePaths.length) {
        if (!equalPath(container.segments, containeePaths))
            return false;
        for (var /** @type {?} */ c in containee.children) {
            if (!container.children[c])
                return false;
            if (!containsSegmentGroup(container.children[c], containee.children[c]))
                return false;
        }
        return true;
    }
    else {
        var /** @type {?} */ current = containeePaths.slice(0, container.segments.length);
        var /** @type {?} */ next = containeePaths.slice(container.segments.length);
        if (!equalPath(container.segments, current))
            return false;
        if (!container.children[PRIMARY_OUTLET])
            return false;
        return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next);
    }
}
/**
 * \@whatItDoes Represents the parsed URL.
 *
 * \@howToUse
 *
 * ```
 * \@Component({templateUrl:'template.html'})
 * class MyComponent {
 *   constructor(router: Router) {
 *     const tree: UrlTree =
 *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');
 *     const f = tree.fragment; // return 'fragment'
 *     const q = tree.queryParams; // returns {debug: 'true'}
 *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];
 *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'
 *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'
 *     g.children['support'].segments; // return 1 segment 'help'
 *   }
 * }
 * ```
 *
 * \@description
 *
 * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a
 * serialized tree.
 * UrlTree is a data structure that provides a lot of affordances in dealing with URLs
 *
 * \@stable
 */
var UrlTree = (function () {
    /**
     * \@internal
     * @param {?} root
     * @param {?} queryParams
     * @param {?} fragment
     */
    function UrlTree(root, queryParams, fragment) {
        this.root = root;
        this.queryParams = queryParams;
        this.fragment = fragment;
    }
    Object.defineProperty(UrlTree.prototype, "queryParamMap", {
        /**
         * @return {?}
         */
        get: function () {
            if (!this._queryParamMap) {
                this._queryParamMap = convertToParamMap(this.queryParams);
            }
            return this._queryParamMap;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * \@docsNotRequired
     * @return {?}
     */
    UrlTree.prototype.toString = function () { return DEFAULT_SERIALIZER.serialize(this); };
    return UrlTree;
}());
/**
 * \@whatItDoes Represents the parsed URL segment group.
 *
 * See {\@link UrlTree} for more information.
 *
 * \@stable
 */
var UrlSegmentGroup = (function () {
    /**
     * @param {?} segments
     * @param {?} children
     */
    function UrlSegmentGroup(segments, children) {
        var _this = this;
        this.segments = segments;
        this.children = children;
        /**
         * The parent node in the url tree
         */
        this.parent = null;
        forEach(children, function (v, k) { return v.parent = _this; });
    }
    /**
     * Whether the segment has child segments
     * @return {?}
     */
    UrlSegmentGroup.prototype.hasChildren = function () { return this.numberOfChildren > 0; };
    Object.defineProperty(UrlSegmentGroup.prototype, "numberOfChildren", {
        /**
         * Number of child segments
         * @return {?}
         */
        get: function () { return Object.keys(this.children).length; },
        enumerable: true,
        configurable: true
    });
    /**
     * \@docsNotRequired
     * @return {?}
     */
    UrlSegmentGroup.prototype.toString = function () { return serializePaths(this); };
    return UrlSegmentGroup;
}());
/**
 * \@whatItDoes Represents a single URL segment.
 *
 * \@howToUse
 *
 * ```
 * \@Component({templateUrl:'template.html'})
 * class MyComponent {
 *   constructor(router: Router) {
 *     const tree: UrlTree = router.parseUrl('/team;id=33');
 *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];
 *     const s: UrlSegment[] = g.segments;
 *     s[0].path; // returns 'team'
 *     s[0].parameters; // returns {id: 33}
 *   }
 * }
 * ```
 *
 * \@description
 *
 * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix
 * parameters associated with the segment.
 *
 * \@stable
 */
var UrlSegment = (function () {
    /**
     * @param {?} path
     * @param {?} parameters
     */
    function UrlSegment(path, parameters) {
        this.path = path;
        this.parameters = parameters;
    }
    Object.defineProperty(UrlSegment.prototype, "parameterMap", {
        /**
         * @return {?}
         */
        get: function () {
            if (!this._parameterMap) {
                this._parameterMap = convertToParamMap(this.parameters);
            }
            return this._parameterMap;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * \@docsNotRequired
     * @return {?}
     */
    UrlSegment.prototype.toString = function () { return serializePath(this); };
    return UrlSegment;
}());
/**
 * @param {?} as
 * @param {?} bs
 * @return {?}
 */
function equalSegments(as, bs) {
    return equalPath(as, bs) && as.every(function (a, i) { return shallowEqual(a.parameters, bs[i].parameters); });
}
/**
 * @param {?} as
 * @param {?} bs
 * @return {?}
 */
function equalPath(as, bs) {
    if (as.length !== bs.length)
        return false;
    return as.every(function (a, i) { return a.path === bs[i].path; });
}
/**
 * @template T
 * @param {?} segment
 * @param {?} fn
 * @return {?}
 */
function mapChildrenIntoArray(segment, fn) {
    var /** @type {?} */ res = [];
    forEach(segment.children, function (child, childOutlet) {
        if (childOutlet === PRIMARY_OUTLET) {
            res = res.concat(fn(child, childOutlet));
        }
    });
    forEach(segment.children, function (child, childOutlet) {
        if (childOutlet !== PRIMARY_OUTLET) {
            res = res.concat(fn(child, childOutlet));
        }
    });
    return res;
}
/**
 * \@whatItDoes Serializes and deserializes a URL string into a URL tree.
 *
 * \@description The url serialization strategy is customizable. You can
 * make all URLs case insensitive by providing a custom UrlSerializer.
 *
 * See {\@link DefaultUrlSerializer} for an example of a URL serializer.
 *
 * \@stable
 * @abstract
 */
var UrlSerializer = (function () {
    function UrlSerializer() {
    }
    /**
     * Parse a url into a {\@link UrlTree}
     * @abstract
     * @param {?} url
     * @return {?}
     */
    UrlSerializer.prototype.parse = function (url) { };
    /**
     * Converts a {\@link UrlTree} into a url
     * @abstract
     * @param {?} tree
     * @return {?}
     */
    UrlSerializer.prototype.serialize = function (tree) { };
    return UrlSerializer;
}());
/**
 * \@whatItDoes A default implementation of the {\@link UrlSerializer}.
 *
 * \@description
 *
 * Example URLs:
 *
 * ```
 * /inbox/33(popup:compose)
 * /inbox/33;open=true/messages/44
 * ```
 *
 * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the
 * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to
 * specify route specific parameters.
 *
 * \@stable
 */
var DefaultUrlSerializer = (function () {
    function DefaultUrlSerializer() {
    }
    /**
     * Parses a url into a {\@link UrlTree}
     * @param {?} url
     * @return {?}
     */
    DefaultUrlSerializer.prototype.parse = function (url) {
        var /** @type {?} */ p = new UrlParser(url);
        return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());
    };
    /**
     * Converts a {\@link UrlTree} into a url
     * @param {?} tree
     * @return {?}
     */
    DefaultUrlSerializer.prototype.serialize = function (tree) {
        var /** @type {?} */ segment = "/" + serializeSegment(tree.root, true);
        var /** @type {?} */ query = serializeQueryParams(tree.queryParams);
        var /** @type {?} */ fragment = typeof tree.fragment === "string" ? "#" + encodeURI(/** @type {?} */ ((tree.fragment))) : '';
        return "" + segment + query + fragment;
    };
    return DefaultUrlSerializer;
}());
var DEFAULT_SERIALIZER = new DefaultUrlSerializer();
/**
 * @param {?} segment
 * @return {?}
 */
function serializePaths(segment) {
    return segment.segments.map(function (p) { return serializePath(p); }).join('/');
}
/**
 * @param {?} segment
 * @param {?} root
 * @return {?}
 */
function serializeSegment(segment, root) {
    if (!segment.hasChildren()) {
        return serializePaths(segment);
    }
    if (root) {
        var /** @type {?} */ primary = segment.children[PRIMARY_OUTLET] ?
            serializeSegment(segment.children[PRIMARY_OUTLET], false) :
            '';
        var /** @type {?} */ children_1 = [];
        forEach(segment.children, function (v, k) {
            if (k !== PRIMARY_OUTLET) {
                children_1.push(k + ":" + serializeSegment(v, false));
            }
        });
        return children_1.length > 0 ? primary + "(" + children_1.join('//') + ")" : primary;
    }
    else {
        var /** @type {?} */ children = mapChildrenIntoArray(segment, function (v, k) {
            if (k === PRIMARY_OUTLET) {
                return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];
            }
            return [k + ":" + serializeSegment(v, false)];
        });
        return serializePaths(segment) + "/(" + children.join('//') + ")";
    }
}
/**
 * This method is intended for encoding *key* or *value* parts of query component. We need a custom
 * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be
 * encoded per http://tools.ietf.org/html/rfc3986:
 *    query         = *( pchar / "/" / "?" )
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "\@"
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
 *    pct-encoded   = "%" HEXDIG HEXDIG
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
 *                     / "*" / "+" / "," / ";" / "="
 * @param {?} s
 * @return {?}
 */
function encode(s) {
    return encodeURIComponent(s)
        .replace(/%40/g, '@')
        .replace(/%3A/gi, ':')
        .replace(/%24/g, '$')
        .replace(/%2C/gi, ',')
        .replace(/%3B/gi, ';');
}
/**
 * @param {?} s
 * @return {?}
 */
function decode(s) {
    return decodeURIComponent(s);
}
/**
 * @param {?} path
 * @return {?}
 */
function serializePath(path) {
    return "" + encode(path.path) + serializeParams(path.parameters);
}
/**
 * @param {?} params
 * @return {?}
 */
function serializeParams(params) {
    return Object.keys(params).map(function (key) { return ";" + encode(key) + "=" + encode(params[key]); }).join('');
}
/**
 * @param {?} params
 * @return {?}
 */
function serializeQueryParams(params) {
    var /** @type {?} */ strParams = Object.keys(params).map(function (name) {
        var /** @type {?} */ value = params[name];
        return Array.isArray(value) ? value.map(function (v) { return encode(name) + "=" + encode(v); }).join('&') :
            encode(name) + "=" + encode(value);
    });
    return strParams.length ? "?" + strParams.join("&") : '';
}
var SEGMENT_RE = /^[^\/()?;=&#]+/;
/**
 * @param {?} str
 * @return {?}
 */
function matchSegments(str) {
    var /** @type {?} */ match = str.match(SEGMENT_RE);
    return match ? match[0] : '';
}
var QUERY_PARAM_RE = /^[^=?&#]+/;
/**
 * @param {?} str
 * @return {?}
 */
function matchQueryParams(str) {
    var /** @type {?} */ match = str.match(QUERY_PARAM_RE);
    return match ? match[0] : '';
}
var QUERY_PARAM_VALUE_RE = /^[^?&#]+/;
/**
 * @param {?} str
 * @return {?}
 */
function matchUrlQueryParamValue(str) {
    var /** @type {?} */ match = str.match(QUERY_PARAM_VALUE_RE);
    return match ? match[0] : '';
}
var UrlParser = (function () {
    /**
     * @param {?} url
     */
    function UrlParser(url) {
        this.url = url;
        this.remaining = url;
    }
    /**
     * @return {?}
     */
    UrlParser.prototype.parseRootSegment = function () {
        this.consumeOptional('/');
        if (this.remaining === '' || this.peekStartsWith('?') || this.peekStartsWith('#')) {
            return new UrlSegmentGroup([], {});
        }
        // The root segment group never has segments
        return new UrlSegmentGroup([], this.parseChildren());
    };
    /**
     * @return {?}
     */
    UrlParser.prototype.parseQueryParams = function () {
        var /** @type {?} */ params = {};
        if (this.consumeOptional('?')) {
            do {
                this.parseQueryParam(params);
            } while (this.consumeOptional('&'));
        }
        return params;
    };
    /**
     * @return {?}
     */
    UrlParser.prototype.parseFragment = function () {
        return this.consumeOptional('#') ? decodeURI(this.remaining) : null;
    };
    /**
     * @return {?}
     */
    UrlParser.prototype.parseChildren = function () {
        if (this.remaining === '') {
            return {};
        }
        this.consumeOptional('/');
        var /** @type {?} */ segments = [];
        if (!this.peekStartsWith('(')) {
            segments.push(this.parseSegment());
        }
        while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {
            this.capture('/');
            segments.push(this.parseSegment());
        }
        var /** @type {?} */ children = {};
        if (this.peekStartsWith('/(')) {
            this.capture('/');
            children = this.parseParens(true);
        }
        var /** @type {?} */ res = {};
        if (this.peekStartsWith('(')) {
            res = this.parseParens(false);
        }
        if (segments.length > 0 || Object.keys(children).length > 0) {
            res[PRIMARY_OUTLET] = new UrlSegmentGroup(segments, children);
        }
        return res;
    };
    /**
     * @return {?}
     */
    UrlParser.prototype.parseSegment = function () {
        var /** @type {?} */ path = matchSegments(this.remaining);
        if (path === '' && this.peekStartsWith(';')) {
            throw new Error("Empty path url segment cannot have parameters: '" + this.remaining + "'.");
        }
        this.capture(path);
        return new UrlSegment(decode(path), this.parseMatrixParams());
    };
    /**
     * @return {?}
     */
    UrlParser.prototype.parseMatrixParams = function () {
        var /** @type {?} */ params = {};
        while (this.consumeOptional(';')) {
            this.parseParam(params);
        }
        return params;
    };
    /**
     * @param {?} params
     * @return {?}
     */
    UrlParser.prototype.parseParam = function (params) {
        var /** @type {?} */ key = matchSegments(this.remaining);
        if (!key) {
            return;
        }
        this.capture(key);
        var /** @type {?} */ value = '';
        if (this.consumeOptional('=')) {
            var /** @type {?} */ valueMatch = matchSegments(this.remaining);
            if (valueMatch) {
                value = valueMatch;
                this.capture(value);
            }
        }
        params[decode(key)] = decode(value);
    };
    /**
     * @param {?} params
     * @return {?}
     */
    UrlParser.prototype.parseQueryParam = function (params) {
        var /** @type {?} */ key = matchQueryParams(this.remaining);
        if (!key) {
            return;
        }
        this.capture(key);
        var /** @type {?} */ value = '';
        if (this.consumeOptional('=')) {
            var /** @type {?} */ valueMatch = matchUrlQueryParamValue(this.remaining);
            if (valueMatch) {
                value = valueMatch;
                this.capture(value);
            }
        }
        var /** @type {?} */ decodedKey = decode(key);
        var /** @type {?} */ decodedVal = decode(value);
        if (params.hasOwnProperty(decodedKey)) {
            // Append to existing values
            var /** @type {?} */ currentVal = params[decodedKey];
            if (!Array.isArray(currentVal)) {
                currentVal = [currentVal];
                params[decodedKey] = currentVal;
            }
            currentVal.push(decodedVal);
        }
        else {
            // Create a new value
            params[decodedKey] = decodedVal;
        }
    };
    /**
     * @param {?} allowPrimary
     * @return {?}
     */
    UrlParser.prototype.parseParens = function (allowPrimary) {
        var /** @type {?} */ segments = {};
        this.capture('(');
        while (!this.consumeOptional(')') && this.remaining.length > 0) {
            var /** @type {?} */ path = matchSegments(this.remaining);
            var /** @type {?} */ next = this.remaining[path.length];
            // if is is not one of these characters, then the segment was unescaped
            // or the group was not closed
            if (next !== '/' && next !== ')' && next !== ';') {
                throw new Error("Cannot parse url '" + this.url + "'");
            }
            var /** @type {?} */ outletName = ((undefined));
            if (path.indexOf(':') > -1) {
                outletName = path.substr(0, path.indexOf(':'));
                this.capture(outletName);
                this.capture(':');
            }
            else if (allowPrimary) {
                outletName = PRIMARY_OUTLET;
            }
            var /** @type {?} */ children = this.parseChildren();
            segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] :
                new UrlSegmentGroup([], children);
            this.consumeOptional('//');
        }
        return segments;
    };
    /**
     * @param {?} str
     * @return {?}
     */
    UrlParser.prototype.peekStartsWith = function (str) { return this.remaining.startsWith(str); };
    /**
     * @param {?} str
     * @return {?}
     */
    UrlParser.prototype.consumeOptional = function (str) {
        if (this.peekStartsWith(str)) {
            this.remaining = this.remaining.substring(str.length);
            return true;
        }
        return false;
    };
    /**
     * @param {?} str
     * @return {?}
     */
    UrlParser.prototype.capture = function (str) {
        if (!this.consumeOptional(str)) {
            throw new Error("Expected \"" + str + "\".");
        }
    };
    return UrlParser;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var NoMatch = (function () {
    /**
     * @param {?=} segmentGroup
     */
    function NoMatch(segmentGroup) {
        this.segmentGroup = segmentGroup || null;
    }
    return NoMatch;
}());
var AbsoluteRedirect = (function () {
    /**
     * @param {?} urlTree
     */
    function AbsoluteRedirect(urlTree) {
        this.urlTree = urlTree;
    }
    return AbsoluteRedirect;
}());
/**
 * @param {?} segmentGroup
 * @return {?}
 */
function noMatch(segmentGroup) {
    return new Observable_2(function (obs) { return obs.error(new NoMatch(segmentGroup)); });
}
/**
 * @param {?} newTree
 * @return {?}
 */
function absoluteRedirect(newTree) {
    return new Observable_2(function (obs) { return obs.error(new AbsoluteRedirect(newTree)); });
}
/**
 * @param {?} redirectTo
 * @return {?}
 */
function namedOutletsRedirect(redirectTo) {
    return new Observable_2(function (obs) { return obs.error(new Error("Only absolute redirects can have named outlets. redirectTo: '" + redirectTo + "'")); });
}
/**
 * @param {?} route
 * @return {?}
 */
function canLoadFails(route) {
    return new Observable_2(function (obs) { return obs.error(navigationCancelingError("Cannot load children because the guard of the route \"path: '" + route.path + "'\" returned false")); });
}
/**
 * Returns the `UrlTree` with the redirection applied.
 *
 * Lazy modules are loaded along the way.
 * @param {?} moduleInjector
 * @param {?} configLoader
 * @param {?} urlSerializer
 * @param {?} urlTree
 * @param {?} config
 * @return {?}
 */
function applyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config) {
    return new ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config).apply();
}
var ApplyRedirects = (function () {
    /**
     * @param {?} moduleInjector
     * @param {?} configLoader
     * @param {?} urlSerializer
     * @param {?} urlTree
     * @param {?} config
     */
    function ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config) {
        this.configLoader = configLoader;
        this.urlSerializer = urlSerializer;
        this.urlTree = urlTree;
        this.config = config;
        this.allowRedirects = true;
        this.ngModule = moduleInjector.get(NgModuleRef);
    }
    /**
     * @return {?}
     */
    ApplyRedirects.prototype.apply = function () {
        var _this = this;
        var /** @type {?} */ expanded$ = this.expandSegmentGroup(this.ngModule, this.config, this.urlTree.root, PRIMARY_OUTLET);
        var /** @type {?} */ urlTrees$ = map_2.call(expanded$, function (rootSegmentGroup) { return _this.createUrlTree(rootSegmentGroup, _this.urlTree.queryParams, /** @type {?} */ ((_this.urlTree.fragment))); });
        return _catch_2.call(urlTrees$, function (e) {
            if (e instanceof AbsoluteRedirect) {
                // after an absolute redirect we do not apply any more redirects!
                _this.allowRedirects = false;
                // we need to run matching, so we can fetch all lazy-loaded modules
                return _this.match(e.urlTree);
            }
            if (e instanceof NoMatch) {
                throw _this.noMatchError(e);
            }
            throw e;
        });
    };
    /**
     * @param {?} tree
     * @return {?}
     */
    ApplyRedirects.prototype.match = function (tree) {
        var _this = this;
        var /** @type {?} */ expanded$ = this.expandSegmentGroup(this.ngModule, this.config, tree.root, PRIMARY_OUTLET);
        var /** @type {?} */ mapped$ = map_2.call(expanded$, function (rootSegmentGroup) { return _this.createUrlTree(rootSegmentGroup, tree.queryParams, /** @type {?} */ ((tree.fragment))); });
        return _catch_2.call(mapped$, function (e) {
            if (e instanceof NoMatch) {
                throw _this.noMatchError(e);
            }
            throw e;
        });
    };
    /**
     * @param {?} e
     * @return {?}
     */
    ApplyRedirects.prototype.noMatchError = function (e) {
        return new Error("Cannot match any routes. URL Segment: '" + e.segmentGroup + "'");
    };
    /**
     * @param {?} rootCandidate
     * @param {?} queryParams
     * @param {?} fragment
     * @return {?}
     */
    ApplyRedirects.prototype.createUrlTree = function (rootCandidate, queryParams, fragment) {
        var /** @type {?} */ root = rootCandidate.segments.length > 0 ?
            new UrlSegmentGroup([], (_a = {}, _a[PRIMARY_OUTLET] = rootCandidate, _a)) :
            rootCandidate;
        return new UrlTree(root, queryParams, fragment);
        var _a;
    };
    /**
     * @param {?} ngModule
     * @param {?} routes
     * @param {?} segmentGroup
     * @param {?} outlet
     * @return {?}
     */
    ApplyRedirects.prototype.expandSegmentGroup = function (ngModule, routes, segmentGroup, outlet) {
        if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
            return map_2.call(this.expandChildren(ngModule, routes, segmentGroup), function (children) { return new UrlSegmentGroup([], children); });
        }
        return this.expandSegment(ngModule, segmentGroup, routes, segmentGroup.segments, outlet, true);
    };
    /**
     * @param {?} ngModule
     * @param {?} routes
     * @param {?} segmentGroup
     * @return {?}
     */
    ApplyRedirects.prototype.expandChildren = function (ngModule, routes, segmentGroup) {
        var _this = this;
        return waitForMap(segmentGroup.children, function (childOutlet, child) { return _this.expandSegmentGroup(ngModule, routes, child, childOutlet); });
    };
    /**
     * @param {?} ngModule
     * @param {?} segmentGroup
     * @param {?} routes
     * @param {?} segments
     * @param {?} outlet
     * @param {?} allowRedirects
     * @return {?}
     */
    ApplyRedirects.prototype.expandSegment = function (ngModule, segmentGroup, routes, segments, outlet, allowRedirects) {
        var _this = this;
        var /** @type {?} */ routes$ = of_1.apply(void 0, routes);
        var /** @type {?} */ processedRoutes$ = map_2.call(routes$, function (r) {
            var /** @type {?} */ expanded$ = _this.expandSegmentAgainstRoute(ngModule, segmentGroup, routes, r, segments, outlet, allowRedirects);
            return _catch_2.call(expanded$, function (e) {
                if (e instanceof NoMatch) {
                    return of_1(null);
                }
                throw e;
            });
        });
        var /** @type {?} */ concattedProcessedRoutes$ = concatAll_2.call(processedRoutes$);
        var /** @type {?} */ first$ = first_2.call(concattedProcessedRoutes$, function (s) { return !!s; });
        return _catch_2.call(first$, function (e, _) {
            if (e instanceof EmptyError_2) {
                if (_this.noLeftoversInUrl(segmentGroup, segments, outlet)) {
                    return of_1(new UrlSegmentGroup([], {}));
                }
                throw new NoMatch(segmentGroup);
            }
            throw e;
        });
    };
    /**
     * @param {?} segmentGroup
     * @param {?} segments
     * @param {?} outlet
     * @return {?}
     */
    ApplyRedirects.prototype.noLeftoversInUrl = function (segmentGroup, segments, outlet) {
        return segments.length === 0 && !segmentGroup.children[outlet];
    };
    /**
     * @param {?} ngModule
     * @param {?} segmentGroup
     * @param {?} routes
     * @param {?} route
     * @param {?} paths
     * @param {?} outlet
     * @param {?} allowRedirects
     * @return {?}
     */
    ApplyRedirects.prototype.expandSegmentAgainstRoute = function (ngModule, segmentGroup, routes, route, paths, outlet, allowRedirects) {
        if (getOutlet(route) !== outlet) {
            return noMatch(segmentGroup);
        }
        if (route.redirectTo === undefined) {
            return this.matchSegmentAgainstRoute(ngModule, segmentGroup, route, paths);
        }
        if (allowRedirects && this.allowRedirects) {
            return this.expandSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, paths, outlet);
        }
        return noMatch(segmentGroup);
    };
    /**
     * @param {?} ngModule
     * @param {?} segmentGroup
     * @param {?} routes
     * @param {?} route
     * @param {?} segments
     * @param {?} outlet
     * @return {?}
     */
    ApplyRedirects.prototype.expandSegmentAgainstRouteUsingRedirect = function (ngModule, segmentGroup, routes, route, segments, outlet) {
        if (route.path === '**') {
            return this.expandWildCardWithParamsAgainstRouteUsingRedirect(ngModule, routes, route, outlet);
        }
        return this.expandRegularSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet);
    };
    /**
     * @param {?} ngModule
     * @param {?} routes
     * @param {?} route
     * @param {?} outlet
     * @return {?}
     */
    ApplyRedirects.prototype.expandWildCardWithParamsAgainstRouteUsingRedirect = function (ngModule, routes, route, outlet) {
        var _this = this;
        var /** @type {?} */ newTree = this.applyRedirectCommands([], /** @type {?} */ ((route.redirectTo)), {});
        if (((route.redirectTo)).startsWith('/')) {
            return absoluteRedirect(newTree);
        }
        return mergeMap_2.call(this.lineralizeSegments(route, newTree), function (newSegments) {
            var /** @type {?} */ group = new UrlSegmentGroup(newSegments, {});
            return _this.expandSegment(ngModule, group, routes, newSegments, outlet, false);
        });
    };
    /**
     * @param {?} ngModule
     * @param {?} segmentGroup
     * @param {?} routes
     * @param {?} route
     * @param {?} segments
     * @param {?} outlet
     * @return {?}
     */
    ApplyRedirects.prototype.expandRegularSegmentAgainstRouteUsingRedirect = function (ngModule, segmentGroup, routes, route, segments, outlet) {
        var _this = this;
        var _a = match(segmentGroup, route, segments), matched = _a.matched, consumedSegments = _a.consumedSegments, lastChild = _a.lastChild, positionalParamSegments = _a.positionalParamSegments;
        if (!matched)
            return noMatch(segmentGroup);
        var /** @type {?} */ newTree = this.applyRedirectCommands(consumedSegments, /** @type {?} */ ((route.redirectTo)), /** @type {?} */ (positionalParamSegments));
        if (((route.redirectTo)).startsWith('/')) {
            return absoluteRedirect(newTree);
        }
        return mergeMap_2.call(this.lineralizeSegments(route, newTree), function (newSegments) {
            return _this.expandSegment(ngModule, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet, false);
        });
    };
    /**
     * @param {?} ngModule
     * @param {?} rawSegmentGroup
     * @param {?} route
     * @param {?} segments
     * @return {?}
     */
    ApplyRedirects.prototype.matchSegmentAgainstRoute = function (ngModule, rawSegmentGroup, route, segments) {
        var _this = this;
        if (route.path === '**') {
            if (route.loadChildren) {
                return map_2.call(this.configLoader.load(ngModule.injector, route), function (cfg) {
                    route._loadedConfig = cfg;
                    return new UrlSegmentGroup(segments, {});
                });
            }
            return of_1(new UrlSegmentGroup(segments, {}));
        }
        var _a = match(rawSegmentGroup, route, segments), matched = _a.matched, consumedSegments = _a.consumedSegments, lastChild = _a.lastChild;
        if (!matched)
            return noMatch(rawSegmentGroup);
        var /** @type {?} */ rawSlicedSegments = segments.slice(lastChild);
        var /** @type {?} */ childConfig$ = this.getChildConfig(ngModule, route);
        return mergeMap_2.call(childConfig$, function (routerConfig) {
            var /** @type {?} */ childModule = routerConfig.module;
            var /** @type {?} */ childConfig = routerConfig.routes;
            var _a = split(rawSegmentGroup, consumedSegments, rawSlicedSegments, childConfig), segmentGroup = _a.segmentGroup, slicedSegments = _a.slicedSegments;
            if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
                var /** @type {?} */ expanded$_1 = _this.expandChildren(childModule, childConfig, segmentGroup);
                return map_2.call(expanded$_1, function (children) { return new UrlSegmentGroup(consumedSegments, children); });
            }
            if (childConfig.length === 0 && slicedSegments.length === 0) {
                return of_1(new UrlSegmentGroup(consumedSegments, {}));
            }
            var /** @type {?} */ expanded$ = _this.expandSegment(childModule, segmentGroup, childConfig, slicedSegments, PRIMARY_OUTLET, true);
            return map_2.call(expanded$, function (cs) { return new UrlSegmentGroup(consumedSegments.concat(cs.segments), cs.children); });
        });
    };
    /**
     * @param {?} ngModule
     * @param {?} route
     * @return {?}
     */
    ApplyRedirects.prototype.getChildConfig = function (ngModule, route) {
        var _this = this;
        if (route.children) {
            // The children belong to the same module
            return of_1(new LoadedRouterConfig(route.children, ngModule));
        }
        if (route.loadChildren) {
            // lazy children belong to the loaded module
            if (route._loadedConfig !== undefined) {
                return of_1(route._loadedConfig);
            }
            return mergeMap_2.call(runCanLoadGuard(ngModule.injector, route), function (shouldLoad) {
                if (shouldLoad) {
                    return map_2.call(_this.configLoader.load(ngModule.injector, route), function (cfg) {
                        route._loadedConfig = cfg;
                        return cfg;
                    });
                }
                return canLoadFails(route);
            });
        }
        return of_1(new LoadedRouterConfig([], ngModule));
    };
    /**
     * @param {?} route
     * @param {?} urlTree
     * @return {?}
     */
    ApplyRedirects.prototype.lineralizeSegments = function (route, urlTree) {
        var /** @type {?} */ res = [];
        var /** @type {?} */ c = urlTree.root;
        while (true) {
            res = res.concat(c.segments);
            if (c.numberOfChildren === 0) {
                return of_1(res);
            }
            if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {
                return namedOutletsRedirect(/** @type {?} */ ((route.redirectTo)));
            }
            c = c.children[PRIMARY_OUTLET];
        }
    };
    /**
     * @param {?} segments
     * @param {?} redirectTo
     * @param {?} posParams
     * @return {?}
     */
    ApplyRedirects.prototype.applyRedirectCommands = function (segments, redirectTo, posParams) {
        return this.applyRedirectCreatreUrlTree(redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);
    };
    /**
     * @param {?} redirectTo
     * @param {?} urlTree
     * @param {?} segments
     * @param {?} posParams
     * @return {?}
     */
    ApplyRedirects.prototype.applyRedirectCreatreUrlTree = function (redirectTo, urlTree, segments, posParams) {
        var /** @type {?} */ newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);
        return new UrlTree(newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams), urlTree.fragment);
    };
    /**
     * @param {?} redirectToParams
     * @param {?} actualParams
     * @return {?}
     */
    ApplyRedirects.prototype.createQueryParams = function (redirectToParams, actualParams) {
        var /** @type {?} */ res = {};
        forEach(redirectToParams, function (v, k) {
            var /** @type {?} */ copySourceValue = typeof v === 'string' && v.startsWith(':');
            if (copySourceValue) {
                var /** @type {?} */ sourceName = v.substring(1);
                res[k] = actualParams[sourceName];
            }
            else {
                res[k] = v;
            }
        });
        return res;
    };
    /**
     * @param {?} redirectTo
     * @param {?} group
     * @param {?} segments
     * @param {?} posParams
     * @return {?}
     */
    ApplyRedirects.prototype.createSegmentGroup = function (redirectTo, group, segments, posParams) {
        var _this = this;
        var /** @type {?} */ updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);
        var /** @type {?} */ children = {};
        forEach(group.children, function (child, name) {
            children[name] = _this.createSegmentGroup(redirectTo, child, segments, posParams);
        });
        return new UrlSegmentGroup(updatedSegments, children);
    };
    /**
     * @param {?} redirectTo
     * @param {?} redirectToSegments
     * @param {?} actualSegments
     * @param {?} posParams
     * @return {?}
     */
    ApplyRedirects.prototype.createSegments = function (redirectTo, redirectToSegments, actualSegments, posParams) {
        var _this = this;
        return redirectToSegments.map(function (s) { return s.path.startsWith(':') ? _this.findPosParam(redirectTo, s, posParams) :
            _this.findOrReturn(s, actualSegments); });
    };
    /**
     * @param {?} redirectTo
     * @param {?} redirectToUrlSegment
     * @param {?} posParams
     * @return {?}
     */
    ApplyRedirects.prototype.findPosParam = function (redirectTo, redirectToUrlSegment, posParams) {
        var /** @type {?} */ pos = posParams[redirectToUrlSegment.path.substring(1)];
        if (!pos)
            throw new Error("Cannot redirect to '" + redirectTo + "'. Cannot find '" + redirectToUrlSegment.path + "'.");
        return pos;
    };
    /**
     * @param {?} redirectToUrlSegment
     * @param {?} actualSegments
     * @return {?}
     */
    ApplyRedirects.prototype.findOrReturn = function (redirectToUrlSegment, actualSegments) {
        var /** @type {?} */ idx = 0;
        for (var _i = 0, actualSegments_1 = actualSegments; _i < actualSegments_1.length; _i++) {
            var s = actualSegments_1[_i];
            if (s.path === redirectToUrlSegment.path) {
                actualSegments.splice(idx);
                return s;
            }
            idx++;
        }
        return redirectToUrlSegment;
    };
    return ApplyRedirects;
}());
/**
 * @param {?} moduleInjector
 * @param {?} route
 * @return {?}
 */
function runCanLoadGuard(moduleInjector, route) {
    var /** @type {?} */ canLoad = route.canLoad;
    if (!canLoad || canLoad.length === 0)
        return of_1(true);
    var /** @type {?} */ obs = map_2.call(from_1(canLoad), function (injectionToken) {
        var /** @type {?} */ guard = moduleInjector.get(injectionToken);
        return wrapIntoObservable(guard.canLoad ? guard.canLoad(route) : guard(route));
    });
    return andObservables(obs);
}
/**
 * @param {?} segmentGroup
 * @param {?} route
 * @param {?} segments
 * @return {?}
 */
function match(segmentGroup, route, segments) {
    if (route.path === '') {
        if ((route.pathMatch === 'full') && (segmentGroup.hasChildren() || segments.length > 0)) {
            return { matched: false, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };
        }
        return { matched: true, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };
    }
    var /** @type {?} */ matcher = route.matcher || defaultUrlMatcher;
    var /** @type {?} */ res = matcher(segments, segmentGroup, route);
    if (!res) {
        return {
            matched: false, consumedSegments: /** @type {?} */ ([]), lastChild: 0, positionalParamSegments: {},
        };
    }
    return {
        matched: true,
        consumedSegments: /** @type {?} */ ((res.consumed)),
        lastChild: /** @type {?} */ ((res.consumed.length)),
        positionalParamSegments: /** @type {?} */ ((res.posParams)),
    };
}
/**
 * @param {?} segmentGroup
 * @param {?} consumedSegments
 * @param {?} slicedSegments
 * @param {?} config
 * @return {?}
 */
function split(segmentGroup, consumedSegments, slicedSegments, config) {
    if (slicedSegments.length > 0 &&
        containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {
        var /** @type {?} */ s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptySegments(config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));
        return { segmentGroup: mergeTrivialChildren(s), slicedSegments: [] };
    }
    if (slicedSegments.length === 0 &&
        containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {
        var /** @type {?} */ s = new UrlSegmentGroup(segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));
        return { segmentGroup: mergeTrivialChildren(s), slicedSegments: slicedSegments };
    }
    return { segmentGroup: segmentGroup, slicedSegments: slicedSegments };
}
/**
 * @param {?} s
 * @return {?}
 */
function mergeTrivialChildren(s) {
    if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {
        var /** @type {?} */ c = s.children[PRIMARY_OUTLET];
        return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);
    }
    return s;
}
/**
 * @param {?} segmentGroup
 * @param {?} slicedSegments
 * @param {?} routes
 * @param {?} children
 * @return {?}
 */
function addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {
    var /** @type {?} */ res = {};
    for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {
        var r = routes_1[_i];
        if (isEmptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {
            res[getOutlet(r)] = new UrlSegmentGroup([], {});
        }
    }
    return Object.assign({}, children, res);
}
/**
 * @param {?} routes
 * @param {?} primarySegmentGroup
 * @return {?}
 */
function createChildrenForEmptySegments(routes, primarySegmentGroup) {
    var /** @type {?} */ res = {};
    res[PRIMARY_OUTLET] = primarySegmentGroup;
    for (var _i = 0, routes_2 = routes; _i < routes_2.length; _i++) {
        var r = routes_2[_i];
        if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {
            res[getOutlet(r)] = new UrlSegmentGroup([], {});
        }
    }
    return res;
}
/**
 * @param {?} segmentGroup
 * @param {?} segments
 * @param {?} routes
 * @return {?}
 */
function containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, segments, routes) {
    return routes.some(function (r) { return isEmptyPathRedirect(segmentGroup, segments, r) && getOutlet(r) !== PRIMARY_OUTLET; });
}
/**
 * @param {?} segmentGroup
 * @param {?} segments
 * @param {?} routes
 * @return {?}
 */
function containsEmptyPathRedirects(segmentGroup, segments, routes) {
    return routes.some(function (r) { return isEmptyPathRedirect(segmentGroup, segments, r); });
}
/**
 * @param {?} segmentGroup
 * @param {?} segments
 * @param {?} r
 * @return {?}
 */
function isEmptyPathRedirect(segmentGroup, segments, r) {
    if ((segmentGroup.hasChildren() || segments.length > 0) && r.pathMatch === 'full') {
        return false;
    }
    return r.path === '' && r.redirectTo !== undefined;
}
/**
 * @param {?} route
 * @return {?}
 */
function getOutlet(route) {
    return route.outlet || PRIMARY_OUTLET;
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var Tree = (function () {
    /**
     * @param {?} root
     */
    function Tree(root) {
        this._root = root;
    }
    Object.defineProperty(Tree.prototype, "root", {
        /**
         * @return {?}
         */
        get: function () { return this._root.value; },
        enumerable: true,
        configurable: true
    });
    /**
     * \@internal
     * @param {?} t
     * @return {?}
     */
    Tree.prototype.parent = function (t) {
        var /** @type {?} */ p = this.pathFromRoot(t);
        return p.length > 1 ? p[p.length - 2] : null;
    };
    /**
     * \@internal
     * @param {?} t
     * @return {?}
     */
    Tree.prototype.children = function (t) {
        var /** @type {?} */ n = findNode(t, this._root);
        return n ? n.children.map(function (t) { return t.value; }) : [];
    };
    /**
     * \@internal
     * @param {?} t
     * @return {?}
     */
    Tree.prototype.firstChild = function (t) {
        var /** @type {?} */ n = findNode(t, this._root);
        return n && n.children.length > 0 ? n.children[0].value : null;
    };
    /**
     * \@internal
     * @param {?} t
     * @return {?}
     */
    Tree.prototype.siblings = function (t) {
        var /** @type {?} */ p = findPath(t, this._root);
        if (p.length < 2)
            return [];
        var /** @type {?} */ c = p[p.length - 2].children.map(function (c) { return c.value; });
        return c.filter(function (cc) { return cc !== t; });
    };
    /**
     * \@internal
     * @param {?} t
     * @return {?}
     */
    Tree.prototype.pathFromRoot = function (t) { return findPath(t, this._root).map(function (s) { return s.value; }); };
    return Tree;
}());
/**
 * @template T
 * @param {?} value
 * @param {?} node
 * @return {?}
 */
function findNode(value, node) {
    if (value === node.value)
        return node;
    for (var _i = 0, _a = node.children; _i < _a.length; _i++) {
        var child = _a[_i];
        var /** @type {?} */ node_1 = findNode(value, child);
        if (node_1)
            return node_1;
    }
    return null;
}
/**
 * @template T
 * @param {?} value
 * @param {?} node
 * @return {?}
 */
function findPath(value, node) {
    if (value === node.value)
        return [node];
    for (var _i = 0, _a = node.children; _i < _a.length; _i++) {
        var child = _a[_i];
        var /** @type {?} */ path = findPath(value, child);
        if (path.length) {
            path.unshift(node);
            return path;
        }
    }
    return [];
}
var TreeNode = (function () {
    /**
     * @param {?} value
     * @param {?} children
     */
    function TreeNode(value, children) {
        this.value = value;
        this.children = children;
    }
    /**
     * @return {?}
     */
    TreeNode.prototype.toString = function () { return "TreeNode(" + this.value + ")"; };
    return TreeNode;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@whatItDoes Represents the state of the router.
 *
 * \@howToUse
 *
 * ```
 * \@Component({templateUrl:'template.html'})
 * class MyComponent {
 *   constructor(router: Router) {
 *     const state: RouterState = router.routerState;
 *     const root: ActivatedRoute = state.root;
 *     const child = root.firstChild;
 *     const id: Observable<string> = child.params.map(p => p.id);
 *     //...
 *   }
 * }
 * ```
 *
 * \@description
 * RouterState is a tree of activated routes. Every node in this tree knows about the "consumed" URL
 * segments, the extracted parameters, and the resolved data.
 *
 * See {\@link ActivatedRoute} for more information.
 *
 * \@stable
 */
var RouterState = (function (_super) {
    __extends(RouterState, _super);
    /**
     * \@internal
     * @param {?} root
     * @param {?} snapshot
     */
    function RouterState(root, snapshot) {
        var _this = _super.call(this, root) || this;
        _this.snapshot = snapshot;
        setRouterState(_this, root);
        return _this;
    }
    /**
     * @return {?}
     */
    RouterState.prototype.toString = function () { return this.snapshot.toString(); };
    return RouterState;
}(Tree));
/**
 * @param {?} urlTree
 * @param {?} rootComponent
 * @return {?}
 */
function createEmptyState(urlTree, rootComponent) {
    var /** @type {?} */ snapshot = createEmptyStateSnapshot(urlTree, rootComponent);
    var /** @type {?} */ emptyUrl = new BehaviorSubject_2([new UrlSegment('', {})]);
    var /** @type {?} */ emptyParams = new BehaviorSubject_2({});
    var /** @type {?} */ emptyData = new BehaviorSubject_2({});
    var /** @type {?} */ emptyQueryParams = new BehaviorSubject_2({});
    var /** @type {?} */ fragment = new BehaviorSubject_2('');
    var /** @type {?} */ activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);
    activated.snapshot = snapshot.root;
    return new RouterState(new TreeNode(activated, []), snapshot);
}
/**
 * @param {?} urlTree
 * @param {?} rootComponent
 * @return {?}
 */
function createEmptyStateSnapshot(urlTree, rootComponent) {
    var /** @type {?} */ emptyParams = {};
    var /** @type {?} */ emptyData = {};
    var /** @type {?} */ emptyQueryParams = {};
    var /** @type {?} */ fragment = '';
    var /** @type {?} */ activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, urlTree.root, -1, {});
    return new RouterStateSnapshot('', new TreeNode(activated, []));
}
/**
 * \@whatItDoes Contains the information about a route associated with a component loaded in an
 * outlet.
 * An `ActivatedRoute` can also be used to traverse the router state tree.
 *
 * \@howToUse
 *
 * ```
 * \@Component({...})
 * class MyComponent {
 *   constructor(route: ActivatedRoute) {
 *     const id: Observable<string> = route.params.map(p => p.id);
 *     const url: Observable<string> = route.url.map(segments => segments.join(''));
 *     // route.data includes both `data` and `resolve`
 *     const user = route.data.map(d => d.user);
 *   }
 * }
 * ```
 *
 * \@stable
 */
var ActivatedRoute = (function () {
    /**
     * \@internal
     * @param {?} url
     * @param {?} params
     * @param {?} queryParams
     * @param {?} fragment
     * @param {?} data
     * @param {?} outlet
     * @param {?} component
     * @param {?} futureSnapshot
     */
    function ActivatedRoute(url, params, queryParams, fragment, data, outlet, component, futureSnapshot) {
        this.url = url;
        this.params = params;
        this.queryParams = queryParams;
        this.fragment = fragment;
        this.data = data;
        this.outlet = outlet;
        this.component = component;
        this._futureSnapshot = futureSnapshot;
    }
    Object.defineProperty(ActivatedRoute.prototype, "routeConfig", {
        /**
         * The configuration used to match this route
         * @return {?}
         */
        get: function () { return this._futureSnapshot.routeConfig; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivatedRoute.prototype, "root", {
        /**
         * The root of the router state
         * @return {?}
         */
        get: function () { return this._routerState.root; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivatedRoute.prototype, "parent", {
        /**
         * The parent of this route in the router state tree
         * @return {?}
         */
        get: function () { return this._routerState.parent(this); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivatedRoute.prototype, "firstChild", {
        /**
         * The first child of this route in the router state tree
         * @return {?}
         */
        get: function () { return this._routerState.firstChild(this); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivatedRoute.prototype, "children", {
        /**
         * The children of this route in the router state tree
         * @return {?}
         */
        get: function () { return this._routerState.children(this); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivatedRoute.prototype, "pathFromRoot", {
        /**
         * The path from the root of the router state tree to this route
         * @return {?}
         */
        get: function () { return this._routerState.pathFromRoot(this); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivatedRoute.prototype, "paramMap", {
        /**
         * @return {?}
         */
        get: function () {
            if (!this._paramMap) {
                this._paramMap = map_2.call(this.params, function (p) { return convertToParamMap(p); });
            }
            return this._paramMap;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivatedRoute.prototype, "queryParamMap", {
        /**
         * @return {?}
         */
        get: function () {
            if (!this._queryParamMap) {
                this._queryParamMap =
                    map_2.call(this.queryParams, function (p) { return convertToParamMap(p); });
            }
            return this._queryParamMap;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ActivatedRoute.prototype.toString = function () {
        return this.snapshot ? this.snapshot.toString() : "Future(" + this._futureSnapshot + ")";
    };
    return ActivatedRoute;
}());
/**
 * \@internal
 * @param {?} route
 * @return {?}
 */
function inheritedParamsDataResolve(route) {
    var /** @type {?} */ pathToRoot = route.pathFromRoot;
    var /** @type {?} */ inhertingStartingFrom = pathToRoot.length - 1;
    while (inhertingStartingFrom >= 1) {
        var /** @type {?} */ current = pathToRoot[inhertingStartingFrom];
        var /** @type {?} */ parent = pathToRoot[inhertingStartingFrom - 1];
        // current route is an empty path => inherits its parent's params and data
        if (current.routeConfig && current.routeConfig.path === '') {
            inhertingStartingFrom--;
            // parent is componentless => current route should inherit its params and data
        }
        else if (!parent.component) {
            inhertingStartingFrom--;
        }
        else {
            break;
        }
    }
    return pathToRoot.slice(inhertingStartingFrom).reduce(function (res, curr) {
        var /** @type {?} */ params = Object.assign({}, res.params, curr.params);
        var /** @type {?} */ data = Object.assign({}, res.data, curr.data);
        var /** @type {?} */ resolve = Object.assign({}, res.resolve, curr._resolvedData);
        return { params: params, data: data, resolve: resolve };
    }, /** @type {?} */ ({ params: {}, data: {}, resolve: {} }));
}
/**
 * \@whatItDoes Contains the information about a route associated with a component loaded in an
 * outlet
 * at a particular moment in time. ActivatedRouteSnapshot can also be used to traverse the router
 * state tree.
 *
 * \@howToUse
 *
 * ```
 * \@Component({templateUrl:'./my-component.html'})
 * class MyComponent {
 *   constructor(route: ActivatedRoute) {
 *     const id: string = route.snapshot.params.id;
 *     const url: string = route.snapshot.url.join('');
 *     const user = route.snapshot.data.user;
 *   }
 * }
 * ```
 *
 * \@stable
 */
var ActivatedRouteSnapshot = (function () {
    /**
     * \@internal
     * @param {?} url
     * @param {?} params
     * @param {?} queryParams
     * @param {?} fragment
     * @param {?} data
     * @param {?} outlet
     * @param {?} component
     * @param {?} routeConfig
     * @param {?} urlSegment
     * @param {?} lastPathIndex
     * @param {?} resolve
     */
    function ActivatedRouteSnapshot(url, params, queryParams, fragment, data, outlet, component, routeConfig, urlSegment, lastPathIndex, resolve) {
        this.url = url;
        this.params = params;
        this.queryParams = queryParams;
        this.fragment = fragment;
        this.data = data;
        this.outlet = outlet;
        this.component = component;
        this._routeConfig = routeConfig;
        this._urlSegment = urlSegment;
        this._lastPathIndex = lastPathIndex;
        this._resolve = resolve;
    }
    Object.defineProperty(ActivatedRouteSnapshot.prototype, "routeConfig", {
        /**
         * The configuration used to match this route
         * @return {?}
         */
        get: function () { return this._routeConfig; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivatedRouteSnapshot.prototype, "root", {
        /**
         * The root of the router state
         * @return {?}
         */
        get: function () { return this._routerState.root; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivatedRouteSnapshot.prototype, "parent", {
        /**
         * The parent of this route in the router state tree
         * @return {?}
         */
        get: function () { return this._routerState.parent(this); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivatedRouteSnapshot.prototype, "firstChild", {
        /**
         * The first child of this route in the router state tree
         * @return {?}
         */
        get: function () { return this._routerState.firstChild(this); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivatedRouteSnapshot.prototype, "children", {
        /**
         * The children of this route in the router state tree
         * @return {?}
         */
        get: function () { return this._routerState.children(this); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivatedRouteSnapshot.prototype, "pathFromRoot", {
        /**
         * The path from the root of the router state tree to this route
         * @return {?}
         */
        get: function () { return this._routerState.pathFromRoot(this); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivatedRouteSnapshot.prototype, "paramMap", {
        /**
         * @return {?}
         */
        get: function () {
            if (!this._paramMap) {
                this._paramMap = convertToParamMap(this.params);
            }
            return this._paramMap;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivatedRouteSnapshot.prototype, "queryParamMap", {
        /**
         * @return {?}
         */
        get: function () {
            if (!this._queryParamMap) {
                this._queryParamMap = convertToParamMap(this.queryParams);
            }
            return this._queryParamMap;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ActivatedRouteSnapshot.prototype.toString = function () {
        var /** @type {?} */ url = this.url.map(function (segment) { return segment.toString(); }).join('/');
        var /** @type {?} */ matched = this._routeConfig ? this._routeConfig.path : '';
        return "Route(url:'" + url + "', path:'" + matched + "')";
    };
    return ActivatedRouteSnapshot;
}());
/**
 * \@whatItDoes Represents the state of the router at a moment in time.
 *
 * \@howToUse
 *
 * ```
 * \@Component({templateUrl:'template.html'})
 * class MyComponent {
 *   constructor(router: Router) {
 *     const state: RouterState = router.routerState;
 *     const snapshot: RouterStateSnapshot = state.snapshot;
 *     const root: ActivatedRouteSnapshot = snapshot.root;
 *     const child = root.firstChild;
 *     const id: Observable<string> = child.params.map(p => p.id);
 *     //...
 *   }
 * }
 * ```
 *
 * \@description
 * RouterStateSnapshot is a tree of activated route snapshots. Every node in this tree knows about
 * the "consumed" URL segments, the extracted parameters, and the resolved data.
 *
 * \@stable
 */
var RouterStateSnapshot = (function (_super) {
    __extends(RouterStateSnapshot, _super);
    /**
     * \@internal
     * @param {?} url
     * @param {?} root
     */
    function RouterStateSnapshot(url, root) {
        var _this = _super.call(this, root) || this;
        _this.url = url;
        setRouterState(_this, root);
        return _this;
    }
    /**
     * @return {?}
     */
    RouterStateSnapshot.prototype.toString = function () { return serializeNode(this._root); };
    return RouterStateSnapshot;
}(Tree));
/**
 * @template U, T
 * @param {?} state
 * @param {?} node
 * @return {?}
 */
function setRouterState(state, node) {
    node.value._routerState = state;
    node.children.forEach(function (c) { return setRouterState(state, c); });
}
/**
 * @param {?} node
 * @return {?}
 */
function serializeNode(node) {
    var /** @type {?} */ c = node.children.length > 0 ? " { " + node.children.map(serializeNode).join(", ") + " } " : '';
    return "" + node.value + c;
}
/**
 * The expectation is that the activate route is created with the right set of parameters.
 * So we push new values into the observables only when they are not the initial values.
 * And we detect that by checking if the snapshot field is set.
 * @param {?} route
 * @return {?}
 */
function advanceActivatedRoute(route) {
    if (route.snapshot) {
        var /** @type {?} */ currentSnapshot = route.snapshot;
        var /** @type {?} */ nextSnapshot = route._futureSnapshot;
        route.snapshot = nextSnapshot;
        if (!shallowEqual(currentSnapshot.queryParams, nextSnapshot.queryParams)) {
            ((route.queryParams)).next(nextSnapshot.queryParams);
        }
        if (currentSnapshot.fragment !== nextSnapshot.fragment) {
            ((route.fragment)).next(nextSnapshot.fragment);
        }
        if (!shallowEqual(currentSnapshot.params, nextSnapshot.params)) {
            ((route.params)).next(nextSnapshot.params);
        }
        if (!shallowEqualArrays(currentSnapshot.url, nextSnapshot.url)) {
            ((route.url)).next(nextSnapshot.url);
        }
        if (!shallowEqual(currentSnapshot.data, nextSnapshot.data)) {
            ((route.data)).next(nextSnapshot.data);
        }
    }
    else {
        route.snapshot = route._futureSnapshot;
        // this is for resolved data
        ((route.data)).next(route._futureSnapshot.data);
    }
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function equalParamsAndUrlSegments(a, b) {
    var /** @type {?} */ equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);
    var /** @type {?} */ parentsMismatch = !a.parent !== !b.parent;
    return equalUrlParams && !parentsMismatch &&
        (!a.parent || equalParamsAndUrlSegments(a.parent, /** @type {?} */ ((b.parent))));
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} routeReuseStrategy
 * @param {?} curr
 * @param {?} prevState
 * @return {?}
 */
function createRouterState(routeReuseStrategy, curr, prevState) {
    var /** @type {?} */ root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);
    return new RouterState(root, curr);
}
/**
 * @param {?} routeReuseStrategy
 * @param {?} curr
 * @param {?=} prevState
 * @return {?}
 */
function createNode(routeReuseStrategy, curr, prevState) {
    // reuse an activated route that is currently displayed on the screen
    if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {
        var /** @type {?} */ value = prevState.value;
        value._futureSnapshot = curr.value;
        var /** @type {?} */ children = createOrReuseChildren(routeReuseStrategy, curr, prevState);
        return new TreeNode(value, children);
        // retrieve an activated route that is used to be displayed, but is not currently displayed
    }
    else if (routeReuseStrategy.retrieve(curr.value)) {
        var /** @type {?} */ tree_1 = ((routeReuseStrategy.retrieve(curr.value))).route;
        setFutureSnapshotsOfActivatedRoutes(curr, tree_1);
        return tree_1;
    }
    else {
        var /** @type {?} */ value = createActivatedRoute(curr.value);
        var /** @type {?} */ children = curr.children.map(function (c) { return createNode(routeReuseStrategy, c); });
        return new TreeNode(value, children);
    }
}
/**
 * @param {?} curr
 * @param {?} result
 * @return {?}
 */
function setFutureSnapshotsOfActivatedRoutes(curr, result) {
    if (curr.value.routeConfig !== result.value.routeConfig) {
        throw new Error('Cannot reattach ActivatedRouteSnapshot created from a different route');
    }
    if (curr.children.length !== result.children.length) {
        throw new Error('Cannot reattach ActivatedRouteSnapshot with a different number of children');
    }
    result.value._futureSnapshot = curr.value;
    for (var /** @type {?} */ i = 0; i < curr.children.length; ++i) {
        setFutureSnapshotsOfActivatedRoutes(curr.children[i], result.children[i]);
    }
}
/**
 * @param {?} routeReuseStrategy
 * @param {?} curr
 * @param {?} prevState
 * @return {?}
 */
function createOrReuseChildren(routeReuseStrategy, curr, prevState) {
    return curr.children.map(function (child) {
        for (var _i = 0, _a = prevState.children; _i < _a.length; _i++) {
            var p = _a[_i];
            if (routeReuseStrategy.shouldReuseRoute(p.value.snapshot, child.value)) {
                return createNode(routeReuseStrategy, child, p);
            }
        }
        return createNode(routeReuseStrategy, child);
    });
}
/**
 * @param {?} c
 * @return {?}
 */
function createActivatedRoute(c) {
    return new ActivatedRoute(new BehaviorSubject_2(c.url), new BehaviorSubject_2(c.params), new BehaviorSubject_2(c.queryParams), new BehaviorSubject_2(c.fragment), new BehaviorSubject_2(c.data), c.outlet, c.component, c);
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} route
 * @param {?} urlTree
 * @param {?} commands
 * @param {?} queryParams
 * @param {?} fragment
 * @return {?}
 */
function createUrlTree(route, urlTree, commands, queryParams, fragment) {
    if (commands.length === 0) {
        return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);
    }
    var /** @type {?} */ nav = computeNavigation(commands);
    if (nav.toRoot()) {
        return tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);
    }
    var /** @type {?} */ startingPosition = findStartingPosition(nav, urlTree, route);
    var /** @type {?} */ segmentGroup = startingPosition.processChildren ?
        updateSegmentGroupChildren(startingPosition.segmentGroup, startingPosition.index, nav.commands) :
        updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, nav.commands);
    return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);
}
/**
 * @param {?} command
 * @return {?}
 */
function isMatrixParams(command) {
    return typeof command === 'object' && command != null && !command.outlets && !command.segmentPath;
}
/**
 * @param {?} oldSegmentGroup
 * @param {?} newSegmentGroup
 * @param {?} urlTree
 * @param {?} queryParams
 * @param {?} fragment
 * @return {?}
 */
function tree(oldSegmentGroup, newSegmentGroup, urlTree, queryParams, fragment) {
    var /** @type {?} */ qp = {};
    if (queryParams) {
        forEach(queryParams, function (value, name) {
            qp[name] = Array.isArray(value) ? value.map(function (v) { return "" + v; }) : "" + value;
        });
    }
    if (urlTree.root === oldSegmentGroup) {
        return new UrlTree(newSegmentGroup, qp, fragment);
    }
    return new UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), qp, fragment);
}
/**
 * @param {?} current
 * @param {?} oldSegment
 * @param {?} newSegment
 * @return {?}
 */
function replaceSegment(current, oldSegment, newSegment) {
    var /** @type {?} */ children = {};
    forEach(current.children, function (c, outletName) {
        if (c === oldSegment) {
            children[outletName] = newSegment;
        }
        else {
            children[outletName] = replaceSegment(c, oldSegment, newSegment);
        }
    });
    return new UrlSegmentGroup(current.segments, children);
}
var Navigation = (function () {
    /**
     * @param {?} isAbsolute
     * @param {?} numberOfDoubleDots
     * @param {?} commands
     */
    function Navigation(isAbsolute, numberOfDoubleDots, commands) {
        this.isAbsolute = isAbsolute;
        this.numberOfDoubleDots = numberOfDoubleDots;
        this.commands = commands;
        if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {
            throw new Error('Root segment cannot have matrix parameters');
        }
        var cmdWithOutlet = commands.find(function (c) { return typeof c === 'object' && c != null && c.outlets; });
        if (cmdWithOutlet && cmdWithOutlet !== last$1(commands)) {
            throw new Error('{outlets:{}} has to be the last command');
        }
    }
    /**
     * @return {?}
     */
    Navigation.prototype.toRoot = function () {
        return this.isAbsolute && this.commands.length === 1 && this.commands[0] == '/';
    };
    return Navigation;
}());
/**
 * Transforms commands to a normalized `Navigation`
 * @param {?} commands
 * @return {?}
 */
function computeNavigation(commands) {
    if ((typeof commands[0] === 'string') && commands.length === 1 && commands[0] === '/') {
        return new Navigation(true, 0, commands);
    }
    var /** @type {?} */ numberOfDoubleDots = 0;
    var /** @type {?} */ isAbsolute = false;
    var /** @type {?} */ res = commands.reduce(function (res, cmd, cmdIdx) {
        if (typeof cmd === 'object' && cmd != null) {
            if (cmd.outlets) {
                var /** @type {?} */ outlets_1 = {};
                forEach(cmd.outlets, function (commands, name) {
                    outlets_1[name] = typeof commands === 'string' ? commands.split('/') : commands;
                });
                return res.concat([{ outlets: outlets_1 }]);
            }
            if (cmd.segmentPath) {
                return res.concat([cmd.segmentPath]);
            }
        }
        if (!(typeof cmd === 'string')) {
            return res.concat([cmd]);
        }
        if (cmdIdx === 0) {
            cmd.split('/').forEach(function (urlPart, partIndex) {
                if (partIndex == 0 && urlPart === '.') {
                    // skip './a'
                }
                else if (partIndex == 0 && urlPart === '') {
                    isAbsolute = true;
                }
                else if (urlPart === '..') {
                    numberOfDoubleDots++;
                }
                else if (urlPart != '') {
                    res.push(urlPart);
                }
            });
            return res;
        }
        return res.concat([cmd]);
    }, []);
    return new Navigation(isAbsolute, numberOfDoubleDots, res);
}
var Position = (function () {
    /**
     * @param {?} segmentGroup
     * @param {?} processChildren
     * @param {?} index
     */
    function Position(segmentGroup, processChildren, index) {
        this.segmentGroup = segmentGroup;
        this.processChildren = processChildren;
        this.index = index;
    }
    return Position;
}());
/**
 * @param {?} nav
 * @param {?} tree
 * @param {?} route
 * @return {?}
 */
function findStartingPosition(nav, tree, route) {
    if (nav.isAbsolute) {
        return new Position(tree.root, true, 0);
    }
    if (route.snapshot._lastPathIndex === -1) {
        return new Position(route.snapshot._urlSegment, true, 0);
    }
    var /** @type {?} */ modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;
    var /** @type {?} */ index = route.snapshot._lastPathIndex + modifier;
    return createPositionApplyingDoubleDots(route.snapshot._urlSegment, index, nav.numberOfDoubleDots);
}
/**
 * @param {?} group
 * @param {?} index
 * @param {?} numberOfDoubleDots
 * @return {?}
 */
function createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {
    var /** @type {?} */ g = group;
    var /** @type {?} */ ci = index;
    var /** @type {?} */ dd = numberOfDoubleDots;
    while (dd > ci) {
        dd -= ci;
        g = ((g.parent));
        if (!g) {
            throw new Error('Invalid number of \'../\'');
        }
        ci = g.segments.length;
    }
    return new Position(g, false, ci - dd);
}
/**
 * @param {?} command
 * @return {?}
 */
function getPath(command) {
    if (typeof command === 'object' && command != null && command.outlets) {
        return command.outlets[PRIMARY_OUTLET];
    }
    return "" + command;
}
/**
 * @param {?} commands
 * @return {?}
 */
function getOutlets(commands) {
    if (!(typeof commands[0] === 'object'))
        return _a = {}, _a[PRIMARY_OUTLET] = commands, _a;
    if (commands[0].outlets === undefined)
        return _b = {}, _b[PRIMARY_OUTLET] = commands, _b;
    return commands[0].outlets;
    var _a, _b;
}
/**
 * @param {?} segmentGroup
 * @param {?} startIndex
 * @param {?} commands
 * @return {?}
 */
function updateSegmentGroup(segmentGroup, startIndex, commands) {
    if (!segmentGroup) {
        segmentGroup = new UrlSegmentGroup([], {});
    }
    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
        return updateSegmentGroupChildren(segmentGroup, startIndex, commands);
    }
    var /** @type {?} */ m = prefixedWith(segmentGroup, startIndex, commands);
    var /** @type {?} */ slicedCommands = commands.slice(m.commandIndex);
    if (m.match && m.pathIndex < segmentGroup.segments.length) {
        var /** @type {?} */ g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});
        g.children[PRIMARY_OUTLET] =
            new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);
        return updateSegmentGroupChildren(g, 0, slicedCommands);
    }
    else if (m.match && slicedCommands.length === 0) {
        return new UrlSegmentGroup(segmentGroup.segments, {});
    }
    else if (m.match && !segmentGroup.hasChildren()) {
        return createNewSegmentGroup(segmentGroup, startIndex, commands);
    }
    else if (m.match) {
        return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);
    }
    else {
        return createNewSegmentGroup(segmentGroup, startIndex, commands);
    }
}
/**
 * @param {?} segmentGroup
 * @param {?} startIndex
 * @param {?} commands
 * @return {?}
 */
function updateSegmentGroupChildren(segmentGroup, startIndex, commands) {
    if (commands.length === 0) {
        return new UrlSegmentGroup(segmentGroup.segments, {});
    }
    else {
        var /** @type {?} */ outlets_2 = getOutlets(commands);
        var /** @type {?} */ children_2 = {};
        forEach(outlets_2, function (commands, outlet) {
            if (commands !== null) {
                children_2[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);
            }
        });
        forEach(segmentGroup.children, function (child, childOutlet) {
            if (outlets_2[childOutlet] === undefined) {
                children_2[childOutlet] = child;
            }
        });
        return new UrlSegmentGroup(segmentGroup.segments, children_2);
    }
}
/**
 * @param {?} segmentGroup
 * @param {?} startIndex
 * @param {?} commands
 * @return {?}
 */
function prefixedWith(segmentGroup, startIndex, commands) {
    var /** @type {?} */ currentCommandIndex = 0;
    var /** @type {?} */ currentPathIndex = startIndex;
    var /** @type {?} */ noMatch = { match: false, pathIndex: 0, commandIndex: 0 };
    while (currentPathIndex < segmentGroup.segments.length) {
        if (currentCommandIndex >= commands.length)
            return noMatch;
        var /** @type {?} */ path = segmentGroup.segments[currentPathIndex];
        var /** @type {?} */ curr = getPath(commands[currentCommandIndex]);
        var /** @type {?} */ next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;
        if (currentPathIndex > 0 && curr === undefined)
            break;
        if (curr && next && (typeof next === 'object') && next.outlets === undefined) {
            if (!compare(curr, next, path))
                return noMatch;
            currentCommandIndex += 2;
        }
        else {
            if (!compare(curr, {}, path))
                return noMatch;
            currentCommandIndex++;
        }
        currentPathIndex++;
    }
    return { match: true, pathIndex: currentPathIndex, commandIndex: currentCommandIndex };
}
/**
 * @param {?} segmentGroup
 * @param {?} startIndex
 * @param {?} commands
 * @return {?}
 */
function createNewSegmentGroup(segmentGroup, startIndex, commands) {
    var /** @type {?} */ paths = segmentGroup.segments.slice(0, startIndex);
    var /** @type {?} */ i = 0;
    while (i < commands.length) {
        if (typeof commands[i] === 'object' && commands[i].outlets !== undefined) {
            var /** @type {?} */ children = createNewSegmentChildren(commands[i].outlets);
            return new UrlSegmentGroup(paths, children);
        }
        // if we start with an object literal, we need to reuse the path part from the segment
        if (i === 0 && isMatrixParams(commands[0])) {
            var /** @type {?} */ p = segmentGroup.segments[startIndex];
            paths.push(new UrlSegment(p.path, commands[0]));
            i++;
            continue;
        }
        var /** @type {?} */ curr = getPath(commands[i]);
        var /** @type {?} */ next = (i < commands.length - 1) ? commands[i + 1] : null;
        if (curr && next && isMatrixParams(next)) {
            paths.push(new UrlSegment(curr, stringify$1(next)));
            i += 2;
        }
        else {
            paths.push(new UrlSegment(curr, {}));
            i++;
        }
    }
    return new UrlSegmentGroup(paths, {});
}
/**
 * @param {?} outlets
 * @return {?}
 */
function createNewSegmentChildren(outlets) {
    var /** @type {?} */ children = {};
    forEach(outlets, function (commands, outlet) {
        if (commands !== null) {
            children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);
        }
    });
    return children;
}
/**
 * @param {?} params
 * @return {?}
 */
function stringify$1(params) {
    var /** @type {?} */ res = {};
    forEach(params, function (v, k) { return res[k] = "" + v; });
    return res;
}
/**
 * @param {?} path
 * @param {?} params
 * @param {?} segment
 * @return {?}
 */
function compare(path, params, segment) {
    return path == segment.path && shallowEqual(params, segment.parameters);
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var NoMatch$1 = (function () {
    function NoMatch$1() {
    }
    return NoMatch$1;
}());
/**
 * @param {?} rootComponentType
 * @param {?} config
 * @param {?} urlTree
 * @param {?} url
 * @return {?}
 */
function recognize(rootComponentType, config, urlTree, url) {
    return new Recognizer(rootComponentType, config, urlTree, url).recognize();
}
var Recognizer = (function () {
    /**
     * @param {?} rootComponentType
     * @param {?} config
     * @param {?} urlTree
     * @param {?} url
     */
    function Recognizer(rootComponentType, config, urlTree, url) {
        this.rootComponentType = rootComponentType;
        this.config = config;
        this.urlTree = urlTree;
        this.url = url;
    }
    /**
     * @return {?}
     */
    Recognizer.prototype.recognize = function () {
        try {
            var /** @type {?} */ rootSegmentGroup = split$1(this.urlTree.root, [], [], this.config).segmentGroup;
            var /** @type {?} */ children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET);
            var /** @type {?} */ root = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze(this.urlTree.queryParams), /** @type {?} */ ((this.urlTree.fragment)), {}, PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, {});
            var /** @type {?} */ rootNode = new TreeNode(root, children);
            var /** @type {?} */ routeState = new RouterStateSnapshot(this.url, rootNode);
            this.inheritParamsAndData(routeState._root);
            return of_1(routeState);
        }
        catch (e) {
            return new Observable_2(function (obs) { return obs.error(e); });
        }
    };
    /**
     * @param {?} routeNode
     * @return {?}
     */
    Recognizer.prototype.inheritParamsAndData = function (routeNode) {
        var _this = this;
        var /** @type {?} */ route = routeNode.value;
        var /** @type {?} */ i = inheritedParamsDataResolve(route);
        route.params = Object.freeze(i.params);
        route.data = Object.freeze(i.data);
        routeNode.children.forEach(function (n) { return _this.inheritParamsAndData(n); });
    };
    /**
     * @param {?} config
     * @param {?} segmentGroup
     * @param {?} outlet
     * @return {?}
     */
    Recognizer.prototype.processSegmentGroup = function (config, segmentGroup, outlet) {
        if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
            return this.processChildren(config, segmentGroup);
        }
        return this.processSegment(config, segmentGroup, segmentGroup.segments, outlet);
    };
    /**
     * @param {?} config
     * @param {?} segmentGroup
     * @return {?}
     */
    Recognizer.prototype.processChildren = function (config, segmentGroup) {
        var _this = this;
        var /** @type {?} */ children = mapChildrenIntoArray(segmentGroup, function (child, childOutlet) { return _this.processSegmentGroup(config, child, childOutlet); });
        checkOutletNameUniqueness(children);
        sortActivatedRouteSnapshots(children);
        return children;
    };
    /**
     * @param {?} config
     * @param {?} segmentGroup
     * @param {?} segments
     * @param {?} outlet
     * @return {?}
     */
    Recognizer.prototype.processSegment = function (config, segmentGroup, segments, outlet) {
        for (var _i = 0, config_1 = config; _i < config_1.length; _i++) {
            var r = config_1[_i];
            try {
                return this.processSegmentAgainstRoute(r, segmentGroup, segments, outlet);
            }
            catch (e) {
                if (!(e instanceof NoMatch$1))
                    throw e;
            }
        }
        if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {
            return [];
        }
        throw new NoMatch$1();
    };
    /**
     * @param {?} segmentGroup
     * @param {?} segments
     * @param {?} outlet
     * @return {?}
     */
    Recognizer.prototype.noLeftoversInUrl = function (segmentGroup, segments, outlet) {
        return segments.length === 0 && !segmentGroup.children[outlet];
    };
    /**
     * @param {?} route
     * @param {?} rawSegment
     * @param {?} segments
     * @param {?} outlet
     * @return {?}
     */
    Recognizer.prototype.processSegmentAgainstRoute = function (route, rawSegment, segments, outlet) {
        if (route.redirectTo)
            throw new NoMatch$1();
        if ((route.outlet || PRIMARY_OUTLET) !== outlet)
            throw new NoMatch$1();
        if (route.path === '**') {
            var /** @type {?} */ params = segments.length > 0 ? ((last$1(segments))).parameters : {};
            var /** @type {?} */ snapshot_1 = new ActivatedRouteSnapshot(segments, params, Object.freeze(this.urlTree.queryParams), /** @type {?} */ ((this.urlTree.fragment)), getData(route), outlet, /** @type {?} */ ((route.component)), route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + segments.length, getResolve(route));
            return [new TreeNode(snapshot_1, [])];
        }
        var _a = match$1(rawSegment, route, segments), consumedSegments = _a.consumedSegments, parameters = _a.parameters, lastChild = _a.lastChild;
        var /** @type {?} */ rawSlicedSegments = segments.slice(lastChild);
        var /** @type {?} */ childConfig = getChildConfig(route);
        var _b = split$1(rawSegment, consumedSegments, rawSlicedSegments, childConfig), segmentGroup = _b.segmentGroup, slicedSegments = _b.slicedSegments;
        var /** @type {?} */ snapshot = new ActivatedRouteSnapshot(consumedSegments, parameters, Object.freeze(this.urlTree.queryParams), /** @type {?} */ ((this.urlTree.fragment)), getData(route), outlet, /** @type {?} */ ((route.component)), route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length, getResolve(route));
        if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
            var /** @type {?} */ children_3 = this.processChildren(childConfig, segmentGroup);
            return [new TreeNode(snapshot, children_3)];
        }
        if (childConfig.length === 0 && slicedSegments.length === 0) {
            return [new TreeNode(snapshot, [])];
        }
        var /** @type {?} */ children = this.processSegment(childConfig, segmentGroup, slicedSegments, PRIMARY_OUTLET);
        return [new TreeNode(snapshot, children)];
    };
    return Recognizer;
}());
/**
 * @param {?} nodes
 * @return {?}
 */
function sortActivatedRouteSnapshots(nodes) {
    nodes.sort(function (a, b) {
        if (a.value.outlet === PRIMARY_OUTLET)
            return -1;
        if (b.value.outlet === PRIMARY_OUTLET)
            return 1;
        return a.value.outlet.localeCompare(b.value.outlet);
    });
}
/**
 * @param {?} route
 * @return {?}
 */
function getChildConfig(route) {
    if (route.children) {
        return route.children;
    }
    if (route.loadChildren) {
        return ((route._loadedConfig)).routes;
    }
    return [];
}
/**
 * @param {?} segmentGroup
 * @param {?} route
 * @param {?} segments
 * @return {?}
 */
function match$1(segmentGroup, route, segments) {
    if (route.path === '') {
        if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {
            throw new NoMatch$1();
        }
        return { consumedSegments: [], lastChild: 0, parameters: {} };
    }
    var /** @type {?} */ matcher = route.matcher || defaultUrlMatcher;
    var /** @type {?} */ res = matcher(segments, segmentGroup, route);
    if (!res)
        throw new NoMatch$1();
    var /** @type {?} */ posParams = {};
    forEach(/** @type {?} */ ((res.posParams)), function (v, k) { posParams[k] = v.path; });
    var /** @type {?} */ parameters = res.consumed.length > 0 ? Object.assign({}, posParams, res.consumed[res.consumed.length - 1].parameters) :
        posParams;
    return { consumedSegments: res.consumed, lastChild: res.consumed.length, parameters: parameters };
}
/**
 * @param {?} nodes
 * @return {?}
 */
function checkOutletNameUniqueness(nodes) {
    var /** @type {?} */ names = {};
    nodes.forEach(function (n) {
        var /** @type {?} */ routeWithSameOutletName = names[n.value.outlet];
        if (routeWithSameOutletName) {
            var /** @type {?} */ p = routeWithSameOutletName.url.map(function (s) { return s.toString(); }).join('/');
            var /** @type {?} */ c = n.value.url.map(function (s) { return s.toString(); }).join('/');
            throw new Error("Two segments cannot have the same outlet name: '" + p + "' and '" + c + "'.");
        }
        names[n.value.outlet] = n.value;
    });
}
/**
 * @param {?} segmentGroup
 * @return {?}
 */
function getSourceSegmentGroup(segmentGroup) {
    var /** @type {?} */ s = segmentGroup;
    while (s._sourceSegment) {
        s = s._sourceSegment;
    }
    return s;
}
/**
 * @param {?} segmentGroup
 * @return {?}
 */
function getPathIndexShift(segmentGroup) {
    var /** @type {?} */ s = segmentGroup;
    var /** @type {?} */ res = (s._segmentIndexShift ? s._segmentIndexShift : 0);
    while (s._sourceSegment) {
        s = s._sourceSegment;
        res += (s._segmentIndexShift ? s._segmentIndexShift : 0);
    }
    return res - 1;
}
/**
 * @param {?} segmentGroup
 * @param {?} consumedSegments
 * @param {?} slicedSegments
 * @param {?} config
 * @return {?}
 */
function split$1(segmentGroup, consumedSegments, slicedSegments, config) {
    if (slicedSegments.length > 0 &&
        containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {
        var /** @type {?} */ s_1 = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(segmentGroup, consumedSegments, config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));
        s_1._sourceSegment = segmentGroup;
        s_1._segmentIndexShift = consumedSegments.length;
        return { segmentGroup: s_1, slicedSegments: [] };
    }
    if (slicedSegments.length === 0 &&
        containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {
        var /** @type {?} */ s_2 = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));
        s_2._sourceSegment = segmentGroup;
        s_2._segmentIndexShift = consumedSegments.length;
        return { segmentGroup: s_2, slicedSegments: slicedSegments };
    }
    var /** @type {?} */ s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);
    s._sourceSegment = segmentGroup;
    s._segmentIndexShift = consumedSegments.length;
    return { segmentGroup: s, slicedSegments: slicedSegments };
}
/**
 * @param {?} segmentGroup
 * @param {?} slicedSegments
 * @param {?} routes
 * @param {?} children
 * @return {?}
 */
function addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {
    var /** @type {?} */ res = {};
    for (var _i = 0, routes_3 = routes; _i < routes_3.length; _i++) {
        var r = routes_3[_i];
        if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet$1(r)]) {
            var /** @type {?} */ s = new UrlSegmentGroup([], {});
            s._sourceSegment = segmentGroup;
            s._segmentIndexShift = segmentGroup.segments.length;
            res[getOutlet$1(r)] = s;
        }
    }
    return Object.assign({}, children, res);
}
/**
 * @param {?} segmentGroup
 * @param {?} consumedSegments
 * @param {?} routes
 * @param {?} primarySegment
 * @return {?}
 */
function createChildrenForEmptyPaths(segmentGroup, consumedSegments, routes, primarySegment) {
    var /** @type {?} */ res = {};
    res[PRIMARY_OUTLET] = primarySegment;
    primarySegment._sourceSegment = segmentGroup;
    primarySegment._segmentIndexShift = consumedSegments.length;
    for (var _i = 0, routes_4 = routes; _i < routes_4.length; _i++) {
        var r = routes_4[_i];
        if (r.path === '' && getOutlet$1(r) !== PRIMARY_OUTLET) {
            var /** @type {?} */ s = new UrlSegmentGroup([], {});
            s._sourceSegment = segmentGroup;
            s._segmentIndexShift = consumedSegments.length;
            res[getOutlet$1(r)] = s;
        }
    }
    return res;
}
/**
 * @param {?} segmentGroup
 * @param {?} slicedSegments
 * @param {?} routes
 * @return {?}
 */
function containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes) {
    return routes.some(function (r) { return emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet$1(r) !== PRIMARY_OUTLET; });
}
/**
 * @param {?} segmentGroup
 * @param {?} slicedSegments
 * @param {?} routes
 * @return {?}
 */
function containsEmptyPathMatches(segmentGroup, slicedSegments, routes) {
    return routes.some(function (r) { return emptyPathMatch(segmentGroup, slicedSegments, r); });
}
/**
 * @param {?} segmentGroup
 * @param {?} slicedSegments
 * @param {?} r
 * @return {?}
 */
function emptyPathMatch(segmentGroup, slicedSegments, r) {
    if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full') {
        return false;
    }
    return r.path === '' && r.redirectTo === undefined;
}
/**
 * @param {?} route
 * @return {?}
 */
function getOutlet$1(route) {
    return route.outlet || PRIMARY_OUTLET;
}
/**
 * @param {?} route
 * @return {?}
 */
function getData(route) {
    return route.data || {};
}
/**
 * @param {?} route
 * @return {?}
 */
function getResolve(route) {
    return route.resolve || {};
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@whatItDoes Provides a way to customize when activated routes get reused.
 *
 * \@experimental
 * @abstract
 */
var RouteReuseStrategy = (function () {
    function RouteReuseStrategy() {
    }
    /**
     * Determines if this route (and its subtree) should be detached to be reused later
     * @abstract
     * @param {?} route
     * @return {?}
     */
    RouteReuseStrategy.prototype.shouldDetach = function (route) { };
    /**
     * Stores the detached route.
     *
     * Storing a `null` value should erase the previously stored value.
     * @abstract
     * @param {?} route
     * @param {?} handle
     * @return {?}
     */
    RouteReuseStrategy.prototype.store = function (route, handle) { };
    /**
     * Determines if this route (and its subtree) should be reattached
     * @abstract
     * @param {?} route
     * @return {?}
     */
    RouteReuseStrategy.prototype.shouldAttach = function (route) { };
    /**
     * Retrieves the previously stored route
     * @abstract
     * @param {?} route
     * @return {?}
     */
    RouteReuseStrategy.prototype.retrieve = function (route) { };
    /**
     * Determines if a route should be reused
     * @abstract
     * @param {?} future
     * @param {?} curr
     * @return {?}
     */
    RouteReuseStrategy.prototype.shouldReuseRoute = function (future, curr) { };
    return RouteReuseStrategy;
}());
/**
 * Does not detach any subtrees. Reuses routes as long as their route config is the same.
 */
var DefaultRouteReuseStrategy = (function () {
    function DefaultRouteReuseStrategy() {
    }
    /**
     * @param {?} route
     * @return {?}
     */
    DefaultRouteReuseStrategy.prototype.shouldDetach = function (route) { return false; };
    /**
     * @param {?} route
     * @param {?} detachedTree
     * @return {?}
     */
    DefaultRouteReuseStrategy.prototype.store = function (route, detachedTree) { };
    /**
     * @param {?} route
     * @return {?}
     */
    DefaultRouteReuseStrategy.prototype.shouldAttach = function (route) { return false; };
    /**
     * @param {?} route
     * @return {?}
     */
    DefaultRouteReuseStrategy.prototype.retrieve = function (route) { return null; };
    /**
     * @param {?} future
     * @param {?} curr
     * @return {?}
     */
    DefaultRouteReuseStrategy.prototype.shouldReuseRoute = function (future, curr) {
        return future.routeConfig === curr.routeConfig;
    };
    return DefaultRouteReuseStrategy;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@docsNotRequired
 * \@experimental
 */
var ROUTES = new InjectionToken('ROUTES');
var RouterConfigLoader = (function () {
    /**
     * @param {?} loader
     * @param {?} compiler
     * @param {?=} onLoadStartListener
     * @param {?=} onLoadEndListener
     */
    function RouterConfigLoader(loader, compiler, onLoadStartListener, onLoadEndListener) {
        this.loader = loader;
        this.compiler = compiler;
        this.onLoadStartListener = onLoadStartListener;
        this.onLoadEndListener = onLoadEndListener;
    }
    /**
     * @param {?} parentInjector
     * @param {?} route
     * @return {?}
     */
    RouterConfigLoader.prototype.load = function (parentInjector, route) {
        var _this = this;
        if (this.onLoadStartListener) {
            this.onLoadStartListener(route);
        }
        var /** @type {?} */ moduleFactory$ = this.loadModuleFactory(/** @type {?} */ ((route.loadChildren)));
        return map_2.call(moduleFactory$, function (factory) {
            if (_this.onLoadEndListener) {
                _this.onLoadEndListener(route);
            }
            var /** @type {?} */ module = factory.create(parentInjector);
            return new LoadedRouterConfig(flatten$1(module.injector.get(ROUTES)), module);
        });
    };
    /**
     * @param {?} loadChildren
     * @return {?}
     */
    RouterConfigLoader.prototype.loadModuleFactory = function (loadChildren) {
        var _this = this;
        if (typeof loadChildren === 'string') {
            return fromPromise_1(this.loader.load(loadChildren));
        }
        else {
            return mergeMap_2.call(wrapIntoObservable(loadChildren()), function (t) {
                if (t instanceof NgModuleFactory) {
                    return of_1(t);
                }
                else {
                    return fromPromise_1(_this.compiler.compileModuleAsync(t));
                }
            });
        }
    };
    return RouterConfigLoader;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@whatItDoes Provides a way to migrate AngularJS applications to Angular.
 *
 * \@experimental
 * @abstract
 */
var UrlHandlingStrategy = (function () {
    function UrlHandlingStrategy() {
    }
    /**
     * Tells the router if this URL should be processed.
     *
     * When it returns true, the router will execute the regular navigation.
     * When it returns false, the router will set the router state to an empty state.
     * As a result, all the active components will be destroyed.
     *
     * @abstract
     * @param {?} url
     * @return {?}
     */
    UrlHandlingStrategy.prototype.shouldProcessUrl = function (url) { };
    /**
     * Extracts the part of the URL that should be handled by the router.
     * The rest of the URL will remain untouched.
     * @abstract
     * @param {?} url
     * @return {?}
     */
    UrlHandlingStrategy.prototype.extract = function (url) { };
    /**
     * Merges the URL fragment with the rest of the URL.
     * @abstract
     * @param {?} newUrlPart
     * @param {?} rawUrl
     * @return {?}
     */
    UrlHandlingStrategy.prototype.merge = function (newUrlPart, rawUrl) { };
    return UrlHandlingStrategy;
}());
/**
 * \@experimental
 */
var DefaultUrlHandlingStrategy = (function () {
    function DefaultUrlHandlingStrategy() {
    }
    /**
     * @param {?} url
     * @return {?}
     */
    DefaultUrlHandlingStrategy.prototype.shouldProcessUrl = function (url) { return true; };
    /**
     * @param {?} url
     * @return {?}
     */
    DefaultUrlHandlingStrategy.prototype.extract = function (url) { return url; };
    /**
     * @param {?} newUrlPart
     * @param {?} wholeUrl
     * @return {?}
     */
    DefaultUrlHandlingStrategy.prototype.merge = function (newUrlPart, wholeUrl) { return newUrlPart; };
    return DefaultUrlHandlingStrategy;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} error
 * @return {?}
 */
function defaultErrorHandler(error) {
    throw error;
}
/**
 * \@internal
 * @param {?} snapshot
 * @return {?}
 */
function defaultRouterHook(snapshot) {
    return (of_1(null));
}
/**
 * \@whatItDoes Provides the navigation and url manipulation capabilities.
 *
 * See {\@link Routes} for more details and examples.
 *
 * \@ngModule RouterModule
 *
 * \@stable
 */
var Router = (function () {
    /**
     * @param {?} rootComponentType
     * @param {?} urlSerializer
     * @param {?} rootContexts
     * @param {?} location
     * @param {?} injector
     * @param {?} loader
     * @param {?} compiler
     * @param {?} config
     */
    function Router(rootComponentType, urlSerializer, rootContexts, location, injector, loader, compiler, config) {
        var _this = this;
        this.rootComponentType = rootComponentType;
        this.urlSerializer = urlSerializer;
        this.rootContexts = rootContexts;
        this.location = location;
        this.config = config;
        this.navigations = new BehaviorSubject_2(/** @type {?} */ ((null)));
        this.routerEvents = new Subject_2();
        this.navigationId = 0;
        /**
         * Error handler that is invoked when a navigation errors.
         *
         * See {\@link ErrorHandler} for more information.
         */
        this.errorHandler = defaultErrorHandler;
        /**
         * Indicates if at least one navigation happened.
         */
        this.navigated = false;
        /**
         * Used by RouterModule. This allows us to
         * pause the navigation either before preactivation or after it.
         * \@internal
         */
        this.hooks = {
            beforePreactivation: defaultRouterHook,
            afterPreactivation: defaultRouterHook
        };
        /**
         * Extracts and merges URLs. Used for AngularJS to Angular migrations.
         */
        this.urlHandlingStrategy = new DefaultUrlHandlingStrategy();
        this.routeReuseStrategy = new DefaultRouteReuseStrategy();
        var onLoadStart = function (r) { return _this.triggerEvent(new RouteConfigLoadStart(r)); };
        var onLoadEnd = function (r) { return _this.triggerEvent(new RouteConfigLoadEnd(r)); };
        this.ngModule = injector.get(NgModuleRef);
        this.resetConfig(config);
        this.currentUrlTree = createEmptyUrlTree();
        this.rawUrlTree = this.currentUrlTree;
        this.configLoader = new RouterConfigLoader(loader, compiler, onLoadStart, onLoadEnd);
        this.currentRouterState = createEmptyState(this.currentUrlTree, this.rootComponentType);
        this.processNavigations();
    }
    /**
     * \@internal
     * TODO: this should be removed once the constructor of the router made internal
     * @param {?} rootComponentType
     * @return {?}
     */
    Router.prototype.resetRootComponentType = function (rootComponentType) {
        this.rootComponentType = rootComponentType;
        // TODO: vsavkin router 4.0 should make the root component set to null
        // this will simplify the lifecycle of the router.
        this.currentRouterState.root.component = this.rootComponentType;
    };
    /**
     * Sets up the location change listener and performs the initial navigation.
     * @return {?}
     */
    Router.prototype.initialNavigation = function () {
        this.setUpLocationChangeListener();
        if (this.navigationId === 0) {
            this.navigateByUrl(this.location.path(true), { replaceUrl: true });
        }
    };
    /**
     * Sets up the location change listener.
     * @return {?}
     */
    Router.prototype.setUpLocationChangeListener = function () {
        var _this = this;
        // Zone.current.wrap is needed because of the issue with RxJS scheduler,
        // which does not work properly with zone.js in IE and Safari
        if (!this.locationSubscription) {
            this.locationSubscription = (this.location.subscribe(Zone.current.wrap(function (change) {
                var /** @type {?} */ rawUrlTree = _this.urlSerializer.parse(change['url']);
                var /** @type {?} */ source = change['type'] === 'popstate' ? 'popstate' : 'hashchange';
                setTimeout(function () { _this.scheduleNavigation(rawUrlTree, source, { replaceUrl: true }); }, 0);
            })));
        }
    };
    Object.defineProperty(Router.prototype, "routerState", {
        /**
         * The current route state
         * @return {?}
         */
        get: function () { return this.currentRouterState; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Router.prototype, "url", {
        /**
         * The current url
         * @return {?}
         */
        get: function () { return this.serializeUrl(this.currentUrlTree); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Router.prototype, "events", {
        /**
         * An observable of router events
         * @return {?}
         */
        get: function () { return this.routerEvents; },
        enumerable: true,
        configurable: true
    });
    /**
     * \@internal
     * @param {?} e
     * @return {?}
     */
    Router.prototype.triggerEvent = function (e) { this.routerEvents.next(e); };
    /**
     * Resets the configuration used for navigation and generating links.
     *
     * ### Usage
     *
     * ```
     * router.resetConfig([
     *  { path: 'team/:id', component: TeamCmp, children: [
     *    { path: 'simple', component: SimpleCmp },
     *    { path: 'user/:name', component: UserCmp }
     *  ]}
     * ]);
     * ```
     * @param {?} config
     * @return {?}
     */
    Router.prototype.resetConfig = function (config) {
        validateConfig(config);
        this.config = config;
        this.navigated = false;
    };
    /**
     * \@docsNotRequired
     * @return {?}
     */
    Router.prototype.ngOnDestroy = function () { this.dispose(); };
    /**
     * Disposes of the router
     * @return {?}
     */
    Router.prototype.dispose = function () {
        if (this.locationSubscription) {
            this.locationSubscription.unsubscribe();
            this.locationSubscription = ((null));
        }
    };
    /**
     * Applies an array of commands to the current url tree and creates a new url tree.
     *
     * When given an activate route, applies the given commands starting from the route.
     * When not given a route, applies the given command starting from the root.
     *
     * ### Usage
     *
     * ```
     * // create /team/33/user/11
     * router.createUrlTree(['/team', 33, 'user', 11]);
     *
     * // create /team/33;expand=true/user/11
     * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);
     *
     * // you can collapse static segments like this (this works only with the first passed-in value):
     * router.createUrlTree(['/team/33/user', userId]);
     *
     * // If the first segment can contain slashes, and you do not want the router to split it, you
     * // can do the following:
     *
     * router.createUrlTree([{segmentPath: '/one/two'}]);
     *
     * // create /team/33/(user/11//right:chat)
     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);
     *
     * // remove the right secondary node
     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);
     *
     * // assuming the current url is `/team/33/user/11` and the route points to `user/11`
     *
     * // navigate to /team/33/user/11/details
     * router.createUrlTree(['details'], {relativeTo: route});
     *
     * // navigate to /team/33/user/22
     * router.createUrlTree(['../22'], {relativeTo: route});
     *
     * // navigate to /team/44/user/22
     * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});
     * ```
     * @param {?} commands
     * @param {?=} navigationExtras
     * @return {?}
     */
    Router.prototype.createUrlTree = function (commands, navigationExtras) {
        if (navigationExtras === void 0) { navigationExtras = {}; }
        var relativeTo = navigationExtras.relativeTo, queryParams = navigationExtras.queryParams, fragment = navigationExtras.fragment, preserveQueryParams = navigationExtras.preserveQueryParams, queryParamsHandling = navigationExtras.queryParamsHandling, preserveFragment = navigationExtras.preserveFragment;
        if (isDevMode() && preserveQueryParams && (console) && (console.warn)) {
            console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');
        }
        var /** @type {?} */ a = relativeTo || this.routerState.root;
        var /** @type {?} */ f = preserveFragment ? this.currentUrlTree.fragment : fragment;
        var /** @type {?} */ q = null;
        if (queryParamsHandling) {
            switch (queryParamsHandling) {
                case 'merge':
                    q = Object.assign({}, this.currentUrlTree.queryParams, queryParams);
                    break;
                case 'preserve':
                    q = this.currentUrlTree.queryParams;
                    break;
                default:
                    q = queryParams || null;
            }
        }
        else {
            q = preserveQueryParams ? this.currentUrlTree.queryParams : queryParams || null;
        }
        return createUrlTree(a, this.currentUrlTree, commands, /** @type {?} */ ((q)), /** @type {?} */ ((f)));
    };
    /**
     * Navigate based on the provided url. This navigation is always absolute.
     *
     * Returns a promise that:
     * - resolves to 'true' when navigation succeeds,
     * - resolves to 'false' when navigation fails,
     * - is rejected when an error happens.
     *
     * ### Usage
     *
     * ```
     * router.navigateByUrl("/team/33/user/11");
     *
     * // Navigate without updating the URL
     * router.navigateByUrl("/team/33/user/11", { skipLocationChange: true });
     * ```
     *
     * In opposite to `navigate`, `navigateByUrl` takes a whole URL
     * and does not apply any delta to the current one.
     * @param {?} url
     * @param {?=} extras
     * @return {?}
     */
    Router.prototype.navigateByUrl = function (url, extras) {
        if (extras === void 0) { extras = { skipLocationChange: false }; }
        var /** @type {?} */ urlTree = url instanceof UrlTree ? url : this.parseUrl(url);
        var /** @type {?} */ mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);
        return this.scheduleNavigation(mergedTree, 'imperative', extras);
    };
    /**
     * Navigate based on the provided array of commands and a starting point.
     * If no starting route is provided, the navigation is absolute.
     *
     * Returns a promise that:
     * - resolves to 'true' when navigation succeeds,
     * - resolves to 'false' when navigation fails,
     * - is rejected when an error happens.
     *
     * ### Usage
     *
     * ```
     * router.navigate(['team', 33, 'user', 11], {relativeTo: route});
     *
     * // Navigate without updating the URL
     * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});
     * ```
     *
     * In opposite to `navigateByUrl`, `navigate` always takes a delta that is applied to the current
     * URL.
     * @param {?} commands
     * @param {?=} extras
     * @return {?}
     */
    Router.prototype.navigate = function (commands, extras) {
        if (extras === void 0) { extras = { skipLocationChange: false }; }
        validateCommands(commands);
        if (typeof extras.queryParams === 'object' && extras.queryParams !== null) {
            extras.queryParams = this.removeEmptyProps(extras.queryParams);
        }
        return this.navigateByUrl(this.createUrlTree(commands, extras), extras);
    };
    /**
     * Serializes a {\@link UrlTree} into a string
     * @param {?} url
     * @return {?}
     */
    Router.prototype.serializeUrl = function (url) { return this.urlSerializer.serialize(url); };
    /**
     * Parses a string into a {\@link UrlTree}
     * @param {?} url
     * @return {?}
     */
    Router.prototype.parseUrl = function (url) { return this.urlSerializer.parse(url); };
    /**
     * Returns whether the url is activated
     * @param {?} url
     * @param {?} exact
     * @return {?}
     */
    Router.prototype.isActive = function (url, exact) {
        if (url instanceof UrlTree) {
            return containsTree(this.currentUrlTree, url, exact);
        }
        var /** @type {?} */ urlTree = this.urlSerializer.parse(url);
        return containsTree(this.currentUrlTree, urlTree, exact);
    };
    /**
     * @param {?} params
     * @return {?}
     */
    Router.prototype.removeEmptyProps = function (params) {
        return Object.keys(params).reduce(function (result, key) {
            var /** @type {?} */ value = params[key];
            if (value !== null && value !== undefined) {
                result[key] = value;
            }
            return result;
        }, {});
    };
    /**
     * @return {?}
     */
    Router.prototype.processNavigations = function () {
        var _this = this;
        concatMap_2
            .call(this.navigations, function (nav) {
            if (nav) {
                _this.executeScheduledNavigation(nav);
                // a failed navigation should not stop the router from processing
                // further navigations => the catch
                return nav.promise.catch(function () { });
            }
            else {
                return (of_1(null));
            }
        })
            .subscribe(function () { });
    };
    /**
     * @param {?} rawUrl
     * @param {?} source
     * @param {?} extras
     * @return {?}
     */
    Router.prototype.scheduleNavigation = function (rawUrl, source, extras) {
        var /** @type {?} */ lastNavigation = this.navigations.value;
        // If the user triggers a navigation imperatively (e.g., by using navigateByUrl),
        // and that navigation results in 'replaceState' that leads to the same URL,
        // we should skip those.
        if (lastNavigation && source !== 'imperative' && lastNavigation.source === 'imperative' &&
            lastNavigation.rawUrl.toString() === rawUrl.toString()) {
            return Promise.resolve(true); // return value is not used
        }
        // Because of a bug in IE and Edge, the location class fires two events (popstate and
        // hashchange) every single time. The second one should be ignored. Otherwise, the URL will
        // flicker.
        if (lastNavigation && source == 'hashchange' && lastNavigation.source === 'popstate' &&
            lastNavigation.rawUrl.toString() === rawUrl.toString()) {
            return Promise.resolve(true); // return value is not used
        }
        var /** @type {?} */ resolve = null;
        var /** @type {?} */ reject = null;
        var /** @type {?} */ promise = new Promise(function (res, rej) {
            resolve = res;
            reject = rej;
        });
        var /** @type {?} */ id = ++this.navigationId;
        this.navigations.next({ id: id, source: source, rawUrl: rawUrl, extras: extras, resolve: resolve, reject: reject, promise: promise });
        // Make sure that the error is propagated even though `processNavigations` catch
        // handler does not rethrow
        return promise.catch(function (e) { return Promise.reject(e); });
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    Router.prototype.executeScheduledNavigation = function (_a) {
        var _this = this;
        var id = _a.id, rawUrl = _a.rawUrl, extras = _a.extras, resolve = _a.resolve, reject = _a.reject;
        var /** @type {?} */ url = this.urlHandlingStrategy.extract(rawUrl);
        var /** @type {?} */ urlTransition = !this.navigated || url.toString() !== this.currentUrlTree.toString();
        if (urlTransition && this.urlHandlingStrategy.shouldProcessUrl(rawUrl)) {
            this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));
            Promise.resolve()
                .then(function (_) { return _this.runNavigate(url, rawUrl, !!extras.skipLocationChange, !!extras.replaceUrl, id, null); })
                .then(resolve, reject);
            // we cannot process the current URL, but we could process the previous one =>
            // we need to do some cleanup
        }
        else if (urlTransition && this.rawUrlTree &&
            this.urlHandlingStrategy.shouldProcessUrl(this.rawUrlTree)) {
            this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));
            Promise.resolve()
                .then(function (_) { return _this.runNavigate(url, rawUrl, false, false, id, createEmptyState(url, _this.rootComponentType).snapshot); })
                .then(resolve, reject);
        }
        else {
            this.rawUrlTree = rawUrl;
            resolve(null);
        }
    };
    /**
     * @param {?} url
     * @param {?} rawUrl
     * @param {?} shouldPreventPushState
     * @param {?} shouldReplaceUrl
     * @param {?} id
     * @param {?} precreatedState
     * @return {?}
     */
    Router.prototype.runNavigate = function (url, rawUrl, shouldPreventPushState, shouldReplaceUrl, id, precreatedState) {
        var _this = this;
        if (id !== this.navigationId) {
            this.location.go(this.urlSerializer.serialize(this.currentUrlTree));
            this.routerEvents.next(new NavigationCancel(id, this.serializeUrl(url), "Navigation ID " + id + " is not equal to the current navigation id " + this.navigationId));
            return Promise.resolve(false);
        }
        return new Promise(function (resolvePromise, rejectPromise) {
            // create an observable of the url and route state snapshot
            // this operation do not result in any side effects
            var /** @type {?} */ urlAndSnapshot$;
            if (!precreatedState) {
                var /** @type {?} */ moduleInjector = _this.ngModule.injector;
                var /** @type {?} */ redirectsApplied$ = applyRedirects(moduleInjector, _this.configLoader, _this.urlSerializer, url, _this.config);
                urlAndSnapshot$ = mergeMap_2.call(redirectsApplied$, function (appliedUrl) {
                    return map_2.call(recognize(_this.rootComponentType, _this.config, appliedUrl, _this.serializeUrl(appliedUrl)), function (snapshot) {
                        _this.routerEvents.next(new RoutesRecognized(id, _this.serializeUrl(url), _this.serializeUrl(appliedUrl), snapshot));
                        return { appliedUrl: appliedUrl, snapshot: snapshot };
                    });
                });
            }
            else {
                urlAndSnapshot$ = of_1({ appliedUrl: url, snapshot: precreatedState });
            }
            var /** @type {?} */ beforePreactivationDone$ = mergeMap_2.call(urlAndSnapshot$, function (p) {
                return map_2.call(_this.hooks.beforePreactivation(p.snapshot), function () { return p; });
            });
            // run preactivation: guards and data resolvers
            var /** @type {?} */ preActivation;
            var /** @type {?} */ preactivationTraverse$ = map_2.call(beforePreactivationDone$, function (_a) {
                var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot;
                var /** @type {?} */ moduleInjector = _this.ngModule.injector;
                preActivation =
                    new PreActivation(snapshot, _this.currentRouterState.snapshot, moduleInjector);
                preActivation.traverse(_this.rootContexts);
                return { appliedUrl: appliedUrl, snapshot: snapshot };
            });
            var /** @type {?} */ preactivationCheckGuards$ = mergeMap_2.call(preactivationTraverse$, function (_a) {
                var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot;
                if (_this.navigationId !== id)
                    return of_1(false);
                _this.triggerEvent(new GuardsCheckStart(id, _this.serializeUrl(url), appliedUrl, snapshot));
                return map_2.call(preActivation.checkGuards(), function (shouldActivate) {
                    _this.triggerEvent(new GuardsCheckEnd(id, _this.serializeUrl(url), appliedUrl, snapshot, shouldActivate));
                    return { appliedUrl: appliedUrl, snapshot: snapshot, shouldActivate: shouldActivate };
                });
            });
            var /** @type {?} */ preactivationResolveData$ = mergeMap_2.call(preactivationCheckGuards$, function (p) {
                if (_this.navigationId !== id)
                    return of_1(false);
                if (p.shouldActivate && preActivation.isActivating()) {
                    _this.triggerEvent(new ResolveStart(id, _this.serializeUrl(url), p.appliedUrl, p.snapshot));
                    return map_2.call(preActivation.resolveData(), function () {
                        _this.triggerEvent(new ResolveEnd(id, _this.serializeUrl(url), p.appliedUrl, p.snapshot));
                        return p;
                    });
                }
                else {
                    return of_1(p);
                }
            });
            var /** @type {?} */ preactivationDone$ = mergeMap_2.call(preactivationResolveData$, function (p) {
                return map_2.call(_this.hooks.afterPreactivation(p.snapshot), function () { return p; });
            });
            // create router state
            // this operation has side effects => route state is being affected
            var /** @type {?} */ routerState$ = map_2.call(preactivationDone$, function (_a) {
                var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot, shouldActivate = _a.shouldActivate;
                if (shouldActivate) {
                    var /** @type {?} */ state = createRouterState(_this.routeReuseStrategy, snapshot, _this.currentRouterState);
                    return { appliedUrl: appliedUrl, state: state, shouldActivate: shouldActivate };
                }
                else {
                    return { appliedUrl: appliedUrl, state: null, shouldActivate: shouldActivate };
                }
            });
            // applied the new router state
            // this operation has side effects
            var /** @type {?} */ navigationIsSuccessful;
            var /** @type {?} */ storedState = _this.currentRouterState;
            var /** @type {?} */ storedUrl = _this.currentUrlTree;
            routerState$
                .forEach(function (_a) {
                var appliedUrl = _a.appliedUrl, state = _a.state, shouldActivate = _a.shouldActivate;
                if (!shouldActivate || id !== _this.navigationId) {
                    navigationIsSuccessful = false;
                    return;
                }
                _this.currentUrlTree = appliedUrl;
                _this.rawUrlTree = _this.urlHandlingStrategy.merge(_this.currentUrlTree, rawUrl);
                _this.currentRouterState = state;
                if (!shouldPreventPushState) {
                    var /** @type {?} */ path = _this.urlSerializer.serialize(_this.rawUrlTree);
                    if (_this.location.isCurrentPathEqualTo(path) || shouldReplaceUrl) {
                        _this.location.replaceState(path);
                    }
                    else {
                        _this.location.go(path);
                    }
                }
                new ActivateRoutes(_this.routeReuseStrategy, state, storedState)
                    .activate(_this.rootContexts);
                navigationIsSuccessful = true;
            })
                .then(function () {
                if (navigationIsSuccessful) {
                    _this.navigated = true;
                    _this.routerEvents.next(new NavigationEnd(id, _this.serializeUrl(url), _this.serializeUrl(_this.currentUrlTree)));
                    resolvePromise(true);
                }
                else {
                    _this.resetUrlToCurrentUrlTree();
                    _this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url), ''));
                    resolvePromise(false);
                }
            }, function (e) {
                if (isNavigationCancelingError(e)) {
                    _this.resetUrlToCurrentUrlTree();
                    _this.navigated = true;
                    _this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url), e.message));
                    resolvePromise(false);
                }
                else {
                    _this.routerEvents.next(new NavigationError(id, _this.serializeUrl(url), e));
                    try {
                        resolvePromise(_this.errorHandler(e));
                    }
                    catch (ee) {
                        rejectPromise(ee);
                    }
                }
                _this.currentRouterState = storedState;
                _this.currentUrlTree = storedUrl;
                _this.rawUrlTree = _this.urlHandlingStrategy.merge(_this.currentUrlTree, rawUrl);
                _this.location.replaceState(_this.serializeUrl(_this.rawUrlTree));
            });
        });
    };
    /**
     * @return {?}
     */
    Router.prototype.resetUrlToCurrentUrlTree = function () {
        var /** @type {?} */ path = this.urlSerializer.serialize(this.rawUrlTree);
        this.location.replaceState(path);
    };
    return Router;
}());
var CanActivate = (function () {
    /**
     * @param {?} path
     */
    function CanActivate(path) {
        this.path = path;
    }
    Object.defineProperty(CanActivate.prototype, "route", {
        /**
         * @return {?}
         */
        get: function () { return this.path[this.path.length - 1]; },
        enumerable: true,
        configurable: true
    });
    return CanActivate;
}());
var CanDeactivate = (function () {
    /**
     * @param {?} component
     * @param {?} route
     */
    function CanDeactivate(component, route) {
        this.component = component;
        this.route = route;
    }
    return CanDeactivate;
}());
var PreActivation = (function () {
    /**
     * @param {?} future
     * @param {?} curr
     * @param {?} moduleInjector
     */
    function PreActivation(future, curr, moduleInjector) {
        this.future = future;
        this.curr = curr;
        this.moduleInjector = moduleInjector;
        this.canActivateChecks = [];
        this.canDeactivateChecks = [];
    }
    /**
     * @param {?} parentContexts
     * @return {?}
     */
    PreActivation.prototype.traverse = function (parentContexts) {
        var /** @type {?} */ futureRoot = this.future._root;
        var /** @type {?} */ currRoot = this.curr ? this.curr._root : null;
        this.traverseChildRoutes(futureRoot, currRoot, parentContexts, [futureRoot.value]);
    };
    /**
     * @return {?}
     */
    PreActivation.prototype.checkGuards = function () {
        var _this = this;
        if (!this.isDeactivating() && !this.isActivating()) {
            return of_1(true);
        }
        var /** @type {?} */ canDeactivate$ = this.runCanDeactivateChecks();
        return mergeMap_2.call(canDeactivate$, function (canDeactivate) { return canDeactivate ? _this.runCanActivateChecks() : of_1(false); });
    };
    /**
     * @return {?}
     */
    PreActivation.prototype.resolveData = function () {
        var _this = this;
        if (!this.isActivating())
            return of_1(null);
        var /** @type {?} */ checks$ = from_1(this.canActivateChecks);
        var /** @type {?} */ runningChecks$ = concatMap_2.call(checks$, function (check) { return _this.runResolve(check.route); });
        return reduce_2.call(runningChecks$, function (_, __) { return _; });
    };
    /**
     * @return {?}
     */
    PreActivation.prototype.isDeactivating = function () { return this.canDeactivateChecks.length !== 0; };
    /**
     * @return {?}
     */
    PreActivation.prototype.isActivating = function () { return this.canActivateChecks.length !== 0; };
    /**
     * @param {?} futureNode
     * @param {?} currNode
     * @param {?} contexts
     * @param {?} futurePath
     * @return {?}
     */
    PreActivation.prototype.traverseChildRoutes = function (futureNode, currNode, contexts, futurePath) {
        var _this = this;
        var /** @type {?} */ prevChildren = nodeChildrenAsMap(currNode);
        // Process the children of the future route
        futureNode.children.forEach(function (c) {
            _this.traverseRoutes(c, prevChildren[c.value.outlet], contexts, futurePath.concat([c.value]));
            delete prevChildren[c.value.outlet];
        });
        // Process any children left from the current route (not active for the future route)
        forEach(prevChildren, function (v, k) { return _this.deactivateRouteAndItsChildren(v, /** @type {?} */ ((contexts)).getContext(k)); });
    };
    /**
     * @param {?} futureNode
     * @param {?} currNode
     * @param {?} parentContexts
     * @param {?} futurePath
     * @return {?}
     */
    PreActivation.prototype.traverseRoutes = function (futureNode, currNode, parentContexts, futurePath) {
        var /** @type {?} */ future = futureNode.value;
        var /** @type {?} */ curr = currNode ? currNode.value : null;
        var /** @type {?} */ context = parentContexts ? parentContexts.getContext(futureNode.value.outlet) : null;
        // reusing the node
        if (curr && future._routeConfig === curr._routeConfig) {
            var /** @type {?} */ shouldRunGuardsAndResolvers = this.shouldRunGuardsAndResolvers(curr, future, /** @type {?} */ ((future._routeConfig)).runGuardsAndResolvers);
            if (shouldRunGuardsAndResolvers) {
                this.canActivateChecks.push(new CanActivate(futurePath));
            }
            else {
                // we need to set the data
                future.data = curr.data;
                future._resolvedData = curr._resolvedData;
            }
            // If we have a component, we need to go through an outlet.
            if (future.component) {
                this.traverseChildRoutes(futureNode, currNode, context ? context.children : null, futurePath);
                // if we have a componentless route, we recurse but keep the same outlet map.
            }
            else {
                this.traverseChildRoutes(futureNode, currNode, parentContexts, futurePath);
            }
            if (shouldRunGuardsAndResolvers) {
                var /** @type {?} */ outlet = ((((context)).outlet));
                this.canDeactivateChecks.push(new CanDeactivate(outlet.component, curr));
            }
        }
        else {
            if (curr) {
                this.deactivateRouteAndItsChildren(currNode, context);
            }
            this.canActivateChecks.push(new CanActivate(futurePath));
            // If we have a component, we need to go through an outlet.
            if (future.component) {
                this.traverseChildRoutes(futureNode, null, context ? context.children : null, futurePath);
                // if we have a componentless route, we recurse but keep the same outlet map.
            }
            else {
                this.traverseChildRoutes(futureNode, null, parentContexts, futurePath);
            }
        }
    };
    /**
     * @param {?} curr
     * @param {?} future
     * @param {?} mode
     * @return {?}
     */
    PreActivation.prototype.shouldRunGuardsAndResolvers = function (curr, future, mode) {
        switch (mode) {
            case 'always':
                return true;
            case 'paramsOrQueryParamsChange':
                return !equalParamsAndUrlSegments(curr, future) ||
                    !shallowEqual(curr.queryParams, future.queryParams);
            case 'paramsChange':
            default:
                return !equalParamsAndUrlSegments(curr, future);
        }
    };
    /**
     * @param {?} route
     * @param {?} context
     * @return {?}
     */
    PreActivation.prototype.deactivateRouteAndItsChildren = function (route, context) {
        var _this = this;
        var /** @type {?} */ children = nodeChildrenAsMap(route);
        var /** @type {?} */ r = route.value;
        forEach(children, function (node, childName) {
            if (!r.component) {
                _this.deactivateRouteAndItsChildren(node, context);
            }
            else if (context) {
                _this.deactivateRouteAndItsChildren(node, context.children.getContext(childName));
            }
            else {
                _this.deactivateRouteAndItsChildren(node, null);
            }
        });
        if (!r.component) {
            this.canDeactivateChecks.push(new CanDeactivate(null, r));
        }
        else if (context && context.outlet && context.outlet.isActivated) {
            this.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, r));
        }
        else {
            this.canDeactivateChecks.push(new CanDeactivate(null, r));
        }
    };
    /**
     * @return {?}
     */
    PreActivation.prototype.runCanDeactivateChecks = function () {
        var _this = this;
        var /** @type {?} */ checks$ = from_1(this.canDeactivateChecks);
        var /** @type {?} */ runningChecks$ = mergeMap_2.call(checks$, function (check) { return _this.runCanDeactivate(check.component, check.route); });
        return every_2.call(runningChecks$, function (result) { return result === true; });
    };
    /**
     * @return {?}
     */
    PreActivation.prototype.runCanActivateChecks = function () {
        var _this = this;
        var /** @type {?} */ checks$ = from_1(this.canActivateChecks);
        var /** @type {?} */ runningChecks$ = concatMap_2.call(checks$, function (check) { return andObservables(from_1([_this.runCanActivateChild(check.path), _this.runCanActivate(check.route)])); });
        return every_2.call(runningChecks$, function (result) { return result === true; });
    };
    /**
     * @param {?} future
     * @return {?}
     */
    PreActivation.prototype.runCanActivate = function (future) {
        var _this = this;
        var /** @type {?} */ canActivate = future._routeConfig ? future._routeConfig.canActivate : null;
        if (!canActivate || canActivate.length === 0)
            return of_1(true);
        var /** @type {?} */ obs = map_2.call(from_1(canActivate), function (c) {
            var /** @type {?} */ guard = _this.getToken(c, future);
            var /** @type {?} */ observable;
            if (guard.canActivate) {
                observable = wrapIntoObservable(guard.canActivate(future, _this.future));
            }
            else {
                observable = wrapIntoObservable(guard(future, _this.future));
            }
            return first_2.call(observable);
        });
        return andObservables(obs);
    };
    /**
     * @param {?} path
     * @return {?}
     */
    PreActivation.prototype.runCanActivateChild = function (path) {
        var _this = this;
        var /** @type {?} */ future = path[path.length - 1];
        var /** @type {?} */ canActivateChildGuards = path.slice(0, path.length - 1)
            .reverse()
            .map(function (p) { return _this.extractCanActivateChild(p); })
            .filter(function (_) { return _ !== null; });
        return andObservables(map_2.call(from_1(canActivateChildGuards), function (d) {
            var /** @type {?} */ obs = map_2.call(from_1(d.guards), function (c) {
                var /** @type {?} */ guard = _this.getToken(c, d.node);
                var /** @type {?} */ observable;
                if (guard.canActivateChild) {
                    observable = wrapIntoObservable(guard.canActivateChild(future, _this.future));
                }
                else {
                    observable = wrapIntoObservable(guard(future, _this.future));
                }
                return first_2.call(observable);
            });
            return andObservables(obs);
        }));
    };
    /**
     * @param {?} p
     * @return {?}
     */
    PreActivation.prototype.extractCanActivateChild = function (p) {
        var /** @type {?} */ canActivateChild = p._routeConfig ? p._routeConfig.canActivateChild : null;
        if (!canActivateChild || canActivateChild.length === 0)
            return null;
        return { node: p, guards: canActivateChild };
    };
    /**
     * @param {?} component
     * @param {?} curr
     * @return {?}
     */
    PreActivation.prototype.runCanDeactivate = function (component, curr) {
        var _this = this;
        var /** @type {?} */ canDeactivate = curr && curr._routeConfig ? curr._routeConfig.canDeactivate : null;
        if (!canDeactivate || canDeactivate.length === 0)
            return of_1(true);
        var /** @type {?} */ canDeactivate$ = mergeMap_2.call(from_1(canDeactivate), function (c) {
            var /** @type {?} */ guard = _this.getToken(c, curr);
            var /** @type {?} */ observable;
            if (guard.canDeactivate) {
                observable =
                    wrapIntoObservable(guard.canDeactivate(component, curr, _this.curr, _this.future));
            }
            else {
                observable = wrapIntoObservable(guard(component, curr, _this.curr, _this.future));
            }
            return first_2.call(observable);
        });
        return every_2.call(canDeactivate$, function (result) { return result === true; });
    };
    /**
     * @param {?} future
     * @return {?}
     */
    PreActivation.prototype.runResolve = function (future) {
        var /** @type {?} */ resolve = future._resolve;
        return map_2.call(this.resolveNode(resolve, future), function (resolvedData) {
            future._resolvedData = resolvedData;
            future.data = Object.assign({}, future.data, inheritedParamsDataResolve(future).resolve);
            return null;
        });
    };
    /**
     * @param {?} resolve
     * @param {?} future
     * @return {?}
     */
    PreActivation.prototype.resolveNode = function (resolve, future) {
        var _this = this;
        var /** @type {?} */ keys = Object.keys(resolve);
        if (keys.length === 0) {
            return of_1({});
        }
        if (keys.length === 1) {
            var /** @type {?} */ key_1 = keys[0];
            return map_2.call(this.getResolver(resolve[key_1], future), function (value) {
                return _a = {}, _a[key_1] = value, _a;
                var _a;
            });
        }
        var /** @type {?} */ data = {};
        var /** @type {?} */ runningResolvers$ = mergeMap_2.call(from_1(keys), function (key) {
            return map_2.call(_this.getResolver(resolve[key], future), function (value) {
                data[key] = value;
                return value;
            });
        });
        return map_2.call(last_2.call(runningResolvers$), function () { return data; });
    };
    /**
     * @param {?} injectionToken
     * @param {?} future
     * @return {?}
     */
    PreActivation.prototype.getResolver = function (injectionToken, future) {
        var /** @type {?} */ resolver = this.getToken(injectionToken, future);
        return resolver.resolve ? wrapIntoObservable(resolver.resolve(future, this.future)) :
            wrapIntoObservable(resolver(future, this.future));
    };
    /**
     * @param {?} token
     * @param {?} snapshot
     * @return {?}
     */
    PreActivation.prototype.getToken = function (token, snapshot) {
        var /** @type {?} */ config = closestLoadedConfig(snapshot);
        var /** @type {?} */ injector = config ? config.module.injector : this.moduleInjector;
        return injector.get(token);
    };
    return PreActivation;
}());
var ActivateRoutes = (function () {
    /**
     * @param {?} routeReuseStrategy
     * @param {?} futureState
     * @param {?} currState
     */
    function ActivateRoutes(routeReuseStrategy, futureState, currState) {
        this.routeReuseStrategy = routeReuseStrategy;
        this.futureState = futureState;
        this.currState = currState;
    }
    /**
     * @param {?} parentContexts
     * @return {?}
     */
    ActivateRoutes.prototype.activate = function (parentContexts) {
        var /** @type {?} */ futureRoot = this.futureState._root;
        var /** @type {?} */ currRoot = this.currState ? this.currState._root : null;
        this.deactivateChildRoutes(futureRoot, currRoot, parentContexts);
        advanceActivatedRoute(this.futureState.root);
        this.activateChildRoutes(futureRoot, currRoot, parentContexts);
    };
    /**
     * @param {?} futureNode
     * @param {?} currNode
     * @param {?} contexts
     * @return {?}
     */
    ActivateRoutes.prototype.deactivateChildRoutes = function (futureNode, currNode, contexts) {
        var _this = this;
        var /** @type {?} */ children = nodeChildrenAsMap(currNode);
        // Recurse on the routes active in the future state to de-activate deeper children
        futureNode.children.forEach(function (futureChild) {
            var /** @type {?} */ childOutletName = futureChild.value.outlet;
            _this.deactivateRoutes(futureChild, children[childOutletName], contexts);
            delete children[childOutletName];
        });
        // De-activate the routes that will not be re-used
        forEach(children, function (v, childName) {
            _this.deactivateRouteAndItsChildren(v, contexts);
        });
    };
    /**
     * @param {?} futureNode
     * @param {?} currNode
     * @param {?} parentContext
     * @return {?}
     */
    ActivateRoutes.prototype.deactivateRoutes = function (futureNode, currNode, parentContext) {
        var /** @type {?} */ future = futureNode.value;
        var /** @type {?} */ curr = currNode ? currNode.value : null;
        if (future === curr) {
            // Reusing the node, check to see if the children need to be de-activated
            if (future.component) {
                // If we have a normal route, we need to go through an outlet.
                var /** @type {?} */ context = parentContext.getContext(future.outlet);
                if (context) {
                    this.deactivateChildRoutes(futureNode, currNode, context.children);
                }
            }
            else {
                // if we have a componentless route, we recurse but keep the same outlet map.
                this.deactivateChildRoutes(futureNode, currNode, parentContext);
            }
        }
        else {
            if (curr) {
                // Deactivate the current route which will not be re-used
                this.deactivateRouteAndItsChildren(currNode, parentContext);
            }
        }
    };
    /**
     * @param {?} route
     * @param {?} parentContexts
     * @return {?}
     */
    ActivateRoutes.prototype.deactivateRouteAndItsChildren = function (route, parentContexts) {
        if (this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {
            this.detachAndStoreRouteSubtree(route, parentContexts);
        }
        else {
            this.deactivateRouteAndOutlet(route, parentContexts);
        }
    };
    /**
     * @param {?} route
     * @param {?} parentContexts
     * @return {?}
     */
    ActivateRoutes.prototype.detachAndStoreRouteSubtree = function (route, parentContexts) {
        var /** @type {?} */ context = parentContexts.getContext(route.value.outlet);
        if (context && context.outlet) {
            var /** @type {?} */ componentRef = context.outlet.detach();
            var /** @type {?} */ contexts = context.children.onOutletDeactivated();
            this.routeReuseStrategy.store(route.value.snapshot, { componentRef: componentRef, route: route, contexts: contexts });
        }
    };
    /**
     * @param {?} route
     * @param {?} parentContexts
     * @return {?}
     */
    ActivateRoutes.prototype.deactivateRouteAndOutlet = function (route, parentContexts) {
        var _this = this;
        var /** @type {?} */ context = parentContexts.getContext(route.value.outlet);
        if (context) {
            var /** @type {?} */ children = nodeChildrenAsMap(route);
            var /** @type {?} */ contexts_1 = route.value.component ? context.children : parentContexts;
            forEach(children, function (v, k) { _this.deactivateRouteAndItsChildren(v, contexts_1); });
            if (context.outlet) {
                // Destroy the component
                context.outlet.deactivate();
                // Destroy the contexts for all the outlets that were in the component
                context.children.onOutletDeactivated();
            }
        }
    };
    /**
     * @param {?} futureNode
     * @param {?} currNode
     * @param {?} contexts
     * @return {?}
     */
    ActivateRoutes.prototype.activateChildRoutes = function (futureNode, currNode, contexts) {
        var _this = this;
        var /** @type {?} */ children = nodeChildrenAsMap(currNode);
        futureNode.children.forEach(function (c) { _this.activateRoutes(c, children[c.value.outlet], contexts); });
    };
    /**
     * @param {?} futureNode
     * @param {?} currNode
     * @param {?} parentContexts
     * @return {?}
     */
    ActivateRoutes.prototype.activateRoutes = function (futureNode, currNode, parentContexts) {
        var /** @type {?} */ future = futureNode.value;
        var /** @type {?} */ curr = currNode ? currNode.value : null;
        advanceActivatedRoute(future);
        // reusing the node
        if (future === curr) {
            if (future.component) {
                // If we have a normal route, we need to go through an outlet.
                var /** @type {?} */ context = parentContexts.getOrCreateContext(future.outlet);
                this.activateChildRoutes(futureNode, currNode, context.children);
            }
            else {
                // if we have a componentless route, we recurse but keep the same outlet map.
                this.activateChildRoutes(futureNode, currNode, parentContexts);
            }
        }
        else {
            if (future.component) {
                // if we have a normal route, we need to place the component into the outlet and recurse.
                var /** @type {?} */ context = parentContexts.getOrCreateContext(future.outlet);
                if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {
                    var /** @type {?} */ stored = ((this.routeReuseStrategy.retrieve(future.snapshot)));
                    this.routeReuseStrategy.store(future.snapshot, null);
                    context.children.onOutletReAttached(stored.contexts);
                    context.attachRef = stored.componentRef;
                    context.route = stored.route.value;
                    if (context.outlet) {
                        // Attach right away when the outlet has already been instantiated
                        // Otherwise attach from `RouterOutlet.ngOnInit` when it is instantiated
                        context.outlet.attach(stored.componentRef, stored.route.value);
                    }
                    advanceActivatedRouteNodeAndItsChildren(stored.route);
                }
                else {
                    var /** @type {?} */ config = parentLoadedConfig(future.snapshot);
                    var /** @type {?} */ cmpFactoryResolver = config ? config.module.componentFactoryResolver : null;
                    context.route = future;
                    context.resolver = cmpFactoryResolver;
                    if (context.outlet) {
                        // Activate the outlet when it has already been instantiated
                        // Otherwise it will get activated from its `ngOnInit` when instantiated
                        context.outlet.activateWith(future, cmpFactoryResolver);
                    }
                    this.activateChildRoutes(futureNode, null, context.children);
                }
            }
            else {
                // if we have a componentless route, we recurse but keep the same outlet map.
                this.activateChildRoutes(futureNode, null, parentContexts);
            }
        }
    };
    return ActivateRoutes;
}());
/**
 * @param {?} node
 * @return {?}
 */
function advanceActivatedRouteNodeAndItsChildren(node) {
    advanceActivatedRoute(node.value);
    node.children.forEach(advanceActivatedRouteNodeAndItsChildren);
}
/**
 * @param {?} snapshot
 * @return {?}
 */
function parentLoadedConfig(snapshot) {
    for (var /** @type {?} */ s = snapshot.parent; s; s = s.parent) {
        var /** @type {?} */ route = s._routeConfig;
        if (route && route._loadedConfig)
            return route._loadedConfig;
        if (route && route.component)
            return null;
    }
    return null;
}
/**
 * @param {?} snapshot
 * @return {?}
 */
function closestLoadedConfig(snapshot) {
    if (!snapshot)
        return null;
    for (var /** @type {?} */ s = snapshot.parent; s; s = s.parent) {
        var /** @type {?} */ route = s._routeConfig;
        if (route && route._loadedConfig)
            return route._loadedConfig;
    }
    return null;
}
/**
 * @template T
 * @param {?} node
 * @return {?}
 */
function nodeChildrenAsMap(node) {
    var /** @type {?} */ map$$1 = {};
    if (node) {
        node.children.forEach(function (child) { return map$$1[child.value.outlet] = child; });
    }
    return map$$1;
}
/**
 * @param {?} commands
 * @return {?}
 */
function validateCommands(commands) {
    for (var /** @type {?} */ i = 0; i < commands.length; i++) {
        var /** @type {?} */ cmd = commands[i];
        if (cmd == null) {
            throw new Error("The requested path contains " + cmd + " segment at index " + i);
        }
    }
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@whatItDoes Lets you link to specific parts of your app.
 *
 * \@howToUse
 *
 * Consider the following route configuration:
 * `[{ path: 'user/:name', component: UserCmp }]`
 *
 * When linking to this `user/:name` route, you can write:
 * `<a routerLink='/user/bob'>link to user component</a>`
 *
 * \@description
 *
 * The RouterLink directives let you link to specific parts of your app.
 *
 * When the link is static, you can use the directive as follows:
 * `<a routerLink="/user/bob">link to user component</a>`
 *
 * If you use dynamic values to generate the link, you can pass an array of path
 * segments, followed by the params for each segment.
 *
 * For instance `['/team', teamId, 'user', userName, {details: true}]`
 * means that we want to generate a link to `/team/11/user/bob;details=true`.
 *
 * Multiple static segments can be merged into one
 * (e.g., `['/team/11/user', userName, {details: true}]`).
 *
 * The first segment name can be prepended with `/`, `./`, or `../`:
 * * If the first segment begins with `/`, the router will look up the route from the root of the
 *   app.
 * * If the first segment begins with `./`, or doesn't begin with a slash, the router will
 *   instead look in the children of the current activated route.
 * * And if the first segment begins with `../`, the router will go up one level.
 *
 * You can set query params and fragment as follows:
 *
 * ```
 * <a [routerLink]="['/user/bob']" [queryParams]="{debug: true}" fragment="education">
 *   link to user component
 * </a>
 * ```
 * RouterLink will use these to generate this link: `/user/bob#education?debug=true`.
 *
 * (Deprecated in v4.0.0 use `queryParamsHandling` instead) You can also tell the
 * directive to preserve the current query params and fragment:
 *
 * ```
 * <a [routerLink]="['/user/bob']" preserveQueryParams preserveFragment>
 *   link to user component
 * </a>
 * ```
 *
 * You can tell the directive to how to handle queryParams, available options are:
 *  - 'merge' merge the queryParams into the current queryParams
 *  - 'preserve' prserve the current queryParams
 *  - default / '' use the queryParams only
 *  same options for {\@link NavigationExtras#queryParamsHandling}
 *
 * ```
 * <a [routerLink]="['/user/bob']" [queryParams]="{debug: true}" queryParamsHandling="merge">
 *   link to user component
 * </a>
 * ```
 *
 * The router link directive always treats the provided input as a delta to the current url.
 *
 * For instance, if the current url is `/user/(box//aux:team)`.
 *
 * Then the following link `<a [routerLink]="['/user/jim']">Jim</a>` will generate the link
 * `/user/(jim//aux:team)`.
 *
 * \@ngModule RouterModule
 *
 * See {\@link Router#createUrlTree} for more information.
 *
 * \@stable
 */
var RouterLink = (function () {
    /**
     * @param {?} router
     * @param {?} route
     * @param {?} tabIndex
     * @param {?} renderer
     * @param {?} el
     */
    function RouterLink(router, route, tabIndex, renderer, el) {
        this.router = router;
        this.route = route;
        this.commands = [];
        if (tabIndex == null) {
            renderer.setAttribute(el.nativeElement, 'tabindex', '0');
        }
    }
    Object.defineProperty(RouterLink.prototype, "routerLink", {
        /**
         * @param {?} commands
         * @return {?}
         */
        set: function (commands) {
            if (commands != null) {
                this.commands = Array.isArray(commands) ? commands : [commands];
            }
            else {
                this.commands = [];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RouterLink.prototype, "preserveQueryParams", {
        /**
         * @deprecated 4.0.0 use `queryParamsHandling` instead.
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            if (isDevMode() && (console) && (console.warn)) {
                console.warn('preserveQueryParams is deprecated!, use queryParamsHandling instead.');
            }
            this.preserve = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    RouterLink.prototype.onClick = function () {
        var /** @type {?} */ extras = {
            skipLocationChange: attrBoolValue(this.skipLocationChange),
            replaceUrl: attrBoolValue(this.replaceUrl),
        };
        this.router.navigateByUrl(this.urlTree, extras);
        return true;
    };
    Object.defineProperty(RouterLink.prototype, "urlTree", {
        /**
         * @return {?}
         */
        get: function () {
            return this.router.createUrlTree(this.commands, {
                relativeTo: this.route,
                queryParams: this.queryParams,
                fragment: this.fragment,
                preserveQueryParams: attrBoolValue(this.preserve),
                queryParamsHandling: this.queryParamsHandling,
                preserveFragment: attrBoolValue(this.preserveFragment),
            });
        },
        enumerable: true,
        configurable: true
    });
    return RouterLink;
}());
RouterLink.decorators = [
    { type: Directive, args: [{ selector: ':not(a)[routerLink]' },] },
];
/**
 * @nocollapse
 */
RouterLink.ctorParameters = function () { return [
    { type: Router, },
    { type: ActivatedRoute, },
    { type: undefined, decorators: [{ type: Attribute, args: ['tabindex',] },] },
    { type: Renderer2, },
    { type: ElementRef, },
]; };
RouterLink.propDecorators = {
    'queryParams': [{ type: Input },],
    'fragment': [{ type: Input },],
    'queryParamsHandling': [{ type: Input },],
    'preserveFragment': [{ type: Input },],
    'skipLocationChange': [{ type: Input },],
    'replaceUrl': [{ type: Input },],
    'routerLink': [{ type: Input },],
    'preserveQueryParams': [{ type: Input },],
    'onClick': [{ type: HostListener, args: ['click',] },],
};
/**
 * \@whatItDoes Lets you link to specific parts of your app.
 *
 * See {\@link RouterLink} for more information.
 *
 * \@ngModule RouterModule
 *
 * \@stable
 */
var RouterLinkWithHref = (function () {
    /**
     * @param {?} router
     * @param {?} route
     * @param {?} locationStrategy
     */
    function RouterLinkWithHref(router, route, locationStrategy) {
        var _this = this;
        this.router = router;
        this.route = route;
        this.locationStrategy = locationStrategy;
        this.commands = [];
        this.subscription = router.events.subscribe(function (s) {
            if (s instanceof NavigationEnd) {
                _this.updateTargetUrlAndHref();
            }
        });
    }
    Object.defineProperty(RouterLinkWithHref.prototype, "routerLink", {
        /**
         * @param {?} commands
         * @return {?}
         */
        set: function (commands) {
            if (commands != null) {
                this.commands = Array.isArray(commands) ? commands : [commands];
            }
            else {
                this.commands = [];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RouterLinkWithHref.prototype, "preserveQueryParams", {
        /**
         * @param {?} value
         * @return {?}
         */
        set: function (value) {
            if (isDevMode() && (console) && (console.warn)) {
                console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');
            }
            this.preserve = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    RouterLinkWithHref.prototype.ngOnChanges = function (changes) { this.updateTargetUrlAndHref(); };
    /**
     * @return {?}
     */
    RouterLinkWithHref.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };
    /**
     * @param {?} button
     * @param {?} ctrlKey
     * @param {?} metaKey
     * @param {?} shiftKey
     * @return {?}
     */
    RouterLinkWithHref.prototype.onClick = function (button, ctrlKey, metaKey, shiftKey) {
        if (button !== 0 || ctrlKey || metaKey || shiftKey) {
            return true;
        }
        if (typeof this.target === 'string' && this.target != '_self') {
            return true;
        }
        var /** @type {?} */ extras = {
            skipLocationChange: attrBoolValue(this.skipLocationChange),
            replaceUrl: attrBoolValue(this.replaceUrl),
        };
        this.router.navigateByUrl(this.urlTree, extras);
        return false;
    };
    /**
     * @return {?}
     */
    RouterLinkWithHref.prototype.updateTargetUrlAndHref = function () {
        this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));
    };
    Object.defineProperty(RouterLinkWithHref.prototype, "urlTree", {
        /**
         * @return {?}
         */
        get: function () {
            return this.router.createUrlTree(this.commands, {
                relativeTo: this.route,
                queryParams: this.queryParams,
                fragment: this.fragment,
                preserveQueryParams: attrBoolValue(this.preserve),
                queryParamsHandling: this.queryParamsHandling,
                preserveFragment: attrBoolValue(this.preserveFragment),
            });
        },
        enumerable: true,
        configurable: true
    });
    return RouterLinkWithHref;
}());
RouterLinkWithHref.decorators = [
    { type: Directive, args: [{ selector: 'a[routerLink]' },] },
];
/**
 * @nocollapse
 */
RouterLinkWithHref.ctorParameters = function () { return [
    { type: Router, },
    { type: ActivatedRoute, },
    { type: LocationStrategy, },
]; };
RouterLinkWithHref.propDecorators = {
    'target': [{ type: HostBinding, args: ['attr.target',] }, { type: Input },],
    'queryParams': [{ type: Input },],
    'fragment': [{ type: Input },],
    'queryParamsHandling': [{ type: Input },],
    'preserveFragment': [{ type: Input },],
    'skipLocationChange': [{ type: Input },],
    'replaceUrl': [{ type: Input },],
    'href': [{ type: HostBinding },],
    'routerLink': [{ type: Input },],
    'preserveQueryParams': [{ type: Input },],
    'onClick': [{ type: HostListener, args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey', '$event.shiftKey'],] },],
};
/**
 * @param {?} s
 * @return {?}
 */
function attrBoolValue(s) {
    return s === '' || !!s;
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@whatItDoes Lets you add a CSS class to an element when the link's route becomes active.
 *
 * \@howToUse
 *
 * ```
 * <a routerLink="/user/bob" routerLinkActive="active-link">Bob</a>
 * ```
 *
 * \@description
 *
 * The RouterLinkActive directive lets you add a CSS class to an element when the link's route
 * becomes active.
 *
 * Consider the following example:
 *
 * ```
 * <a routerLink="/user/bob" routerLinkActive="active-link">Bob</a>
 * ```
 *
 * When the url is either '/user' or '/user/bob', the active-link class will
 * be added to the `a` tag. If the url changes, the class will be removed.
 *
 * You can set more than one class, as follows:
 *
 * ```
 * <a routerLink="/user/bob" routerLinkActive="class1 class2">Bob</a>
 * <a routerLink="/user/bob" [routerLinkActive]="['class1', 'class2']">Bob</a>
 * ```
 *
 * You can configure RouterLinkActive by passing `exact: true`. This will add the classes
 * only when the url matches the link exactly.
 *
 * ```
 * <a routerLink="/user/bob" routerLinkActive="active-link" [routerLinkActiveOptions]="{exact:
 * true}">Bob</a>
 * ```
 *
 * You can assign the RouterLinkActive instance to a template variable and directly check
 * the `isActive` status.
 * ```
 * <a routerLink="/user/bob" routerLinkActive #rla="routerLinkActive">
 *   Bob {{ rla.isActive ? '(already open)' : ''}}
 * </a>
 * ```
 *
 * Finally, you can apply the RouterLinkActive directive to an ancestor of a RouterLink.
 *
 * ```
 * <div routerLinkActive="active-link" [routerLinkActiveOptions]="{exact: true}">
 *   <a routerLink="/user/jim">Jim</a>
 *   <a routerLink="/user/bob">Bob</a>
 * </div>
 * ```
 *
 * This will set the active-link class on the div tag if the url is either '/user/jim' or
 * '/user/bob'.
 *
 * \@ngModule RouterModule
 *
 * \@stable
 */
var RouterLinkActive = (function () {
    /**
     * @param {?} router
     * @param {?} element
     * @param {?} renderer
     * @param {?} cdr
     */
    function RouterLinkActive(router, element, renderer, cdr) {
        var _this = this;
        this.router = router;
        this.element = element;
        this.renderer = renderer;
        this.cdr = cdr;
        this.classes = [];
        this.active = false;
        this.routerLinkActiveOptions = { exact: false };
        this.subscription = router.events.subscribe(function (s) {
            if (s instanceof NavigationEnd) {
                _this.update();
            }
        });
    }
    Object.defineProperty(RouterLinkActive.prototype, "isActive", {
        /**
         * @return {?}
         */
        get: function () { return this.active; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    RouterLinkActive.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.links.changes.subscribe(function (_) { return _this.update(); });
        this.linksWithHrefs.changes.subscribe(function (_) { return _this.update(); });
        this.update();
    };
    Object.defineProperty(RouterLinkActive.prototype, "routerLinkActive", {
        /**
         * @param {?} data
         * @return {?}
         */
        set: function (data) {
            var /** @type {?} */ classes = Array.isArray(data) ? data : data.split(' ');
            this.classes = classes.filter(function (c) { return !!c; });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    RouterLinkActive.prototype.ngOnChanges = function (changes) { this.update(); };
    /**
     * @return {?}
     */
    RouterLinkActive.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };
    /**
     * @return {?}
     */
    RouterLinkActive.prototype.update = function () {
        var _this = this;
        if (!this.links || !this.linksWithHrefs || !this.router.navigated)
            return;
        var /** @type {?} */ hasActiveLinks = this.hasActiveLinks();
        // react only when status has changed to prevent unnecessary dom updates
        if (this.active !== hasActiveLinks) {
            this.classes.forEach(function (c) {
                if (hasActiveLinks) {
                    _this.renderer.addClass(_this.element.nativeElement, c);
                }
                else {
                    _this.renderer.removeClass(_this.element.nativeElement, c);
                }
            });
            Promise.resolve(hasActiveLinks).then(function (active) { return _this.active = active; });
        }
    };
    /**
     * @param {?} router
     * @return {?}
     */
    RouterLinkActive.prototype.isLinkActive = function (router) {
        var _this = this;
        return function (link) { return router.isActive(link.urlTree, _this.routerLinkActiveOptions.exact); };
    };
    /**
     * @return {?}
     */
    RouterLinkActive.prototype.hasActiveLinks = function () {
        return this.links.some(this.isLinkActive(this.router)) ||
            this.linksWithHrefs.some(this.isLinkActive(this.router));
    };
    return RouterLinkActive;
}());
RouterLinkActive.decorators = [
    { type: Directive, args: [{
                selector: '[routerLinkActive]',
                exportAs: 'routerLinkActive',
            },] },
];
/**
 * @nocollapse
 */
RouterLinkActive.ctorParameters = function () { return [
    { type: Router, },
    { type: ElementRef, },
    { type: Renderer2, },
    { type: ChangeDetectorRef, },
]; };
RouterLinkActive.propDecorators = {
    'links': [{ type: ContentChildren, args: [RouterLink, { descendants: true },] },],
    'linksWithHrefs': [{ type: ContentChildren, args: [RouterLinkWithHref, { descendants: true },] },],
    'routerLinkActiveOptions': [{ type: Input },],
    'routerLinkActive': [{ type: Input },],
};
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Store contextual information about a {\@link RouterOutlet}
 *
 * \@stable
 */
var OutletContext = (function () {
    function OutletContext() {
        this.outlet = null;
        this.route = null;
        this.resolver = null;
        this.children = new ChildrenOutletContexts();
        this.attachRef = null;
    }
    return OutletContext;
}());
/**
 * Store contextual information about the children (= nested) {\@link RouterOutlet}
 *
 * \@stable
 */
var ChildrenOutletContexts = (function () {
    function ChildrenOutletContexts() {
        this.contexts = new Map();
    }
    /**
     * Called when a `RouterOutlet` directive is instantiated
     * @param {?} childName
     * @param {?} outlet
     * @return {?}
     */
    ChildrenOutletContexts.prototype.onChildOutletCreated = function (childName, outlet) {
        var /** @type {?} */ context = this.getOrCreateContext(childName);
        context.outlet = outlet;
        this.contexts.set(childName, context);
    };
    /**
     * Called when a `RouterOutlet` directive is destroyed.
     * We need to keep the context as the outlet could be destroyed inside a NgIf and might be
     * re-created later.
     * @param {?} childName
     * @return {?}
     */
    ChildrenOutletContexts.prototype.onChildOutletDestroyed = function (childName) {
        var /** @type {?} */ context = this.getContext(childName);
        if (context) {
            context.outlet = null;
        }
    };
    /**
     * Called when the corresponding route is deactivated during navigation.
     * Because the component get destroyed, all children outlet are destroyed.
     * @return {?}
     */
    ChildrenOutletContexts.prototype.onOutletDeactivated = function () {
        var /** @type {?} */ contexts = this.contexts;
        this.contexts = new Map();
        return contexts;
    };
    /**
     * @param {?} contexts
     * @return {?}
     */
    ChildrenOutletContexts.prototype.onOutletReAttached = function (contexts) { this.contexts = contexts; };
    /**
     * @param {?} childName
     * @return {?}
     */
    ChildrenOutletContexts.prototype.getOrCreateContext = function (childName) {
        var /** @type {?} */ context = this.getContext(childName);
        if (!context) {
            context = new OutletContext();
            this.contexts.set(childName, context);
        }
        return context;
    };
    /**
     * @param {?} childName
     * @return {?}
     */
    ChildrenOutletContexts.prototype.getContext = function (childName) { return this.contexts.get(childName) || null; };
    return ChildrenOutletContexts;
}());
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@whatItDoes Acts as a placeholder that Angular dynamically fills based on the current router
 * state.
 *
 * \@howToUse
 *
 * ```
 * <router-outlet></router-outlet>
 * <router-outlet name='left'></router-outlet>
 * <router-outlet name='right'></router-outlet>
 * ```
 *
 * A router outlet will emit an activate event any time a new component is being instantiated,
 * and a deactivate event when it is being destroyed.
 *
 * ```
 * <router-outlet
 *   (activate)='onActivate($event)'
 *   (deactivate)='onDeactivate($event)'></router-outlet>
 * ```
 * \@ngModule RouterModule
 *
 * \@stable
 */
var RouterOutlet = (function () {
    /**
     * @param {?} parentContexts
     * @param {?} location
     * @param {?} resolver
     * @param {?} name
     * @param {?} changeDetector
     */
    function RouterOutlet(parentContexts, location, resolver, name, changeDetector) {
        this.parentContexts = parentContexts;
        this.location = location;
        this.resolver = resolver;
        this.changeDetector = changeDetector;
        this.activated = null;
        this._activatedRoute = null;
        this.activateEvents = new EventEmitter();
        this.deactivateEvents = new EventEmitter();
        this.name = name || PRIMARY_OUTLET;
        parentContexts.onChildOutletCreated(this.name, this);
    }
    /**
     * @return {?}
     */
    RouterOutlet.prototype.ngOnDestroy = function () { this.parentContexts.onChildOutletDestroyed(this.name); };
    /**
     * @return {?}
     */
    RouterOutlet.prototype.ngOnInit = function () {
        if (!this.activated) {
            // If the outlet was not instantiated at the time the route got activated we need to populate
            // the outlet when it is initialized (ie inside a NgIf)
            var /** @type {?} */ context = this.parentContexts.getContext(this.name);
            if (context && context.route) {
                if (context.attachRef) {
                    // `attachRef` is populated when there is an existing component to mount
                    this.attach(context.attachRef, context.route);
                }
                else {
                    // otherwise the component defined in the configuration is created
                    this.activateWith(context.route, context.resolver || null);
                }
            }
        }
    };
    Object.defineProperty(RouterOutlet.prototype, "locationInjector", {
        /**
         * @deprecated since v4 *
         * @return {?}
         */
        get: function () { return this.location.injector; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RouterOutlet.prototype, "locationFactoryResolver", {
        /**
         * @deprecated since v4 *
         * @return {?}
         */
        get: function () { return this.resolver; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RouterOutlet.prototype, "isActivated", {
        /**
         * @return {?}
         */
        get: function () { return !!this.activated; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RouterOutlet.prototype, "component", {
        /**
         * @return {?}
         */
        get: function () {
            if (!this.activated)
                throw new Error('Outlet is not activated');
            return this.activated.instance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RouterOutlet.prototype, "activatedRoute", {
        /**
         * @return {?}
         */
        get: function () {
            if (!this.activated)
                throw new Error('Outlet is not activated');
            return (this._activatedRoute);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RouterOutlet.prototype, "activatedRouteData", {
        /**
         * @return {?}
         */
        get: function () {
            if (this._activatedRoute) {
                return this._activatedRoute.snapshot.data;
            }
            return {};
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Called when the `RouteReuseStrategy` instructs to detach the subtree
     * @return {?}
     */
    RouterOutlet.prototype.detach = function () {
        if (!this.activated)
            throw new Error('Outlet is not activated');
        this.location.detach();
        var /** @type {?} */ cmp = this.activated;
        this.activated = null;
        this._activatedRoute = null;
        return cmp;
    };
    /**
     * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree
     * @param {?} ref
     * @param {?} activatedRoute
     * @return {?}
     */
    RouterOutlet.prototype.attach = function (ref, activatedRoute) {
        this.activated = ref;
        this._activatedRoute = activatedRoute;
        this.location.insert(ref.hostView);
    };
    /**
     * @return {?}
     */
    RouterOutlet.prototype.deactivate = function () {
        if (this.activated) {
            var /** @type {?} */ c = this.component;
            this.activated.destroy();
            this.activated = null;
            this._activatedRoute = null;
            this.deactivateEvents.emit(c);
        }
    };
    /**
     * @param {?} activatedRoute
     * @param {?} resolver
     * @return {?}
     */
    RouterOutlet.prototype.activateWith = function (activatedRoute, resolver) {
        if (this.isActivated) {
            throw new Error('Cannot activate an already activated outlet');
        }
        this._activatedRoute = activatedRoute;
        var /** @type {?} */ snapshot = activatedRoute._futureSnapshot;
        var /** @type {?} */ component = (((snapshot._routeConfig)).component);
        resolver = resolver || this.resolver;
        var /** @type {?} */ factory = resolver.resolveComponentFactory(component);
        var /** @type {?} */ childContexts = this.parentContexts.getOrCreateContext(this.name).children;
        var /** @type {?} */ injector = new OutletInjector(activatedRoute, childContexts, this.location.injector);
        this.activated = this.location.createComponent(factory, this.location.length, injector);
        // Calling `markForCheck` to make sure we will run the change detection when the
        // `RouterOutlet` is inside a `ChangeDetectionStrategy.OnPush` component.
        this.changeDetector.markForCheck();
        this.activateEvents.emit(this.activated.instance);
    };
    return RouterOutlet;
}());
RouterOutlet.decorators = [
    { type: Directive, args: [{ selector: 'router-outlet', exportAs: 'outlet' },] },
];
/**
 * @nocollapse
 */
RouterOutlet.ctorParameters = function () { return [
    { type: ChildrenOutletContexts, },
    { type: ViewContainerRef, },
    { type: ComponentFactoryResolver, },
    { type: undefined, decorators: [{ type: Attribute, args: ['name',] },] },
    { type: ChangeDetectorRef, },
]; };
RouterOutlet.propDecorators = {
    'activateEvents': [{ type: Output, args: ['activate',] },],
    'deactivateEvents': [{ type: Output, args: ['deactivate',] },],
};
var OutletInjector = (function () {
    /**
     * @param {?} route
     * @param {?} childContexts
     * @param {?} parent
     */
    function OutletInjector(route, childContexts, parent) {
        this.route = route;
        this.childContexts = childContexts;
        this.parent = parent;
    }
    /**
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */
    OutletInjector.prototype.get = function (token, notFoundValue) {
        if (token === ActivatedRoute) {
            return this.route;
        }
        if (token === ChildrenOutletContexts) {
            return this.childContexts;
        }
        return this.parent.get(token, notFoundValue);
    };
    return OutletInjector;
}());
/**
*@license
*Copyright Google Inc. All Rights Reserved.
*
*Use of this source code is governed by an MIT-style license that can be
*found in the LICENSE file at https://angular.io/license
*/
/**
 * \@whatItDoes Provides a preloading strategy.
 *
 * \@experimental
 * @abstract
 */
var PreloadingStrategy = (function () {
    function PreloadingStrategy() {
    }
    /**
     * @abstract
     * @param {?} route
     * @param {?} fn
     * @return {?}
     */
    PreloadingStrategy.prototype.preload = function (route, fn) { };
    return PreloadingStrategy;
}());
/**
 * \@whatItDoes Provides a preloading strategy that preloads all modules as quickly as possible.
 *
 * \@howToUse
 *
 * ```
 * RouteModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})
 * ```
 *
 * \@experimental
 */
var PreloadAllModules = (function () {
    function PreloadAllModules() {
    }
    /**
     * @param {?} route
     * @param {?} fn
     * @return {?}
     */
    PreloadAllModules.prototype.preload = function (route, fn) {
        return _catch_2.call(fn(), function () { return of_1(null); });
    };
    return PreloadAllModules;
}());
/**
 * \@whatItDoes Provides a preloading strategy that does not preload any modules.
 *
 * \@description
 *
 * This strategy is enabled by default.
 *
 * \@experimental
 */
var NoPreloading = (function () {
    function NoPreloading() {
    }
    /**
     * @param {?} route
     * @param {?} fn
     * @return {?}
     */
    NoPreloading.prototype.preload = function (route, fn) { return of_1(null); };
    return NoPreloading;
}());
/**
 * The preloader optimistically loads all router configurations to
 * make navigations into lazily-loaded sections of the application faster.
 *
 * The preloader runs in the background. When the router bootstraps, the preloader
 * starts listening to all navigation events. After every such event, the preloader
 * will check if any configurations can be loaded lazily.
 *
 * If a route is protected by `canLoad` guards, the preloaded will not load it.
 *
 * \@stable
 */
var RouterPreloader = (function () {
    /**
     * @param {?} router
     * @param {?} moduleLoader
     * @param {?} compiler
     * @param {?} injector
     * @param {?} preloadingStrategy
     */
    function RouterPreloader(router, moduleLoader, compiler, injector, preloadingStrategy) {
        this.router = router;
        this.injector = injector;
        this.preloadingStrategy = preloadingStrategy;
        var onStartLoad = function (r) { return router.triggerEvent(new RouteConfigLoadStart(r)); };
        var onEndLoad = function (r) { return router.triggerEvent(new RouteConfigLoadEnd(r)); };
        this.loader = new RouterConfigLoader(moduleLoader, compiler, onStartLoad, onEndLoad);
    }
    
    /**
     * @return {?}
     */
    RouterPreloader.prototype.setUpPreloading = function () {
        var _this = this;
        var /** @type {?} */ navigations$ = filter_2.call(this.router.events, function (e) { return e instanceof NavigationEnd; });
        this.subscription = concatMap_2.call(navigations$, function () { return _this.preload(); }).subscribe(function () { });
    };
    /**
     * @return {?}
     */
    RouterPreloader.prototype.preload = function () {
        var /** @type {?} */ ngModule = this.injector.get(NgModuleRef);
        return this.processRoutes(ngModule, this.router.config);
    };
    /**
     * @return {?}
     */
    RouterPreloader.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };
    /**
     * @param {?} ngModule
     * @param {?} routes
     * @return {?}
     */
    RouterPreloader.prototype.processRoutes = function (ngModule, routes) {
        var /** @type {?} */ res = [];
        for (var _i = 0, routes_5 = routes; _i < routes_5.length; _i++) {
            var route = routes_5[_i];
            // we already have the config loaded, just recurse
            if (route.loadChildren && !route.canLoad && route._loadedConfig) {
                var /** @type {?} */ childConfig = route._loadedConfig;
                res.push(this.processRoutes(childConfig.module, childConfig.routes));
                // no config loaded, fetch the config
            }
            else if (route.loadChildren && !route.canLoad) {
                res.push(this.preloadConfig(ngModule, route));
                // recurse into children
            }
            else if (route.children) {
                res.push(this.processRoutes(ngModule, route.children));
            }
        }
        return mergeAll_2.call(from_1(res));
    };
    /**
     * @param {?} ngModule
     * @param {?} route
     * @return {?}
     */
    RouterPreloader.prototype.preloadConfig = function (ngModule, route) {
        var _this = this;
        return this.preloadingStrategy.preload(route, function () {
            var /** @type {?} */ loaded$ = _this.loader.load(ngModule.injector, route);
            return mergeMap_2.call(loaded$, function (config) {
                route._loadedConfig = config;
                return _this.processRoutes(config.module, config.routes);
            });
        });
    };
    return RouterPreloader;
}());
RouterPreloader.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
RouterPreloader.ctorParameters = function () { return [
    { type: Router, },
    { type: NgModuleFactoryLoader, },
    { type: Compiler, },
    { type: Injector, },
    { type: PreloadingStrategy, },
]; };
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@whatItDoes Contains a list of directives
 * \@stable
 */
var ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive];
/**
 * \@whatItDoes Is used in DI to configure the router.
 * \@stable
 */
var ROUTER_CONFIGURATION = new InjectionToken('ROUTER_CONFIGURATION');
/**
 * \@docsNotRequired
 */
var ROUTER_FORROOT_GUARD = new InjectionToken('ROUTER_FORROOT_GUARD');
var ROUTER_PROVIDERS = [
    Location,
    { provide: UrlSerializer, useClass: DefaultUrlSerializer },
    {
        provide: Router,
        useFactory: setupRouter,
        deps: [
            ApplicationRef, UrlSerializer, ChildrenOutletContexts, Location, Injector,
            NgModuleFactoryLoader, Compiler, ROUTES, ROUTER_CONFIGURATION,
            [UrlHandlingStrategy, new Optional()], [RouteReuseStrategy, new Optional()]
        ]
    },
    ChildrenOutletContexts,
    { provide: ActivatedRoute, useFactory: rootRoute, deps: [Router] },
    { provide: NgModuleFactoryLoader, useClass: SystemJsNgModuleLoader },
    RouterPreloader,
    NoPreloading,
    PreloadAllModules,
    { provide: ROUTER_CONFIGURATION, useValue: { enableTracing: false } },
];
/**
 * @return {?}
 */
function routerNgProbeToken() {
    return new NgProbeToken('Router', Router);
}
/**
 * \@whatItDoes Adds router directives and providers.
 *
 * \@howToUse
 *
 * RouterModule can be imported multiple times: once per lazily-loaded bundle.
 * Since the router deals with a global shared resource--location, we cannot have
 * more than one router service active.
 *
 * That is why there are two ways to create the module: `RouterModule.forRoot` and
 * `RouterModule.forChild`.
 *
 * * `forRoot` creates a module that contains all the directives, the given routes, and the router
 *   service itself.
 * * `forChild` creates a module that contains all the directives and the given routes, but does not
 *   include the router service.
 *
 * When registered at the root, the module should be used as follows
 *
 * ```
 * \@NgModule({
 *   imports: [RouterModule.forRoot(ROUTES)]
 * })
 * class MyNgModule {}
 * ```
 *
 * For submodules and lazy loaded submodules the module should be used as follows:
 *
 * ```
 * \@NgModule({
 *   imports: [RouterModule.forChild(ROUTES)]
 * })
 * class MyNgModule {}
 * ```
 *
 * \@description
 *
 * Managing state transitions is one of the hardest parts of building applications. This is
 * especially true on the web, where you also need to ensure that the state is reflected in the URL.
 * In addition, we often want to split applications into multiple bundles and load them on demand.
 * Doing this transparently is not trivial.
 *
 * The Angular router solves these problems. Using the router, you can declaratively specify
 * application states, manage state transitions while taking care of the URL, and load bundles on
 * demand.
 *
 * [Read this developer guide](https://angular.io/docs/ts/latest/guide/router.html) to get an
 * overview of how the router should be used.
 *
 * \@stable
 */
var RouterModule = (function () {
    /**
     * @param {?} guard
     * @param {?} router
     */
    function RouterModule(guard, router) {
    }
    /**
     * Creates a module with all the router providers and directives. It also optionally sets up an
     * application listener to perform an initial navigation.
     *
     * Options:
     * * `enableTracing` makes the router log all its internal events to the console.
     * * `useHash` enables the location strategy that uses the URL fragment instead of the history
     * API.
     * * `initialNavigation` disables the initial navigation.
     * * `errorHandler` provides a custom error handler.
     * @param {?} routes
     * @param {?=} config
     * @return {?}
     */
    RouterModule.forRoot = function (routes, config) {
        return {
            ngModule: RouterModule,
            providers: [
                ROUTER_PROVIDERS,
                provideRoutes(routes),
                {
                    provide: ROUTER_FORROOT_GUARD,
                    useFactory: provideForRootGuard,
                    deps: [[Router, new Optional(), new SkipSelf()]]
                },
                { provide: ROUTER_CONFIGURATION, useValue: config ? config : {} },
                {
                    provide: LocationStrategy,
                    useFactory: provideLocationStrategy,
                    deps: [
                        PlatformLocation, [new Inject(APP_BASE_HREF), new Optional()], ROUTER_CONFIGURATION
                    ]
                },
                {
                    provide: PreloadingStrategy,
                    useExisting: config && config.preloadingStrategy ? config.preloadingStrategy :
                        NoPreloading
                },
                { provide: NgProbeToken, multi: true, useFactory: routerNgProbeToken },
                provideRouterInitializer(),
            ],
        };
    };
    /**
     * Creates a module with all the router directives and a provider registering routes.
     * @param {?} routes
     * @return {?}
     */
    RouterModule.forChild = function (routes) {
        return { ngModule: RouterModule, providers: [provideRoutes(routes)] };
    };
    return RouterModule;
}());
RouterModule.decorators = [
    { type: NgModule, args: [{ declarations: ROUTER_DIRECTIVES, exports: ROUTER_DIRECTIVES },] },
];
/**
 * @nocollapse
 */
RouterModule.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ROUTER_FORROOT_GUARD,] },] },
    { type: Router, decorators: [{ type: Optional },] },
]; };
/**
 * @param {?} platformLocationStrategy
 * @param {?} baseHref
 * @param {?=} options
 * @return {?}
 */
function provideLocationStrategy(platformLocationStrategy, baseHref, options) {
    if (options === void 0) { options = {}; }
    return options.useHash ? new HashLocationStrategy(platformLocationStrategy, baseHref) :
        new PathLocationStrategy(platformLocationStrategy, baseHref);
}
/**
 * @param {?} router
 * @return {?}
 */
function provideForRootGuard(router) {
    if (router) {
        throw new Error("RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.");
    }
    return 'guarded';
}
/**
 * \@whatItDoes Registers routes.
 *
 * \@howToUse
 *
 * ```
 * \@NgModule({
 *   imports: [RouterModule.forChild(ROUTES)],
 *   providers: [provideRoutes(EXTRA_ROUTES)]
 * })
 * class MyNgModule {}
 * ```
 *
 * \@stable
 * @param {?} routes
 * @return {?}
 */
function provideRoutes(routes) {
    return [
        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, multi: true, useValue: routes },
        { provide: ROUTES, multi: true, useValue: routes },
    ];
}
/**
 * @param {?} ref
 * @param {?} urlSerializer
 * @param {?} contexts
 * @param {?} location
 * @param {?} injector
 * @param {?} loader
 * @param {?} compiler
 * @param {?} config
 * @param {?=} opts
 * @param {?=} urlHandlingStrategy
 * @param {?=} routeReuseStrategy
 * @return {?}
 */
function setupRouter(ref, urlSerializer, contexts, location, injector, loader, compiler, config, opts, urlHandlingStrategy, routeReuseStrategy) {
    if (opts === void 0) { opts = {}; }
    var /** @type {?} */ router = new Router(null, urlSerializer, contexts, location, injector, loader, compiler, flatten$1(config));
    if (urlHandlingStrategy) {
        router.urlHandlingStrategy = urlHandlingStrategy;
    }
    if (routeReuseStrategy) {
        router.routeReuseStrategy = routeReuseStrategy;
    }
    if (opts.errorHandler) {
        router.errorHandler = opts.errorHandler;
    }
    if (opts.enableTracing) {
        var /** @type {?} */ dom_1 = getDOM();
        router.events.subscribe(function (e) {
            dom_1.logGroup("Router Event: " + ((e.constructor)).name);
            dom_1.log(e.toString());
            dom_1.log(e);
            dom_1.logGroupEnd();
        });
    }
    return router;
}
/**
 * @param {?} router
 * @return {?}
 */
function rootRoute(router) {
    return router.routerState.root;
}
/**
 * To initialize the router properly we need to do in two steps:
 *
 * We need to start the navigation in a APP_INITIALIZER to block the bootstrap if
 * a resolver or a guards executes asynchronously. Second, we need to actually run
 * activation in a BOOTSTRAP_LISTENER. We utilize the afterPreactivation
 * hook provided by the router to do that.
 *
 * The router navigation starts, reaches the point when preactivation is done, and then
 * pauses. It waits for the hook to be resolved. We then resolve it only in a bootstrap listener.
 */
var RouterInitializer = (function () {
    /**
     * @param {?} injector
     */
    function RouterInitializer(injector) {
        this.injector = injector;
        this.initNavigation = false;
        this.resultOfPreactivationDone = new Subject_2();
    }
    /**
     * @return {?}
     */
    RouterInitializer.prototype.appInitializer = function () {
        var _this = this;
        var /** @type {?} */ p = this.injector.get(LOCATION_INITIALIZED, Promise.resolve(null));
        return p.then(function () {
            var /** @type {?} */ resolve = ((null));
            var /** @type {?} */ res = new Promise(function (r) { return resolve = r; });
            var /** @type {?} */ router = _this.injector.get(Router);
            var /** @type {?} */ opts = _this.injector.get(ROUTER_CONFIGURATION);
            if (_this.isLegacyDisabled(opts) || _this.isLegacyEnabled(opts)) {
                resolve(true);
            }
            else if (opts.initialNavigation === 'disabled') {
                router.setUpLocationChangeListener();
                resolve(true);
            }
            else if (opts.initialNavigation === 'enabled') {
                router.hooks.afterPreactivation = function () {
                    // only the initial navigation should be delayed
                    if (!_this.initNavigation) {
                        _this.initNavigation = true;
                        resolve(true);
                        return _this.resultOfPreactivationDone;
                        // subsequent navigations should not be delayed
                    }
                    else {
                        return (of_1(null));
                    }
                };
                router.initialNavigation();
            }
            else {
                throw new Error("Invalid initialNavigation options: '" + opts.initialNavigation + "'");
            }
            return res;
        });
    };
    /**
     * @param {?} bootstrappedComponentRef
     * @return {?}
     */
    RouterInitializer.prototype.bootstrapListener = function (bootstrappedComponentRef) {
        var /** @type {?} */ opts = this.injector.get(ROUTER_CONFIGURATION);
        var /** @type {?} */ preloader = this.injector.get(RouterPreloader);
        var /** @type {?} */ router = this.injector.get(Router);
        var /** @type {?} */ ref = this.injector.get(ApplicationRef);
        if (bootstrappedComponentRef !== ref.components[0]) {
            return;
        }
        if (this.isLegacyEnabled(opts)) {
            router.initialNavigation();
        }
        else if (this.isLegacyDisabled(opts)) {
            router.setUpLocationChangeListener();
        }
        preloader.setUpPreloading();
        router.resetRootComponentType(ref.componentTypes[0]);
        this.resultOfPreactivationDone.next(/** @type {?} */ ((null)));
        this.resultOfPreactivationDone.complete();
    };
    /**
     * @param {?} opts
     * @return {?}
     */
    RouterInitializer.prototype.isLegacyEnabled = function (opts) {
        return opts.initialNavigation === 'legacy_enabled' || opts.initialNavigation === true ||
            opts.initialNavigation === undefined;
    };
    /**
     * @param {?} opts
     * @return {?}
     */
    RouterInitializer.prototype.isLegacyDisabled = function (opts) {
        return opts.initialNavigation === 'legacy_disabled' || opts.initialNavigation === false;
    };
    return RouterInitializer;
}());
RouterInitializer.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
RouterInitializer.ctorParameters = function () { return [
    { type: Injector, },
]; };
/**
 * @param {?} r
 * @return {?}
 */
function getAppInitializer(r) {
    return r.appInitializer.bind(r);
}
/**
 * @param {?} r
 * @return {?}
 */
function getBootstrapListener(r) {
    return r.bootstrapListener.bind(r);
}
/**
 * A token for the router initializer that will be called after the app is bootstrapped.
 *
 * \@experimental
 */
var ROUTER_INITIALIZER = new InjectionToken('Router Initializer');
/**
 * @return {?}
 */
function provideRouterInitializer() {
    return [
        RouterInitializer,
        {
            provide: APP_INITIALIZER,
            multi: true,
            useFactory: getAppInitializer,
            deps: [RouterInitializer]
        },
        { provide: ROUTER_INITIALIZER, useFactory: getBootstrapListener, deps: [RouterInitializer] },
        { provide: APP_BOOTSTRAP_LISTENER, multi: true, useExisting: ROUTER_INITIALIZER },
    ];
}
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @module
 * @description
 * Entry point for all public APIs of the common package.
 */
/**
 * \@stable
 */
var VERSION$5 = new Version('4.3.3');

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Applies CSS prefixes to appropriate style keys.*/
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */ function applyCssPrefixes(target) {
    for (var key in target) {
        var value = target[key];
        switch (key) {
            case 'display':
                target['display'] = value;
                // also need 'display : -webkit-box' and 'display : -ms-flexbox;'
                break;
            case 'flex':
                target['-ms-flex'] = value;
                target['-webkit-box-flex'] = value.split(" ")[0];
                break;
            case 'flex-direction':
                value = value || "row";
                target['flex-direction'] = value;
                target['-ms-flex-direction'] = value;
                target['-webkit-box-orient'] = toBoxOrient(value);
                target['-webkit-box-direction'] = toBoxDirection(value);
                break;
            case 'flex-wrap':
                target['-ms-flex-wrap'] = value;
                break;
            case 'order':
                if (isNaN(value)) {
                    value = "0";
                }
                target['order'] = value;
                target['-ms-flex-order'] = value;
                target['-webkit-box-ordinal-group'] = toBoxOrdinal(value);
                break;
            case 'justify-content':
                target['-ms-flex-pack'] = toBoxValue(value);
                target['-webkit-box-pack'] = toBoxValue(value);
                break;
            case 'align-items':
                target['-ms-flex-align'] = toBoxValue(value);
                target['-webkit-box-align'] = toBoxValue(value);
                break;
            case 'align-self':
                target['-ms-flex-item-align'] = toBoxValue(value);
                break;
            case 'align-content':
                target['-ms-align-content'] = toAlignContentValue(value);
                target['-ms-flex-line-pack'] = toAlignContentValue(value);
                break;
        }
    }
    return target;
}
function toAlignContentValue(value) {
    switch (value) {
        case "space-between":
            return "justify";
        case "space-around":
            return "distribute";
        default:
            return toBoxValue(value);
    }
}
/** Convert flex values flex-start, flex-end to start, end. */
function toBoxValue(value) {
    if (value === void 0) { value = ""; }
    return (value == 'flex-start') ? 'start' : ((value == 'flex-end') ? 'end' : value);
}
/** Convert flex Direction to Box orientations */
function toBoxOrient(flexDirection) {
    if (flexDirection === void 0) { flexDirection = 'row'; }
    return flexDirection.indexOf('column') === -1 ? 'horizontal' : 'vertical';
}
/** Convert flex Direction to Box direction type */
function toBoxDirection(flexDirection) {
    if (flexDirection === void 0) { flexDirection = 'row'; }
    return flexDirection.indexOf('reverse') !== -1 ? 'reverse' : 'normal';
}
/** Convert flex order to Box ordinal group */
function toBoxOrdinal(order) {
    if (order === void 0) { order = '0'; }
    var value = order ? parseInt(order) + 1 : 1;
    return isNaN(value) ? "0" : value.toString();
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */ var LAYOUT_VALUES = ['row', 'column', 'row-reverse', 'column-reverse'];
/**
 * Validate the direction|"direction wrap" value and then update the host's inline flexbox styles
 */
function buildLayoutCSS(value) {
    var _a = validateValue(value), direction = _a[0], wrap = _a[1];
    return buildCSS(direction, wrap);
}
/**
  * Validate the value to be one of the acceptable value options
  * Use default fallback of "row"
  */
function validateValue(value) {
    value = value ? value.toLowerCase() : '';
    var _a = value.split(" "), direction = _a[0], wrap = _a[1];
    if (!LAYOUT_VALUES.find(function (x) { return x === direction; })) {
        direction = LAYOUT_VALUES[0];
    }
    return [direction, validateWrapValue(wrap)];
}
/**
 * Convert layout-wrap="<value>" to expected flex-wrap style
 */
function validateWrapValue(value) {
    if (!!value) {
        switch (value.toLowerCase()) {
            case 'reverse':
            case 'wrap-reverse':
            case 'reverse-wrap':
                value = 'wrap-reverse';
                break;
            case 'no':
            case 'none':
            case 'nowrap':
                value = 'nowrap';
                break;
            // All other values fallback to "wrap"
            default:
                value = 'wrap';
                break;
        }
    }
    return value;
}
/**
 * Build the CSS that should be assigned to the element instance
 * BUG:
 *   1) min-height on a column flex container won’t apply to its flex item children in IE 10-11.
 *      Use height instead if possible; height : <xxx>vh;
 *
 *  This way any padding or border specified on the child elements are
 *  laid out and drawn inside that element's specified width and height.
 */
function buildCSS(direction, wrap) {
    if (wrap === void 0) { wrap = null; }
    return {
        'display': 'flex',
        'box-sizing': 'border-box',
        'flex-direction': direction,
        'flex-wrap': !!wrap ? wrap : null
    };
}

Observable_1.Observable.prototype.map = map_1.map;

Observable_1.Observable.prototype.filter = filter_1.filter;

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Extends an object with the *enumerable* and *own* properties of one or more source objects,
 * similar to Object.assign.
 *
 * @param dest The object which will have properties copied to it.
 * @param sources The source objects from which properties will be copied.
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */ function extendObject(dest) {
    var sources = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        sources[_i - 1] = arguments[_i];
    }
    if (dest == null) {
        throw TypeError('Cannot convert undefined or null to object');
    }
    for (var _a = 0, sources_1 = sources; _a < sources_1.length; _a++) {
        var source = sources_1[_a];
        if (source != null) {
            for (var key in source) {
                if (source.hasOwnProperty(key)) {
                    dest[key] = source[key];
                }
            }
        }
    }
    return dest;
}

var KeyOptions = (function () {
    function KeyOptions(baseKey, defaultValue, inputKeys) {
        this.baseKey = baseKey;
        this.defaultValue = defaultValue;
        this.inputKeys = inputKeys;
    }
    return KeyOptions;
}());
/**
 * ResponsiveActivation acts as a proxy between the MonitorMedia service (which emits mediaQuery
 * changes) and the fx API directives. The MQA proxies mediaQuery change events and notifies the
 * directive via the specified callback.
 *
 * - The MQA also determines which directive property should be used to determine the
 *   current change 'value'... BEFORE the original `onMediaQueryChanges()` method is called.
 * - The `ngOnDestroy()` method is also head-hooked to enable auto-unsubscribe from the
 *   MediaQueryServices.
 *
 * NOTE: these interceptions enables the logic in the fx API directives to remain terse and clean.
 */
var ResponsiveActivation = (function () {
    /**
     * Constructor
     */
    function ResponsiveActivation(_options, _mediaMonitor, _onMediaChanges) {
        this._options = _options;
        this._mediaMonitor = _mediaMonitor;
        this._onMediaChanges = _onMediaChanges;
        this._subscribers = [];
        this._subscribers = this._configureChangeObservers();
    }
    Object.defineProperty(ResponsiveActivation.prototype, "mediaMonitor", {
        /**
         * Accessor to the DI'ed directive property
         * Each directive instance has a reference to the MediaMonitor which is
         * used HERE to subscribe to mediaQuery change notifications.
         */
        get: function () {
            return this._mediaMonitor;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ResponsiveActivation.prototype, "activatedInputKey", {
        /**
         * Determine which directive @Input() property is currently active (for the viewport size):
         * The key must be defined (in use) or fallback to the 'closest' overlapping property key
         * that is defined; otherwise the default property key will be used.
         * e.g.
         *      if `<div fxHide fxHide.gt-sm="false">` is used but the current activated mediaQuery alias
         *      key is `.md` then `.gt-sm` should be used instead
         */
        get: function () {
            return this._activatedInputKey || this._options.baseKey;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ResponsiveActivation.prototype, "activatedInput", {
        /**
         * Get the currently activated @Input value or the fallback default @Input value
         */
        get: function () {
            var key = this.activatedInputKey;
            return this.hasKeyValue(key) ? this._lookupKeyValue(key) : this._options.defaultValue;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Fast validator for presence of attribute on the host element
     */
    ResponsiveActivation.prototype.hasKeyValue = function (key) {
        var value = this._options.inputKeys[key];
        return typeof value !== 'undefined';
    };
    /**
     * Remove interceptors, restore original functions, and forward the onDestroy() call
     */
    ResponsiveActivation.prototype.destroy = function () {
        this._subscribers.forEach(function (link) {
            link.unsubscribe();
        });
        this._subscribers = [];
    };
    /**
     * For each *defined* API property, register a callback to `_onMonitorEvents( )`
     * Cache 1..n subscriptions for internal auto-unsubscribes when the the directive destructs
     */
    ResponsiveActivation.prototype._configureChangeObservers = function () {
        var _this = this;
        var subscriptions = [];
        this._buildRegistryMap().forEach(function (bp) {
            if (_this._keyInUse(bp.key)) {
                // Inject directive default property key name: to let onMediaChange() calls
                // know which property is being triggered...
                var buildChanges = function (change) {
                    change = change.clone();
                    change.property = _this._options.baseKey;
                    return change;
                };
                subscriptions.push(_this.mediaMonitor.observe(bp.alias)
                    .map(buildChanges)
                    .subscribe(function (change) {
                    _this._onMonitorEvents(change);
                }));
            }
        });
        return subscriptions;
    };
    /**
     * Build mediaQuery key-hashmap; only for the directive properties that are actually defined/used
     * in the HTML markup
     */
    ResponsiveActivation.prototype._buildRegistryMap = function () {
        var _this = this;
        return this.mediaMonitor.breakpoints
            .map(function (bp) {
            return extendObject({}, bp, {
                baseKey: _this._options.baseKey,
                key: _this._options.baseKey + bp.suffix // e.g.  layoutGtSm, layoutMd, layoutGtLg
            });
        })
            .filter(function (bp) { return _this._keyInUse(bp.key); });
    };
    /**
     * Synchronizes change notifications with the current mq-activated @Input and calculates the
     * mq-activated input value or the default value
     */
    ResponsiveActivation.prototype._onMonitorEvents = function (change) {
        if (change.property == this._options.baseKey) {
            change.value = this._calculateActivatedValue(change);
            this._onMediaChanges(change);
        }
    };
    /**
     * Has the key been specified in the HTML markup and thus is intended
     * to participate in activation processes.
     */
    ResponsiveActivation.prototype._keyInUse = function (key) {
        return this._lookupKeyValue(key) !== undefined;
    };
    /**
     *  Map input key associated with mediaQuery activation to closest defined input key
     *  then return the values associated with the targeted input property
     *
     *  !! change events may arrive out-of-order (activate before deactivate)
     *     so make sure the deactivate is used ONLY when the keys match
     *     (since a different activate may be in use)
     */
    ResponsiveActivation.prototype._calculateActivatedValue = function (current) {
        var currentKey = this._options.baseKey + current.suffix; // e.g. suffix == 'GtSm',
        var newKey = this._activatedInputKey; // e.g. newKey == hideGtSm
        newKey = current.matches ? currentKey : ((newKey == currentKey) ? null : newKey);
        this._activatedInputKey = this._validateInputKey(newKey);
        return this.activatedInput;
    };
    /**
     * For the specified input property key, validate it is defined (used in the markup)
     * If not see if a overlapping mediaQuery-related input key fallback has been defined
     *
     * NOTE: scans in the order defined by activeOverLaps (largest viewport ranges -> smallest ranges)
     */
    ResponsiveActivation.prototype._validateInputKey = function (inputKey) {
        var _this = this;
        var items = this.mediaMonitor.activeOverlaps;
        var isMissingKey = function (key) { return !_this._keyInUse(key); };
        if (isMissingKey(inputKey)) {
            items.some(function (bp) {
                var key = _this._options.baseKey + bp.suffix;
                if (!isMissingKey(key)) {
                    inputKey = key;
                    return true; // exit .some()
                }
                return false;
            });
        }
        return inputKey;
    };
    /**
     * Get the value (if any) for the directive instances @Input property (aka key)
     */
    ResponsiveActivation.prototype._lookupKeyValue = function (key) {
        return this._options.inputKeys[key];
    };
    return ResponsiveActivation;
}());

/** Abstract base class for the Layout API styling directives. */
var BaseFxDirective = (function () {
    /**
     *
     */
    function BaseFxDirective(_mediaMonitor, _elementRef, _renderer) {
        this._mediaMonitor = _mediaMonitor;
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        /**
         *  Dictionary of input keys with associated values
         */
        this._inputMap = {};
        this._display = this._getDisplayStyle();
    }
    Object.defineProperty(BaseFxDirective.prototype, "hasMediaQueryListener", {
        get: function () {
            return !!this._mqActivation;
        },
        enumerable: true,
        configurable: true
    });
    // *********************************************
    // Accessor Methods
    // *********************************************
    /**
     * Access the current value (if any) of the @Input property.
     */
    BaseFxDirective.prototype._queryInput = function (key) {
        return this._inputMap[key];
    };
    // *********************************************
    // Lifecycle Methods
    // *********************************************
    BaseFxDirective.prototype.ngOnDestroy = function () {
        if (this._mqActivation) {
            this._mqActivation.destroy();
        }
        this._mediaMonitor = null;
    };
    // *********************************************
    // Protected Methods
    // *********************************************
    /**
     * Was the directive's default selector used ?
     * If not, use the fallback value!
     */
    BaseFxDirective.prototype._getDefaultVal = function (key, fallbackVal) {
        var val = this._queryInput(key);
        var hasDefaultVal = (val !== undefined && val !== null);
        return (hasDefaultVal && val !== '') ? val : fallbackVal;
    };
    /**
     * Quick accessor to the current HTMLElement's `display` style
     * Note: this allows use to preserve the original style
     * and optional restore it when the mediaQueries deactivate
     */
    BaseFxDirective.prototype._getDisplayStyle = function (source) {
        var element = source || this._elementRef.nativeElement;
        var value = element.style['display'] || getComputedStyle(element)['display'];
        return value.trim();
    };
    BaseFxDirective.prototype._getFlowDirection = function (target, addIfMissing) {
        if (addIfMissing === void 0) { addIfMissing = false; }
        var value = "";
        if (target) {
            var directionKeys_1 = Object.keys(applyCssPrefixes({ 'flex-direction': '' }));
            var findDirection = function (styles) { return directionKeys_1.reduce(function (direction, key) {
                return direction || styles[key];
            }, null); };
            var immediateValue = findDirection(target['style']);
            value = immediateValue || findDirection(getComputedStyle(target));
            if (!immediateValue && addIfMissing) {
                value = value || 'row';
                this._applyStyleToElements(buildLayoutCSS(value), [target]);
            }
        }
        return value ? value.trim() : "row";
    };
    /**
     * Applies styles given via string pair or object map to the directive element.
     */
    BaseFxDirective.prototype._applyStyleToElement = function (style, value, nativeElement) {
        var _this = this;
        var styles = {};
        var element = nativeElement || this._elementRef.nativeElement;
        if (typeof style === 'string') {
            styles[style] = value;
            style = styles;
        }
        styles = applyCssPrefixes(style);
        // Iterate all properties in hashMap and set styles
        Object.keys(styles).forEach(function (key) {
            _this._renderer.setStyle(element, key, styles[key]);
        });
    };
    /**
     * Applies styles given via string pair or object map to the directive element.
     */
    BaseFxDirective.prototype._applyStyleToElements = function (style, elements) {
        var _this = this;
        var styles = applyCssPrefixes(style);
        Object.keys(styles).forEach(function (key) {
            elements.forEach(function (el) { return _this._renderer.setStyle(el, key, styles[key]); });
        });
    };
    /**
     *  Save the property value; which may be a complex object.
     *  Complex objects support property chains
     */
    BaseFxDirective.prototype._cacheInput = function (key, source) {
        if (typeof source === 'object') {
            for (var prop in source) {
                this._inputMap[prop] = source[prop];
            }
        }
        else {
            this._inputMap[key] = source;
        }
    };
    /**
     *  Build a ResponsiveActivation object used to manage subscriptions to mediaChange notifications
     *  and intelligent lookup of the directive's property value that corresponds to that mediaQuery
     *  (or closest match).
     */
    BaseFxDirective.prototype._listenForMediaQueryChanges = function (key, defaultValue, onMediaQueryChange) {
        if (!this._mqActivation) {
            var keyOptions = new KeyOptions(key, defaultValue, this._inputMap);
            this._mqActivation = new ResponsiveActivation(keyOptions, this._mediaMonitor, function (change) { return onMediaQueryChange(change); });
        }
        return this._mqActivation;
    };
    Object.defineProperty(BaseFxDirective.prototype, "childrenNodes", {
        /**
         * Special accessor to query for all child 'element' nodes regardless of type, class, etc.
         */
        get: function () {
            var obj = this._elementRef.nativeElement.childNodes;
            var buffer = [];
            // iterate backwards ensuring that length is an UInt32
            for (var i = obj.length; i--;) {
                buffer[i] = obj[i];
            }
            return buffer;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Fast validator for presence of attribute on the host element
     */
    BaseFxDirective.prototype.hasKeyValue = function (key) {
        return this._mqActivation.hasKeyValue(key);
    };
    return BaseFxDirective;
}());

var __extends$29 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Adapter to the BaseFxDirective abstract class so it can be used via composition.
 * @see BaseFxDirective
 */
var BaseFxDirectiveAdapter = (function (_super) {
    __extends$29(BaseFxDirectiveAdapter, _super);
    /**
     * BaseFxDirectiveAdapter constructor
     */
    function BaseFxDirectiveAdapter(_baseKey, // non-responsive @Input property name
        _mediaMonitor, _elementRef, _renderer) {
        var _this = _super.call(this, _mediaMonitor, _elementRef, _renderer) || this;
        _this._baseKey = _baseKey;
        _this._mediaMonitor = _mediaMonitor;
        _this._elementRef = _elementRef;
        _this._renderer = _renderer;
        return _this;
    }
    Object.defineProperty(BaseFxDirectiveAdapter.prototype, "activeKey", {
        /**
         * Accessor to determine which @Input property is "active"
         * e.g. which property value will be used.
         */
        get: function () {
            var mqa = this._mqActivation;
            var key = mqa ? mqa.activatedInputKey : this._baseKey;
            // Note: ClassDirective::SimpleChanges uses 'klazz' instead of 'class' as a key
            return (key === 'class') ? 'klazz' : key;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseFxDirectiveAdapter.prototype, "inputMap", {
        /** Hash map of all @Input keys/values defined/used */
        get: function () {
            return this._inputMap;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseFxDirectiveAdapter.prototype, "mqActivation", {
        /**
         * @see BaseFxDirective._mqActivation
         */
        get: function () {
            return this._mqActivation;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @see BaseFxDirective._queryInput
     */
    BaseFxDirectiveAdapter.prototype.queryInput = function (key) {
        return key ? this._queryInput(key) : undefined;
    };
    /**
     *  Save the property value.
     */
    BaseFxDirectiveAdapter.prototype.cacheInput = function (key, source, cacheRaw) {
        if (cacheRaw === void 0) { cacheRaw = false; }
        if (cacheRaw) {
            this._cacheInputRaw(key, source);
        }
        else if (Array.isArray(source)) {
            this._cacheInputArray(key, source);
        }
        else if (typeof source === 'object') {
            this._cacheInputObject(key, source);
        }
        else if (typeof source === 'string') {
            this._cacheInputString(key, source);
        }
        else {
            throw new Error('Invalid class value provided. Did you want to cache the raw value?');
        }
    };
    /**
     * @see BaseFxDirective._listenForMediaQueryChanges
     */
    BaseFxDirectiveAdapter.prototype.listenForMediaQueryChanges = function (key, defaultValue, onMediaQueryChange) {
        return this._listenForMediaQueryChanges(key, defaultValue, onMediaQueryChange);
    };
    // ************************************************************
    // Protected Methods
    // ************************************************************
    /**
     * No implicit transforms of the source.
     * Required when caching values expected later for KeyValueDiffers
     */
    BaseFxDirectiveAdapter.prototype._cacheInputRaw = function (key, source) {
        this._inputMap[key] = source;
    };
    /**
     *  Save the property value for Array values.
     */
    BaseFxDirectiveAdapter.prototype._cacheInputArray = function (key, source) {
        this._inputMap[key] = source.join(' ');
    };
    /**
     *  Save the property value for key/value pair values.
     */
    BaseFxDirectiveAdapter.prototype._cacheInputObject = function (key, source) {
        var classes = [];
        for (var prop in source) {
            if (!!source[prop]) {
                classes.push(prop);
            }
        }
        this._inputMap[key] = classes.join(' ');
    };
    /**
     *  Save the property value for string values.
     */
    BaseFxDirectiveAdapter.prototype._cacheInputString = function (key, source) {
        this._inputMap[key] = source;
    };
    return BaseFxDirectiveAdapter;
}(BaseFxDirective));

/**
 * Class instances emitted [to observers] for each mql notification
 */
var MediaChange = (function () {
    function MediaChange(matches, // Is the mq currently activated
        mediaQuery, // e.g.   (min-width: 600px) and (max-width: 959px)
        mqAlias, // e.g.   gt-sm, md, gt-lg
        suffix // e.g.   GtSM, Md, GtLg
    ) {
        if (matches === void 0) { matches = false; }
        if (mediaQuery === void 0) { mediaQuery = 'all'; }
        if (mqAlias === void 0) { mqAlias = ''; }
        if (suffix === void 0) { suffix = ''; } // e.g.   GtSM, Md, GtLg
        this.matches = matches;
        this.mediaQuery = mediaQuery;
        this.mqAlias = mqAlias;
        this.suffix = suffix; // e.g.   GtSM, Md, GtLg
    }
    MediaChange.prototype.clone = function () {
        return new MediaChange(this.matches, this.mediaQuery, this.mqAlias, this.suffix);
    };
    return MediaChange;
}());

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// RxJS Operators used by the classes...
/**
 * MediaMonitor configures listeners to mediaQuery changes and publishes an Observable facade to
 * convert mediaQuery change callbacks to subscriber notifications. These notifications will be
 * performed within the ng Zone to trigger change detections and component updates.
 *
 * NOTE: both mediaQuery activations and de-activations are announced in notifications
 */
var MatchMedia = (function () {
    function MatchMedia(_zone) {
        this._zone = _zone;
        this._registry = new Map();
        this._source = new BehaviorSubject_2(new MediaChange(true));
        this._observable$ = this._source.asObservable();
    }
    /**
     * For the specified mediaQuery?
     */
    MatchMedia.prototype.isActive = function (mediaQuery) {
        if (this._registry.has(mediaQuery)) {
            var mql = this._registry.get(mediaQuery);
            return mql.matches;
        }
        return false;
    };
    /**
     * External observers can watch for all (or a specific) mql changes.
     * Typically used by the MediaQueryAdaptor; optionally available to components
     * who wish to use the MediaMonitor as mediaMonitor$ observable service.
     *
     * NOTE: if a mediaQuery is not specified, then ALL mediaQuery activations will
     *       be announced.
     */
    MatchMedia.prototype.observe = function (mediaQuery) {
        this.registerQuery(mediaQuery);
        return this._observable$.filter(function (change) {
            return mediaQuery ? (change.mediaQuery === mediaQuery) : true;
        });
    };
    /**
     * Based on the BreakPointRegistry provider, register internal listeners for each unique
     * mediaQuery. Each listener emits specific MediaChange data to observers
     */
    MatchMedia.prototype.registerQuery = function (mediaQuery) {
        var _this = this;
        if (mediaQuery) {
            var mql = this._registry.get(mediaQuery);
            var onMQLEvent = function (e) {
                _this._zone.run(function () {
                    var change = new MediaChange(e.matches, mediaQuery);
                    _this._source.next(change);
                });
            };
            if (!mql) {
                mql = this._buildMQL(mediaQuery);
                mql.addListener(onMQLEvent);
                this._registry.set(mediaQuery, mql);
            }
            if (mql.matches) {
                onMQLEvent(mql); // Announce activate range for initial subscribers
            }
        }
    };
    /**
     * Call window.matchMedia() to build a MediaQueryList; which
     * supports 0..n listeners for activation/deactivation
     */
    MatchMedia.prototype._buildMQL = function (query) {
        prepareQueryCSS(query);
        var canListen = !!window.matchMedia('all').addListener;
        return canListen ? window.matchMedia(query) : {
            matches: query === 'all' || query === '',
            media: query,
            addListener: function () {
            },
            removeListener: function () {
            }
        };
    };
    return MatchMedia;
}());
MatchMedia.decorators = [
    { type: Injectable },
];
/** @nocollapse */
MatchMedia.ctorParameters = function () { return [
    { type: NgZone, },
]; };
/**
 * Private global registry for all dynamically-created, injected style tags
 * @see prepare(query)
 */
var ALL_STYLES = {};
/**
 * For Webkit engines that only trigger the MediaQueryListListener
 * when there is at least one CSS selector for the respective media query.
 *
 * @param query string The mediaQuery used to create a faux CSS selector
 *
 */
function prepareQueryCSS(query) {
    if (!ALL_STYLES[query]) {
        try {
            var style = document.createElement('style');
            style.setAttribute('type', 'text/css');
            if (!style['styleSheet']) {
                var cssText = "@media " + query + " {.fx-query-test{ }}";
                style.appendChild(document.createTextNode(cssText));
            }
            document.getElementsByTagName('head')[0].appendChild(style);
            // Store in private global registry
            ALL_STYLES[query] = style;
        }
        catch (e) {
            console.error(e);
        }
    }
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 *  Injection token unique to the flex-layout library.
 *  Use this token when build a custom provider (see below).
 */
var BREAKPOINTS = new InjectionToken('Token (@angular/flex-layout) Breakpoints');

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Registry of 1..n MediaQuery breakpoint ranges
 * This is published as a provider and may be overriden from custom, application-specific ranges
 *
 */
var BreakPointRegistry = (function () {
    function BreakPointRegistry(_registry) {
        this._registry = _registry;
    }
    Object.defineProperty(BreakPointRegistry.prototype, "items", {
        /**
         * Accessor to raw list
         */
        get: function () {
            return this._registry.slice();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Search breakpoints by alias (e.g. gt-xs)
     */
    BreakPointRegistry.prototype.findByAlias = function (alias) {
        return this._registry.find(function (bp) { return bp.alias == alias; });
    };
    BreakPointRegistry.prototype.findByQuery = function (query) {
        return this._registry.find(function (bp) { return bp.mediaQuery == query; });
    };
    Object.defineProperty(BreakPointRegistry.prototype, "overlappings", {
        /**
         * Get all the breakpoints whose ranges could overlapping `normal` ranges;
         * e.g. gt-sm overlaps md, lg, and xl
         */
        get: function () {
            return this._registry.filter(function (it) { return it.overlapping == true; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BreakPointRegistry.prototype, "aliases", {
        /**
         * Get list of all registered (non-empty) breakpoint aliases
         */
        get: function () {
            return this._registry.map(function (it) { return it.alias; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BreakPointRegistry.prototype, "suffixes", {
        /**
         * Aliases are mapped to properties using suffixes
         * e.g.  'gt-sm' for property 'layout'  uses suffix 'GtSm'
         * for property layoutGtSM.
         */
        get: function () {
            return this._registry.map(function (it) { return it.suffix; });
        },
        enumerable: true,
        configurable: true
    });
    return BreakPointRegistry;
}());
BreakPointRegistry.decorators = [
    { type: Injectable },
];
/** @nocollapse */
BreakPointRegistry.ctorParameters = function () { return [
    { type: Array, decorators: [{ type: Inject, args: [BREAKPOINTS,] },] },
]; };

/**
 * For the specified MediaChange, make sure it contains the breakpoint alias
 * and suffix (if available).
 */
function mergeAlias(dest, source) {
    return extendObject(dest, source ? {
        mqAlias: source.alias,
        suffix: source.suffix
    } : {});
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * MediaMonitor uses the MatchMedia service to observe mediaQuery changes (both activations and
 * deactivations). These changes are are published as MediaChange notifications.
 *
 * Note: all notifications will be performed within the
 * ng Zone to trigger change detections and component updates.
 *
 * It is the MediaMonitor that:
 *  - auto registers all known breakpoints
 *  - injects alias information into each raw MediaChange event
 *  - provides accessor to the currently active BreakPoint
 *  - publish list of overlapping BreakPoint(s); used by ResponsiveActivation
 */
var MediaMonitor = (function () {
    function MediaMonitor(_breakpoints, _matchMedia) {
        this._breakpoints = _breakpoints;
        this._matchMedia = _matchMedia;
        this._registerBreakpoints();
    }
    Object.defineProperty(MediaMonitor.prototype, "breakpoints", {
        /**
         * Read-only accessor to the list of breakpoints configured in the BreakPointRegistry provider
         */
        get: function () {
            return this._breakpoints.items.slice();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MediaMonitor.prototype, "activeOverlaps", {
        get: function () {
            var _this = this;
            var items = this._breakpoints.overlappings.reverse();
            return items.filter(function (bp) {
                return _this._matchMedia.isActive(bp.mediaQuery);
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MediaMonitor.prototype, "active", {
        get: function () {
            var _this = this;
            var found = null, items = this.breakpoints.reverse();
            items.forEach(function (bp) {
                if (bp.alias !== '') {
                    if (!found && _this._matchMedia.isActive(bp.mediaQuery)) {
                        found = bp;
                    }
                }
            });
            var first = this.breakpoints[0];
            return found || (this._matchMedia.isActive(first.mediaQuery) ? first : null);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * For the specified mediaQuery alias, is the mediaQuery range active?
     */
    MediaMonitor.prototype.isActive = function (alias) {
        var bp = this._breakpoints.findByAlias(alias) || this._breakpoints.findByQuery(alias);
        return this._matchMedia.isActive(bp ? bp.mediaQuery : alias);
    };
    /**
     * External observers can watch for all (or a specific) mql changes.
     * If specific breakpoint is observed, only return *activated* events
     * otherwise return all events for BOTH activated + deactivated changes.
     */
    MediaMonitor.prototype.observe = function (alias) {
        var bp = this._breakpoints.findByAlias(alias) || this._breakpoints.findByQuery(alias);
        var hasAlias = function (change) { return (bp ? change.mqAlias !== "" : true); };
        // Note: the raw MediaChange events [from MatchMedia] do not contain important alias information
        return this._matchMedia
            .observe(bp ? bp.mediaQuery : alias)
            .map(function (change) { return mergeAlias(change, bp); })
            .filter(hasAlias);
    };
    /**
     * Immediate calls to matchMedia() to establish listeners
     * and prepare for immediate subscription notifications
     */
    MediaMonitor.prototype._registerBreakpoints = function () {
        var _this = this;
        this._breakpoints.items.forEach(function (bp) {
            _this._matchMedia.registerQuery(bp.mediaQuery);
        });
    };
    return MediaMonitor;
}());
MediaMonitor.decorators = [
    { type: Injectable },
];
/** @nocollapse */
MediaMonitor.ctorParameters = function () { return [
    { type: BreakPointRegistry, },
    { type: MatchMedia, },
]; };

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Base class for MediaService and pseudo-token for
 */
var ObservableMedia = (function () {
    function ObservableMedia() {
    }
    return ObservableMedia;
}());
/**
 * Class internalizes a MatchMedia service and exposes an Subscribable and Observable interface.

 * This an Observable with that exposes a feature to subscribe to mediaQuery
 * changes and a validator method (`isActive(<alias>)`) to test if a mediaQuery (or alias) is
 * currently active.
 *
 * !! Only mediaChange activations (not de-activations) are announced by the ObservableMedia
 *
 * This class uses the BreakPoint Registry to inject alias information into the raw MediaChange
 * notification. For custom mediaQuery notifications, alias information will not be injected and
 * those fields will be ''.
 *
 * !! This is not an actual Observable. It is a wrapper of an Observable used to publish additional
 * methods like `isActive(<alias>). To access the Observable and use RxJS operators, use
 * `.asObservable()` with syntax like media.asObservable().map(....).
 *
 *  @usage
 *
 *  // RxJS
 *  import 'rxjs/add/operator/filter';
 *  import { ObservableMedia } from '@angular/flex-layout';
 *
 *  @Component({ ... })
 *  export class AppComponent {
 *    status : string = '';
 *
 *    constructor(  media:ObservableMedia ) {
 *      let onChange = (change:MediaChange) => {
 *        this.status = change ? `'${change.mqAlias}' = (${change.mediaQuery})` : "";
 *      };
 *
 *      // Subscribe directly or access observable to use filter/map operators
 *      // e.g.
 *      //      media.subscribe(onChange);
 *
 *      media.asObservable()
 *        .filter((change:MediaChange) => true)   // silly noop filter
 *        .subscribe(onChange);
 *    }
 *  }
 */
var MediaService = (function () {
    function MediaService(mediaWatcher, breakpoints) {
        this.mediaWatcher = mediaWatcher;
        this.breakpoints = breakpoints;
        /**
         * Should we announce gt-<xxx> breakpoint activations ?
         */
        this.filterOverlaps = true;
        this.observable$ = this._buildObservable();
        this._registerBreakPoints();
    }
    /**
     * Test if specified query/alias is active.
     */
    MediaService.prototype.isActive = function (alias) {
        var query = this._toMediaQuery(alias);
        return this.mediaWatcher.isActive(query);
    };
    
    /**
     * Proxy to the Observable subscribe method
     */
    MediaService.prototype.subscribe = function (next, error, complete) {
        return this.observable$.subscribe(next, error, complete);
    };
    
    /**
     * Access to observable for use with operators like
     * .filter(), .map(), etc.
     */
    MediaService.prototype.asObservable = function () {
        return this.observable$;
    };
    // ************************************************
    // Internal Methods
    // ************************************************
    /**
     * Register all the mediaQueries registered in the BreakPointRegistry
     * This is needed so subscribers can be auto-notified of all standard, registered
     * mediaQuery activations
     */
    MediaService.prototype._registerBreakPoints = function () {
        var _this = this;
        this.breakpoints.items.forEach(function (bp) {
            _this.mediaWatcher.registerQuery(bp.mediaQuery);
            return bp;
        });
    };
    /**
     * Prepare internal observable
     * NOTE: the raw MediaChange events [from MatchMedia] do not contain important alias information
     * these must be injected into the MediaChange
     */
    MediaService.prototype._buildObservable = function () {
        var _this = this;
        var self = this;
        // Only pass/announce activations (not de-activations)
        // Inject associated (if any) alias information into the MediaChange event
        // Exclude mediaQuery activations for overlapping mQs. List bounded mQ ranges only
        var activationsOnly = function (change) {
            return change.matches === true;
        };
        var addAliasInformation = function (change) {
            return mergeAlias(change, _this._findByQuery(change.mediaQuery));
        };
        var excludeOverlaps = function (change) {
            var bp = _this.breakpoints.findByQuery(change.mediaQuery);
            return !bp ? true : !(self.filterOverlaps && bp.overlapping);
        };
        return this.mediaWatcher.observe()
            .filter(activationsOnly)
            .map(addAliasInformation)
            .filter(excludeOverlaps);
    };
    /**
     * Breakpoint locator by alias
     */
    MediaService.prototype._findByAlias = function (alias) {
        return this.breakpoints.findByAlias(alias);
    };
    /**
     * Breakpoint locator by mediaQuery
     */
    MediaService.prototype._findByQuery = function (query) {
        return this.breakpoints.findByQuery(query);
    };
    
    /**
     * Find associated breakpoint (if any)
     */
    MediaService.prototype._toMediaQuery = function (query) {
        var bp = this._findByAlias(query) || this._findByQuery(query);
        return bp ? bp.mediaQuery : query;
    };
    
    return MediaService;
}());
MediaService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
MediaService.ctorParameters = function () { return [
    { type: MatchMedia, },
    { type: BreakPointRegistry, },
]; };

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Ensure a single global ObservableMedia service provider
 */
function OBSERVABLE_MEDIA_PROVIDER_FACTORY(parentService, matchMedia, breakpoints) {
    return parentService || new MediaService(matchMedia, breakpoints);
}
/**
 *  Provider to return global service for observable service for all MediaQuery activations
 */
var OBSERVABLE_MEDIA_PROVIDER = {
    provide: ObservableMedia,
    deps: [
        [new Optional(), new SkipSelf(), ObservableMedia],
        MatchMedia,
        BreakPointRegistry
    ],
    useFactory: OBSERVABLE_MEDIA_PROVIDER_FACTORY
};

var DEFAULT_BREAKPOINTS = [
    {
        alias: 'xs',
        mediaQuery: 'screen and (max-width: 599px)'
    },
    {
        alias: 'gt-xs',
        overlapping: true,
        mediaQuery: 'screen and (min-width: 600px)'
    },
    {
        alias: 'lt-sm',
        overlapping: true,
        mediaQuery: 'screen and (max-width: 599px)'
    },
    {
        alias: 'sm',
        mediaQuery: 'screen and (min-width: 600px) and (max-width: 959px)'
    },
    {
        alias: 'gt-sm',
        overlapping: true,
        mediaQuery: 'screen and (min-width: 960px)'
    },
    {
        alias: 'lt-md',
        overlapping: true,
        mediaQuery: 'screen and (max-width: 959px)'
    },
    {
        alias: 'md',
        mediaQuery: 'screen and (min-width: 960px) and (max-width: 1279px)'
    },
    {
        alias: 'gt-md',
        overlapping: true,
        mediaQuery: 'screen and (min-width: 1280px)'
    },
    {
        alias: 'lt-lg',
        overlapping: true,
        mediaQuery: 'screen and (max-width: 1279px)'
    },
    {
        alias: 'lg',
        mediaQuery: 'screen and (min-width: 1280px) and (max-width: 1919px)'
    },
    {
        alias: 'gt-lg',
        overlapping: true,
        mediaQuery: 'screen and (min-width: 1920px)'
    },
    {
        alias: 'lt-xl',
        overlapping: true,
        mediaQuery: 'screen and (max-width: 1920px)'
    },
    {
        alias: 'xl',
        mediaQuery: 'screen and (min-width: 1920px) and (max-width: 5000px)'
    }
];

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/* tslint:disable */
var HANDSET_PORTRAIT = '(orientations: portrait) and (max-width: 599px)';
var HANDSET_LANDSCAPE = '(orientations: landscape) and (max-width: 959px)';
var TABLET_LANDSCAPE = '(orientations: landscape) and (min-width: 960px) and (max-width: 1279px)';
var TABLET_PORTRAIT = '(orientations: portrait) and (min-width: 600px) and (max-width: 839px)';
var WEB_PORTRAIT = '(orientations: portrait) and (min-width: 840px)';
var WEB_LANDSCAPE = '(orientations: landscape) and (min-width: 1280px)';
var ScreenTypes = {
    'HANDSET': HANDSET_PORTRAIT + ", " + HANDSET_LANDSCAPE,
    'TABLET': TABLET_PORTRAIT + " , " + TABLET_LANDSCAPE,
    'WEB': WEB_PORTRAIT + ", " + WEB_LANDSCAPE + " ",
    'HANDSET_PORTRAIT': "" + HANDSET_PORTRAIT,
    'TABLET_PORTRAIT': TABLET_PORTRAIT + " ",
    'WEB_PORTRAIT': "" + WEB_PORTRAIT,
    'HANDSET_LANDSCAPE': HANDSET_LANDSCAPE + "]",
    'TABLET_LANDSCAPE': "" + TABLET_LANDSCAPE,
    'WEB_LANDSCAPE': "" + WEB_LANDSCAPE
};
/**
 * Extended Breakpoints for handset/tablets with landscape or portrait orientations
 */
var ORIENTATION_BREAKPOINTS = [
    { 'alias': 'handset', 'mediaQuery': ScreenTypes.HANDSET },
    { 'alias': 'handset.landscape', 'mediaQuery': ScreenTypes.HANDSET_LANDSCAPE },
    { 'alias': 'handset.portrait', 'mediaQuery': ScreenTypes.HANDSET_PORTRAIT },
    { 'alias': 'tablet', 'mediaQuery': ScreenTypes.TABLET },
    { 'alias': 'tablet.landscape', 'mediaQuery': ScreenTypes.TABLET },
    { 'alias': 'tablet.portrait', 'mediaQuery': ScreenTypes.TABLET_PORTRAIT },
    { 'alias': 'web', 'mediaQuery': ScreenTypes.WEB, overlapping: true },
    { 'alias': 'web.landscape', 'mediaQuery': ScreenTypes.WEB_LANDSCAPE, overlapping: true },
    { 'alias': 'web.portrait', 'mediaQuery': ScreenTypes.WEB_PORTRAIT, overlapping: true }
];

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var ALIAS_DELIMITERS = /(\.|-|_)/g;
function firstUpperCase(part) {
    var first = part.length > 0 ? part.charAt(0) : "";
    var remainder = (part.length > 1) ? part.slice(1) : "";
    return first.toUpperCase() + remainder;
}
/**
 * Converts snake-case to SnakeCase.
 * @param name Text to UpperCamelCase
 */
function camelCase(name) {
    return name
        .replace(ALIAS_DELIMITERS, "|")
        .split("|")
        .map(firstUpperCase)
        .join("");
}
/**
 * For each breakpoint, ensure that a Suffix is defined;
 * fallback to UpperCamelCase the unique Alias value
 */
function validateSuffixes(list) {
    list.forEach(function (bp) {
        if (!bp.suffix || bp.suffix === "") {
            bp.suffix = camelCase(bp.alias); // create Suffix value based on alias
            bp.overlapping = bp.overlapping || false; // ensure default value
        }
    });
    return list;
}
/**
 * Merge a custom breakpoint list with the default list based on unique alias values
 *  - Items are added if the alias is not in the default list
 *  - Items are merged with the custom override if the alias exists in the default list
 */
function mergeByAlias(defaults, custom) {
    if (custom === void 0) { custom = []; }
    var merged = defaults.map(function (bp) { return extendObject({}, bp); });
    var findByAlias = function (alias) { return merged.reduce(function (result, bp) {
        return result || ((bp.alias === alias) ? bp : null);
    }, null); };
    // Merge custom breakpoints
    custom.forEach(function (bp) {
        var target = findByAlias(bp.alias);
        if (target) {
            extendObject(target, bp);
        }
        else {
            merged.push(bp);
        }
    });
    return validateSuffixes(merged);
}

/**
 * Add new custom items to the default list or override existing default with custom overrides
 */
function buildMergedBreakPoints(_custom, options) {
    options = extendObject({}, {
        defaults: true,
        orientation: false // exclude pre-configured, internal orientations breakpoints
    }, options || {});
    return function () {
        // Order so the defaults are loaded last; so ObservableMedia will report these last!
        var defaults = options.orientations ? ORIENTATION_BREAKPOINTS.concat(DEFAULT_BREAKPOINTS) :
            DEFAULT_BREAKPOINTS;
        return options.defaults ? mergeByAlias(defaults, _custom || []) : mergeByAlias(_custom);
    };
}
/**
 *  Ensure that only a single global BreakPoint list is instantiated...
 */
function DEFAULT_BREAKPOINTS_PROVIDER_FACTORY() {
    return validateSuffixes(DEFAULT_BREAKPOINTS);
}
/**
 * Default Provider that does not support external customization nor provide
 * the extra extended breakpoints:   "handset", "tablet", and "web"
 *
 *  NOTE: !! breakpoints are considered to have unique 'alias' properties,
 *        custom breakpoints matching existing breakpoints will override the properties
 *        of the existing (and not be added as an extra breakpoint entry).
 *        [xs, gt-xs, sm, gt-sm, md, gt-md, lg, gt-lg, xl]
 */
var DEFAULT_BREAKPOINTS_PROVIDER = {
    provide: BREAKPOINTS,
    useFactory: DEFAULT_BREAKPOINTS_PROVIDER_FACTORY
};
/**
 * Use with FlexLayoutModule.CUSTOM_BREAKPOINTS_PROVIDER_FACTORY!
 */
function CUSTOM_BREAKPOINTS_PROVIDER_FACTORY(_custom, options) {
    return {
        provide: BREAKPOINTS,
        useFactory: buildMergedBreakPoints(_custom, options)
    };
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * *****************************************************************
 * Define module for the MediaQuery API
 * *****************************************************************
 */
var MediaQueriesModule = (function () {
    function MediaQueriesModule() {
    }
    return MediaQueriesModule;
}());
MediaQueriesModule.decorators = [
    { type: NgModule, args: [{
                providers: [
                    DEFAULT_BREAKPOINTS_PROVIDER,
                    BreakPointRegistry,
                    MatchMedia,
                    MediaMonitor,
                    OBSERVABLE_MEDIA_PROVIDER // easy subscription injectable `media$` matchMedia observable
                ]
            },] },
];
/** @nocollapse */
MediaQueriesModule.ctorParameters = function () { return []; };

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Ensure a single global service provider
 */
function MEDIA_MONITOR_PROVIDER_FACTORY(parentMonitor, breakpoints, matchMedia) {
    return parentMonitor || new MediaMonitor(breakpoints, matchMedia);
}
/**
 * Export provider that uses a global service factory (above)
 */
var MEDIA_MONITOR_PROVIDER = {
    provide: MediaMonitor,
    deps: [
        [new Optional(), new SkipSelf(), MediaMonitor],
        BreakPointRegistry,
        MatchMedia,
    ],
    useFactory: MEDIA_MONITOR_PROVIDER_FACTORY
};

var __extends$31 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * 'layout' flexbox styling directive
 * Defines the positioning flow direction for the child elements: row or column
 * Optional values: column or row (default)
 * @see https://css-tricks.com/almanac/properties/f/flex-direction/
 *
 */
var LayoutDirective = (function (_super) {
    __extends$31(LayoutDirective, _super);
    /* tslint:enable */
    /**
     *
     */
    function LayoutDirective(monitor, elRef, renderer) {
        var _this = _super.call(this, monitor, elRef, renderer) || this;
        _this._announcer = new BehaviorSubject_2("row");
        _this.layout$ = _this._announcer.asObservable();
        return _this;
    }
    Object.defineProperty(LayoutDirective.prototype, "layout", {
        /* tslint:disable */
        set: function (val) { this._cacheInput("layout", val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutDirective.prototype, "layoutXs", {
        set: function (val) { this._cacheInput('layoutXs', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutDirective.prototype, "layoutSm", {
        set: function (val) { this._cacheInput('layoutSm', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutDirective.prototype, "layoutMd", {
        set: function (val) { this._cacheInput('layoutMd', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutDirective.prototype, "layoutLg", {
        set: function (val) { this._cacheInput('layoutLg', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutDirective.prototype, "layoutXl", {
        set: function (val) { this._cacheInput('layoutXl', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutDirective.prototype, "layoutGtXs", {
        set: function (val) { this._cacheInput('layoutGtXs', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutDirective.prototype, "layoutGtSm", {
        set: function (val) { this._cacheInput('layoutGtSm', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutDirective.prototype, "layoutGtMd", {
        set: function (val) { this._cacheInput('layoutGtMd', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutDirective.prototype, "layoutGtLg", {
        set: function (val) { this._cacheInput('layoutGtLg', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutDirective.prototype, "layoutLtSm", {
        set: function (val) { this._cacheInput('layoutLtSm', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutDirective.prototype, "layoutLtMd", {
        set: function (val) { this._cacheInput('layoutLtMd', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutDirective.prototype, "layoutLtLg", {
        set: function (val) { this._cacheInput('layoutLtLg', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutDirective.prototype, "layoutLtXl", {
        set: function (val) { this._cacheInput('layoutLtXl', val); },
        enumerable: true,
        configurable: true
    });
    
    // *********************************************
    // Lifecycle Methods
    // *********************************************
    /**
     * On changes to any @Input properties...
     * Default to use the non-responsive Input value ('fxLayout')
     * Then conditionally override with the mq-activated Input's current value
     */
    LayoutDirective.prototype.ngOnChanges = function (changes) {
        if (changes['layout'] != null || this._mqActivation) {
            this._updateWithDirection();
        }
    };
    /**
     * After the initial onChanges, build an mqActivation object that bridges
     * mql change events to onMediaQueryChange handlers
     */
    LayoutDirective.prototype.ngOnInit = function () {
        var _this = this;
        this._listenForMediaQueryChanges('layout', 'row', function (changes) {
            _this._updateWithDirection(changes.value);
        });
        this._updateWithDirection();
    };
    // *********************************************
    // Protected methods
    // *********************************************
    /**
     * Validate the direction value and then update the host's inline flexbox styles
     */
    LayoutDirective.prototype._updateWithDirection = function (value) {
        value = value || this._queryInput("layout") || 'row';
        if (this._mqActivation) {
            value = this._mqActivation.activatedInput;
        }
        // Update styles and announce to subscribers the *new* direction
        var css = buildLayoutCSS(value);
        this._applyStyleToElement(css);
        this._announcer.next(css['flex-direction']);
    };
    return LayoutDirective;
}(BaseFxDirective));
LayoutDirective.decorators = [
    { type: Directive, args: [{ selector: "\n  [fxLayout],\n  [fxLayout.xs], [fxLayout.sm], [fxLayout.md], [fxLayout.lg], [fxLayout.xl],\n  [fxLayout.lt-sm], [fxLayout.lt-md], [fxLayout.lt-lg], [fxLayout.lt-xl],\n  [fxLayout.gt-xs], [fxLayout.gt-sm], [fxLayout.gt-md], [fxLayout.gt-lg]\n" },] },
];
/** @nocollapse */
LayoutDirective.ctorParameters = function () { return [
    { type: MediaMonitor, },
    { type: ElementRef, },
    { type: Renderer2, },
]; };
LayoutDirective.propDecorators = {
    'layout': [{ type: Input, args: ['fxLayout',] },],
    'layoutXs': [{ type: Input, args: ['fxLayout.xs',] },],
    'layoutSm': [{ type: Input, args: ['fxLayout.sm',] },],
    'layoutMd': [{ type: Input, args: ['fxLayout.md',] },],
    'layoutLg': [{ type: Input, args: ['fxLayout.lg',] },],
    'layoutXl': [{ type: Input, args: ['fxLayout.xl',] },],
    'layoutGtXs': [{ type: Input, args: ['fxLayout.gt-xs',] },],
    'layoutGtSm': [{ type: Input, args: ['fxLayout.gt-sm',] },],
    'layoutGtMd': [{ type: Input, args: ['fxLayout.gt-md',] },],
    'layoutGtLg': [{ type: Input, args: ['fxLayout.gt-lg',] },],
    'layoutLtSm': [{ type: Input, args: ['fxLayout.lt-sm',] },],
    'layoutLtMd': [{ type: Input, args: ['fxLayout.lt-md',] },],
    'layoutLtLg': [{ type: Input, args: ['fxLayout.lt-lg',] },],
    'layoutLtXl': [{ type: Input, args: ['fxLayout.lt-xl',] },],
};

var __extends$32 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @deprecated
 * This functionality is now part of the `fxLayout` API
 *
 * 'layout-wrap' flexbox styling directive
 * Defines wrapping of child elements in layout container
 * Optional values: reverse, wrap-reverse, none, nowrap, wrap (default)]
 *
 *
 * @see https://css-tricks.com/almanac/properties/f/flex-wrap/
 */
var LayoutWrapDirective = (function (_super) {
    __extends$32(LayoutWrapDirective, _super);
    /* tslint:enable */
    function LayoutWrapDirective(monitor, elRef, renderer, container) {
        var _this = _super.call(this, monitor, elRef, renderer) || this;
        _this._layout = 'row'; // default flex-direction
        if (container) {
            _this._layoutWatcher = container.layout$.subscribe(_this._onLayoutChange.bind(_this));
        }
        return _this;
    }
    Object.defineProperty(LayoutWrapDirective.prototype, "wrap", {
        /* tslint:disable */
        set: function (val) { this._cacheInput("wrap", val); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutWrapDirective.prototype, "wrapXs", {
        set: function (val) { this._cacheInput('wrapXs', val); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutWrapDirective.prototype, "wrapSm", {
        set: function (val) { this._cacheInput('wrapSm', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutWrapDirective.prototype, "wrapMd", {
        set: function (val) { this._cacheInput('wrapMd', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutWrapDirective.prototype, "wrapLg", {
        set: function (val) { this._cacheInput('wrapLg', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutWrapDirective.prototype, "wrapXl", {
        set: function (val) { this._cacheInput('wrapXl', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutWrapDirective.prototype, "wrapGtXs", {
        set: function (val) { this._cacheInput('wrapGtXs', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutWrapDirective.prototype, "wrapGtSm", {
        set: function (val) { this._cacheInput('wrapGtSm', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutWrapDirective.prototype, "wrapGtMd", {
        set: function (val) { this._cacheInput('wrapGtMd', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutWrapDirective.prototype, "wrapGtLg", {
        set: function (val) { this._cacheInput('wrapGtLg', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutWrapDirective.prototype, "wrapLtSm", {
        set: function (val) { this._cacheInput('wrapLtSm', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutWrapDirective.prototype, "wrapLtMd", {
        set: function (val) { this._cacheInput('wrapLtMd', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutWrapDirective.prototype, "wrapLtLg", {
        set: function (val) { this._cacheInput('wrapLtLg', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutWrapDirective.prototype, "wrapLtXl", {
        set: function (val) { this._cacheInput('wrapLtXl', val); },
        enumerable: true,
        configurable: true
    });
    
    // *********************************************
    // Lifecycle Methods
    // *********************************************
    LayoutWrapDirective.prototype.ngOnChanges = function (changes) {
        if (changes['wrap'] != null || this._mqActivation) {
            this._updateWithValue();
        }
    };
    /**
     * After the initial onChanges, build an mqActivation object that bridges
     * mql change events to onMediaQueryChange handlers
     */
    LayoutWrapDirective.prototype.ngOnInit = function () {
        var _this = this;
        this._listenForMediaQueryChanges('wrap', 'wrap', function (changes) {
            _this._updateWithValue(changes.value);
        });
        this._updateWithValue();
    };
    LayoutWrapDirective.prototype.ngOnDestroy = function () {
        _super.prototype.ngOnDestroy.call(this);
        if (this._layoutWatcher) {
            this._layoutWatcher.unsubscribe();
        }
    };
    // *********************************************
    // Protected methods
    // *********************************************
    /**
     * Cache the parent container 'flex-direction' and update the 'flex' styles
     */
    LayoutWrapDirective.prototype._onLayoutChange = function (direction) {
        var _this = this;
        this._layout = (direction || '').toLowerCase().replace('-reverse', '');
        if (!LAYOUT_VALUES.find(function (x) { return x === _this._layout; })) {
            this._layout = 'row';
        }
        this._updateWithValue();
    };
    LayoutWrapDirective.prototype._updateWithValue = function (value) {
        value = value || this._queryInput("wrap");
        if (this._mqActivation) {
            value = this._mqActivation.activatedInput;
        }
        value = validateWrapValue(value || 'wrap');
        this._applyStyleToElement(this._buildCSS(value));
    };
    /**
     * Build the CSS that should be assigned to the element instance
     */
    LayoutWrapDirective.prototype._buildCSS = function (value) {
        return {
            'display': 'flex',
            'flex-wrap': value,
            'flex-direction': this.flowDirection
        };
    };
    Object.defineProperty(LayoutWrapDirective.prototype, "flowDirection", {
        get: function () {
            var _this = this;
            var computeFlowDirection = function () { return _this._getFlowDirection(_this._elementRef.nativeElement); };
            return this._layoutWatcher ? this._layout : computeFlowDirection();
        },
        enumerable: true,
        configurable: true
    });
    return LayoutWrapDirective;
}(BaseFxDirective));
LayoutWrapDirective.decorators = [
    { type: Directive, args: [{ selector: "\n  [fxLayoutWrap], [fxLayoutWrap.xs], [fxLayoutWrap.sm], [fxLayoutWrap.lg], [fxLayoutWrap.xl],\n  [fxLayoutWrap.gt-xs], [fxLayoutWrap.gt-sm], [fxLayoutWrap.gt-md], [fxLayoutWrap.gt-lg],\n  [fxLayoutWrap.lt-xs], [fxLayoutWrap.lt-sm], [fxLayoutWrap.lt-md], [fxLayoutWrap.lt-lg]\n" },] },
];
/** @nocollapse */
LayoutWrapDirective.ctorParameters = function () { return [
    { type: MediaMonitor, },
    { type: ElementRef, },
    { type: Renderer2, },
    { type: LayoutDirective, decorators: [{ type: Optional }, { type: Self },] },
]; };
LayoutWrapDirective.propDecorators = {
    'wrap': [{ type: Input, args: ['fxLayoutWrap',] },],
    'wrapXs': [{ type: Input, args: ['fxLayoutWrap.xs',] },],
    'wrapSm': [{ type: Input, args: ['fxLayoutWrap.sm',] },],
    'wrapMd': [{ type: Input, args: ['fxLayoutWrap.md',] },],
    'wrapLg': [{ type: Input, args: ['fxLayoutWrap.lg',] },],
    'wrapXl': [{ type: Input, args: ['fxLayoutWrap.xl',] },],
    'wrapGtXs': [{ type: Input, args: ['fxLayoutWrap.gt-xs',] },],
    'wrapGtSm': [{ type: Input, args: ['fxLayoutWrap.gt-sm',] },],
    'wrapGtMd': [{ type: Input, args: ['fxLayoutWrap.gt-md',] },],
    'wrapGtLg': [{ type: Input, args: ['fxLayoutWrap.gt-lg',] },],
    'wrapLtSm': [{ type: Input, args: ['fxLayoutWrap.lt-sm',] },],
    'wrapLtMd': [{ type: Input, args: ['fxLayoutWrap.lt-md',] },],
    'wrapLtLg': [{ type: Input, args: ['fxLayoutWrap.lt-lg',] },],
    'wrapLtXl': [{ type: Input, args: ['fxLayoutWrap.lt-xl',] },],
};

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
* The flex API permits 3 or 1 parts of the value:
*    - `flex-grow flex-shrink flex-basis`, or
*    - `flex-basis`
*/
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */ function validateBasis(basis, grow, shrink) {
    if (grow === void 0) { grow = "1"; }
    if (shrink === void 0) { shrink = "1"; }
    var parts = [grow, shrink, basis];
    var j = basis.indexOf('calc');
    if (j > 0) {
        parts[2] = _validateCalcValue(basis.substring(j).trim());
        var matches = basis.substr(0, j).trim().split(" ");
        if (matches.length == 2) {
            parts[0] = matches[0];
            parts[1] = matches[1];
        }
    }
    else if (j == 0) {
        parts[2] = _validateCalcValue(basis.trim());
    }
    else {
        var matches = basis.split(" ");
        parts = (matches.length === 3) ? matches : [
            grow, shrink, basis
        ];
    }
    return parts;
}
/**
 * Calc expressions require whitespace before & after any expression operators
 * This is a simple, crude whitespace padding solution.
 *   - "3 3 calc(15em + 20px)"
 *   - calc(100% / 7 * 2)
 *   - "calc(15em + 20px)"
 *   - "calc(15em+20px)"
 *   - "37px"
 *   = "43%"
 */
function _validateCalcValue(calc) {
    return calc.replace(/[\s]/g, "").replace(/[\/\*\+\-]/g, " $& ");
}

var __extends$30 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Directive to control the size of a flex item using flex-basis, flex-grow, and flex-shrink.
 * Corresponds to the css `flex` shorthand property.
 *
 * @see https://css-tricks.com/snippets/css/a-guide-to-flexbox/
 */
var FlexDirective = (function (_super) {
    __extends$30(FlexDirective, _super);
    /* tslint:enable */
    // Explicitly @SkipSelf on LayoutDirective and LayoutWrapDirective because we want the
    // parent flex container for this flex item.
    function FlexDirective(monitor, elRef, renderer, _container, _wrap) {
        var _this = _super.call(this, monitor, elRef, renderer) || this;
        _this._container = _container;
        _this._wrap = _wrap;
        /** The flex-direction of this element's flex container. Defaults to 'row'. */
        _this._layout = 'row';
        _this._cacheInput("flex", "");
        _this._cacheInput("shrink", 1);
        _this._cacheInput("grow", 1);
        if (_container) {
            // If this flex item is inside of a flex container marked with
            // Subscribe to layout immediate parent direction changes
            _this._layoutWatcher = _container.layout$.subscribe(function (direction) {
                // `direction` === null if parent container does not have a `fxLayout`
                _this._onLayoutChange(direction);
            });
        }
        return _this;
    }
    Object.defineProperty(FlexDirective.prototype, "shrink", {
        /* tslint:disable */
        set: function (val) { this._cacheInput("shrink", val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexDirective.prototype, "grow", {
        set: function (val) { this._cacheInput("grow", val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexDirective.prototype, "flex", {
        set: function (val) { this._cacheInput("flex", val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexDirective.prototype, "flexXs", {
        set: function (val) { this._cacheInput('flexXs', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexDirective.prototype, "flexSm", {
        set: function (val) { this._cacheInput('flexSm', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexDirective.prototype, "flexMd", {
        set: function (val) { this._cacheInput('flexMd', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexDirective.prototype, "flexLg", {
        set: function (val) { this._cacheInput('flexLg', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexDirective.prototype, "flexXl", {
        set: function (val) { this._cacheInput('flexXl', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexDirective.prototype, "flexGtXs", {
        set: function (val) { this._cacheInput('flexGtXs', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexDirective.prototype, "flexGtSm", {
        set: function (val) { this._cacheInput('flexGtSm', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexDirective.prototype, "flexGtMd", {
        set: function (val) { this._cacheInput('flexGtMd', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexDirective.prototype, "flexGtLg", {
        set: function (val) { this._cacheInput('flexGtLg', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexDirective.prototype, "flexLtSm", {
        set: function (val) { this._cacheInput('flexLtSm', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexDirective.prototype, "flexLtMd", {
        set: function (val) { this._cacheInput('flexLtMd', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexDirective.prototype, "flexLtLg", {
        set: function (val) { this._cacheInput('flexLtLg', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexDirective.prototype, "flexLtXl", {
        set: function (val) { this._cacheInput('flexLtXl', val); },
        enumerable: true,
        configurable: true
    });
    
    /**
     * For @Input changes on the current mq activation property, see onMediaQueryChanges()
     */
    FlexDirective.prototype.ngOnChanges = function (changes) {
        if (changes['flex'] != null || this._mqActivation) {
            this._updateStyle();
        }
    };
    /**
     * After the initial onChanges, build an mqActivation object that bridges
     * mql change events to onMediaQueryChange handlers
     */
    FlexDirective.prototype.ngOnInit = function () {
        var _this = this;
        this._listenForMediaQueryChanges('flex', '', function (changes) {
            _this._updateStyle(changes.value);
        });
        this._updateStyle();
    };
    FlexDirective.prototype.ngOnDestroy = function () {
        _super.prototype.ngOnDestroy.call(this);
        if (this._layoutWatcher) {
            this._layoutWatcher.unsubscribe();
        }
    };
    /**
     * Caches the parent container's 'flex-direction' and updates the element's style.
     * Used as a handler for layout change events from the parent flex container.
     */
    FlexDirective.prototype._onLayoutChange = function (direction) {
        this._layout = direction || this._layout || "row";
        this._updateStyle();
    };
    FlexDirective.prototype._updateStyle = function (value) {
        var flexBasis = value || this._queryInput("flex") || '';
        if (this._mqActivation) {
            flexBasis = this._mqActivation.activatedInput;
        }
        var basis = String(flexBasis).replace(";", "");
        var parts = validateBasis(basis, this._queryInput("grow"), this._queryInput("shrink"));
        this._applyStyleToElement(this._validateValue.apply(this, parts));
    };
    /**
     * Validate the value to be one of the acceptable value options
     * Use default fallback of "row"
     */
    FlexDirective.prototype._validateValue = function (grow, shrink, basis) {
        // The flex-direction of this element's flex container. Defaults to 'row'.
        var layout = this._getFlowDirection(this.parentElement, true);
        var direction = (layout.indexOf('column') > -1) ? 'column' : 'row';
        var css, isValue;
        grow = (grow == "0") ? 0 : grow;
        shrink = (shrink == "0") ? 0 : shrink;
        // flex-basis allows you to specify the initial/starting main-axis size of the element,
        // before anything else is computed. It can either be a percentage or an absolute value.
        // It is, however, not the breaking point for flex-grow/shrink properties
        //
        // flex-grow can be seen as this:
        //   0: Do not stretch. Either size to element's content width, or obey 'flex-basis'.
        //   1: (Default value). Stretch; will be the same size to all other flex items on
        //       the same row since they have a default value of 1.
        //   ≥2 (integer n): Stretch. Will be n times the size of other elements
        //      with 'flex-grow: 1' on the same row.
        // Use `null` to clear existing styles.
        var clearStyles = {
            'max-width': null,
            'max-height': null,
            'min-width': null,
            'min-height': null
        };
        switch (basis || '') {
            case '':
                css = extendObject(clearStyles, { 'flex': '1 1 0.000000001px' });
                break;
            case 'initial': // default
            case 'nogrow':
                grow = 0;
                css = extendObject(clearStyles, { 'flex': '0 1 auto' });
                break;
            case 'grow':
                css = extendObject(clearStyles, { 'flex': '1 1 100%' });
                break;
            case 'noshrink':
                shrink = 0;
                css = extendObject(clearStyles, { 'flex': '1 0 auto' });
                break;
            case 'auto':
                css = extendObject(clearStyles, { 'flex': grow + " " + shrink + " auto" });
                break;
            case 'none':
                grow = 0;
                shrink = 0;
                css = extendObject(clearStyles, { 'flex': '0 0 auto' });
                break;
            default:
                var hasCalc = String(basis).indexOf('calc') > -1;
                var isPercent = String(basis).indexOf('%') > -1 && !hasCalc;
                isValue = hasCalc ||
                    String(basis).indexOf('px') > -1 ||
                    String(basis).indexOf('em') > -1 ||
                    String(basis).indexOf('vw') > -1 ||
                    String(basis).indexOf('vh') > -1;
                // Defaults to percentage sizing unless `px` is explicitly set
                if (!isValue && !isPercent && !isNaN(basis)) {
                    basis = basis + '%';
                }
                if (basis === '0px') {
                    basis = '0%';
                }
                // Set max-width = basis if using layout-wrap
                // tslint:disable-next-line:max-line-length
                // @see https://github.com/philipwalton/flexbugs#11-min-and-max-size-declarations-are-ignored-when-wrappifl-flex-items
                css = extendObject(clearStyles, {
                    'flex': grow + " " + shrink + " " + ((isValue || this._wrap) ? basis : '100%'),
                });
                break;
        }
        var max = (direction === 'row') ? 'max-width' : 'max-height';
        var min = (direction === 'row') ? 'min-width' : 'min-height';
        var usingCalc = (String(basis).indexOf('calc') > -1) || (basis == 'auto');
        var isPx = String(basis).indexOf('px') > -1 || usingCalc;
        // make box inflexible when shrink and grow are both zero
        // should not set a min when the grow is zero
        // should not set a max when the shrink is zero
        var isFixed = !grow && !shrink;
        css[min] = (basis == '0%') ? 0 : isFixed || (isPx && grow) ? basis : null;
        css[max] = (basis == '0%') ? 0 : isFixed || (!usingCalc && shrink) ? basis : null;
        return extendObject(css, { 'box-sizing': 'border-box' });
    };
    Object.defineProperty(FlexDirective.prototype, "parentElement", {
        get: function () {
            return this._elementRef.nativeElement.parentNode;
        },
        enumerable: true,
        configurable: true
    });
    return FlexDirective;
}(BaseFxDirective));
FlexDirective.decorators = [
    { type: Directive, args: [{ selector: "\n  [fxFlex],\n  [fxFlex.xs], [fxFlex.sm], [fxFlex.md], [fxFlex.lg], [fxFlex.xl],\n  [fxFlex.lt-sm], [fxFlex.lt-md], [fxFlex.lt-lg], [fxFlex.lt-xl],\n  [fxFlex.gt-xs], [fxFlex.gt-sm], [fxFlex.gt-md], [fxFlex.gt-lg],\n"
            },] },
];
/** @nocollapse */
FlexDirective.ctorParameters = function () { return [
    { type: MediaMonitor, },
    { type: ElementRef, },
    { type: Renderer2, },
    { type: LayoutDirective, decorators: [{ type: Optional }, { type: SkipSelf },] },
    { type: LayoutWrapDirective, decorators: [{ type: Optional }, { type: SkipSelf },] },
]; };
FlexDirective.propDecorators = {
    'shrink': [{ type: Input, args: ['fxShrink',] },],
    'grow': [{ type: Input, args: ['fxGrow',] },],
    'flex': [{ type: Input, args: ['fxFlex',] },],
    'flexXs': [{ type: Input, args: ['fxFlex.xs',] },],
    'flexSm': [{ type: Input, args: ['fxFlex.sm',] },],
    'flexMd': [{ type: Input, args: ['fxFlex.md',] },],
    'flexLg': [{ type: Input, args: ['fxFlex.lg',] },],
    'flexXl': [{ type: Input, args: ['fxFlex.xl',] },],
    'flexGtXs': [{ type: Input, args: ['fxFlex.gt-xs',] },],
    'flexGtSm': [{ type: Input, args: ['fxFlex.gt-sm',] },],
    'flexGtMd': [{ type: Input, args: ['fxFlex.gt-md',] },],
    'flexGtLg': [{ type: Input, args: ['fxFlex.gt-lg',] },],
    'flexLtSm': [{ type: Input, args: ['fxFlex.lt-sm',] },],
    'flexLtMd': [{ type: Input, args: ['fxFlex.lt-md',] },],
    'flexLtLg': [{ type: Input, args: ['fxFlex.lt-lg',] },],
    'flexLtXl': [{ type: Input, args: ['fxFlex.lt-xl',] },],
};

var __extends$33 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var FALSY = ['false', false, 0];
/**
 * For fxHide selectors, we invert the 'value'
 * and assign to the equivalent fxShow selector cache
 *  - When 'hide' === '' === true, do NOT show the element
 *  - When 'hide' === false or 0... we WILL show the element
 */
function negativeOf(hide) {
    return (hide === "") ? false :
        ((hide === "false") || (hide === 0)) ? true : !hide;
}
/**
 * 'show' Layout API directive
 *
 */
var ShowHideDirective = (function (_super) {
    __extends$33(ShowHideDirective, _super);
    /* tslint:enable */
    /**
     *
     */
    function ShowHideDirective(monitor, _layout, elRef, renderer) {
        var _this = _super.call(this, monitor, elRef, renderer) || this;
        _this._layout = _layout;
        _this.elRef = elRef;
        _this.renderer = renderer;
        _this._display = _this._getDisplayStyle(); // re-invoke override to use `this._layout`
        if (_layout) {
            /**
             * The Layout can set the display:flex (and incorrectly affect the Hide/Show directives.
             * Whenever Layout [on the same element] resets its CSS, then update the Hide/Show CSS
             */
            _this._layoutWatcher = _layout.layout$.subscribe(function () { return _this._updateWithValue(); });
        }
        return _this;
    }
    Object.defineProperty(ShowHideDirective.prototype, "show", {
        /* tslint:disable */
        set: function (val) { this._cacheInput("show", val); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ShowHideDirective.prototype, "showXs", {
        set: function (val) { this._cacheInput('showXs', val); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ShowHideDirective.prototype, "showSm", {
        set: function (val) { this._cacheInput('showSm', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(ShowHideDirective.prototype, "showMd", {
        set: function (val) { this._cacheInput('showMd', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(ShowHideDirective.prototype, "showLg", {
        set: function (val) { this._cacheInput('showLg', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(ShowHideDirective.prototype, "showXl", {
        set: function (val) { this._cacheInput('showXl', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(ShowHideDirective.prototype, "showLtSm", {
        set: function (val) { this._cacheInput('showLtSm', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(ShowHideDirective.prototype, "showLtMd", {
        set: function (val) { this._cacheInput('showLtMd', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(ShowHideDirective.prototype, "showLtLg", {
        set: function (val) { this._cacheInput('showLtLg', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(ShowHideDirective.prototype, "showLtXl", {
        set: function (val) { this._cacheInput('showLtXl', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(ShowHideDirective.prototype, "showGtXs", {
        set: function (val) { this._cacheInput('showGtXs', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(ShowHideDirective.prototype, "showGtSm", {
        set: function (val) { this._cacheInput('showGtSm', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(ShowHideDirective.prototype, "showGtMd", {
        set: function (val) { this._cacheInput('showGtMd', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(ShowHideDirective.prototype, "showGtLg", {
        set: function (val) { this._cacheInput('showGtLg', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(ShowHideDirective.prototype, "hide", {
        set: function (val) { this._cacheInput("show", negativeOf(val)); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ShowHideDirective.prototype, "hideXs", {
        set: function (val) { this._cacheInput("showXs", negativeOf(val)); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ShowHideDirective.prototype, "hideSm", {
        set: function (val) { this._cacheInput('showSm', negativeOf(val)); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(ShowHideDirective.prototype, "hideMd", {
        set: function (val) { this._cacheInput('showMd', negativeOf(val)); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(ShowHideDirective.prototype, "hideLg", {
        set: function (val) { this._cacheInput('showLg', negativeOf(val)); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(ShowHideDirective.prototype, "hideXl", {
        set: function (val) { this._cacheInput('showXl', negativeOf(val)); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(ShowHideDirective.prototype, "hideLtSm", {
        set: function (val) { this._cacheInput('showLtSm', negativeOf(val)); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(ShowHideDirective.prototype, "hideLtMd", {
        set: function (val) { this._cacheInput('showLtMd', negativeOf(val)); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(ShowHideDirective.prototype, "hideLtLg", {
        set: function (val) { this._cacheInput('showLtLg', negativeOf(val)); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(ShowHideDirective.prototype, "hideLtXl", {
        set: function (val) { this._cacheInput('showLtXl', negativeOf(val)); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(ShowHideDirective.prototype, "hideGtXs", {
        set: function (val) { this._cacheInput('showGtXs', negativeOf(val)); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(ShowHideDirective.prototype, "hideGtSm", {
        set: function (val) { this._cacheInput('showGtSm', negativeOf(val)); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(ShowHideDirective.prototype, "hideGtMd", {
        set: function (val) { this._cacheInput('showGtMd', negativeOf(val)); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(ShowHideDirective.prototype, "hideGtLg", {
        set: function (val) { this._cacheInput('showGtLg', negativeOf(val)); },
        enumerable: true,
        configurable: true
    });
    
    // *********************************************
    // Lifecycle Methods
    // *********************************************
    /**
     * Override accessor to the current HTMLElement's `display` style
     * Note: Show/Hide will not change the display to 'flex' but will set it to 'block'
     * unless it was already explicitly defined.
     */
    ShowHideDirective.prototype._getDisplayStyle = function () {
        return this._layout ? "flex" : _super.prototype._getDisplayStyle.call(this);
    };
    /**
     * On changes to any @Input properties...
     * Default to use the non-responsive Input value ('fxShow')
     * Then conditionally override with the mq-activated Input's current value
     */
    ShowHideDirective.prototype.ngOnChanges = function (changes) {
        if (changes['show'] != null || this._mqActivation) {
            this._updateWithValue();
        }
    };
    /**
     * After the initial onChanges, build an mqActivation object that bridges
     * mql change events to onMediaQueryChange handlers
     */
    ShowHideDirective.prototype.ngOnInit = function () {
        var _this = this;
        var value = this._getDefaultVal("show", true);
        // Build _mqActivation controller
        this._listenForMediaQueryChanges('show', value, function (changes) {
            _this._updateWithValue(changes.value);
        });
        this._updateWithValue();
    };
    ShowHideDirective.prototype.ngOnDestroy = function () {
        _super.prototype.ngOnDestroy.call(this);
        if (this._layoutWatcher) {
            this._layoutWatcher.unsubscribe();
        }
    };
    // *********************************************
    // Protected methods
    // *********************************************
    /** Validate the visibility value and then update the host's inline display style */
    ShowHideDirective.prototype._updateWithValue = function (value) {
        value = value || this._getDefaultVal("show", true);
        if (this._mqActivation) {
            value = this._mqActivation.activatedInput;
        }
        var shouldShow = this._validateTruthy(value);
        this._applyStyleToElement(this._buildCSS(shouldShow));
    };
    /** Build the CSS that should be assigned to the element instance */
    ShowHideDirective.prototype._buildCSS = function (show) {
        return { 'display': show ? this._display : 'none' };
    };
    /**  Validate the to be not FALSY */
    ShowHideDirective.prototype._validateTruthy = function (show) {
        return (FALSY.indexOf(show) == -1);
    };
    return ShowHideDirective;
}(BaseFxDirective));
ShowHideDirective.decorators = [
    { type: Directive, args: [{
                selector: "\n  [fxShow],\n  [fxShow.xs], [fxShow.sm], [fxShow.md], [fxShow.lg], [fxShow.xl],\n  [fxShow.lt-sm], [fxShow.lt-md], [fxShow.lt-lg], [fxShow.lt-xl],\n  [fxShow.gt-xs], [fxShow.gt-sm], [fxShow.gt-md], [fxShow.gt-lg],\n  [fxHide],\n  [fxHide.xs], [fxHide.sm], [fxHide.md], [fxHide.lg], [fxHide.xl],\n  [fxHide.lt-sm], [fxHide.lt-md], [fxHide.lt-lg], [fxHide.lt-xl],\n  [fxHide.gt-xs], [fxHide.gt-sm], [fxHide.gt-md], [fxHide.gt-lg]\n"
            },] },
];
/** @nocollapse */
ShowHideDirective.ctorParameters = function () { return [
    { type: MediaMonitor, },
    { type: LayoutDirective, decorators: [{ type: Optional }, { type: Self },] },
    { type: ElementRef, },
    { type: Renderer2, },
]; };
ShowHideDirective.propDecorators = {
    'show': [{ type: Input, args: ['fxShow',] },],
    'showXs': [{ type: Input, args: ['fxShow.xs',] },],
    'showSm': [{ type: Input, args: ['fxShow.sm',] },],
    'showMd': [{ type: Input, args: ['fxShow.md',] },],
    'showLg': [{ type: Input, args: ['fxShow.lg',] },],
    'showXl': [{ type: Input, args: ['fxShow.xl',] },],
    'showLtSm': [{ type: Input, args: ['fxShow.lt-sm',] },],
    'showLtMd': [{ type: Input, args: ['fxShow.lt-md',] },],
    'showLtLg': [{ type: Input, args: ['fxShow.lt-lg',] },],
    'showLtXl': [{ type: Input, args: ['fxShow.lt-xl',] },],
    'showGtXs': [{ type: Input, args: ['fxShow.gt-xs',] },],
    'showGtSm': [{ type: Input, args: ['fxShow.gt-sm',] },],
    'showGtMd': [{ type: Input, args: ['fxShow.gt-md',] },],
    'showGtLg': [{ type: Input, args: ['fxShow.gt-lg',] },],
    'hide': [{ type: Input, args: ['fxHide',] },],
    'hideXs': [{ type: Input, args: ['fxHide.xs',] },],
    'hideSm': [{ type: Input, args: ['fxHide.sm',] },],
    'hideMd': [{ type: Input, args: ['fxHide.md',] },],
    'hideLg': [{ type: Input, args: ['fxHide.lg',] },],
    'hideXl': [{ type: Input, args: ['fxHide.xl',] },],
    'hideLtSm': [{ type: Input, args: ['fxHide.lt-sm',] },],
    'hideLtMd': [{ type: Input, args: ['fxHide.lt-md',] },],
    'hideLtLg': [{ type: Input, args: ['fxHide.lt-lg',] },],
    'hideLtXl': [{ type: Input, args: ['fxHide.lt-xl',] },],
    'hideGtXs': [{ type: Input, args: ['fxHide.gt-xs',] },],
    'hideGtSm': [{ type: Input, args: ['fxHide.gt-sm',] },],
    'hideGtMd': [{ type: Input, args: ['fxHide.gt-md',] },],
    'hideGtLg': [{ type: Input, args: ['fxHide.gt-lg',] },],
};

var __extends$34 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * 'flex-align' flexbox styling directive
 * Allows element-specific overrides for cross-axis alignments in a layout container
 * @see https://css-tricks.com/almanac/properties/a/align-self/
 */
var FlexAlignDirective = (function (_super) {
    __extends$34(FlexAlignDirective, _super);
    /* tslint:enable */
    function FlexAlignDirective(monitor, elRef, renderer) {
        return _super.call(this, monitor, elRef, renderer) || this;
    }
    Object.defineProperty(FlexAlignDirective.prototype, "align", {
        /* tslint:disable */
        set: function (val) { this._cacheInput('align', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexAlignDirective.prototype, "alignXs", {
        set: function (val) { this._cacheInput('alignXs', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexAlignDirective.prototype, "alignSm", {
        set: function (val) { this._cacheInput('alignSm', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexAlignDirective.prototype, "alignMd", {
        set: function (val) { this._cacheInput('alignMd', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexAlignDirective.prototype, "alignLg", {
        set: function (val) { this._cacheInput('alignLg', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexAlignDirective.prototype, "alignXl", {
        set: function (val) { this._cacheInput('alignXl', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexAlignDirective.prototype, "alignLtSm", {
        set: function (val) { this._cacheInput('alignLtSm', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexAlignDirective.prototype, "alignLtMd", {
        set: function (val) { this._cacheInput('alignLtMd', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexAlignDirective.prototype, "alignLtLg", {
        set: function (val) { this._cacheInput('alignLtLg', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexAlignDirective.prototype, "alignLtXl", {
        set: function (val) { this._cacheInput('alignLtXl', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexAlignDirective.prototype, "alignGtXs", {
        set: function (val) { this._cacheInput('alignGtXs', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexAlignDirective.prototype, "alignGtSm", {
        set: function (val) { this._cacheInput('alignGtSm', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexAlignDirective.prototype, "alignGtMd", {
        set: function (val) { this._cacheInput('alignGtMd', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexAlignDirective.prototype, "alignGtLg", {
        set: function (val) { this._cacheInput('alignGtLg', val); },
        enumerable: true,
        configurable: true
    });
    
    // *********************************************
    // Lifecycle Methods
    // *********************************************
    /**
     * For @Input changes on the current mq activation property, see onMediaQueryChanges()
     */
    FlexAlignDirective.prototype.ngOnChanges = function (changes) {
        if (changes['align'] != null || this._mqActivation) {
            this._updateWithValue();
        }
    };
    /**
     * After the initial onChanges, build an mqActivation object that bridges
     * mql change events to onMediaQueryChange handlers
     */
    FlexAlignDirective.prototype.ngOnInit = function () {
        var _this = this;
        this._listenForMediaQueryChanges('align', 'stretch', function (changes) {
            _this._updateWithValue(changes.value);
        });
        this._updateWithValue();
    };
    // *********************************************
    // Protected methods
    // *********************************************
    FlexAlignDirective.prototype._updateWithValue = function (value) {
        value = value || this._queryInput("align") || 'stretch';
        if (this._mqActivation) {
            value = this._mqActivation.activatedInput;
        }
        this._applyStyleToElement(this._buildCSS(value));
    };
    FlexAlignDirective.prototype._buildCSS = function (align) {
        var css = {};
        // Cross-axis
        switch (align) {
            case 'start':
                css['align-self'] = 'flex-start';
                break;
            case 'end':
                css['align-self'] = 'flex-end';
                break;
            default:
                css['align-self'] = align;
                break;
        }
        return css;
    };
    return FlexAlignDirective;
}(BaseFxDirective));
FlexAlignDirective.decorators = [
    { type: Directive, args: [{
                selector: "\n  [fxFlexAlign],\n  [fxFlexAlign.xs], [fxFlexAlign.sm], [fxFlexAlign.md], [fxFlexAlign.lg], [fxFlexAlign.xl],\n  [fxFlexAlign.lt-sm], [fxFlexAlign.lt-md], [fxFlexAlign.lt-lg], [fxFlexAlign.lt-xl],\n  [fxFlexAlign.gt-xs], [fxFlexAlign.gt-sm], [fxFlexAlign.gt-md], [fxFlexAlign.gt-lg]\n"
            },] },
];
/** @nocollapse */
FlexAlignDirective.ctorParameters = function () { return [
    { type: MediaMonitor, },
    { type: ElementRef, },
    { type: Renderer2, },
]; };
FlexAlignDirective.propDecorators = {
    'align': [{ type: Input, args: ['fxFlexAlign',] },],
    'alignXs': [{ type: Input, args: ['fxFlexAlign.xs',] },],
    'alignSm': [{ type: Input, args: ['fxFlexAlign.sm',] },],
    'alignMd': [{ type: Input, args: ['fxFlexAlign.md',] },],
    'alignLg': [{ type: Input, args: ['fxFlexAlign.lg',] },],
    'alignXl': [{ type: Input, args: ['fxFlexAlign.xl',] },],
    'alignLtSm': [{ type: Input, args: ['fxFlexAlign.lt-sm',] },],
    'alignLtMd': [{ type: Input, args: ['fxFlexAlign.lt-md',] },],
    'alignLtLg': [{ type: Input, args: ['fxFlexAlign.lt-lg',] },],
    'alignLtXl': [{ type: Input, args: ['fxFlexAlign.lt-xl',] },],
    'alignGtXs': [{ type: Input, args: ['fxFlexAlign.gt-xs',] },],
    'alignGtSm': [{ type: Input, args: ['fxFlexAlign.gt-sm',] },],
    'alignGtMd': [{ type: Input, args: ['fxFlexAlign.gt-md',] },],
    'alignGtLg': [{ type: Input, args: ['fxFlexAlign.gt-lg',] },],
};

var __extends$35 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var FLEX_FILL_CSS = {
    'margin': 0,
    'width': '100%',
    'height': '100%',
    'min-width': '100%',
    'min-height': '100%'
};
/**
 * 'fxFill' flexbox styling directive
 *  Maximizes width and height of element in a layout container
 *
 *  NOTE: fxFill is NOT responsive API!!
 */
var FlexFillDirective = (function (_super) {
    __extends$35(FlexFillDirective, _super);
    function FlexFillDirective(monitor, elRef, renderer) {
        var _this = _super.call(this, monitor, elRef, renderer) || this;
        _this.elRef = elRef;
        _this.renderer = renderer;
        _this._applyStyleToElement(FLEX_FILL_CSS);
        return _this;
    }
    return FlexFillDirective;
}(BaseFxDirective));
FlexFillDirective.decorators = [
    { type: Directive, args: [{ selector: "\n  [fxFill],\n  [fxFlexFill]\n" },] },
];
/** @nocollapse */
FlexFillDirective.ctorParameters = function () { return [
    { type: MediaMonitor, },
    { type: ElementRef, },
    { type: Renderer2, },
]; };

var __extends$36 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * 'flex-offset' flexbox styling directive
 * Configures the 'margin-left' of the element in a layout container
 */
var FlexOffsetDirective = (function (_super) {
    __extends$36(FlexOffsetDirective, _super);
    /* tslint:enable */
    function FlexOffsetDirective(monitor, elRef, renderer) {
        return _super.call(this, monitor, elRef, renderer) || this;
    }
    Object.defineProperty(FlexOffsetDirective.prototype, "offset", {
        /* tslint:disable */
        set: function (val) { this._cacheInput('offset', val); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexOffsetDirective.prototype, "offsetXs", {
        set: function (val) { this._cacheInput('offsetXs', val); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexOffsetDirective.prototype, "offsetSm", {
        set: function (val) { this._cacheInput('offsetSm', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexOffsetDirective.prototype, "offsetMd", {
        set: function (val) { this._cacheInput('offsetMd', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexOffsetDirective.prototype, "offsetLg", {
        set: function (val) { this._cacheInput('offsetLg', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexOffsetDirective.prototype, "offsetXl", {
        set: function (val) { this._cacheInput('offsetXl', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexOffsetDirective.prototype, "offsetLtSm", {
        set: function (val) { this._cacheInput('offsetLtSm', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexOffsetDirective.prototype, "offsetLtMd", {
        set: function (val) { this._cacheInput('offsetLtMd', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexOffsetDirective.prototype, "offsetLtLg", {
        set: function (val) { this._cacheInput('offsetLtLg', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexOffsetDirective.prototype, "offsetLtXl", {
        set: function (val) { this._cacheInput('offsetLtXl', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexOffsetDirective.prototype, "offsetGtXs", {
        set: function (val) { this._cacheInput('offsetGtXs', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexOffsetDirective.prototype, "offsetGtSm", {
        set: function (val) { this._cacheInput('offsetGtSm', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexOffsetDirective.prototype, "offsetGtMd", {
        set: function (val) { this._cacheInput('offsetGtMd', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexOffsetDirective.prototype, "offsetGtLg", {
        set: function (val) { this._cacheInput('offsetGtLg', val); },
        enumerable: true,
        configurable: true
    });
    
    // *********************************************
    // Lifecycle Methods
    // *********************************************
    /**
     * For @Input changes on the current mq activation property, see onMediaQueryChanges()
     */
    FlexOffsetDirective.prototype.ngOnChanges = function (changes) {
        if (changes['offset'] != null || this._mqActivation) {
            this._updateWithValue();
        }
    };
    /**
     * After the initial onChanges, build an mqActivation object that bridges
     * mql change events to onMediaQueryChange handlers
     */
    FlexOffsetDirective.prototype.ngOnInit = function () {
        var _this = this;
        this._listenForMediaQueryChanges('offset', 0, function (changes) {
            _this._updateWithValue(changes.value);
        });
    };
    // *********************************************
    // Protected methods
    // *********************************************
    FlexOffsetDirective.prototype._updateWithValue = function (value) {
        value = value || this._queryInput("offset") || 0;
        if (this._mqActivation) {
            value = this._mqActivation.activatedInput;
        }
        this._applyStyleToElement(this._buildCSS(value));
    };
    FlexOffsetDirective.prototype._buildCSS = function (offset) {
        var isPercent = String(offset).indexOf('%') > -1;
        var isPx = String(offset).indexOf('px') > -1;
        if (!isPx && !isPercent && !isNaN(offset)) {
            offset = offset + '%';
        }
        return { 'margin-left': "" + offset };
    };
    return FlexOffsetDirective;
}(BaseFxDirective));
FlexOffsetDirective.decorators = [
    { type: Directive, args: [{ selector: "\n  [fxFlexOffset],\n  [fxFlexOffset.xs], [fxFlexOffset.sm], [fxFlexOffset.md], [fxFlexOffset.lg], [fxFlexOffset.xl],\n  [fxFlexOffset.lt-sm], [fxFlexOffset.lt-md], [fxFlexOffset.lt-lg], [fxFlexOffset.lt-xl],\n  [fxFlexOffset.gt-xs], [fxFlexOffset.gt-sm], [fxFlexOffset.gt-md], [fxFlexOffset.gt-lg]\n" },] },
];
/** @nocollapse */
FlexOffsetDirective.ctorParameters = function () { return [
    { type: MediaMonitor, },
    { type: ElementRef, },
    { type: Renderer2, },
]; };
FlexOffsetDirective.propDecorators = {
    'offset': [{ type: Input, args: ['fxFlexOffset',] },],
    'offsetXs': [{ type: Input, args: ['fxFlexOffset.xs',] },],
    'offsetSm': [{ type: Input, args: ['fxFlexOffset.sm',] },],
    'offsetMd': [{ type: Input, args: ['fxFlexOffset.md',] },],
    'offsetLg': [{ type: Input, args: ['fxFlexOffset.lg',] },],
    'offsetXl': [{ type: Input, args: ['fxFlexOffset.xl',] },],
    'offsetLtSm': [{ type: Input, args: ['fxFlexOffset.lt-sm',] },],
    'offsetLtMd': [{ type: Input, args: ['fxFlexOffset.lt-md',] },],
    'offsetLtLg': [{ type: Input, args: ['fxFlexOffset.lt-lg',] },],
    'offsetLtXl': [{ type: Input, args: ['fxFlexOffset.lt-xl',] },],
    'offsetGtXs': [{ type: Input, args: ['fxFlexOffset.gt-xs',] },],
    'offsetGtSm': [{ type: Input, args: ['fxFlexOffset.gt-sm',] },],
    'offsetGtMd': [{ type: Input, args: ['fxFlexOffset.gt-md',] },],
    'offsetGtLg': [{ type: Input, args: ['fxFlexOffset.gt-lg',] },],
};

var __extends$37 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * 'flex-order' flexbox styling directive
 * Configures the positional ordering of the element in a sorted layout container
 * @see https://css-tricks.com/almanac/properties/o/order/
 */
var FlexOrderDirective = (function (_super) {
    __extends$37(FlexOrderDirective, _super);
    /* tslint:enable */
    function FlexOrderDirective(monitor, elRef, renderer) {
        return _super.call(this, monitor, elRef, renderer) || this;
    }
    Object.defineProperty(FlexOrderDirective.prototype, "order", {
        /* tslint:disable */
        set: function (val) { this._cacheInput('order', val); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexOrderDirective.prototype, "orderXs", {
        set: function (val) { this._cacheInput('orderXs', val); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlexOrderDirective.prototype, "orderSm", {
        set: function (val) { this._cacheInput('orderSm', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexOrderDirective.prototype, "orderMd", {
        set: function (val) { this._cacheInput('orderMd', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexOrderDirective.prototype, "orderLg", {
        set: function (val) { this._cacheInput('orderLg', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexOrderDirective.prototype, "orderXl", {
        set: function (val) { this._cacheInput('orderXl', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexOrderDirective.prototype, "orderGtXs", {
        set: function (val) { this._cacheInput('orderGtXs', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexOrderDirective.prototype, "orderGtSm", {
        set: function (val) { this._cacheInput('orderGtSm', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexOrderDirective.prototype, "orderGtMd", {
        set: function (val) { this._cacheInput('orderGtMd', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexOrderDirective.prototype, "orderGtLg", {
        set: function (val) { this._cacheInput('orderGtLg', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexOrderDirective.prototype, "orderLtSm", {
        set: function (val) { this._cacheInput('orderLtSm', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexOrderDirective.prototype, "orderLtMd", {
        set: function (val) { this._cacheInput('orderLtMd', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexOrderDirective.prototype, "orderLtLg", {
        set: function (val) { this._cacheInput('orderLtLg', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(FlexOrderDirective.prototype, "orderLtXl", {
        set: function (val) { this._cacheInput('orderLtXl', val); },
        enumerable: true,
        configurable: true
    });
    
    // *********************************************
    // Lifecycle Methods
    // *********************************************
    /**
     * For @Input changes on the current mq activation property, see onMediaQueryChanges()
     */
    FlexOrderDirective.prototype.ngOnChanges = function (changes) {
        if (changes['order'] != null || this._mqActivation) {
            this._updateWithValue();
        }
    };
    /**
     * After the initial onChanges, build an mqActivation object that bridges
     * mql change events to onMediaQueryChange handlers
     */
    FlexOrderDirective.prototype.ngOnInit = function () {
        var _this = this;
        this._listenForMediaQueryChanges('order', '0', function (changes) {
            _this._updateWithValue(changes.value);
        });
        this._updateWithValue();
    };
    // *********************************************
    // Protected methods
    // *********************************************
    FlexOrderDirective.prototype._updateWithValue = function (value) {
        value = value || this._queryInput("order") || '0';
        if (this._mqActivation) {
            value = this._mqActivation.activatedInput;
        }
        this._applyStyleToElement(this._buildCSS(value));
    };
    FlexOrderDirective.prototype._buildCSS = function (value) {
        value = parseInt(value, 10);
        return { order: isNaN(value) ? 0 : value };
    };
    return FlexOrderDirective;
}(BaseFxDirective));
FlexOrderDirective.decorators = [
    { type: Directive, args: [{ selector: "\n  [fxFlexOrder],\n  [fxFlexOrder.xs], [fxFlexOrder.sm], [fxFlexOrder.md], [fxFlexOrder.lg], [fxFlexOrder.xl],\n  [fxFlexOrder.lt-sm], [fxFlexOrder.lt-md], [fxFlexOrder.lt-lg], [fxFlexOrder.lt-xl],\n  [fxFlexOrder.gt-xs], [fxFlexOrder.gt-sm], [fxFlexOrder.gt-md], [fxFlexOrder.gt-lg]\n" },] },
];
/** @nocollapse */
FlexOrderDirective.ctorParameters = function () { return [
    { type: MediaMonitor, },
    { type: ElementRef, },
    { type: Renderer2, },
]; };
FlexOrderDirective.propDecorators = {
    'order': [{ type: Input, args: ['fxFlexOrder',] },],
    'orderXs': [{ type: Input, args: ['fxFlexOrder.xs',] },],
    'orderSm': [{ type: Input, args: ['fxFlexOrder.sm',] },],
    'orderMd': [{ type: Input, args: ['fxFlexOrder.md',] },],
    'orderLg': [{ type: Input, args: ['fxFlexOrder.lg',] },],
    'orderXl': [{ type: Input, args: ['fxFlexOrder.xl',] },],
    'orderGtXs': [{ type: Input, args: ['fxFlexOrder.gt-xs',] },],
    'orderGtSm': [{ type: Input, args: ['fxFlexOrder.gt-sm',] },],
    'orderGtMd': [{ type: Input, args: ['fxFlexOrder.gt-md',] },],
    'orderGtLg': [{ type: Input, args: ['fxFlexOrder.gt-lg',] },],
    'orderLtSm': [{ type: Input, args: ['fxFlexOrder.lt-sm',] },],
    'orderLtMd': [{ type: Input, args: ['fxFlexOrder.lt-md',] },],
    'orderLtLg': [{ type: Input, args: ['fxFlexOrder.lt-lg',] },],
    'orderLtXl': [{ type: Input, args: ['fxFlexOrder.lt-xl',] },],
};

var __extends$38 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * 'layout-align' flexbox styling directive
 *  Defines positioning of child elements along main and cross axis in a layout container
 *  Optional values: {main-axis} values or {main-axis cross-axis} value pairs
 *
 *  @see https://css-tricks.com/almanac/properties/j/justify-content/
 *  @see https://css-tricks.com/almanac/properties/a/align-items/
 *  @see https://css-tricks.com/almanac/properties/a/align-content/
 */
var LayoutAlignDirective = (function (_super) {
    __extends$38(LayoutAlignDirective, _super);
    /* tslint:enable */
    function LayoutAlignDirective(monitor, elRef, renderer, container) {
        var _this = _super.call(this, monitor, elRef, renderer) || this;
        _this._layout = 'row'; // default flex-direction
        if (container) {
            _this._layoutWatcher = container.layout$.subscribe(_this._onLayoutChange.bind(_this));
        }
        return _this;
    }
    Object.defineProperty(LayoutAlignDirective.prototype, "align", {
        /* tslint:disable */
        set: function (val) { this._cacheInput('align', val); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutAlignDirective.prototype, "alignXs", {
        set: function (val) { this._cacheInput('alignXs', val); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutAlignDirective.prototype, "alignSm", {
        set: function (val) { this._cacheInput('alignSm', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutAlignDirective.prototype, "alignMd", {
        set: function (val) { this._cacheInput('alignMd', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutAlignDirective.prototype, "alignLg", {
        set: function (val) { this._cacheInput('alignLg', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutAlignDirective.prototype, "alignXl", {
        set: function (val) { this._cacheInput('alignXl', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutAlignDirective.prototype, "alignGtXs", {
        set: function (val) { this._cacheInput('alignGtXs', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutAlignDirective.prototype, "alignGtSm", {
        set: function (val) { this._cacheInput('alignGtSm', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutAlignDirective.prototype, "alignGtMd", {
        set: function (val) { this._cacheInput('alignGtMd', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutAlignDirective.prototype, "alignGtLg", {
        set: function (val) { this._cacheInput('alignGtLg', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutAlignDirective.prototype, "alignLtSm", {
        set: function (val) { this._cacheInput('alignLtSm', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutAlignDirective.prototype, "alignLtMd", {
        set: function (val) { this._cacheInput('alignLtMd', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutAlignDirective.prototype, "alignLtLg", {
        set: function (val) { this._cacheInput('alignLtLg', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutAlignDirective.prototype, "alignLtXl", {
        set: function (val) { this._cacheInput('alignLtXl', val); },
        enumerable: true,
        configurable: true
    });
    
    // *********************************************
    // Lifecycle Methods
    // *********************************************
    LayoutAlignDirective.prototype.ngOnChanges = function (changes) {
        if (changes['align'] != null || this._mqActivation) {
            this._updateWithValue();
        }
    };
    /**
     * After the initial onChanges, build an mqActivation object that bridges
     * mql change events to onMediaQueryChange handlers
     */
    LayoutAlignDirective.prototype.ngOnInit = function () {
        var _this = this;
        this._listenForMediaQueryChanges('align', 'start stretch', function (changes) {
            _this._updateWithValue(changes.value);
        });
        this._updateWithValue();
    };
    LayoutAlignDirective.prototype.ngOnDestroy = function () {
        _super.prototype.ngOnDestroy.call(this);
        if (this._layoutWatcher) {
            this._layoutWatcher.unsubscribe();
        }
    };
    // *********************************************
    // Protected methods
    // *********************************************
    /**
     *
     */
    LayoutAlignDirective.prototype._updateWithValue = function (value) {
        value = value || this._queryInput("align") || 'start stretch';
        if (this._mqActivation) {
            value = this._mqActivation.activatedInput;
        }
        this._applyStyleToElement(this._buildCSS(value));
        this._allowStretching(value, !this._layout ? "row" : this._layout);
    };
    /**
     * Cache the parent container 'flex-direction' and update the 'flex' styles
     */
    LayoutAlignDirective.prototype._onLayoutChange = function (direction) {
        var _this = this;
        this._layout = (direction || '').toLowerCase();
        if (!LAYOUT_VALUES.find(function (x) { return x === _this._layout; })) {
            this._layout = 'row';
        }
        var value = this._queryInput("align") || 'start stretch';
        if (this._mqActivation) {
            value = this._mqActivation.activatedInput;
        }
        this._allowStretching(value, this._layout || "row");
    };
    LayoutAlignDirective.prototype._buildCSS = function (align) {
        var css = {}, _a = align.split(' '), main_axis = _a[0], cross_axis = _a[1]; // tslint:disable-line:variable-name
        // Main axis
        switch (main_axis) {
            case 'center':
                css['justify-content'] = 'center';
                break;
            case 'space-around':
                css['justify-content'] = 'space-around';
                break;
            case 'space-between':
                css['justify-content'] = 'space-between';
                break;
            case 'end':
            case 'flex-end':
                css['justify-content'] = 'flex-end';
                break;
            case 'start':
            case 'flex-start':
            default:
                css['justify-content'] = 'flex-start'; // default main axis
                break;
        }
        // Cross-axis
        switch (cross_axis) {
            case 'start':
            case 'flex-start':
                css['align-items'] = css['align-content'] = 'flex-start';
                break;
            case 'baseline':
                css['align-items'] = 'baseline';
                break;
            case 'center':
                css['align-items'] = css['align-content'] = 'center';
                break;
            case 'end':
            case 'flex-end':
                css['align-items'] = css['align-content'] = 'flex-end';
                break;
            case 'stretch':
            default:
                css['align-items'] = css['align-content'] = 'stretch'; // default cross axis
                break;
        }
        return extendObject(css, {
            'display': 'flex',
            'flex-direction': this._layout || "row",
            'box-sizing': 'border-box'
        });
    };
    /**
     * Update container element to 'stretch' as needed...
     * NOTE: this is only done if the crossAxis is explicitly set to 'stretch'
     */
    LayoutAlignDirective.prototype._allowStretching = function (align, layout) {
        var _a = align.split(' '), cross_axis = _a[1]; // tslint:disable-line:variable-name
        if (cross_axis == 'stretch') {
            // Use `null` values to remove style
            this._applyStyleToElement({
                'box-sizing': 'border-box',
                'max-width': (layout === 'column') ? '100%' : null,
                'max-height': (layout === 'row') ? '100%' : null
            });
        }
    };
    return LayoutAlignDirective;
}(BaseFxDirective));
LayoutAlignDirective.decorators = [
    { type: Directive, args: [{ selector: "\n  [fxLayoutAlign],\n  [fxLayoutAlign.xs], [fxLayoutAlign.sm], [fxLayoutAlign.md], [fxLayoutAlign.lg],[fxLayoutAlign.xl],\n  [fxLayoutAlign.lt-sm], [fxLayoutAlign.lt-md], [fxLayoutAlign.lt-lg], [fxLayoutAlign.lt-xl],\n  [fxLayoutAlign.gt-xs], [fxLayoutAlign.gt-sm], [fxLayoutAlign.gt-md], [fxLayoutAlign.gt-lg]\n" },] },
];
/** @nocollapse */
LayoutAlignDirective.ctorParameters = function () { return [
    { type: MediaMonitor, },
    { type: ElementRef, },
    { type: Renderer2, },
    { type: LayoutDirective, decorators: [{ type: Optional }, { type: Self },] },
]; };
LayoutAlignDirective.propDecorators = {
    'align': [{ type: Input, args: ['fxLayoutAlign',] },],
    'alignXs': [{ type: Input, args: ['fxLayoutAlign.xs',] },],
    'alignSm': [{ type: Input, args: ['fxLayoutAlign.sm',] },],
    'alignMd': [{ type: Input, args: ['fxLayoutAlign.md',] },],
    'alignLg': [{ type: Input, args: ['fxLayoutAlign.lg',] },],
    'alignXl': [{ type: Input, args: ['fxLayoutAlign.xl',] },],
    'alignGtXs': [{ type: Input, args: ['fxLayoutAlign.gt-xs',] },],
    'alignGtSm': [{ type: Input, args: ['fxLayoutAlign.gt-sm',] },],
    'alignGtMd': [{ type: Input, args: ['fxLayoutAlign.gt-md',] },],
    'alignGtLg': [{ type: Input, args: ['fxLayoutAlign.gt-lg',] },],
    'alignLtSm': [{ type: Input, args: ['fxLayoutAlign.lt-sm',] },],
    'alignLtMd': [{ type: Input, args: ['fxLayoutAlign.lt-md',] },],
    'alignLtLg': [{ type: Input, args: ['fxLayoutAlign.lt-lg',] },],
    'alignLtXl': [{ type: Input, args: ['fxLayoutAlign.lt-xl',] },],
};

var __extends$39 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * 'layout-padding' styling directive
 *  Defines padding of child elements in a layout container
 */
var LayoutGapDirective = (function (_super) {
    __extends$39(LayoutGapDirective, _super);
    /* tslint:enable */
    function LayoutGapDirective(monitor, elRef, renderer, container) {
        var _this = _super.call(this, monitor, elRef, renderer) || this;
        _this._layout = 'row'; // default flex-direction
        if (container) {
            _this._layoutWatcher = container.layout$.subscribe(_this._onLayoutChange.bind(_this));
        }
        return _this;
    }
    Object.defineProperty(LayoutGapDirective.prototype, "gap", {
        /* tslint:disable */
        set: function (val) { this._cacheInput('gap', val); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutGapDirective.prototype, "gapXs", {
        set: function (val) { this._cacheInput('gapXs', val); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutGapDirective.prototype, "gapSm", {
        set: function (val) { this._cacheInput('gapSm', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutGapDirective.prototype, "gapMd", {
        set: function (val) { this._cacheInput('gapMd', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutGapDirective.prototype, "gapLg", {
        set: function (val) { this._cacheInput('gapLg', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutGapDirective.prototype, "gapXl", {
        set: function (val) { this._cacheInput('gapXl', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutGapDirective.prototype, "gapGtXs", {
        set: function (val) { this._cacheInput('gapGtXs', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutGapDirective.prototype, "gapGtSm", {
        set: function (val) { this._cacheInput('gapGtSm', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutGapDirective.prototype, "gapGtMd", {
        set: function (val) { this._cacheInput('gapGtMd', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutGapDirective.prototype, "gapGtLg", {
        set: function (val) { this._cacheInput('gapGtLg', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutGapDirective.prototype, "gapLtSm", {
        set: function (val) { this._cacheInput('gapLtSm', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutGapDirective.prototype, "gapLtMd", {
        set: function (val) { this._cacheInput('gapLtMd', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutGapDirective.prototype, "gapLtLg", {
        set: function (val) { this._cacheInput('gapLtLg', val); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(LayoutGapDirective.prototype, "gapLtXl", {
        set: function (val) { this._cacheInput('gapLtXl', val); },
        enumerable: true,
        configurable: true
    });
    
    // *********************************************
    // Lifecycle Methods
    // *********************************************
    LayoutGapDirective.prototype.ngOnChanges = function (changes) {
        if (changes['gap'] != null || this._mqActivation) {
            this._updateWithValue();
        }
    };
    /**
     * After the initial onChanges, build an mqActivation object that bridges
     * mql change events to onMediaQueryChange handlers
     */
    LayoutGapDirective.prototype.ngAfterContentInit = function () {
        var _this = this;
        this._watchContentChanges();
        this._listenForMediaQueryChanges('gap', '0', function (changes) {
            _this._updateWithValue(changes.value);
        });
        this._updateWithValue();
    };
    LayoutGapDirective.prototype.ngOnDestroy = function () {
        _super.prototype.ngOnDestroy.call(this);
        if (this._layoutWatcher) {
            this._layoutWatcher.unsubscribe();
        }
        if (this._observer) {
            this._observer.disconnect();
        }
    };
    // *********************************************
    // Protected methods
    // *********************************************
    /**
     * Watch for child nodes to be added... and apply the layout gap styles to each.
     * NOTE: this does NOT! differentiate between viewChildren and contentChildren
     */
    LayoutGapDirective.prototype._watchContentChanges = function () {
        var _this = this;
        var onMutationCallback = function (mutations) {
            var validatedChanges = function (it) {
                return (it.addedNodes && it.addedNodes.length) ||
                    (it.removedNodes && it.removedNodes.length);
            };
            // update gap styles only for child 'added' or 'removed' events
            if (mutations.filter(validatedChanges).length) {
                _this._updateWithValue();
            }
        };
        this._observer = new MutationObserver(onMutationCallback);
        this._observer.observe(this._elementRef.nativeElement, { childList: true });
    };
    /**
     * Cache the parent container 'flex-direction' and update the 'margin' styles
     */
    LayoutGapDirective.prototype._onLayoutChange = function (direction) {
        var _this = this;
        this._layout = (direction || '').toLowerCase();
        if (!LAYOUT_VALUES.find(function (x) { return x === _this._layout; })) {
            this._layout = 'row';
        }
        this._updateWithValue();
    };
    /**
     *
     */
    LayoutGapDirective.prototype._updateWithValue = function (value) {
        var _this = this;
        value = value || this._queryInput("gap") || '0';
        if (this._mqActivation) {
            value = this._mqActivation.activatedInput;
        }
        // Gather all non-hidden Element nodes
        var items = this.childrenNodes
            .filter(function (el) { return el.nodeType === 1 && _this._getDisplayStyle(el) != "none"; });
        var numItems = items.length;
        if (numItems > 1) {
            var lastItem = items[numItems - 1];
            // For each `element` children EXCEPT the last,
            // set the margin right/bottom styles...
            items = items.filter(function (el, j) { return j < numItems - 1; });
            this._applyStyleToElements(this._buildCSS(value), items);
            // Clear all gaps for all visible elements
            this._applyStyleToElements(this._buildCSS(), [lastItem]);
        }
    };
    /**
     * Prepare margin CSS, remove any previous explicitly
     * assigned margin assignments
     */
    LayoutGapDirective.prototype._buildCSS = function (value) {
        if (value === void 0) { value = null; }
        var key, margins = {
            'margin-left': null,
            'margin-right': null,
            'margin-top': null,
            'margin-bottom': null
        };
        switch (this._layout) {
            case 'column':
            case 'column-reverse':
                key = 'margin-bottom';
                break;
            case "row":
            case 'row-reverse':
            default:
                key = 'margin-right';
                break;
        }
        margins[key] = value;
        return margins;
    };
    return LayoutGapDirective;
}(BaseFxDirective));
LayoutGapDirective.decorators = [
    { type: Directive, args: [{ selector: "\n  [fxLayoutGap],\n  [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md], [fxLayoutGap.lg], [fxLayoutGap.xl],\n  [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md], [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl],\n  [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm], [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]\n"
            },] },
];
/** @nocollapse */
LayoutGapDirective.ctorParameters = function () { return [
    { type: MediaMonitor, },
    { type: ElementRef, },
    { type: Renderer2, },
    { type: LayoutDirective, decorators: [{ type: Optional }, { type: Self },] },
]; };
LayoutGapDirective.propDecorators = {
    'gap': [{ type: Input, args: ['fxLayoutGap',] },],
    'gapXs': [{ type: Input, args: ['fxLayoutGap.xs',] },],
    'gapSm': [{ type: Input, args: ['fxLayoutGap.sm',] },],
    'gapMd': [{ type: Input, args: ['fxLayoutGap.md',] },],
    'gapLg': [{ type: Input, args: ['fxLayoutGap.lg',] },],
    'gapXl': [{ type: Input, args: ['fxLayoutGap.xl',] },],
    'gapGtXs': [{ type: Input, args: ['fxLayoutGap.gt-xs',] },],
    'gapGtSm': [{ type: Input, args: ['fxLayoutGap.gt-sm',] },],
    'gapGtMd': [{ type: Input, args: ['fxLayoutGap.gt-md',] },],
    'gapGtLg': [{ type: Input, args: ['fxLayoutGap.gt-lg',] },],
    'gapLtSm': [{ type: Input, args: ['fxLayoutGap.lt-sm',] },],
    'gapLtMd': [{ type: Input, args: ['fxLayoutGap.lt-md',] },],
    'gapLtLg': [{ type: Input, args: ['fxLayoutGap.lt-lg',] },],
    'gapLtXl': [{ type: Input, args: ['fxLayoutGap.lt-xl',] },],
};

var __extends$40 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Directive to add responsive support for ngClass.
 */
var ClassDirective = (function (_super) {
    __extends$40(ClassDirective, _super);
    /* tslint:enable */
    function ClassDirective(monitor, _iterableDiffers, _keyValueDiffers, _ngEl, _oldRenderer, _renderer) {
        var _this = 
        // TODO: this should use Renderer2 as well, but NgClass hasn't switched over yet.
        _super.call(this, _iterableDiffers, _keyValueDiffers, _ngEl, _oldRenderer) || this;
        _this.monitor = monitor;
        _this._classAdapter = new BaseFxDirectiveAdapter('class', monitor, _ngEl, _renderer);
        _this._ngClassAdapter = new BaseFxDirectiveAdapter('ngClass', monitor, _ngEl, _renderer);
        return _this;
    }
    Object.defineProperty(ClassDirective.prototype, "ngClassBase", {
        /**
         * Intercept ngClass assignments so we cache the default classes
         * which are merged with activated styles or used as fallbacks.
         * Note: Base ngClass values are applied during ngDoCheck()
         */
        set: function (val) {
            this._ngClassAdapter.cacheInput('ngClass', val, true);
            this.ngClass = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClassDirective.prototype, "ngClassXs", {
        /* tslint:disable */
        set: function (val) { this._ngClassAdapter.cacheInput('ngClassXs', val, true); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClassDirective.prototype, "ngClassSm", {
        set: function (val) { this._ngClassAdapter.cacheInput('ngClassSm', val, true); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClassDirective.prototype, "ngClassMd", {
        set: function (val) { this._ngClassAdapter.cacheInput('ngClassMd', val, true); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClassDirective.prototype, "ngClassLg", {
        set: function (val) { this._ngClassAdapter.cacheInput('ngClassLg', val, true); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClassDirective.prototype, "ngClassXl", {
        set: function (val) { this._ngClassAdapter.cacheInput('ngClassXl', val, true); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClassDirective.prototype, "ngClassLtSm", {
        set: function (val) { this._ngClassAdapter.cacheInput('ngClassLtSm', val, true); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClassDirective.prototype, "ngClassLtMd", {
        set: function (val) { this._ngClassAdapter.cacheInput('ngClassLtMd', val, true); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClassDirective.prototype, "ngClassLtLg", {
        set: function (val) { this._ngClassAdapter.cacheInput('ngClassLtLg', val, true); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClassDirective.prototype, "ngClassLtXl", {
        set: function (val) { this._ngClassAdapter.cacheInput('ngClassLtXl', val, true); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClassDirective.prototype, "ngClassGtXs", {
        set: function (val) { this._ngClassAdapter.cacheInput('ngClassGtXs', val, true); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClassDirective.prototype, "ngClassGtSm", {
        set: function (val) { this._ngClassAdapter.cacheInput('ngClassGtSm', val, true); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClassDirective.prototype, "ngClassGtMd", {
        set: function (val) { this._ngClassAdapter.cacheInput('ngClassGtMd', val, true); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClassDirective.prototype, "ngClassGtLg", {
        set: function (val) { this._ngClassAdapter.cacheInput('ngClassGtLg', val, true); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClassDirective.prototype, "classBase", {
        /** Deprecated selectors */
        /**
         * Base class selector values get applied immediately and are considered destructive overwrites to
         * all previous class assignments
         *
         * Delegate to NgClass:klass setter and cache value for base fallback from responsive APIs.
         */
        set: function (val) {
            this._classAdapter.cacheInput('_rawClass', val, true);
            this.klass = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClassDirective.prototype, "classXs", {
        set: function (val) { this._classAdapter.cacheInput('classXs', val, true); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClassDirective.prototype, "classSm", {
        set: function (val) { this._classAdapter.cacheInput('classSm', val, true); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClassDirective.prototype, "classMd", {
        set: function (val) { this._classAdapter.cacheInput('classMd', val, true); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClassDirective.prototype, "classLg", {
        set: function (val) { this._classAdapter.cacheInput('classLg', val, true); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClassDirective.prototype, "classXl", {
        set: function (val) { this._classAdapter.cacheInput('classXl', val, true); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClassDirective.prototype, "classLtSm", {
        set: function (val) { this._classAdapter.cacheInput('classLtSm', val, true); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClassDirective.prototype, "classLtMd", {
        set: function (val) { this._classAdapter.cacheInput('classLtMd', val, true); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClassDirective.prototype, "classLtLg", {
        set: function (val) { this._classAdapter.cacheInput('classLtLg', val, true); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClassDirective.prototype, "classLtXl", {
        set: function (val) { this._classAdapter.cacheInput('classLtXl', val, true); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClassDirective.prototype, "classGtXs", {
        set: function (val) { this._classAdapter.cacheInput('classGtXs', val, true); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClassDirective.prototype, "classGtSm", {
        set: function (val) { this._classAdapter.cacheInput('classGtSm', val, true); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClassDirective.prototype, "classGtMd", {
        set: function (val) { this._classAdapter.cacheInput('classGtMd', val, true); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClassDirective.prototype, "classGtLg", {
        set: function (val) { this._classAdapter.cacheInput('classGtLg', val, true); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClassDirective.prototype, "initialClasses", {
        /**
         * Initial value of the `class` attribute; used as
         * fallback and will be merged with nay `ngClass` values
         */
        get: function () {
            return this._classAdapter.queryInput('_rawClass') || "";
        },
        enumerable: true,
        configurable: true
    });
    // ******************************************************************
    // Lifecycle Hooks
    // ******************************************************************
    /**
     * For @Input changes on the current mq activation property
     */
    ClassDirective.prototype.ngOnChanges = function (changes) {
        if (this._classAdapter.activeKey in changes) {
            this._updateKlass();
        }
        if (this._ngClassAdapter.activeKey in changes) {
            this._updateNgClass();
        }
    };
    /**
     * For ChangeDetectionStrategy.onPush and ngOnChanges() updates
     */
    ClassDirective.prototype.ngDoCheck = function () {
        if (!this._classAdapter.hasMediaQueryListener) {
            this._configureMQListener();
        }
        _super.prototype.ngDoCheck.call(this);
    };
    ClassDirective.prototype.ngOnDestroy = function () {
        this._classAdapter.ngOnDestroy();
        this._ngClassAdapter.ngOnDestroy();
    };
    // ******************************************************************
    // Internal Methods
    // ******************************************************************
    /**
     * Build an mqActivation object that bridges
     * mql change events to onMediaQueryChange handlers
     */
    ClassDirective.prototype._configureMQListener = function () {
        var _this = this;
        this._classAdapter.listenForMediaQueryChanges('class', '', function (changes) {
            _this._updateKlass(changes.value);
        });
        this._ngClassAdapter.listenForMediaQueryChanges('ngClass', '', function (changes) {
            _this._updateNgClass(changes.value);
            _super.prototype.ngDoCheck.call(_this); // trigger NgClass::_applyIterableChanges()
        });
    };
    /**
     *  Apply updates directly to the NgClass:klass property
     *  ::ngDoCheck() is not needed
     */
    ClassDirective.prototype._updateKlass = function (value) {
        var klass = value || this._classAdapter.queryInput('class') || '';
        if (this._classAdapter.mqActivation) {
            klass = this._classAdapter.mqActivation.activatedInput;
        }
        this.klass = klass || this.initialClasses;
    };
    /**
     *  Identify the activated input value and update the ngClass iterables...
     *  needs ngDoCheck() to actually apply the values to the element
     */
    ClassDirective.prototype._updateNgClass = function (value) {
        if (this._ngClassAdapter.mqActivation) {
            value = this._ngClassAdapter.mqActivation.activatedInput;
        }
        this.ngClass = value || ''; // Delegate subsequent activity to the NgClass logic
    };
    return ClassDirective;
}(NgClass));
ClassDirective.decorators = [
    { type: Directive, args: [{
                selector: "\n    [class], [class.xs], [class.sm], [class.md], [class.lg], [class.xl],\n    [class.lt-sm], [class.lt-md], [class.lt-lg], [class.lt-xl],\n    [class.gt-xs], [class.gt-sm], [class.gt-md], [class.gt-lg],\n\n    [ngClass], [ngClass.xs], [ngClass.sm], [ngClass.md], [ngClass.lg], [ngClass.xl],\n    [ngClass.lt-sm], [ngClass.lt-md], [ngClass.lt-lg], [ngClass.lt-xl],\n    [ngClass.gt-xs], [ngClass.gt-sm], [ngClass.gt-md], [ngClass.gt-lg]\n  "
            },] },
];
/** @nocollapse */
ClassDirective.ctorParameters = function () { return [
    { type: MediaMonitor, },
    { type: IterableDiffers, },
    { type: KeyValueDiffers, },
    { type: ElementRef, },
    { type: Renderer, },
    { type: Renderer2, },
]; };
ClassDirective.propDecorators = {
    'ngClassBase': [{ type: Input, args: ['ngClass',] },],
    'ngClassXs': [{ type: Input, args: ['ngClass.xs',] },],
    'ngClassSm': [{ type: Input, args: ['ngClass.sm',] },],
    'ngClassMd': [{ type: Input, args: ['ngClass.md',] },],
    'ngClassLg': [{ type: Input, args: ['ngClass.lg',] },],
    'ngClassXl': [{ type: Input, args: ['ngClass.xl',] },],
    'ngClassLtSm': [{ type: Input, args: ['ngClass.lt-sm',] },],
    'ngClassLtMd': [{ type: Input, args: ['ngClass.lt-md',] },],
    'ngClassLtLg': [{ type: Input, args: ['ngClass.lt-lg',] },],
    'ngClassLtXl': [{ type: Input, args: ['ngClass.lt-xl',] },],
    'ngClassGtXs': [{ type: Input, args: ['ngClass.gt-xs',] },],
    'ngClassGtSm': [{ type: Input, args: ['ngClass.gt-sm',] },],
    'ngClassGtMd': [{ type: Input, args: ['ngClass.gt-md',] },],
    'ngClassGtLg': [{ type: Input, args: ['ngClass.gt-lg',] },],
    'classBase': [{ type: Input, args: ['class',] },],
    'classXs': [{ type: Input, args: ['class.xs',] },],
    'classSm': [{ type: Input, args: ['class.sm',] },],
    'classMd': [{ type: Input, args: ['class.md',] },],
    'classLg': [{ type: Input, args: ['class.lg',] },],
    'classXl': [{ type: Input, args: ['class.xl',] },],
    'classLtSm': [{ type: Input, args: ['class.lt-sm',] },],
    'classLtMd': [{ type: Input, args: ['class.lt-md',] },],
    'classLtLg': [{ type: Input, args: ['class.lt-lg',] },],
    'classLtXl': [{ type: Input, args: ['class.lt-xl',] },],
    'classGtXs': [{ type: Input, args: ['class.gt-xs',] },],
    'classGtSm': [{ type: Input, args: ['class.gt-sm',] },],
    'classGtMd': [{ type: Input, args: ['class.gt-md',] },],
    'classGtLg': [{ type: Input, args: ['class.gt-lg',] },],
};

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * NgStyle allowed inputs
 */
var NgStyleKeyValue = (function () {
    function NgStyleKeyValue(key, value, noQuotes) {
        if (noQuotes === void 0) { noQuotes = true; }
        this.key = key;
        this.value = value;
        this.key = noQuotes ? key.replace(/['"]/g, "").trim() : key.trim();
        this.value = noQuotes ? value.replace(/['"]/g, "").trim() : value.trim();
        this.value = this.value.replace(/;/, "");
    }
    return NgStyleKeyValue;
}());
/**
 * Transform Operators for @angular/flex-layout NgStyle Directive
 */
var ngStyleUtils = {
    getType: getType,
    buildRawList: buildRawList,
    buildMapFromList: buildMapFromList,
    buildMapFromSet: buildMapFromSet
};
function getType(target) {
    var what = typeof target;
    if (what === 'object') {
        return (target.constructor === Array) ? 'array' :
            (target.constructor === Set) ? 'set' : 'object';
    }
    return what;
}
/**
 * Split string of key:value pairs into Array of k-v pairs
 * e.g.  'key:value; key:value; key:value;' -> ['key:value',...]
 */
function buildRawList(source, delimiter) {
    if (delimiter === void 0) { delimiter = ";"; }
    return String(source)
        .trim()
        .split(delimiter)
        .map(function (val) { return val.trim(); })
        .filter(function (val) { return val !== ""; });
}
/**
 * Convert array of key:value strings to a iterable map object
 */
function buildMapFromList(styles, sanitize) {
    var sanitizeValue = function (it) {
        if (sanitize) {
            it.value = sanitize(it.value);
        }
        return it;
    };
    return styles
        .map(stringToKeyValue)
        .filter(function (entry) { return !!entry; })
        .map(sanitizeValue)
        .reduce(keyValuesToMap, {});
}

/**
 * Convert Set<string> or raw Object to an iterable NgStyleMap
 */
function buildMapFromSet(source, sanitize) {
    var list = new Array();
    if (getType(source) == 'set') {
        source.forEach(function (entry) { return list.push(entry); });
    }
    else {
        Object.keys(source).forEach(function (key) {
            list.push(key + ":" + source[key]);
        });
    }
    return buildMapFromList(list, sanitize);
}
/**
 * Convert "key:value" -> [key, value]
 */
function stringToKeyValue(it) {
    var _a = it.split(":"), key = _a[0], val = _a[1];
    return val ? new NgStyleKeyValue(key, val) : null;
}

/**
 * Convert [ [key,value] ] -> { key : value }
 */
function keyValuesToMap(map, entry) {
    if (!!entry.key) {
        map[entry.key] = entry.value;
    }
    return map;
}

var __extends$41 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Directive to add responsive support for ngStyle.
 *
 */
var StyleDirective = (function (_super) {
    __extends$41(StyleDirective, _super);
    /* tslint:enable */
    /**
     *  Constructor for the ngStyle subclass; which adds selectors and
     *  a MediaQuery Activation Adapter
     */
    function StyleDirective(monitor, _bpRegistry, _sanitizer, _differs, _ngEl, _oldRenderer, _renderer) {
        var _this = 
        // TODO: this should use Renderer2 when the NgStyle signature is switched over to it.
        _super.call(this, _differs, _ngEl, _oldRenderer) || this;
        _this.monitor = monitor;
        _this._bpRegistry = _bpRegistry;
        _this._sanitizer = _sanitizer;
        // Build adapter, `cacheInput()` interceptor, and get current inline style if any
        _this._buildAdapter(monitor, _ngEl, _renderer);
        _this._base.cacheInput('style', _ngEl.nativeElement.getAttribute("style"), true);
        return _this;
    }
    Object.defineProperty(StyleDirective.prototype, "styleBase", {
        /**
         * Intercept ngStyle assignments so we cache the default styles
         * which are merged with activated styles or used as fallbacks.
         */
        set: function (val) {
            this._base.cacheInput('style', val, true);
            this.ngStyle = this._base.inputMap['style'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StyleDirective.prototype, "ngStyleXs", {
        /* tslint:disable */
        set: function (val) { this._base.cacheInput('styleXs', val, true); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StyleDirective.prototype, "ngStyleSm", {
        set: function (val) { this._base.cacheInput('styleSm', val, true); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(StyleDirective.prototype, "ngStyleMd", {
        set: function (val) { this._base.cacheInput('styleMd', val, true); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(StyleDirective.prototype, "ngStyleLg", {
        set: function (val) { this._base.cacheInput('styleLg', val, true); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(StyleDirective.prototype, "ngStyleXl", {
        set: function (val) { this._base.cacheInput('styleXl', val, true); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(StyleDirective.prototype, "ngStyleLtSm", {
        set: function (val) { this._base.cacheInput('styleLtSm', val, true); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(StyleDirective.prototype, "ngStyleLtMd", {
        set: function (val) { this._base.cacheInput('styleLtMd', val, true); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(StyleDirective.prototype, "ngStyleLtLg", {
        set: function (val) { this._base.cacheInput('styleLtLg', val, true); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(StyleDirective.prototype, "ngStyleLtXl", {
        set: function (val) { this._base.cacheInput('styleLtXl', val, true); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(StyleDirective.prototype, "ngStyleGtXs", {
        set: function (val) { this._base.cacheInput('styleGtXs', val, true); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(StyleDirective.prototype, "ngStyleGtSm", {
        set: function (val) { this._base.cacheInput('styleGtSm', val, true); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(StyleDirective.prototype, "ngStyleGtMd", {
        set: function (val) { this._base.cacheInput('styleGtMd', val, true); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(StyleDirective.prototype, "ngStyleGtLg", {
        set: function (val) { this._base.cacheInput('styleGtLg', val, true); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(StyleDirective.prototype, "styleXs", {
        /** Deprecated selectors */
        set: function (val) { this._base.cacheInput('styleXs', val, true); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StyleDirective.prototype, "styleSm", {
        set: function (val) { this._base.cacheInput('styleSm', val, true); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(StyleDirective.prototype, "styleMd", {
        set: function (val) { this._base.cacheInput('styleMd', val, true); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(StyleDirective.prototype, "styleLg", {
        set: function (val) { this._base.cacheInput('styleLg', val, true); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(StyleDirective.prototype, "styleXl", {
        set: function (val) { this._base.cacheInput('styleXl', val, true); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(StyleDirective.prototype, "styleLtSm", {
        set: function (val) { this._base.cacheInput('styleLtSm', val, true); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(StyleDirective.prototype, "styleLtMd", {
        set: function (val) { this._base.cacheInput('styleLtMd', val, true); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(StyleDirective.prototype, "styleLtLg", {
        set: function (val) { this._base.cacheInput('styleLtLg', val, true); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(StyleDirective.prototype, "styleLtXl", {
        set: function (val) { this._base.cacheInput('styleLtXl', val, true); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(StyleDirective.prototype, "styleGtXs", {
        set: function (val) { this._base.cacheInput('styleGtXs', val, true); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(StyleDirective.prototype, "styleGtSm", {
        set: function (val) { this._base.cacheInput('styleGtSm', val, true); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(StyleDirective.prototype, "styleGtMd", {
        set: function (val) { this._base.cacheInput('styleGtMd', val, true); },
        enumerable: true,
        configurable: true
    });
    
    Object.defineProperty(StyleDirective.prototype, "styleGtLg", {
        set: function (val) { this._base.cacheInput('styleGtLg', val, true); },
        enumerable: true,
        configurable: true
    });
    
    // ******************************************************************
    // Lifecycle Hookks
    // ******************************************************************
    /**
     * For @Input changes on the current mq activation property
     */
    StyleDirective.prototype.ngOnChanges = function (changes) {
        if (this._base.activeKey in changes) {
            this._updateStyle();
        }
    };
    /**
     * For ChangeDetectionStrategy.onPush and ngOnChanges() updates
     */
    StyleDirective.prototype.ngDoCheck = function () {
        if (!this._base.hasMediaQueryListener) {
            this._configureMQListener();
        }
        _super.prototype.ngDoCheck.call(this);
    };
    StyleDirective.prototype.ngOnDestroy = function () {
        this._base.ngOnDestroy();
    };
    // ******************************************************************
    // Internal Methods
    // ******************************************************************
    /**
       * Build an mqActivation object that bridges
       * mql change events to onMediaQueryChange handlers
       */
    StyleDirective.prototype._configureMQListener = function () {
        var _this = this;
        this._base.listenForMediaQueryChanges('style', '', function (changes) {
            _this._updateStyle(changes.value);
            // trigger NgClass::_applyIterableChanges()
            _super.prototype.ngDoCheck.call(_this);
        });
    };
    // ************************************************************************
    // Private Internal Methods
    // ************************************************************************
    /**
     * Use the currently activated input property and assign to
     * `ngStyle` which does the style injections...
     */
    StyleDirective.prototype._updateStyle = function (value) {
        var style = value || this._base.queryInput("style") || '';
        if (this._base.mqActivation) {
            style = this._base.mqActivation.activatedInput;
        }
        // Delegate subsequent activity to the NgStyle logic
        this.ngStyle = style;
    };
    /**
     * Build MediaQuery Activation Adapter
     * This adapter manages listening to mediaQuery change events and identifying
     * which property value should be used for the style update
     */
    StyleDirective.prototype._buildAdapter = function (monitor, _ngEl, _renderer) {
        this._base = new BaseFxDirectiveAdapter('style', monitor, _ngEl, _renderer);
        this._buildCacheInterceptor();
    };
    /**
     * Build intercept to convert raw strings to ngStyleMap
     */
    StyleDirective.prototype._buildCacheInterceptor = function () {
        var _this = this;
        var cacheInput = this._base.cacheInput.bind(this._base);
        this._base.cacheInput = function (key, source, cacheRaw, merge) {
            if (cacheRaw === void 0) { cacheRaw = false; }
            if (merge === void 0) { merge = true; }
            var styles = _this._buildStyleMap(source);
            if (merge) {
                styles = extendObject({}, _this._base.inputMap['style'], styles);
            }
            cacheInput(key, styles, cacheRaw);
        };
    };
    /**
     * Convert raw strings to ngStyleMap; which is required by ngStyle
     * NOTE: Raw string key-value pairs MUST be delimited by `;`
     *       Comma-delimiters are not supported due to complexities of
     *       possible style values such as `rgba(x,x,x,x)` and others
     */
    StyleDirective.prototype._buildStyleMap = function (styles) {
        var _this = this;
        var sanitizer = function (val) {
            // Always safe-guard (aka sanitize) style property values
            return _this._sanitizer.sanitize(SecurityContext.STYLE, val);
        };
        if (styles) {
            switch (ngStyleUtils.getType(styles)) {
                case 'string': return ngStyleUtils.buildMapFromList(ngStyleUtils.buildRawList(styles), sanitizer);
                case 'array': return ngStyleUtils.buildMapFromList(styles, sanitizer);
                case 'set': return ngStyleUtils.buildMapFromSet(styles, sanitizer);
                default: return ngStyleUtils.buildMapFromSet(styles, sanitizer);
            }
        }
        return styles;
    };
    return StyleDirective;
}(NgStyle));
StyleDirective.decorators = [
    { type: Directive, args: [{
                selector: "\n    [style.xs], [style.sm], [style.md], [style.lg], [style.xl],\n    [style.lt-sm], [style.lt-md], [style.lt-lg], [style.lt-xl],\n    [style.gt-xs], [style.gt-sm], [style.gt-md], [style.gt-lg],\n    [ngStyle],\n    [ngStyle.xs], [ngStyle.sm], [ngStyle.lg], [ngStyle.xl],\n    [ngStyle.lt-sm], [ngStyle.lt-md], [ngStyle.lt-lg], [ngStyle.lt-xl],\n    [ngStyle.gt-xs], [ngStyle.gt-sm], [ngStyle.gt-md], [ngStyle.gt-lg]\n  "
            },] },
];
/** @nocollapse */
StyleDirective.ctorParameters = function () { return [
    { type: MediaMonitor, },
    { type: BreakPointRegistry, },
    { type: DomSanitizer, },
    { type: KeyValueDiffers, },
    { type: ElementRef, },
    { type: Renderer, },
    { type: Renderer2, },
]; };
StyleDirective.propDecorators = {
    'styleBase': [{ type: Input, args: ['ngStyle',] },],
    'ngStyleXs': [{ type: Input, args: ['ngStyle.xs',] },],
    'ngStyleSm': [{ type: Input, args: ['ngStyle.sm',] },],
    'ngStyleMd': [{ type: Input, args: ['ngStyle.md',] },],
    'ngStyleLg': [{ type: Input, args: ['ngStyle.lg',] },],
    'ngStyleXl': [{ type: Input, args: ['ngStyle.xl',] },],
    'ngStyleLtSm': [{ type: Input, args: ['ngStyle.lt-sm',] },],
    'ngStyleLtMd': [{ type: Input, args: ['ngStyle.lt-md',] },],
    'ngStyleLtLg': [{ type: Input, args: ['ngStyle.lt-lg',] },],
    'ngStyleLtXl': [{ type: Input, args: ['ngStyle.lt-xl',] },],
    'ngStyleGtXs': [{ type: Input, args: ['ngStyle.gt-xs',] },],
    'ngStyleGtSm': [{ type: Input, args: ['ngStyle.gt-sm',] },],
    'ngStyleGtMd': [{ type: Input, args: ['ngStyle.gt-md',] },],
    'ngStyleGtLg': [{ type: Input, args: ['ngStyle.gt-lg',] },],
    'styleXs': [{ type: Input, args: ['style.xs',] },],
    'styleSm': [{ type: Input, args: ['style.sm',] },],
    'styleMd': [{ type: Input, args: ['style.md',] },],
    'styleLg': [{ type: Input, args: ['style.lg',] },],
    'styleXl': [{ type: Input, args: ['style.xl',] },],
    'styleLtSm': [{ type: Input, args: ['style.lt-sm',] },],
    'styleLtMd': [{ type: Input, args: ['style.lt-md',] },],
    'styleLtLg': [{ type: Input, args: ['style.lt-lg',] },],
    'styleLtXl': [{ type: Input, args: ['style.lt-xl',] },],
    'styleGtXs': [{ type: Input, args: ['style.gt-xs',] },],
    'styleGtSm': [{ type: Input, args: ['style.gt-sm',] },],
    'styleGtMd': [{ type: Input, args: ['style.gt-md',] },],
    'styleGtLg': [{ type: Input, args: ['style.gt-lg',] },],
};

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Since the equivalent results are easily achieved with a css class attached to each
 * layout child, these have been deprecated and removed from the API.
 *
 *  import {LayoutPaddingDirective} from './api/layout-padding';
 *  import {LayoutMarginDirective} from './api/layout-margin';
 */
var ALL_DIRECTIVES = [
    LayoutDirective,
    LayoutWrapDirective,
    LayoutGapDirective,
    LayoutAlignDirective,
    FlexDirective,
    FlexOrderDirective,
    FlexOffsetDirective,
    FlexFillDirective,
    FlexAlignDirective,
    ShowHideDirective,
    ClassDirective,
    StyleDirective,
];
/**
 *
 */
var FlexLayoutModule = (function () {
    function FlexLayoutModule() {
    }
    /**
     * External uses can easily add custom breakpoints AND include internal orientations
     * breakpoints; which are not available by default.
     *
     * !! Selector aliases are not auto-configured. Developers must subclass
     * the API directives to support extra selectors for the orientations breakpoints !!
     */
    FlexLayoutModule.provideBreakPoints = function (breakpoints, options) {
        return {
            ngModule: FlexLayoutModule,
            providers: [
                CUSTOM_BREAKPOINTS_PROVIDER_FACTORY(breakpoints, options || { orientations: false })
            ]
        };
    };
    return FlexLayoutModule;
}());
FlexLayoutModule.decorators = [
    { type: NgModule, args: [{
                declarations: ALL_DIRECTIVES,
                imports: [MediaQueriesModule],
                exports: [MediaQueriesModule].concat(ALL_DIRECTIVES),
                providers: [
                    MEDIA_MONITOR_PROVIDER,
                    DEFAULT_BREAKPOINTS_PROVIDER,
                    OBSERVABLE_MEDIA_PROVIDER
                ]
            },] },
];
/** @nocollapse */
FlexLayoutModule.ctorParameters = function () { return []; };

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */

var __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$2 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var AppComponent = (function () {
    function AppComponent(_router) {
        this._router = _router;
    }
    AppComponent.prototype.ngOnInit = function () {
        var _this = this;
        this._router.events.subscribe(function (event) {
            if (_this._router.url !== '/' && !_this._router.url.includes('/tab-demo')) {
                if (event instanceof NavigationEnd) {
                    window.scrollTo(0, 0);
                }
            }
        });
    };
    AppComponent = __decorate$2([
        Component({
            selector: 'app-root',
            template: "\n  <div mdc-typography>\n    <navbar></navbar>\n    <router-outlet></router-outlet>\n  </div>\n  "
        }),
        __metadata$2("design:paramtypes", [Router])
    ], AppComponent);
    return AppComponent;
}());

var _angular_core = ( core_es5 && undefined ) || core_es5;

var _angular_forms = ( forms_es5 && undefined ) || forms_es5;

var _angular_common = ( common_es5 && undefined ) || common_es5;

var material_es5 = createCommonjsModule(function (module, exports) {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });





var EventRegistry = (function () {
    function EventRegistry() {
        this.unlisteners = new Map();
    }
    EventRegistry.prototype.listen_ = function (renderer, type, listener, target) {
        if (!this.unlisteners.has(type)) {
            this.unlisteners.set(type, new WeakMap());
        }
        var unlistener = renderer.listen(typeof target !== 'string' ? target.nativeElement : target, type, listener);
        this.unlisteners.get(type).set(listener, unlistener);
    };
    EventRegistry.prototype.unlisten_ = function (type, listener) {
        if (!this.unlisteners.has(type)) {
            return;
        }
        var unlisteners = this.unlisteners.get(type);
        if (!unlisteners.has(listener)) {
            return;
        }
        unlisteners.get(listener)();
        unlisteners.delete(listener);
    };
    EventRegistry.decorators = [
        { type: _angular_core.Injectable },
    ];
    /** @nocollapse */
    EventRegistry.ctorParameters = function () { return []; };
    return EventRegistry;
}());

function toBoolean(value) {
    return value != null && "" + value !== 'false';
}

var _createClass$2 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$2(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @template A
 */
var MDCFoundation = function () {
  _createClass$2(MDCFoundation, null, [{
    key: "cssClasses",

    /** @return enum{cssClasses} */
    get: function get() {
      // Classes extending MDCFoundation should implement this method to return an object which exports every
      // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}
      return {};
    }

    /** @return enum{strings} */

  }, {
    key: "strings",
    get: function get() {
      // Classes extending MDCFoundation should implement this method to return an object which exports all
      // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}
      return {};
    }

    /** @return enum{numbers} */

  }, {
    key: "numbers",
    get: function get() {
      // Classes extending MDCFoundation should implement this method to return an object which exports all
      // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}
      return {};
    }

    /** @return {!Object} */

  }, {
    key: "defaultAdapter",
    get: function get() {
      // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient
      // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter
      // validation.
      return {};
    }

    /**
     * @param {A=} adapter
     */

  }]);

  function MDCFoundation() {
    var adapter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck$2(this, MDCFoundation);

    /** @protected {!A} */
    this.adapter_ = adapter;
  }

  _createClass$2(MDCFoundation, [{
    key: "init",
    value: function init() {
      // Subclasses should override this method to perform initialization routines (registering events, etc.)
    }
  }, {
    key: "destroy",
    value: function destroy() {
      // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)
    }
  }]);

  return MDCFoundation;
}();

var _createClass$1 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @template F
 */

var MDCComponent = function () {
  _createClass$1(MDCComponent, null, [{
    key: 'attachTo',

    /**
     * @param {!Element} root
     * @return {!MDCComponent}
     */
    value: function attachTo(root) {
      // Subclasses which extend MDCBase should provide an attachTo() method that takes a root element and
      // returns an instantiated component with its root set to that element. Also note that in the cases of
      // subclasses, an explicit foundation class will not have to be passed in; it will simply be initialized
      // from getDefaultFoundation().
      return new MDCComponent(root, new MDCFoundation());
    }

    /**
     * @param {!Element} root
     * @param {F=} foundation
     * @param {...?} args
     */

  }]);

  function MDCComponent(root) {
    var foundation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

    _classCallCheck$1(this, MDCComponent);

    /** @protected {!Element} */
    this.root_ = root;

    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    this.initialize.apply(this, args);
    // Note that we initialize foundation here and not within the constructor's default param so that
    // this.root_ is defined and can be used within the foundation class.
    /** @protected {!F} */
    this.foundation_ = foundation === undefined ? this.getDefaultFoundation() : foundation;
    this.foundation_.init();
    this.initialSyncWithDOM();
  }

  _createClass$1(MDCComponent, [{
    key: 'initialize',
    value: function initialize() /* ...args */{}
    // Subclasses can override this to do any additional setup work that would be considered part of a
    // "constructor". Essentially, it is a hook into the parent constructor before the foundation is
    // initialized. Any additional arguments besides root and foundation will be passed in here.


    /**
     * @return {!F} foundation
     */

  }, {
    key: 'getDefaultFoundation',
    value: function getDefaultFoundation() {
      // Subclasses must override this method to return a properly configured foundation class for the
      // component.
      throw new Error('Subclasses must override getDefaultFoundation to return a properly configured ' + 'foundation class');
    }
  }, {
    key: 'initialSyncWithDOM',
    value: function initialSyncWithDOM() {
      // Subclasses should override this method if they need to perform work to synchronize with a host DOM
      // object. An example of this would be a form control wrapper that needs to synchronize its internal state
      // to some property or attribute of the host DOM. Please note: this is *not* the place to perform DOM
      // reads/writes that would cause layout / paint, as this is called synchronously from within the constructor.
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      // Subclasses may implement this method to release any resources / deregister any listeners they have
      // attached. An example of this might be deregistering a resize event from the window object.
      this.foundation_.destroy();
    }

    /**
     * Wrapper method to add an event listener to the component's root element. This is most useful when
     * listening for custom events.
     * @param {string} evtType
     * @param {!Function} handler
     */

  }, {
    key: 'listen',
    value: function listen(evtType, handler) {
      this.root_.addEventListener(evtType, handler);
    }

    /**
     * Wrapper method to remove an event listener to the component's root element. This is most useful when
     * unlistening for custom events.
     * @param {string} evtType
     * @param {!Function} handler
     */

  }, {
    key: 'unlisten',
    value: function unlisten(evtType, handler) {
      this.root_.removeEventListener(evtType, handler);
    }

    /**
     * Fires a cross-browser-compatible custom event from the component root of the given type,
     * with the given data.
     * @param {string} evtType
     * @param {!Object} evtData
     * @param {boolean=} shouldBubble
     */

  }, {
    key: 'emit',
    value: function emit(evtType, evtData) {
      var shouldBubble = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      var evt = void 0;
      if (typeof CustomEvent === 'function') {
        evt = new CustomEvent(evtType, {
          detail: evtData,
          bubbles: shouldBubble
        });
      } else {
        evt = document.createEvent('CustomEvent');
        evt.initCustomEvent(evtType, shouldBubble, false, evtData);
      }

      this.root_.dispatchEvent(evt);
    }
  }]);

  return MDCComponent;
}();

var _createClass$3 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$3(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint no-unused-vars: [2, {"args": "none"}] */

/**
 * Adapter for MDC Ripple. Provides an interface for managing
 * - classes
 * - dom
 * - CSS variables
 * - position
 * - dimensions
 * - scroll position
 * - event handlers
 * - unbounded, active and disabled states
 *
 * Additionally, provides type information for the adapter to the Closure
 * compiler.
 *
 * Implement this adapter for your framework of choice to delegate updates to
 * the component in your framework of choice. See architecture documentation
 * for more details.
 * https://github.com/material-components/material-components-web/blob/master/docs/architecture.md
 *
 * @record
 */
var MDCRippleAdapter = function () {
  function MDCRippleAdapter() {
    _classCallCheck$3(this, MDCRippleAdapter);
  }

  _createClass$3(MDCRippleAdapter, [{
    key: "browserSupportsCssVars",

    /** @return {boolean} */
    value: function browserSupportsCssVars() {}

    /** @return {boolean} */

  }, {
    key: "isUnbounded",
    value: function isUnbounded() {}

    /** @return {boolean} */

  }, {
    key: "isSurfaceActive",
    value: function isSurfaceActive() {}

    /** @return {boolean} */

  }, {
    key: "isSurfaceDisabled",
    value: function isSurfaceDisabled() {}

    /** @param {string} className */

  }, {
    key: "addClass",
    value: function addClass(className) {}

    /** @param {string} className */

  }, {
    key: "removeClass",
    value: function removeClass(className) {}

    /**
     * @param {string} evtType
     * @param {!Function} handler
     */

  }, {
    key: "registerInteractionHandler",
    value: function registerInteractionHandler(evtType, handler) {}

    /**
     * @param {string} evtType
     * @param {!Function} handler
     */

  }, {
    key: "deregisterInteractionHandler",
    value: function deregisterInteractionHandler(evtType, handler) {}

    /**
     * @param {!Function} handler
     */

  }, {
    key: "registerResizeHandler",
    value: function registerResizeHandler(handler) {}

    /**
     * @param {!Function} handler
     */

  }, {
    key: "deregisterResizeHandler",
    value: function deregisterResizeHandler(handler) {}

    /**
     * @param {string} varName
     * @param {?number|string} value
     */

  }, {
    key: "updateCssVariable",
    value: function updateCssVariable(varName, value) {}

    /** @return {!ClientRect} */

  }, {
    key: "computeBoundingRect",
    value: function computeBoundingRect() {}

    /** @return {{x: number, y: number}} */

  }, {
    key: "getWindowPageOffset",
    value: function getWindowPageOffset() {}
  }]);

  return MDCRippleAdapter;
}();

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var cssClasses = {
  // Ripple is a special case where the "root" component is really a "mixin" of sorts,
  // given that it's an 'upgrade' to an existing component. That being said it is the root
  // CSS class that all other CSS classes derive from.
  ROOT: 'mdc-ripple-upgraded',
  UNBOUNDED: 'mdc-ripple-upgraded--unbounded',
  BG_FOCUSED: 'mdc-ripple-upgraded--background-focused',
  BG_ACTIVE_FILL: 'mdc-ripple-upgraded--background-active-fill',
  FG_ACTIVATION: 'mdc-ripple-upgraded--foreground-activation',
  FG_DEACTIVATION: 'mdc-ripple-upgraded--foreground-deactivation'
};

var strings = {
  VAR_SURFACE_WIDTH: '--mdc-ripple-surface-width',
  VAR_SURFACE_HEIGHT: '--mdc-ripple-surface-height',
  VAR_FG_SIZE: '--mdc-ripple-fg-size',
  VAR_LEFT: '--mdc-ripple-left',
  VAR_TOP: '--mdc-ripple-top',
  VAR_FG_SCALE: '--mdc-ripple-fg-scale',
  VAR_FG_TRANSLATE_START: '--mdc-ripple-fg-translate-start',
  VAR_FG_TRANSLATE_END: '--mdc-ripple-fg-translate-end'
};

var numbers = {
  PADDING: 10,
  INITIAL_ORIGIN_SCALE: 0.6,
  DEACTIVATION_TIMEOUT_MS: 300,
  FG_DEACTIVATION_MS: 83
};

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Stores result from supportsCssVariables to avoid redundant processing to detect CSS custom variable support.
 * @private {boolean|undefined}
 */
var supportsCssVariables_ = void 0;

/**
 * Stores result from applyPassive to avoid redundant processing to detect passive event listener support.
 * @private {boolean|undefined}
 */
var supportsPassive_ = void 0;

/**
 * @param {!Window} windowObj
 * @return {boolean}
 */
function detectEdgePseudoVarBug(windowObj) {
  // Detect versions of Edge with buggy var() support
  // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11495448/
  var document = windowObj.document;
  var className = 'test-edge-css-var';
  var styleNode = document.createElement('style');
  document.head.appendChild(styleNode);
  var sheet = styleNode.sheet;
  // Internet Explorer 11 requires indices to always be specified to insertRule
  sheet.insertRule(':root { --' + className + ': 1px solid #000; }', 0);
  sheet.insertRule('.' + className + ' { visibility: hidden; }', 1);
  sheet.insertRule('.' + className + '::before { border: var(--' + className + '); }', 2);
  var node = document.createElement('div');
  node.className = className;
  document.body.appendChild(node);
  // Bug exists if ::before style ends up propagating to the parent element
  var hasPseudoVarBug = windowObj.getComputedStyle(node).borderTopStyle === 'solid';
  node.remove();
  styleNode.remove();
  return hasPseudoVarBug;
}

/**
 * @param {!Window} windowObj
 * @param {boolean=} forceRefresh
 * @return {boolean|undefined}
 */
function supportsCssVariables(windowObj) {
  var forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (typeof supportsCssVariables_ === 'boolean' && !forceRefresh) {
    return supportsCssVariables_;
  }

  var supportsFunctionPresent = windowObj.CSS && typeof windowObj.CSS.supports === 'function';
  if (!supportsFunctionPresent) {
    return;
  }

  var explicitlySupportsCssVars = windowObj.CSS.supports('--css-vars', 'yes');
  // See: https://bugs.webkit.org/show_bug.cgi?id=154669
  // See: README section on Safari
  var weAreFeatureDetectingSafari10plus = windowObj.CSS.supports('(--css-vars: yes)') && windowObj.CSS.supports('color', '#00000000');

  if (explicitlySupportsCssVars || weAreFeatureDetectingSafari10plus) {
    supportsCssVariables_ = !detectEdgePseudoVarBug(windowObj);
  } else {
    supportsCssVariables_ = false;
  }
  return supportsCssVariables_;
}

//
/**
 * Determine whether the current browser supports passive event listeners, and if so, use them.
 * @param {!Window=} globalObj
 * @param {boolean=} forceRefresh
 * @return {boolean|{passive: boolean}}
 */
function applyPassive() {
  var globalObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;
  var forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (supportsPassive_ === undefined || forceRefresh) {
    var isSupported = false;
    try {
      globalObj.document.addEventListener('test', null, { get passive() {
          isSupported = true;
        } });
    } catch (e) {}

    supportsPassive_ = isSupported;
  }

  return supportsPassive_ ? { passive: true } : false;
}

/**
 * @param {!Object} HTMLElementPrototype
 * @return {!Array<string>}
 */
function getMatchesProperty(HTMLElementPrototype) {
  return ['webkitMatchesSelector', 'msMatchesSelector', 'matches'].filter(function (p) {
    return p in HTMLElementPrototype;
  }).pop();
}

/**
 * @param {!Event} ev
 * @param {!{x: number, y: number}} pageOffset
 * @param {!ClientRect} clientRect
 * @return {!{x: number, y: number}}
 */
function getNormalizedEventCoords(ev, pageOffset, clientRect) {
  var x = pageOffset.x,
      y = pageOffset.y;

  var documentX = x + clientRect.left;
  var documentY = y + clientRect.top;

  var normalizedX = void 0;
  var normalizedY = void 0;
  // Determine touch point relative to the ripple container.
  if (ev.type === 'touchstart') {
    normalizedX = ev.changedTouches[0].pageX - documentX;
    normalizedY = ev.changedTouches[0].pageY - documentY;
  } else {
    normalizedX = ev.pageX - documentX;
    normalizedY = ev.pageY - documentY;
  }

  return { x: normalizedX, y: normalizedY };
}

var _createClass$4 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$4(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$1(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$1(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @enum {string}
 */
var DEACTIVATION_ACTIVATION_PAIRS = {
  mouseup: 'mousedown',
  pointerup: 'pointerdown',
  touchend: 'touchstart',
  keyup: 'keydown',
  blur: 'focus'
};

/**
 * @extends {MDCFoundation<!MDCRippleAdapter>}
 */

var MDCRippleFoundation = function (_MDCFoundation) {
  _inherits$1(MDCRippleFoundation, _MDCFoundation);

  _createClass$4(MDCRippleFoundation, [{
    key: 'isSupported_',


    /**
     * We compute this property so that we are not querying information about the client
     * until the point in time where the foundation requests it. This prevents scenarios where
     * client-side feature-detection may happen too early, such as when components are rendered on the server
     * and then initialized at mount time on the client.
     * @return {boolean}
     */
    get: function get() {
      return this.adapter_.browserSupportsCssVars();
    }
  }], [{
    key: 'cssClasses',
    get: function get() {
      return cssClasses;
    }
  }, {
    key: 'strings',
    get: function get() {
      return strings;
    }
  }, {
    key: 'numbers',
    get: function get() {
      return numbers;
    }
  }, {
    key: 'defaultAdapter',
    get: function get() {
      return {
        browserSupportsCssVars: function browserSupportsCssVars() /* boolean - cached */{},
        isUnbounded: function isUnbounded() /* boolean */{},
        isSurfaceActive: function isSurfaceActive() /* boolean */{},
        isSurfaceDisabled: function isSurfaceDisabled() /* boolean */{},
        addClass: function addClass() /* className: string */{},
        removeClass: function removeClass() /* className: string */{},
        registerInteractionHandler: function registerInteractionHandler() /* evtType: string, handler: EventListener */{},
        deregisterInteractionHandler: function deregisterInteractionHandler() /* evtType: string, handler: EventListener */{},
        registerResizeHandler: function registerResizeHandler() /* handler: EventListener */{},
        deregisterResizeHandler: function deregisterResizeHandler() /* handler: EventListener */{},
        updateCssVariable: function updateCssVariable() /* varName: string, value: string */{},
        computeBoundingRect: function computeBoundingRect() /* ClientRect */{},
        getWindowPageOffset: function getWindowPageOffset() /* {x: number, y: number} */{}
      };
    }
  }]);

  function MDCRippleFoundation(adapter) {
    _classCallCheck$4(this, MDCRippleFoundation);

    /** @private {number} */
    var _this = _possibleConstructorReturn$1(this, (MDCRippleFoundation.__proto__ || Object.getPrototypeOf(MDCRippleFoundation)).call(this, Object.assign(MDCRippleFoundation.defaultAdapter, adapter)));

    _this.layoutFrame_ = 0;

    /** @private {!ClientRect} */
    _this.frame_ = /** @type {!ClientRect} */{ width: 0, height: 0 };

    /** @private {!ActivationStateType} */
    _this.activationState_ = _this.defaultActivationState_();

    /** @private {number} */
    _this.xfDuration_ = 0;

    /** @private {number} */
    _this.initialSize_ = 0;

    /** @private {number} */
    _this.maxRadius_ = 0;

    /** @private {!Array<{ListenerInfoType}>} */
    _this.listenerInfos_ = [{ activate: 'touchstart', deactivate: 'touchend' }, { activate: 'pointerdown', deactivate: 'pointerup' }, { activate: 'mousedown', deactivate: 'mouseup' }, { activate: 'keydown', deactivate: 'keyup' }, { focus: 'focus', blur: 'blur' }];

    /** @private {!ListenersType} */
    _this.listeners_ = {
      activate: function activate(e) {
        return _this.activate_(e);
      },
      deactivate: function deactivate(e) {
        return _this.deactivate_(e);
      },
      focus: function focus() {
        return requestAnimationFrame(function () {
          return _this.adapter_.addClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);
        });
      },
      blur: function blur() {
        return requestAnimationFrame(function () {
          return _this.adapter_.removeClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);
        });
      }
    };

    /** @private {!Function} */
    _this.resizeHandler_ = function () {
      return _this.layout();
    };

    /** @private {!{left: number, top:number}} */
    _this.unboundedCoords_ = {
      left: 0,
      top: 0
    };

    /** @private {number} */
    _this.fgScale_ = 0;

    /** @private {number} */
    _this.activationTimer_ = 0;

    /** @private {number} */
    _this.fgDeactivationRemovalTimer_ = 0;

    /** @private {boolean} */
    _this.activationAnimationHasEnded_ = false;

    /** @private {!Function} */
    _this.activationTimerCallback_ = function () {
      _this.activationAnimationHasEnded_ = true;
      _this.runDeactivationUXLogicIfReady_();
    };
    return _this;
  }

  /**
   * @return {!ActivationStateType}
   */


  _createClass$4(MDCRippleFoundation, [{
    key: 'defaultActivationState_',
    value: function defaultActivationState_() {
      return {
        isActivated: false,
        hasDeactivationUXRun: false,
        wasActivatedByPointer: false,
        wasElementMadeActive: false,
        activationStartTime: 0,
        activationEvent: null,
        isProgrammatic: false
      };
    }
  }, {
    key: 'init',
    value: function init() {
      var _this2 = this;

      if (!this.isSupported_) {
        return;
      }
      this.addEventListeners_();

      var _MDCRippleFoundation$ = MDCRippleFoundation.cssClasses,
          ROOT = _MDCRippleFoundation$.ROOT,
          UNBOUNDED = _MDCRippleFoundation$.UNBOUNDED;

      requestAnimationFrame(function () {
        _this2.adapter_.addClass(ROOT);
        if (_this2.adapter_.isUnbounded()) {
          _this2.adapter_.addClass(UNBOUNDED);
        }
        _this2.layoutInternal_();
      });
    }

    /** @private */

  }, {
    key: 'addEventListeners_',
    value: function addEventListeners_() {
      var _this3 = this;

      this.listenerInfos_.forEach(function (info) {
        Object.keys(info).forEach(function (k) {
          _this3.adapter_.registerInteractionHandler(info[k], _this3.listeners_[k]);
        });
      });
      this.adapter_.registerResizeHandler(this.resizeHandler_);
    }

    /**
     * @param {Event} e
     * @private
     */

  }, {
    key: 'activate_',
    value: function activate_(e) {
      var _this4 = this;

      if (this.adapter_.isSurfaceDisabled()) {
        return;
      }

      var activationState = this.activationState_;

      if (activationState.isActivated) {
        return;
      }

      activationState.isActivated = true;
      activationState.isProgrammatic = e === null;
      activationState.activationEvent = e;
      activationState.wasActivatedByPointer = activationState.isProgrammatic ? false : e.type === 'mousedown' || e.type === 'touchstart' || e.type === 'pointerdown';
      activationState.activationStartTime = Date.now();

      requestAnimationFrame(function () {
        // This needs to be wrapped in an rAF call b/c web browsers
        // report active states inconsistently when they're called within
        // event handling code:
        // - https://bugs.chromium.org/p/chromium/issues/detail?id=635971
        // - https://bugzilla.mozilla.org/show_bug.cgi?id=1293741
        activationState.wasElementMadeActive = e && e.type === 'keydown' ? _this4.adapter_.isSurfaceActive() : true;
        if (activationState.wasElementMadeActive) {
          _this4.animateActivation_();
        } else {
          // Reset activation state immediately if element was not made active.
          _this4.activationState_ = _this4.defaultActivationState_();
        }
      });
    }
  }, {
    key: 'activate',
    value: function activate() {
      this.activate_(null);
    }

    /** @private */

  }, {
    key: 'animateActivation_',
    value: function animateActivation_() {
      var _this5 = this;

      var _MDCRippleFoundation$2 = MDCRippleFoundation.strings,
          VAR_FG_TRANSLATE_START = _MDCRippleFoundation$2.VAR_FG_TRANSLATE_START,
          VAR_FG_TRANSLATE_END = _MDCRippleFoundation$2.VAR_FG_TRANSLATE_END;
      var _MDCRippleFoundation$3 = MDCRippleFoundation.cssClasses,
          BG_ACTIVE_FILL = _MDCRippleFoundation$3.BG_ACTIVE_FILL,
          FG_DEACTIVATION = _MDCRippleFoundation$3.FG_DEACTIVATION,
          FG_ACTIVATION = _MDCRippleFoundation$3.FG_ACTIVATION;
      var DEACTIVATION_TIMEOUT_MS = MDCRippleFoundation.numbers.DEACTIVATION_TIMEOUT_MS;


      var translateStart = '';
      var translateEnd = '';

      if (!this.adapter_.isUnbounded()) {
        var _getFgTranslationCoor = this.getFgTranslationCoordinates_(),
            startPoint = _getFgTranslationCoor.startPoint,
            endPoint = _getFgTranslationCoor.endPoint;

        translateStart = startPoint.x + 'px, ' + startPoint.y + 'px';
        translateEnd = endPoint.x + 'px, ' + endPoint.y + 'px';
      }

      this.adapter_.updateCssVariable(VAR_FG_TRANSLATE_START, translateStart);
      this.adapter_.updateCssVariable(VAR_FG_TRANSLATE_END, translateEnd);
      // Cancel any ongoing activation/deactivation animations
      clearTimeout(this.activationTimer_);
      clearTimeout(this.fgDeactivationRemovalTimer_);
      this.rmBoundedActivationClasses_();
      this.adapter_.removeClass(FG_DEACTIVATION);

      // Force layout in order to re-trigger the animation.
      this.adapter_.computeBoundingRect();
      this.adapter_.addClass(BG_ACTIVE_FILL);
      this.adapter_.addClass(FG_ACTIVATION);
      this.activationTimer_ = setTimeout(function () {
        return _this5.activationTimerCallback_();
      }, DEACTIVATION_TIMEOUT_MS);
    }

    /**
     * @private
     * @return {{startPoint: PointType, endPoint: PointType}}
     */

  }, {
    key: 'getFgTranslationCoordinates_',
    value: function getFgTranslationCoordinates_() {
      var activationState = this.activationState_;
      var activationEvent = activationState.activationEvent,
          wasActivatedByPointer = activationState.wasActivatedByPointer;


      var startPoint = void 0;
      if (wasActivatedByPointer) {
        startPoint = getNormalizedEventCoords(
        /** @type {!Event} */activationEvent, this.adapter_.getWindowPageOffset(), this.adapter_.computeBoundingRect());
      } else {
        startPoint = {
          x: this.frame_.width / 2,
          y: this.frame_.height / 2
        };
      }
      // Center the element around the start point.
      startPoint = {
        x: startPoint.x - this.initialSize_ / 2,
        y: startPoint.y - this.initialSize_ / 2
      };

      var endPoint = {
        x: this.frame_.width / 2 - this.initialSize_ / 2,
        y: this.frame_.height / 2 - this.initialSize_ / 2
      };

      return { startPoint: startPoint, endPoint: endPoint };
    }

    /** @private */

  }, {
    key: 'runDeactivationUXLogicIfReady_',
    value: function runDeactivationUXLogicIfReady_() {
      var _this6 = this;

      var FG_DEACTIVATION = MDCRippleFoundation.cssClasses.FG_DEACTIVATION;
      var _activationState_ = this.activationState_,
          hasDeactivationUXRun = _activationState_.hasDeactivationUXRun,
          isActivated = _activationState_.isActivated;

      var activationHasEnded = hasDeactivationUXRun || !isActivated;
      if (activationHasEnded && this.activationAnimationHasEnded_) {
        this.rmBoundedActivationClasses_();
        this.adapter_.addClass(FG_DEACTIVATION);
        this.fgDeactivationRemovalTimer_ = setTimeout(function () {
          _this6.adapter_.removeClass(FG_DEACTIVATION);
        }, numbers.FG_DEACTIVATION_MS);
      }
    }

    /** @private */

  }, {
    key: 'rmBoundedActivationClasses_',
    value: function rmBoundedActivationClasses_() {
      var _MDCRippleFoundation$4 = MDCRippleFoundation.cssClasses,
          BG_ACTIVE_FILL = _MDCRippleFoundation$4.BG_ACTIVE_FILL,
          FG_ACTIVATION = _MDCRippleFoundation$4.FG_ACTIVATION;

      this.adapter_.removeClass(BG_ACTIVE_FILL);
      this.adapter_.removeClass(FG_ACTIVATION);
      this.activationAnimationHasEnded_ = false;
      this.adapter_.computeBoundingRect();
    }

    /**
     * @param {Event} e
     * @private
     */

  }, {
    key: 'deactivate_',
    value: function deactivate_(e) {
      var _this7 = this;

      var activationState = this.activationState_;
      // This can happen in scenarios such as when you have a keyup event that blurs the element.

      if (!activationState.isActivated) {
        return;
      }
      // Programmatic deactivation.
      if (activationState.isProgrammatic) {
        var evtObject = null;
        var _state = /** @type {!ActivationStateType} */Object.assign({}, activationState);
        requestAnimationFrame(function () {
          return _this7.animateDeactivation_(evtObject, _state);
        });
        this.activationState_ = this.defaultActivationState_();
        return;
      }

      var actualActivationType = DEACTIVATION_ACTIVATION_PAIRS[e.type];
      var expectedActivationType = activationState.activationEvent.type;
      // NOTE: Pointer events are tricky - https://patrickhlauke.github.io/touch/tests/results/
      // Essentially, what we need to do here is decouple the deactivation UX from the actual
      // deactivation state itself. This way, touch/pointer events in sequence do not trample one
      // another.
      var needsDeactivationUX = actualActivationType === expectedActivationType;
      var needsActualDeactivation = needsDeactivationUX;
      if (activationState.wasActivatedByPointer) {
        needsActualDeactivation = e.type === 'mouseup';
      }

      var state = /** @type {!ActivationStateType} */Object.assign({}, activationState);
      requestAnimationFrame(function () {
        if (needsDeactivationUX) {
          _this7.activationState_.hasDeactivationUXRun = true;
          _this7.animateDeactivation_(e, state);
        }

        if (needsActualDeactivation) {
          _this7.activationState_ = _this7.defaultActivationState_();
        }
      });
    }
  }, {
    key: 'deactivate',
    value: function deactivate() {
      this.deactivate_(null);
    }

    /**
     * @param {Event} e
     * @param {!ActivationStateType} options
     * @private
     */

  }, {
    key: 'animateDeactivation_',
    value: function animateDeactivation_(e, _ref) {
      var wasActivatedByPointer = _ref.wasActivatedByPointer,
          wasElementMadeActive = _ref.wasElementMadeActive;
      var BG_FOCUSED = MDCRippleFoundation.cssClasses.BG_FOCUSED;

      if (wasActivatedByPointer || wasElementMadeActive) {
        // Remove class left over by element being focused
        this.adapter_.removeClass(BG_FOCUSED);
        this.runDeactivationUXLogicIfReady_();
      }
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      var _this8 = this;

      if (!this.isSupported_) {
        return;
      }
      this.removeEventListeners_();

      var _MDCRippleFoundation$5 = MDCRippleFoundation.cssClasses,
          ROOT = _MDCRippleFoundation$5.ROOT,
          UNBOUNDED = _MDCRippleFoundation$5.UNBOUNDED;

      requestAnimationFrame(function () {
        _this8.adapter_.removeClass(ROOT);
        _this8.adapter_.removeClass(UNBOUNDED);
        _this8.removeCssVars_();
      });
    }

    /** @private */

  }, {
    key: 'removeEventListeners_',
    value: function removeEventListeners_() {
      var _this9 = this;

      this.listenerInfos_.forEach(function (info) {
        Object.keys(info).forEach(function (k) {
          _this9.adapter_.deregisterInteractionHandler(info[k], _this9.listeners_[k]);
        });
      });
      this.adapter_.deregisterResizeHandler(this.resizeHandler_);
    }

    /** @private */

  }, {
    key: 'removeCssVars_',
    value: function removeCssVars_() {
      var _this10 = this;

      var strings$$1 = MDCRippleFoundation.strings;

      Object.keys(strings$$1).forEach(function (k) {
        if (k.indexOf('VAR_') === 0) {
          _this10.adapter_.updateCssVariable(strings$$1[k], null);
        }
      });
    }
  }, {
    key: 'layout',
    value: function layout() {
      var _this11 = this;

      if (this.layoutFrame_) {
        cancelAnimationFrame(this.layoutFrame_);
      }
      this.layoutFrame_ = requestAnimationFrame(function () {
        _this11.layoutInternal_();
        _this11.layoutFrame_ = 0;
      });
    }

    /** @private */

  }, {
    key: 'layoutInternal_',
    value: function layoutInternal_() {
      this.frame_ = this.adapter_.computeBoundingRect();

      var maxDim = Math.max(this.frame_.height, this.frame_.width);
      var surfaceDiameter = Math.sqrt(Math.pow(this.frame_.width, 2) + Math.pow(this.frame_.height, 2));

      // 60% of the largest dimension of the surface
      this.initialSize_ = maxDim * MDCRippleFoundation.numbers.INITIAL_ORIGIN_SCALE;

      // Diameter of the surface + 10px
      this.maxRadius_ = surfaceDiameter + MDCRippleFoundation.numbers.PADDING;
      this.fgScale_ = this.maxRadius_ / this.initialSize_;
      this.xfDuration_ = 1000 * Math.sqrt(this.maxRadius_ / 1024);
      this.updateLayoutCssVars_();
    }

    /** @private */

  }, {
    key: 'updateLayoutCssVars_',
    value: function updateLayoutCssVars_() {
      var _MDCRippleFoundation$6 = MDCRippleFoundation.strings,
          VAR_SURFACE_WIDTH = _MDCRippleFoundation$6.VAR_SURFACE_WIDTH,
          VAR_SURFACE_HEIGHT = _MDCRippleFoundation$6.VAR_SURFACE_HEIGHT,
          VAR_FG_SIZE = _MDCRippleFoundation$6.VAR_FG_SIZE,
          VAR_LEFT = _MDCRippleFoundation$6.VAR_LEFT,
          VAR_TOP = _MDCRippleFoundation$6.VAR_TOP,
          VAR_FG_SCALE = _MDCRippleFoundation$6.VAR_FG_SCALE;


      this.adapter_.updateCssVariable(VAR_SURFACE_WIDTH, this.frame_.width + 'px');
      this.adapter_.updateCssVariable(VAR_SURFACE_HEIGHT, this.frame_.height + 'px');
      this.adapter_.updateCssVariable(VAR_FG_SIZE, this.initialSize_ + 'px');
      this.adapter_.updateCssVariable(VAR_FG_SCALE, this.fgScale_);

      if (this.adapter_.isUnbounded()) {
        this.unboundedCoords_ = {
          left: Math.round(this.frame_.width / 2 - this.initialSize_ / 2),
          top: Math.round(this.frame_.height / 2 - this.initialSize_ / 2)
        };

        this.adapter_.updateCssVariable(VAR_LEFT, this.unboundedCoords_.left + 'px');
        this.adapter_.updateCssVariable(VAR_TOP, this.unboundedCoords_.top + 'px');
      }
    }
  }]);

  return MDCRippleFoundation;
}(MDCFoundation);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @extends MDCComponent<!MDCRippleFoundation>
 */
var MDCRipple = function (_MDCComponent) {
  _inherits(MDCRipple, _MDCComponent);

  /** @param {...?} args */
  function MDCRipple() {
    var _ref;

    _classCallCheck(this, MDCRipple);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    /** @type {boolean} */
    var _this = _possibleConstructorReturn(this, (_ref = MDCRipple.__proto__ || Object.getPrototypeOf(MDCRipple)).call.apply(_ref, [this].concat(args)));

    _this.disabled = false;

    /** @private {boolean} */
    _this.unbounded_;
    return _this;
  }

  /**
   * @param {!Element} root
   * @param {{isUnbounded: (boolean|undefined)}=} options
   * @return {!MDCRipple}
   */


  _createClass(MDCRipple, [{
    key: 'activate',
    value: function activate() {
      this.foundation_.activate();
    }
  }, {
    key: 'deactivate',
    value: function deactivate() {
      this.foundation_.deactivate();
    }
  }, {
    key: 'layout',
    value: function layout() {
      this.foundation_.layout();
    }

    /** @return {!MDCRippleFoundation} */

  }, {
    key: 'getDefaultFoundation',
    value: function getDefaultFoundation() {
      return new MDCRippleFoundation(MDCRipple.createAdapter(this));
    }
  }, {
    key: 'initialSyncWithDOM',
    value: function initialSyncWithDOM() {
      this.unbounded = 'mdcRippleIsUnbounded' in this.root_.dataset;
    }
  }, {
    key: 'unbounded',


    /** @return {boolean} */
    get: function get() {
      return this.unbounded_;
    }

    /** @param {boolean} unbounded */
    ,
    set: function set(unbounded) {
      var UNBOUNDED = MDCRippleFoundation.cssClasses.UNBOUNDED;

      this.unbounded_ = Boolean(unbounded);
      if (this.unbounded_) {
        this.root_.classList.add(UNBOUNDED);
      } else {
        this.root_.classList.remove(UNBOUNDED);
      }
    }
  }], [{
    key: 'attachTo',
    value: function attachTo(root) {
      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref2$isUnbounded = _ref2.isUnbounded,
          isUnbounded = _ref2$isUnbounded === undefined ? undefined : _ref2$isUnbounded;

      var ripple = new MDCRipple(root);
      // Only override unbounded behavior if option is explicitly specified
      if (isUnbounded !== undefined) {
        ripple.unbounded = /** @type {boolean} */isUnbounded;
      }
      return ripple;
    }

    /**
     * @param {!RippleCapableSurface} instance
     * @return {!MDCRippleAdapter}
     */

  }, {
    key: 'createAdapter',
    value: function createAdapter(instance) {
      var MATCHES = getMatchesProperty(HTMLElement.prototype);

      return {
        browserSupportsCssVars: function browserSupportsCssVars() {
          return supportsCssVariables(window);
        },
        isUnbounded: function isUnbounded() {
          return instance.unbounded;
        },
        isSurfaceActive: function isSurfaceActive() {
          return instance.root_[MATCHES](':active');
        },
        isSurfaceDisabled: function isSurfaceDisabled() {
          return instance.disabled;
        },
        addClass: function addClass(className) {
          return instance.root_.classList.add(className);
        },
        removeClass: function removeClass(className) {
          return instance.root_.classList.remove(className);
        },
        registerInteractionHandler: function registerInteractionHandler(evtType, handler) {
          return instance.root_.addEventListener(evtType, handler, applyPassive());
        },
        deregisterInteractionHandler: function deregisterInteractionHandler(evtType, handler) {
          return instance.root_.removeEventListener(evtType, handler, applyPassive());
        },
        registerResizeHandler: function registerResizeHandler(handler) {
          return window.addEventListener('resize', handler);
        },
        deregisterResizeHandler: function deregisterResizeHandler(handler) {
          return window.removeEventListener('resize', handler);
        },
        updateCssVariable: function updateCssVariable(varName, value) {
          return instance.root_.style.setProperty(varName, value);
        },
        computeBoundingRect: function computeBoundingRect() {
          return instance.root_.getBoundingClientRect();
        },
        getWindowPageOffset: function getWindowPageOffset() {
          return { x: window.pageXOffset, y: window.pageYOffset };
        }
      };
    }
  }]);

  return MDCRipple;
}(MDCComponent);

var Ripple = (function () {
    function Ripple(_renderer, _root, _registry) {
        var _this = this;
        this._renderer = _renderer;
        this._root = _root;
        this._registry = _registry;
        this._mdcAdapter = {
            browserSupportsCssVars: function () { return (typeof window !== 'undefined') ? supportsCssVariables(window) : false; },
            isUnbounded: function () { return _this.unbounded; },
            isSurfaceActive: function () { return _this.active; },
            isSurfaceDisabled: function () {
                return (_this._root.nativeElement.attributes.getNamedItem('disabled') || _this.disabled) ? true : false;
            },
            addClass: function (className) {
                _this._renderer.addClass(_this._root.nativeElement, className);
            },
            removeClass: function (className) {
                _this._renderer.removeClass(_this._root.nativeElement, className);
            },
            registerInteractionHandler: function (evtType, handler) {
                if (_this._root) {
                    _this._registry.listen_(_this._renderer, evtType, handler, _this._root);
                }
            },
            deregisterInteractionHandler: function (evtType, handler) {
                _this._registry.unlisten_(evtType, handler);
            },
            registerResizeHandler: function (handler) {
                if (_this._root) {
                    _this._registry.listen_(_this._renderer, 'resize', handler, _this._root);
                }
            },
            deregisterResizeHandler: function (handler) {
                _this._registry.unlisten_('resize', handler);
            },
            updateCssVariable: function (varName, value) {
                if (_this._root) {
                    _this._root.nativeElement.style.setProperty(varName, value);
                }
            },
            computeBoundingRect: function () {
                var _a = _this._root.nativeElement.getBoundingClientRect(), left = _a.left, top = _a.top, height = _a.height, width = _a.width;
                return {
                    top: top,
                    left: left,
                    right: left,
                    bottom: top,
                    width: width,
                    height: height,
                };
            },
            getWindowPageOffset: function () {
                return {
                    x: (typeof window !== 'undefined') ? window.pageXOffset : 0,
                    y: (typeof window !== 'undefined') ? window.pageYOffset : 0
                };
            }
        };
        this._foundation = new MDCRippleFoundation(this._mdcAdapter);
    }
    Object.defineProperty(Ripple.prototype, "disabled", {
        get: function () { return this._disabled; },
        set: function (value) {
            this._disabled = toBoolean(value);
            if (this._disabled) {
                this._foundation.destroy();
            }
            else {
                this._foundation.init();
            }
        },
        enumerable: true,
        configurable: true
    });
    Ripple.prototype.ngOnDestroy = function () {
        this._foundation.destroy();
    };
    Ripple.prototype.init = function (unbounded) {
        this._foundation.init();
        this.unbounded = unbounded;
    };
    Ripple.prototype.activate = function () {
        this._foundation.activate();
    };
    Ripple.prototype.deactivate = function () {
        this._foundation.deactivate();
    };
    Ripple.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-ripple]',
                    providers: [EventRegistry]
                },] },
    ];
    /** @nocollapse */
    Ripple.ctorParameters = function () { return [
        { type: _angular_core.Renderer2, },
        { type: _angular_core.ElementRef, },
        { type: EventRegistry, },
    ]; };
    return Ripple;
}());

var KeyCodes;
(function (KeyCodes) {
    KeyCodes[KeyCodes["SPACE"] = 32] = "SPACE";
    KeyCodes[KeyCodes["ENTER"] = 13] = "ENTER";
    KeyCodes[KeyCodes["TAB"] = 9] = "TAB";
})(KeyCodes || (KeyCodes = {}));

/// Determines if the space key was pressed in a [KeyboardEvent].
///
/// Use this utility because `keyCode` is deprecated in Firefox (and doesn't
/// work for space) and `key` is not yet implemented in Chrome.
function isSpaceKey(event) {
    // NB: keyCode does not work on Firefox, returning `0` for the space key.
    return event.keyCode != 0 ? event.keyCode == 32 : event.key == ' ';
}

var ButtonComponent = (function () {
    function ButtonComponent(_renderer, _root, _ripple) {
        this._renderer = _renderer;
        this._root = _root;
        this._ripple = _ripple;
        this._disabled = false;
        this.isHostClass = true;
        this._ripple.init();
    }
    Object.defineProperty(ButtonComponent.prototype, "disabled", {
        get: function () { return this._disabled; },
        set: function (value) {
            this._disabled = toBoolean(value);
            if (this._disabled) {
                this._renderer.setAttribute(this._root.nativeElement, "disabled", 'true');
            }
            else {
                this._renderer.removeAttribute(this._root.nativeElement, "disabled");
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ButtonComponent.prototype, "disableRipple", {
        get: function () { return this._ripple.disabled; },
        set: function (value) {
            this._ripple.disabled = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ButtonComponent.prototype, "tabindex", {
        get: function () {
            return this.disabled ? -1 : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ButtonComponent.prototype, "attrType", {
        get: function () {
            return this.type ? this.type : 'button';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ButtonComponent.prototype, "classRaised", {
        get: function () {
            return this.raised ? 'mdc-button--raised' : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ButtonComponent.prototype, "classPrimary", {
        get: function () {
            return this.primary ? 'mdc-button--primary' : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ButtonComponent.prototype, "classAccent", {
        get: function () {
            return this.accent ? 'mdc-button--accent' : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ButtonComponent.prototype, "classDense", {
        get: function () {
            return this.dense ? 'mdc-button--dense' : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ButtonComponent.prototype, "classCompact", {
        get: function () {
            return this.compact ? 'mdc-button--compact' : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ButtonComponent.prototype, "classCardAction", {
        get: function () {
            return this.cardAction ? 'mdc-card__action' : '';
        },
        enumerable: true,
        configurable: true
    });
    ButtonComponent.prototype.onkeypress = function (evt) {
        this.handleKeyPress(evt);
    };
    ButtonComponent.prototype.blur = function (evt) {
        this.handleBlur(evt);
    };
    ButtonComponent.prototype.ngOnChanges = function (changes) {
        var change = changes['cardAction'];
        if (change) {
            if (!toBoolean(change.currentValue)) {
                this.compact = false;
            }
            else {
                this.compact = true;
            }
        }
    };
    ButtonComponent.prototype.handleKeyPress = function (keyboardEvent) {
        var keyCode = keyboardEvent.keyCode;
        if (keyCode == KeyCodes.ENTER || isSpaceKey(keyboardEvent)) {
            this._ripple.active = true;
            if (keyCode != KeyCodes.ENTER) {
                keyboardEvent.preventDefault();
            }
        }
    };
    ButtonComponent.prototype.handleBlur = function (focusEvent) {
        this._ripple.active = false;
    };
    ButtonComponent.decorators = [
        { type: _angular_core.Component, args: [{
                    selector: 'button[mdc-button], a[mdc-button]',
                    template: '<ng-content></ng-content>',
                    encapsulation: _angular_core.ViewEncapsulation.None,
                    providers: [Ripple]
                },] },
    ];
    /** @nocollapse */
    ButtonComponent.ctorParameters = function () { return [
        { type: _angular_core.Renderer2, },
        { type: _angular_core.ElementRef, },
        { type: Ripple, },
    ]; };
    ButtonComponent.propDecorators = {
        'type': [{ type: _angular_core.Input },],
        'raised': [{ type: _angular_core.Input },],
        'primary': [{ type: _angular_core.Input },],
        'dense': [{ type: _angular_core.Input },],
        'compact': [{ type: _angular_core.Input },],
        'accent': [{ type: _angular_core.Input },],
        'cardAction': [{ type: _angular_core.Input },],
        'disabled': [{ type: _angular_core.Input },],
        'disableRipple': [{ type: _angular_core.Input },],
        'tabindex': [{ type: _angular_core.HostBinding, args: ['tabindex',] },],
        'attrType': [{ type: _angular_core.HostBinding, args: ['attr.type',] },],
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-button',] },],
        'classRaised': [{ type: _angular_core.HostBinding, args: ['class.mdc-button--raised',] },],
        'classPrimary': [{ type: _angular_core.HostBinding, args: ['class.mdc-button--primary',] },],
        'classAccent': [{ type: _angular_core.HostBinding, args: ['class.mdc-button--accent',] },],
        'classDense': [{ type: _angular_core.HostBinding, args: ['class.mdc-button--dense',] },],
        'classCompact': [{ type: _angular_core.HostBinding, args: ['class.mdc-button--compact',] },],
        'classCardAction': [{ type: _angular_core.HostBinding, args: ['class.mdc-card__action',] },],
        'onkeypress': [{ type: _angular_core.HostListener, args: ['keypress', ['$event'],] },],
        'blur': [{ type: _angular_core.HostListener, args: ['blur', ['$event'],] },],
    };
    return ButtonComponent;
}());

var ButtonModule = (function () {
    function ButtonModule() {
    }
    ButtonModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    exports: [ButtonComponent],
                    declarations: [ButtonComponent],
                },] },
    ];
    /** @nocollapse */
    ButtonModule.ctorParameters = function () { return []; };
    return ButtonModule;
}());

var CardComponent = (function () {
    function CardComponent() {
        this.isHostClass = true;
    }
    Object.defineProperty(CardComponent.prototype, "classDarkTheme", {
        get: function () {
            return this.darkTheme ? 'mdc-card--theme-dark' : '';
        },
        enumerable: true,
        configurable: true
    });
    CardComponent.decorators = [
        { type: _angular_core.Component, args: [{
                    selector: 'mdc-card',
                    template: '<ng-content></ng-content>',
                    encapsulation: _angular_core.ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    CardComponent.ctorParameters = function () { return []; };
    CardComponent.propDecorators = {
        'darkTheme': [{ type: _angular_core.Input },],
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-card',] },],
        'classDarkTheme': [{ type: _angular_core.HostBinding, args: ['class.mdc-card--theme-dark',] },],
    };
    return CardComponent;
}());

var CardPrimaryDirective = (function () {
    function CardPrimaryDirective() {
        this.isHostClass = true;
    }
    CardPrimaryDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: 'mdc-card-primary'
                },] },
    ];
    /** @nocollapse */
    CardPrimaryDirective.ctorParameters = function () { return []; };
    CardPrimaryDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-card__primary',] },],
    };
    return CardPrimaryDirective;
}());

var CardSupportingTextDirective = (function () {
    function CardSupportingTextDirective() {
        this.isHostClass = true;
    }
    CardSupportingTextDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-card-supporting-text], mdc-card-supporting-text'
                },] },
    ];
    /** @nocollapse */
    CardSupportingTextDirective.ctorParameters = function () { return []; };
    CardSupportingTextDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-card__supporting-text',] },],
    };
    return CardSupportingTextDirective;
}());

var CardTitleDirective = (function () {
    function CardTitleDirective() {
        this.large = true;
        this.isHostClass = true;
    }
    Object.defineProperty(CardTitleDirective.prototype, "classTitleLarge", {
        get: function () {
            return this.large ? 'mdc-card__title--large' : '';
        },
        enumerable: true,
        configurable: true
    });
    CardTitleDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-card-title], mdc-card-title'
                },] },
    ];
    /** @nocollapse */
    CardTitleDirective.ctorParameters = function () { return []; };
    CardTitleDirective.propDecorators = {
        'large': [{ type: _angular_core.Input },],
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-card__title',] },],
        'classTitleLarge': [{ type: _angular_core.HostBinding, args: ['class.mdc-card__title--large',] },],
    };
    return CardTitleDirective;
}());

var CardSubtitleComponent = (function () {
    function CardSubtitleComponent() {
        this.isHostClass = true;
    }
    CardSubtitleComponent.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-card-subtitle], mdc-card-subtitle'
                },] },
    ];
    /** @nocollapse */
    CardSubtitleComponent.ctorParameters = function () { return []; };
    CardSubtitleComponent.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-card__subtitle',] },],
    };
    return CardSubtitleComponent;
}());

var CardActionsDirective = (function () {
    function CardActionsDirective() {
        this.isHostClass = true;
    }
    Object.defineProperty(CardActionsDirective.prototype, "classCardActionVertical", {
        get: function () {
            return this.vertical ? 'mdc-card__actions--vertical' : '';
        },
        enumerable: true,
        configurable: true
    });
    CardActionsDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: 'mdc-card-actions'
                },] },
    ];
    /** @nocollapse */
    CardActionsDirective.ctorParameters = function () { return []; };
    CardActionsDirective.propDecorators = {
        'vertical': [{ type: _angular_core.Input },],
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-card__actions',] },],
        'classCardActionVertical': [{ type: _angular_core.HostBinding, args: ['class.mdc-card__actions--vertical',] },],
    };
    return CardActionsDirective;
}());

var CardMediaItemDirective = (function () {
    function CardMediaItemDirective() {
        this.isHostClass = true;
    }
    Object.defineProperty(CardMediaItemDirective.prototype, "classMediaItemOne", {
        get: function () {
            return this.size === 1 ? 'mdc-card__media-item--1x' : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardMediaItemDirective.prototype, "classMediaItemOneDotFive", {
        get: function () {
            return this.size === 1.5 ? 'mdc-card__media-item--1dot5x' : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardMediaItemDirective.prototype, "classMediaItemTwo", {
        get: function () {
            return this.size === 2 ? 'mdc-card__media-item--2x' : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CardMediaItemDirective.prototype, "classMediaItemThree", {
        get: function () {
            return this.size === 3 ? 'mdc-card__media-item--3x' : '';
        },
        enumerable: true,
        configurable: true
    });
    CardMediaItemDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-card-media-item]'
                },] },
    ];
    /** @nocollapse */
    CardMediaItemDirective.ctorParameters = function () { return []; };
    CardMediaItemDirective.propDecorators = {
        'size': [{ type: _angular_core.Input },],
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-card__media-item',] },],
        'classMediaItemOne': [{ type: _angular_core.HostBinding, args: ['class.mdc-card__media-item--1dot5x',] },],
        'classMediaItemOneDotFive': [{ type: _angular_core.HostBinding, args: ['class.mdc-card__media-item--1dot5x',] },],
        'classMediaItemTwo': [{ type: _angular_core.HostBinding, args: ['class.mdc-card__media-item--2x',] },],
        'classMediaItemThree': [{ type: _angular_core.HostBinding, args: ['class.mdc-card__media-item--3x',] },],
    };
    return CardMediaItemDirective;
}());

var CardMediaComponent = (function () {
    function CardMediaComponent() {
        this.isHostClass = true;
    }
    CardMediaComponent.decorators = [
        { type: _angular_core.Component, args: [{
                    selector: 'mdc-card-media',
                    template: '<ng-content></ng-content>',
                    encapsulation: _angular_core.ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    CardMediaComponent.ctorParameters = function () { return []; };
    CardMediaComponent.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-card__media',] },],
    };
    return CardMediaComponent;
}());

var CardHorizontalComponent = (function () {
    function CardHorizontalComponent() {
        this.isHostClass = true;
    }
    CardHorizontalComponent.decorators = [
        { type: _angular_core.Component, args: [{
                    selector: 'mdc-card-horizontal',
                    template: '<ng-content select="mdc-card-primary, mdc-card-title, mdc-card-subtitle, [mdc-card-media-item], mdc-card-actions"></ng-content>',
                    encapsulation: _angular_core.ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    CardHorizontalComponent.ctorParameters = function () { return []; };
    CardHorizontalComponent.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-card__horizontal-block',] },],
    };
    return CardHorizontalComponent;
}());

var CARD_COMPONENTS = [
    CardComponent,
    CardPrimaryDirective,
    CardTitleDirective,
    CardSubtitleComponent,
    CardSupportingTextDirective,
    CardActionsDirective,
    CardMediaItemDirective,
    CardHorizontalComponent,
    CardMediaComponent
];
var CardModule = (function () {
    function CardModule() {
    }
    CardModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    exports: [CARD_COMPONENTS],
                    declarations: [CARD_COMPONENTS],
                },] },
    ];
    /** @nocollapse */
    CardModule.ctorParameters = function () { return []; };
    return CardModule;
}());

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @typedef {{
 *   noPrefix: string,
 *   webkitPrefix: string
 * }}
 */
/** @const {Object<string, !VendorPropertyMapType>} */
var eventTypeMap = {
  'animationstart': {
    noPrefix: 'animationstart',
    webkitPrefix: 'webkitAnimationStart',
    styleProperty: 'animation'
  },
  'animationend': {
    noPrefix: 'animationend',
    webkitPrefix: 'webkitAnimationEnd',
    styleProperty: 'animation'
  },
  'animationiteration': {
    noPrefix: 'animationiteration',
    webkitPrefix: 'webkitAnimationIteration',
    styleProperty: 'animation'
  },
  'transitionend': {
    noPrefix: 'transitionend',
    webkitPrefix: 'webkitTransitionEnd',
    styleProperty: 'transition'
  }
};

/** @const {Object<string, !VendorPropertyMapType>} */
var cssPropertyMap = {
  'animation': {
    noPrefix: 'animation',
    webkitPrefix: '-webkit-animation'
  },
  'transform': {
    noPrefix: 'transform',
    webkitPrefix: '-webkit-transform'
  },
  'transition': {
    noPrefix: 'transition',
    webkitPrefix: '-webkit-transition'
  }
};

/**
 * @param {!Object} windowObj
 * @return {boolean}
 */
function hasProperShape(windowObj) {
  return windowObj['document'] !== undefined && typeof windowObj['document']['createElement'] === 'function';
}

/**
 * @param {string} eventType
 * @return {boolean}
 */
function eventFoundInMaps(eventType) {
  return eventType in eventTypeMap || eventType in cssPropertyMap;
}

/**
 * @param {string} eventType
 * @param {!Object<string, !VendorPropertyMapType>} map
 * @param {!Element} el
 * @return {string}
 */
function getJavaScriptEventName(eventType, map, el) {
  return map[eventType].styleProperty in el.style ? map[eventType].noPrefix : map[eventType].webkitPrefix;
}

/**
 * Helper function to determine browser prefix for CSS3 animation events
 * and property names.
 * @param {!Object} windowObj
 * @param {string} eventType
 * @return {string}
 */
function getAnimationName(windowObj, eventType) {
  if (!hasProperShape(windowObj) || !eventFoundInMaps(eventType)) {
    return eventType;
  }

  var map = /** @type {!Object<string, !VendorPropertyMapType>} */eventType in eventTypeMap ? eventTypeMap : cssPropertyMap;
  var el = windowObj['document']['createElement']('div');
  var eventName = '';

  if (map === eventTypeMap) {
    eventName = getJavaScriptEventName(eventType, map, el);
  } else {
    eventName = map[eventType].noPrefix in el.style ? map[eventType].noPrefix : map[eventType].webkitPrefix;
  }

  return eventName;
}

// Public functions to access getAnimationName() for JavaScript events or CSS
// property names.

var transformStyleProperties = ['transform', 'WebkitTransform', 'MozTransform', 'OTransform', 'MSTransform'];

/**
 * @param {!Object} windowObj
 * @param {string} eventType
 * @return {string}
 */
function getCorrectEventName(windowObj, eventType) {
  return getAnimationName(windowObj, eventType);
}

/**
 * @param {!Object} windowObj
 * @param {string} eventType
 * @return {string}
 */
function getCorrectPropertyName(windowObj, eventType) {
  return getAnimationName(windowObj, eventType);
}

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @typedef {!{
 *   checked: boolean,
 *   indeterminate: boolean,
 *   disabled: boolean,
 *   value: ?string
 * }}
 */

var _createClass$7 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$7(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-disable no-unused-vars */
/* eslint no-unused-vars: [2, {"args": "none"}] */

/**
 * Adapter for MDC Checkbox. Provides an interface for managing
 * - classes
 * - dom
 * - event handlers
 *
 * Additionally, provides type information for the adapter to the Closure
 * compiler.
 *
 * Implement this adapter for your framework of choice to delegate updates to
 * the component in your framework of choice. See architecture documentation
 * for more details.
 * https://github.com/material-components/material-components-web/blob/master/docs/architecture.md
 *
 * @record
 */

var MDCCheckboxAdapter = function () {
  function MDCCheckboxAdapter() {
    _classCallCheck$7(this, MDCCheckboxAdapter);
  }

  _createClass$7(MDCCheckboxAdapter, [{
    key: 'addClass',

    /** @param {string} className */
    value: function addClass(className) {}

    /** @param {string} className */

  }, {
    key: 'removeClass',
    value: function removeClass(className) {}

    /** @param {!EventListener} handler */

  }, {
    key: 'registerAnimationEndHandler',
    value: function registerAnimationEndHandler(handler) {}

    /** @param {!EventListener} handler */

  }, {
    key: 'deregisterAnimationEndHandler',
    value: function deregisterAnimationEndHandler(handler) {}

    /** @param {!EventListener} handler */

  }, {
    key: 'registerChangeHandler',
    value: function registerChangeHandler(handler) {}

    /** @param {!EventListener} handler */

  }, {
    key: 'deregisterChangeHandler',
    value: function deregisterChangeHandler(handler) {}

    /** @return {!SelectionControlState} */

  }, {
    key: 'getNativeControl',
    value: function getNativeControl() {}
  }, {
    key: 'forceLayout',
    value: function forceLayout() {}

    /** @return {boolean} */

  }, {
    key: 'isAttachedToDOM',
    value: function isAttachedToDOM() {}
  }]);

  return MDCCheckboxAdapter;
}();

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** @const {string} */
var ROOT = 'mdc-checkbox';

/** @enum {string} */
var cssClasses$1 = {
  UPGRADED: 'mdc-checkbox--upgraded',
  CHECKED: 'mdc-checkbox--checked',
  INDETERMINATE: 'mdc-checkbox--indeterminate',
  DISABLED: 'mdc-checkbox--disabled',
  ANIM_UNCHECKED_CHECKED: 'mdc-checkbox--anim-unchecked-checked',
  ANIM_UNCHECKED_INDETERMINATE: 'mdc-checkbox--anim-unchecked-indeterminate',
  ANIM_CHECKED_UNCHECKED: 'mdc-checkbox--anim-checked-unchecked',
  ANIM_CHECKED_INDETERMINATE: 'mdc-checkbox--anim-checked-indeterminate',
  ANIM_INDETERMINATE_CHECKED: 'mdc-checkbox--anim-indeterminate-checked',
  ANIM_INDETERMINATE_UNCHECKED: 'mdc-checkbox--anim-indeterminate-unchecked'
};

/** @enum {string} */
var strings$1 = {
  NATIVE_CONTROL_SELECTOR: '.' + ROOT + '__native-control',
  TRANSITION_STATE_INIT: 'init',
  TRANSITION_STATE_CHECKED: 'checked',
  TRANSITION_STATE_UNCHECKED: 'unchecked',
  TRANSITION_STATE_INDETERMINATE: 'indeterminate'
};

/** @enum {number} */
var numbers$1 = {
  ANIM_END_LATCH_MS: 100
};

var _createClass$6 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$6(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$3(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$3(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-disable no-unused-vars */
/* eslint-enable no-unused-vars */
/** @const {!Array<string>} */
var CB_PROTO_PROPS = ['checked', 'indeterminate'];

/**
 * @extends {MDCFoundation<!MDCCheckboxAdapter>}
 */

var MDCCheckboxFoundation = function (_MDCFoundation) {
  _inherits$3(MDCCheckboxFoundation, _MDCFoundation);

  _createClass$6(MDCCheckboxFoundation, null, [{
    key: 'cssClasses',

    /** @return enum {cssClasses} */
    get: function get() {
      return cssClasses$1;
    }

    /** @return enum {strings} */

  }, {
    key: 'strings',
    get: function get() {
      return strings$1;
    }

    /** @return enum {numbers} */

  }, {
    key: 'numbers',
    get: function get() {
      return numbers$1;
    }

    /** @return {!MDCCheckboxAdapter} */

  }, {
    key: 'defaultAdapter',
    get: function get() {
      return (/** @type {!MDCCheckboxAdapter} */{
          addClass: function addClass() /* className: string */{},
          removeClass: function removeClass() /* className: string */{},
          registerAnimationEndHandler: function registerAnimationEndHandler() /* handler: EventListener */{},
          deregisterAnimationEndHandler: function deregisterAnimationEndHandler() /* handler: EventListener */{},
          registerChangeHandler: function registerChangeHandler() /* handler: EventListener */{},
          deregisterChangeHandler: function deregisterChangeHandler() /* handler: EventListener */{},
          getNativeControl: function getNativeControl() /* !SelectionControlState */{},
          forceLayout: function forceLayout() {},
          isAttachedToDOM: function isAttachedToDOM() /* boolean */{}
        }
      );
    }
  }]);

  function MDCCheckboxFoundation(adapter) {
    _classCallCheck$6(this, MDCCheckboxFoundation);

    /** @private {string} */
    var _this = _possibleConstructorReturn$3(this, (MDCCheckboxFoundation.__proto__ || Object.getPrototypeOf(MDCCheckboxFoundation)).call(this, Object.assign(MDCCheckboxFoundation.defaultAdapter, adapter)));

    _this.currentCheckState_ = strings$1.TRANSITION_STATE_INIT;

    /** @private {string} */
    _this.currentAnimationClass_ = '';

    /** @private {number} */
    _this.animEndLatchTimer_ = 0;

    _this.animEndHandler_ = /** @private {!EventListener} */function () {
      clearTimeout(_this.animEndLatchTimer_);
      _this.animEndLatchTimer_ = setTimeout(function () {
        _this.adapter_.removeClass(_this.currentAnimationClass_);
        _this.adapter_.deregisterAnimationEndHandler(_this.animEndHandler_);
      }, numbers$1.ANIM_END_LATCH_MS);
    };

    _this.changeHandler_ = /** @private {!EventListener} */function () {
      return _this.transitionCheckState_();
    };
    return _this;
  }

  _createClass$6(MDCCheckboxFoundation, [{
    key: 'init',
    value: function init() {
      this.adapter_.addClass(cssClasses$1.UPGRADED);
      this.adapter_.registerChangeHandler(this.changeHandler_);
      this.installPropertyChangeHooks_();
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      this.adapter_.deregisterChangeHandler(this.changeHandler_);
      this.uninstallPropertyChangeHooks_();
    }

    /** @return {boolean} */

  }, {
    key: 'isChecked',
    value: function isChecked() {
      return this.getNativeControl_().checked;
    }

    /** @param {boolean} checked */

  }, {
    key: 'setChecked',
    value: function setChecked(checked) {
      this.getNativeControl_().checked = checked;
    }

    /** @return {boolean} */

  }, {
    key: 'isIndeterminate',
    value: function isIndeterminate() {
      return this.getNativeControl_().indeterminate;
    }

    /** @param {boolean} indeterminate */

  }, {
    key: 'setIndeterminate',
    value: function setIndeterminate(indeterminate) {
      this.getNativeControl_().indeterminate = indeterminate;
    }

    /** @return {boolean} */

  }, {
    key: 'isDisabled',
    value: function isDisabled() {
      return this.getNativeControl_().disabled;
    }

    /** @param {boolean} disabled */

  }, {
    key: 'setDisabled',
    value: function setDisabled(disabled) {
      this.getNativeControl_().disabled = disabled;
      if (disabled) {
        this.adapter_.addClass(cssClasses$1.DISABLED);
      } else {
        this.adapter_.removeClass(cssClasses$1.DISABLED);
      }
    }

    /** @return {?string} */

  }, {
    key: 'getValue',
    value: function getValue() {
      return this.getNativeControl_().value;
    }

    /** @param {?string} value */

  }, {
    key: 'setValue',
    value: function setValue(value) {
      this.getNativeControl_().value = value;
    }

    /** @private */

  }, {
    key: 'installPropertyChangeHooks_',
    value: function installPropertyChangeHooks_() {
      var _this2 = this;

      var nativeCb = this.getNativeControl_();
      var cbProto = Object.getPrototypeOf(nativeCb);

      CB_PROTO_PROPS.forEach(function (controlState) {
        var desc = Object.getOwnPropertyDescriptor(cbProto, controlState);
        // We have to check for this descriptor, since some browsers (Safari) don't support its return.
        // See: https://bugs.webkit.org/show_bug.cgi?id=49739
        if (validDescriptor(desc)) {
          var nativeCbDesc = /** @type {!ObjectPropertyDescriptor} */{
            get: desc.get,
            set: function set(state) {
              desc.set.call(nativeCb, state);
              _this2.transitionCheckState_();
            },
            configurable: desc.configurable,
            enumerable: desc.enumerable
          };
          Object.defineProperty(nativeCb, controlState, nativeCbDesc);
        }
      });
    }

    /** @private */

  }, {
    key: 'uninstallPropertyChangeHooks_',
    value: function uninstallPropertyChangeHooks_() {
      var nativeCb = this.getNativeControl_();
      var cbProto = Object.getPrototypeOf(nativeCb);

      CB_PROTO_PROPS.forEach(function (controlState) {
        var desc = /** @type {!ObjectPropertyDescriptor} */Object.getOwnPropertyDescriptor(cbProto, controlState);
        if (validDescriptor(desc)) {
          Object.defineProperty(nativeCb, controlState, desc);
        }
      });
    }

    /** @private */

  }, {
    key: 'transitionCheckState_',
    value: function transitionCheckState_() {
      var nativeCb = this.adapter_.getNativeControl();
      if (!nativeCb) {
        return;
      }
      var oldState = this.currentCheckState_;
      var newState = this.determineCheckState_(nativeCb);
      if (oldState === newState) {
        return;
      }

      // Check to ensure that there isn't a previously existing animation class, in case for example
      // the user interacted with the checkbox before the animation was finished.
      if (this.currentAnimationClass_.length > 0) {
        clearTimeout(this.animEndLatchTimer_);
        this.adapter_.forceLayout();
        this.adapter_.removeClass(this.currentAnimationClass_);
      }

      this.currentAnimationClass_ = this.getTransitionAnimationClass_(oldState, newState);
      this.currentCheckState_ = newState;

      // Check for parentNode so that animations are only run when the element is attached
      // to the DOM.
      if (this.adapter_.isAttachedToDOM() && this.currentAnimationClass_.length > 0) {
        this.adapter_.addClass(this.currentAnimationClass_);
        this.adapter_.registerAnimationEndHandler(this.animEndHandler_);
      }
    }

    /**
     * @param {!SelectionControlState} nativeCb
     * @return {string}
     * @private
     */

  }, {
    key: 'determineCheckState_',
    value: function determineCheckState_(nativeCb) {
      var TRANSITION_STATE_INDETERMINATE = strings$1.TRANSITION_STATE_INDETERMINATE,
          TRANSITION_STATE_CHECKED = strings$1.TRANSITION_STATE_CHECKED,
          TRANSITION_STATE_UNCHECKED = strings$1.TRANSITION_STATE_UNCHECKED;


      if (nativeCb.indeterminate) {
        return TRANSITION_STATE_INDETERMINATE;
      }
      return nativeCb.checked ? TRANSITION_STATE_CHECKED : TRANSITION_STATE_UNCHECKED;
    }

    /**
     * @param {string} oldState
     * @param {string} newState
     * @return {string}
     */

  }, {
    key: 'getTransitionAnimationClass_',
    value: function getTransitionAnimationClass_(oldState, newState) {
      var TRANSITION_STATE_INIT = strings$1.TRANSITION_STATE_INIT,
          TRANSITION_STATE_CHECKED = strings$1.TRANSITION_STATE_CHECKED,
          TRANSITION_STATE_UNCHECKED = strings$1.TRANSITION_STATE_UNCHECKED;
      var _MDCCheckboxFoundatio = MDCCheckboxFoundation.cssClasses,
          ANIM_UNCHECKED_CHECKED = _MDCCheckboxFoundatio.ANIM_UNCHECKED_CHECKED,
          ANIM_UNCHECKED_INDETERMINATE = _MDCCheckboxFoundatio.ANIM_UNCHECKED_INDETERMINATE,
          ANIM_CHECKED_UNCHECKED = _MDCCheckboxFoundatio.ANIM_CHECKED_UNCHECKED,
          ANIM_CHECKED_INDETERMINATE = _MDCCheckboxFoundatio.ANIM_CHECKED_INDETERMINATE,
          ANIM_INDETERMINATE_CHECKED = _MDCCheckboxFoundatio.ANIM_INDETERMINATE_CHECKED,
          ANIM_INDETERMINATE_UNCHECKED = _MDCCheckboxFoundatio.ANIM_INDETERMINATE_UNCHECKED;


      switch (oldState) {
        case TRANSITION_STATE_INIT:
          if (newState === TRANSITION_STATE_UNCHECKED) {
            return '';
          }
        // fallthrough
        case TRANSITION_STATE_UNCHECKED:
          return newState === TRANSITION_STATE_CHECKED ? ANIM_UNCHECKED_CHECKED : ANIM_UNCHECKED_INDETERMINATE;
        case TRANSITION_STATE_CHECKED:
          return newState === TRANSITION_STATE_UNCHECKED ? ANIM_CHECKED_UNCHECKED : ANIM_CHECKED_INDETERMINATE;
        // TRANSITION_STATE_INDETERMINATE
        default:
          return newState === TRANSITION_STATE_CHECKED ? ANIM_INDETERMINATE_CHECKED : ANIM_INDETERMINATE_UNCHECKED;
      }
    }

    /**
     * @return {!SelectionControlState}
     * @private
     */

  }, {
    key: 'getNativeControl_',
    value: function getNativeControl_() {
      return this.adapter_.getNativeControl() || {
        checked: false,
        indeterminate: false,
        disabled: false,
        value: null
      };
    }
  }]);

  return MDCCheckboxFoundation;
}(MDCFoundation);

function validDescriptor(inputPropDesc) {
  return !!inputPropDesc && typeof inputPropDesc.set === 'function';
}

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass$5 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$5(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$2(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$2(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-disable no-unused-vars */
/* eslint-enable no-unused-vars */
/**
 * @extends MDCComponent<!MDCCheckboxFoundation>
 */
var MDCCheckbox = function (_MDCComponent) {
  _inherits$2(MDCCheckbox, _MDCComponent);

  _createClass$5(MDCCheckbox, [{
    key: 'nativeCb_',


    /**
     * Returns the state of the native control element, or null if the native control element is not present.
     * @return {?SelectionControlState}
     * @private
     */
    get: function get() {
      var NATIVE_CONTROL_SELECTOR = MDCCheckboxFoundation.strings.NATIVE_CONTROL_SELECTOR;

      var cbEl = /** @type {?SelectionControlState} */this.root_.querySelector(NATIVE_CONTROL_SELECTOR);
      return cbEl;
    }
  }], [{
    key: 'attachTo',
    value: function attachTo(root) {
      return new MDCCheckbox(root);
    }
  }]);

  function MDCCheckbox() {
    var _ref;

    _classCallCheck$5(this, MDCCheckbox);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    /** @private {!MDCRipple} */
    var _this = _possibleConstructorReturn$2(this, (_ref = MDCCheckbox.__proto__ || Object.getPrototypeOf(MDCCheckbox)).call.apply(_ref, [this].concat(args)));

    _this.ripple_ = _this.initRipple_();
    return _this;
  }

  /**
   * @return {!MDCRipple}
   * @private
   */


  _createClass$5(MDCCheckbox, [{
    key: 'initRipple_',
    value: function initRipple_() {
      var _this2 = this;

      var MATCHES = getMatchesProperty(HTMLElement.prototype);
      var adapter = Object.assign(MDCRipple.createAdapter(this), {
        isUnbounded: function isUnbounded() {
          return true;
        },
        isSurfaceActive: function isSurfaceActive() {
          return _this2.nativeCb_[MATCHES](':active');
        },
        registerInteractionHandler: function registerInteractionHandler(type, handler) {
          return _this2.nativeCb_.addEventListener(type, handler);
        },
        deregisterInteractionHandler: function deregisterInteractionHandler(type, handler) {
          return _this2.nativeCb_.removeEventListener(type, handler);
        },
        computeBoundingRect: function computeBoundingRect() {
          var _root_$getBoundingCli = _this2.root_.getBoundingClientRect(),
              left = _root_$getBoundingCli.left,
              top = _root_$getBoundingCli.top;

          var DIM = 40;
          return {
            top: top,
            left: left,
            right: left + DIM,
            bottom: top + DIM,
            width: DIM,
            height: DIM
          };
        }
      });
      var foundation = new MDCRippleFoundation(adapter);
      return new MDCRipple(this.root_, foundation);
    }

    /** @return {!MDCCheckboxFoundation} */

  }, {
    key: 'getDefaultFoundation',
    value: function getDefaultFoundation() {
      var _this3 = this;

      return new MDCCheckboxFoundation({
        addClass: function addClass(className) {
          return _this3.root_.classList.add(className);
        },
        removeClass: function removeClass(className) {
          return _this3.root_.classList.remove(className);
        },
        registerAnimationEndHandler: function registerAnimationEndHandler(handler) {
          return _this3.root_.addEventListener(getCorrectEventName(window, 'animationend'), handler);
        },
        deregisterAnimationEndHandler: function deregisterAnimationEndHandler(handler) {
          return _this3.root_.removeEventListener(getCorrectEventName(window, 'animationend'), handler);
        },
        registerChangeHandler: function registerChangeHandler(handler) {
          return _this3.nativeCb_.addEventListener('change', handler);
        },
        deregisterChangeHandler: function deregisterChangeHandler(handler) {
          return _this3.nativeCb_.removeEventListener('change', handler);
        },
        getNativeControl: function getNativeControl() {
          return _this3.nativeCb_;
        },
        forceLayout: function forceLayout() {
          return _this3.root_.offsetWidth;
        },
        isAttachedToDOM: function isAttachedToDOM() {
          return Boolean(_this3.root_.parentNode);
        }
      });
    }

    /** @return {!MDCRipple} */

  }, {
    key: 'destroy',
    value: function destroy() {
      this.ripple_.destroy();
      _get(MDCCheckbox.prototype.__proto__ || Object.getPrototypeOf(MDCCheckbox.prototype), 'destroy', this).call(this);
    }
  }, {
    key: 'ripple',
    get: function get() {
      return this.ripple_;
    }

    /** @return {boolean} */

  }, {
    key: 'checked',
    get: function get() {
      return this.foundation_.isChecked();
    }

    /** @param {boolean} checked */
    ,
    set: function set(checked) {
      this.foundation_.setChecked(checked);
    }

    /** @return {boolean} */

  }, {
    key: 'indeterminate',
    get: function get() {
      return this.foundation_.isIndeterminate();
    }

    /** @param {boolean} indeterminate */
    ,
    set: function set(indeterminate) {
      this.foundation_.setIndeterminate(indeterminate);
    }

    /** @return {boolean} */

  }, {
    key: 'disabled',
    get: function get() {
      return this.foundation_.isDisabled();
    }

    /** @param {boolean} disabled */
    ,
    set: function set(disabled) {
      this.foundation_.setDisabled(disabled);
    }

    /** @return {?string} */

  }, {
    key: 'value',
    get: function get() {
      return this.foundation_.getValue();
    }

    /** @param {?string} value */
    ,
    set: function set(value) {
      this.foundation_.setValue(value);
    }
  }]);

  return MDCCheckbox;
}(MDCComponent);

var nextElId_ = 0;
var MD_CHECKBOX_CONTROL_VALUE_ACCESSOR = {
    provide: _angular_forms.NG_VALUE_ACCESSOR,
    useExisting: _angular_core.forwardRef(function () { return CheckboxComponent; }),
    multi: true
};
var CheckboxComponent = (function () {
    function CheckboxComponent(_renderer, root, ripple, _registry) {
        var _this = this;
        this._renderer = _renderer;
        this.root = root;
        this.ripple = ripple;
        this._registry = _registry;
        this.id = "mdc-checkbox-" + ++nextElId_;
        this.tabindex = 0;
        this.change = new _angular_core.EventEmitter();
        this.isHostClass = true;
        this.onTouched = function () { };
        this._controlValueAccessorChangeFn = function () { };
        this._mdcAdapter = {
            addClass: function (className) {
                _this._renderer.addClass(_this.root.nativeElement, className);
            },
            removeClass: function (className) {
                _this._renderer.removeClass(_this.root.nativeElement, className);
            },
            registerAnimationEndHandler: function (handler) {
                if (_this.root) {
                    _this._registry.listen_(_this._renderer, 'animationend', handler, _this.root);
                }
            },
            deregisterAnimationEndHandler: function (handler) {
                _this._registry.unlisten_('animationend', handler);
            },
            registerChangeHandler: function (handler) {
                if (_this.root) {
                    _this._registry.listen_(_this._renderer, 'change', handler, _this.inputEl);
                }
            },
            deregisterChangeHandler: function (handler) {
                _this._registry.unlisten_('change', handler);
            },
            getNativeControl: function () {
                return _this.inputEl.nativeElement;
            },
            forceLayout: function () {
                if (_this.root) {
                    return _this.root.nativeElement.offsetWidth;
                }
            },
            isAttachedToDOM: function () { return !!_this.root; }
        };
        this._foundation = new MDCCheckboxFoundation(this._mdcAdapter);
    }
    Object.defineProperty(CheckboxComponent.prototype, "inputId", {
        get: function () {
            return "input-" + this.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxComponent.prototype, "checked", {
        get: function () { return this._foundation.isChecked(); },
        set: function (value) {
            this._foundation.setChecked(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxComponent.prototype, "value", {
        get: function () { return this._foundation.getValue(); },
        set: function (value) {
            this._foundation.setValue(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxComponent.prototype, "disabled", {
        get: function () { return this._foundation.isDisabled(); },
        set: function (value) {
            this._foundation.setDisabled(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxComponent.prototype, "indeterminate", {
        get: function () { return this._foundation.isIndeterminate(); },
        set: function (value) {
            this._foundation.setIndeterminate(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxComponent.prototype, "disableRipple", {
        get: function () { return this.ripple.disabled; },
        set: function (value) {
            this.ripple.disabled = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    CheckboxComponent.prototype.ngAfterViewInit = function () {
        this._foundation.init();
        this.ripple.init(true);
    };
    CheckboxComponent.prototype.ngOnDestroy = function () {
        this._foundation.destroy();
    };
    CheckboxComponent.prototype.onChange = function (evt) {
        evt.stopPropagation();
        this._controlValueAccessorChangeFn(evt.target.checked);
        this.change.emit(evt);
    };
    CheckboxComponent.prototype.writeValue = function (value) {
        this.checked = !!value;
    };
    CheckboxComponent.prototype.registerOnChange = function (fn) {
        this._controlValueAccessorChangeFn = fn;
    };
    CheckboxComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    CheckboxComponent.decorators = [
        { type: _angular_core.Component, args: [{
                    selector: 'mdc-checkbox',
                    template: "\n  <input type=\"checkbox\"\n    #nativeCb    \n    class=\"mdc-checkbox__native-control\"\n    [id]=\"inputId\"\n    [name]=\"name\"\n    [tabindex]=\"tabindex\"\n    [attr.aria-label]=\"ariaLabel\"\n    [attr.aria-labelledby]=\"ariaLabelledby\"\n    [disabled]=\"disabled\"\n    [checked]=\"checked\"\n    [value]=\"value\"\n    [indeterminate]=\"indeterminate\"\n    (change)=\"onChange($event)\"/>\n  <div class=\"mdc-checkbox__background\">\n    <svg class=\"mdc-checkbox__checkmark\"\n      viewBox=\"0 0 24 24\">\n      <path class=\"mdc-checkbox__checkmark__path\"\n            fill=\"none\"\n            stroke=\"white\"\n            d=\"M1.73,12.91 8.1,19.28 22.79,4.59\"/>\n    </svg>\n    <div class=\"mdc-checkbox__mixedmark\"></div>\n  </div>\n  ",
                    encapsulation: _angular_core.ViewEncapsulation.None,
                    providers: [
                        MD_CHECKBOX_CONTROL_VALUE_ACCESSOR,
                        Ripple
                    ]
                },] },
    ];
    /** @nocollapse */
    CheckboxComponent.ctorParameters = function () { return [
        { type: _angular_core.Renderer2, },
        { type: _angular_core.ElementRef, },
        { type: Ripple, },
        { type: EventRegistry, },
    ]; };
    CheckboxComponent.propDecorators = {
        'id': [{ type: _angular_core.Input },],
        'name': [{ type: _angular_core.Input },],
        'checked': [{ type: _angular_core.Input },],
        'value': [{ type: _angular_core.Input },],
        'disabled': [{ type: _angular_core.Input },],
        'indeterminate': [{ type: _angular_core.Input },],
        'disableRipple': [{ type: _angular_core.Input },],
        'tabindex': [{ type: _angular_core.Input },],
        'ariaLabel': [{ type: _angular_core.Input, args: ['aria-label',] },],
        'ariaLabelledby': [{ type: _angular_core.Input, args: ['aria-labelledby',] },],
        'change': [{ type: _angular_core.Output },],
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-checkbox',] },],
        'inputEl': [{ type: _angular_core.ViewChild, args: ['nativeCb',] },],
    };
    return CheckboxComponent;
}());

var CheckboxModule = (function () {
    function CheckboxModule() {
    }
    CheckboxModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    imports: [_angular_forms.FormsModule],
                    exports: [CheckboxComponent],
                    declarations: [CheckboxComponent]
                },] },
    ];
    /** @nocollapse */
    CheckboxModule.ctorParameters = function () { return []; };
    return CheckboxModule;
}());

function isBrowser() {
    return typeof document === 'object' && !!document;
}

/**
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var cssClasses$2 = {
  ROOT: 'mdc-dialog',
  OPEN: 'mdc-dialog--open',
  ANIMATING: 'mdc-dialog--animating',
  BACKDROP: 'mdc-dialog__backdrop',
  SCROLL_LOCK: 'mdc-dialog-scroll-lock',
  ACCEPT_BTN: 'mdc-dialog__footer__button--accept',
  CANCEL_BTN: 'mdc-dialog__footer__button--cancel'
};

var strings$2 = {
  OPEN_DIALOG_SELECTOR: '.mdc-dialog--open',
  DIALOG_SURFACE_SELECTOR: '.mdc-dialog__surface',
  ACCEPT_SELECTOR: '.mdc-dialog__footer__button--accept',
  ACCEPT_EVENT: 'MDCDialog:accept',
  CANCEL_EVENT: 'MDCDialog:cancel'
};

var _createClass$9 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$9(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$5(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$5(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MDCDialogFoundation = function (_MDCFoundation) {
  _inherits$5(MDCDialogFoundation, _MDCFoundation);

  _createClass$9(MDCDialogFoundation, null, [{
    key: 'cssClasses',
    get: function get() {
      return cssClasses$2;
    }
  }, {
    key: 'strings',
    get: function get() {
      return strings$2;
    }
  }, {
    key: 'defaultAdapter',
    get: function get() {
      return {
        addClass: function addClass() /* className: string */{},
        removeClass: function removeClass() /* className: string */{},
        addBodyClass: function addBodyClass() /* className: string */{},
        removeBodyClass: function removeBodyClass() /* className: string */{},
        eventTargetHasClass: function eventTargetHasClass() {
          return (/* target: EventTarget, className: string */ /* boolean */false
          );
        },
        registerInteractionHandler: function registerInteractionHandler() /* evt: string, handler: EventListener */{},
        deregisterInteractionHandler: function deregisterInteractionHandler() /* evt: string, handler: EventListener */{},
        registerSurfaceInteractionHandler: function registerSurfaceInteractionHandler() /* evt: string, handler: EventListener */{},
        deregisterSurfaceInteractionHandler: function deregisterSurfaceInteractionHandler() /* evt: string, handler: EventListener */{},
        registerDocumentKeydownHandler: function registerDocumentKeydownHandler() /* handler: EventListener */{},
        deregisterDocumentKeydownHandler: function deregisterDocumentKeydownHandler() /* handler: EventListener */{},
        registerTransitionEndHandler: function registerTransitionEndHandler() /* handler: EventListener */{},
        deregisterTransitionEndHandler: function deregisterTransitionEndHandler() /* handler: EventListener */{},
        notifyAccept: function notifyAccept() {},
        notifyCancel: function notifyCancel() {},
        trapFocusOnSurface: function trapFocusOnSurface() {},
        untrapFocusOnSurface: function untrapFocusOnSurface() {},
        isDialog: function isDialog() {
          return (/* el: Element */ /* boolean */false
          );
        }
      };
    }
  }]);

  function MDCDialogFoundation(adapter) {
    _classCallCheck$9(this, MDCDialogFoundation);

    var _this = _possibleConstructorReturn$5(this, (MDCDialogFoundation.__proto__ || Object.getPrototypeOf(MDCDialogFoundation)).call(this, Object.assign(MDCDialogFoundation.defaultAdapter, adapter)));

    _this.isOpen_ = false;
    _this.componentClickHandler_ = function (evt) {
      if (_this.adapter_.eventTargetHasClass(evt.target, cssClasses$2.BACKDROP)) {
        _this.cancel(true);
      }
    };
    _this.dialogClickHandler_ = function (evt) {
      return _this.handleDialogClick_(evt);
    };
    _this.documentKeydownHandler_ = function (evt) {
      if (evt.key && evt.key === 'Escape' || evt.keyCode === 27) {
        _this.cancel(true);
      }
    };
    _this.transitionEndHandler_ = function (evt) {
      return _this.handleTransitionEnd_(evt);
    };
    return _this;
  }

  _createClass$9(MDCDialogFoundation, [{
    key: 'destroy',
    value: function destroy() {
      // Ensure that dialog is cleaned up when destroyed
      if (this.isOpen_) {
        this.adapter_.deregisterSurfaceInteractionHandler('click', this.dialogClickHandler_);
        this.adapter_.deregisterDocumentKeydownHandler(this.documentKeydownHandler_);
        this.adapter_.deregisterInteractionHandler('click', this.componentClickHandler_);
        this.adapter_.untrapFocusOnSurface();
        this.adapter_.deregisterTransitionEndHandler(this.transitionEndHandler_);
        this.adapter_.removeClass(MDCDialogFoundation.cssClasses.ANIMATING);
        this.adapter_.removeClass(MDCDialogFoundation.cssClasses.OPEN);
        this.enableScroll_();
      }
    }
  }, {
    key: 'open',
    value: function open() {
      this.isOpen_ = true;
      this.disableScroll_();
      this.adapter_.registerDocumentKeydownHandler(this.documentKeydownHandler_);
      this.adapter_.registerSurfaceInteractionHandler('click', this.dialogClickHandler_);
      this.adapter_.registerInteractionHandler('click', this.componentClickHandler_);
      this.adapter_.registerTransitionEndHandler(this.transitionEndHandler_);
      this.adapter_.addClass(MDCDialogFoundation.cssClasses.ANIMATING);
      this.adapter_.addClass(MDCDialogFoundation.cssClasses.OPEN);
    }
  }, {
    key: 'close',
    value: function close() {
      this.isOpen_ = false;
      this.adapter_.deregisterSurfaceInteractionHandler('click', this.dialogClickHandler_);
      this.adapter_.deregisterDocumentKeydownHandler(this.documentKeydownHandler_);
      this.adapter_.deregisterInteractionHandler('click', this.componentClickHandler_);
      this.adapter_.untrapFocusOnSurface();
      this.adapter_.registerTransitionEndHandler(this.transitionEndHandler_);
      this.adapter_.addClass(MDCDialogFoundation.cssClasses.ANIMATING);
      this.adapter_.removeClass(MDCDialogFoundation.cssClasses.OPEN);
    }
  }, {
    key: 'isOpen',
    value: function isOpen() {
      return this.isOpen_;
    }
  }, {
    key: 'accept',
    value: function accept(shouldNotify) {
      if (shouldNotify) {
        this.adapter_.notifyAccept();
      }

      this.close();
    }
  }, {
    key: 'cancel',
    value: function cancel(shouldNotify) {
      if (shouldNotify) {
        this.adapter_.notifyCancel();
      }

      this.close();
    }
  }, {
    key: 'handleDialogClick_',
    value: function handleDialogClick_(evt) {
      var target = evt.target;

      if (this.adapter_.eventTargetHasClass(target, cssClasses$2.ACCEPT_BTN)) {
        this.accept(true);
      } else if (this.adapter_.eventTargetHasClass(target, cssClasses$2.CANCEL_BTN)) {
        this.cancel(true);
      }
    }
  }, {
    key: 'handleTransitionEnd_',
    value: function handleTransitionEnd_(evt) {
      if (this.adapter_.isDialog(evt.target)) {
        this.adapter_.deregisterTransitionEndHandler(this.transitionEndHandler_);
        this.adapter_.removeClass(MDCDialogFoundation.cssClasses.ANIMATING);
        if (this.isOpen_) {
          this.adapter_.trapFocusOnSurface();
        } else {
          this.enableScroll_();
        }
      }
    }
  }, {
    key: 'disableScroll_',
    value: function disableScroll_() {
      this.adapter_.addBodyClass(cssClasses$2.SCROLL_LOCK);
    }
  }, {
    key: 'enableScroll_',
    value: function enableScroll_() {
      this.adapter_.removeBodyClass(cssClasses$2.SCROLL_LOCK);
    }
  }]);

  return MDCDialogFoundation;
}(MDCFoundation);

var index$1 = function(el) {
  var basicTabbables = [];
  var orderedTabbables = [];

  // A node is "available" if
  // - it's computed style
  var isUnavailable = createIsUnavailable();

  var candidateSelectors = [
    'input',
    'select',
    'a[href]',
    'textarea',
    'button',
    '[tabindex]',
  ];

  var candidates = el.querySelectorAll(candidateSelectors);

  var candidate, candidateIndex;
  for (var i = 0, l = candidates.length; i < l; i++) {
    candidate = candidates[i];
    candidateIndex = parseInt(candidate.getAttribute('tabindex'), 10) || candidate.tabIndex;

    if (
      candidateIndex < 0
      || (candidate.tagName === 'INPUT' && candidate.type === 'hidden')
      || candidate.disabled
      || isUnavailable(candidate)
    ) {
      continue;
    }

    if (candidateIndex === 0) {
      basicTabbables.push(candidate);
    } else {
      orderedTabbables.push({
        tabIndex: candidateIndex,
        node: candidate,
      });
    }
  }

  var tabbableNodes = orderedTabbables
    .sort(function(a, b) {
      return a.tabIndex - b.tabIndex;
    })
    .map(function(a) {
      return a.node
    });

  Array.prototype.push.apply(tabbableNodes, basicTabbables);

  return tabbableNodes;
};

function createIsUnavailable() {
  // Node cache must be refreshed on every check, in case
  // the content of the element has changed
  var isOffCache = [];

  // "off" means `display: none;`, as opposed to "hidden",
  // which means `visibility: hidden;`. getComputedStyle
  // accurately reflects visiblity in context but not
  // "off" state, so we need to recursively check parents.

  function isOff(node, nodeComputedStyle) {
    if (node === document.documentElement) return false;

    // Find the cached node (Array.prototype.find not available in IE9)
    for (var i = 0, length = isOffCache.length; i < length; i++) {
      if (isOffCache[i][0] === node) return isOffCache[i][1];
    }

    nodeComputedStyle = nodeComputedStyle || window.getComputedStyle(node);

    var result = false;

    if (nodeComputedStyle.display === 'none') {
      result = true;
    } else if (node.parentNode) {
      result = isOff(node.parentNode);
    }

    isOffCache.push([node, result]);

    return result;
  }

  return function isUnavailable(node) {
    if (node === document.documentElement) return false;

    var computedStyle = window.getComputedStyle(node);

    if (isOff(node, computedStyle)) return true;

    return computedStyle.visibility === 'hidden';
  }
}

var listeningFocusTrap = null;

function focusTrap(element, userOptions) {
  var tabbableNodes = [];
  var nodeFocusedBeforeActivation = null;
  var active = false;
  var paused = false;

  var container = (typeof element === 'string')
    ? document.querySelector(element)
    : element;

  var config = userOptions || {};
  config.returnFocusOnDeactivate = (userOptions && userOptions.returnFocusOnDeactivate !== undefined)
    ? userOptions.returnFocusOnDeactivate
    : true;
  config.escapeDeactivates = (userOptions && userOptions.escapeDeactivates !== undefined)
    ? userOptions.escapeDeactivates
    : true;

  var trap = {
    activate: activate,
    deactivate: deactivate,
    pause: pause,
    unpause: unpause,
  };

  return trap;

  function activate(activateOptions) {
    if (active) return;

    var defaultedActivateOptions = {
      onActivate: (activateOptions && activateOptions.onActivate !== undefined)
        ? activateOptions.onActivate
        : config.onActivate,
    };

    active = true;
    paused = false;
    nodeFocusedBeforeActivation = document.activeElement;

    if (defaultedActivateOptions.onActivate) {
      defaultedActivateOptions.onActivate();
    }

    addListeners();
    return trap;
  }

  function deactivate(deactivateOptions) {
    if (!active) return;

    var defaultedDeactivateOptions = {
      returnFocus: (deactivateOptions && deactivateOptions.returnFocus !== undefined)
        ? deactivateOptions.returnFocus
        : config.returnFocusOnDeactivate,
      onDeactivate: (deactivateOptions && deactivateOptions.onDeactivate !== undefined)
        ? deactivateOptions.onDeactivate
        : config.onDeactivate,
    };

    removeListeners();

    if (defaultedDeactivateOptions.onDeactivate) {
      defaultedDeactivateOptions.onDeactivate();
    }

    if (defaultedDeactivateOptions.returnFocus) {
      setTimeout(function () {
        tryFocus(nodeFocusedBeforeActivation);
      }, 0);
    }

    active = false;
    paused = false;
    return this;
  }

  function pause() {
    if (paused || !active) return;
    paused = true;
    removeListeners();
  }

  function unpause() {
    if (!paused || !active) return;
    paused = false;
    addListeners();
  }

  function addListeners() {
    if (!active) return;

    // There can be only one listening focus trap at a time
    if (listeningFocusTrap) {
      listeningFocusTrap.pause();
    }
    listeningFocusTrap = trap;

    updateTabbableNodes();
    tryFocus(firstFocusNode());
    document.addEventListener('focus', checkFocus, true);
    document.addEventListener('click', checkClick, true);
    document.addEventListener('mousedown', checkPointerDown, true);
    document.addEventListener('touchstart', checkPointerDown, true);
    document.addEventListener('keydown', checkKey, true);

    return trap;
  }

  function removeListeners() {
    if (!active || listeningFocusTrap !== trap) return;

    document.removeEventListener('focus', checkFocus, true);
    document.removeEventListener('click', checkClick, true);
    document.removeEventListener('mousedown', checkPointerDown, true);
    document.removeEventListener('touchstart', checkPointerDown, true);
    document.removeEventListener('keydown', checkKey, true);

    listeningFocusTrap = null;

    return trap;
  }

  function getNodeForOption(optionName) {
    var optionValue = config[optionName];
    var node = optionValue;
    if (!optionValue) {
      return null;
    }
    if (typeof optionValue === 'string') {
      node = document.querySelector(optionValue);
      if (!node) {
        throw new Error('`' + optionName + '` refers to no known node');
      }
    }
    if (typeof optionValue === 'function') {
      node = optionValue();
      if (!node) {
        throw new Error('`' + optionName + '` did not return a node');
      }
    }
    return node;
  }

  function firstFocusNode() {
    var node;
    if (getNodeForOption('initialFocus') !== null) {
      node = getNodeForOption('initialFocus');
    } else if (container.contains(document.activeElement)) {
      node = document.activeElement;
    } else {
      node = tabbableNodes[0] || getNodeForOption('fallbackFocus');
    }

    if (!node) {
      throw new Error('You can\'t have a focus-trap without at least one focusable element');
    }

    return node;
  }

  // This needs to be done on mousedown and touchstart instead of click
  // so that it precedes the focus event
  function checkPointerDown(e) {
    if (config.clickOutsideDeactivates && !container.contains(e.target)) {
      deactivate({ returnFocus: false });
    }
  }

  function checkClick(e) {
    if (config.clickOutsideDeactivates) return;
    if (container.contains(e.target)) return;
    e.preventDefault();
    e.stopImmediatePropagation();
  }

  function checkFocus(e) {
    if (container.contains(e.target)) return;
    e.preventDefault();
    e.stopImmediatePropagation();
    // Checking for a blur method here resolves a Firefox issue (#15)
    if (typeof e.target.blur === 'function') e.target.blur();
  }

  function checkKey(e) {
    if (e.key === 'Tab' || e.keyCode === 9) {
      handleTab(e);
    }

    if (config.escapeDeactivates !== false && isEscapeEvent(e)) {
      deactivate();
    }
  }

  function handleTab(e) {
    e.preventDefault();
    updateTabbableNodes();
    var currentFocusIndex = tabbableNodes.indexOf(e.target);
    var lastTabbableNode = tabbableNodes[tabbableNodes.length - 1];
    var firstTabbableNode = tabbableNodes[0];

    if (e.shiftKey) {
      if (e.target === firstTabbableNode || tabbableNodes.indexOf(e.target) === -1) {
        return tryFocus(lastTabbableNode);
      }
      return tryFocus(tabbableNodes[currentFocusIndex - 1]);
    }

    if (e.target === lastTabbableNode) return tryFocus(firstTabbableNode);

    tryFocus(tabbableNodes[currentFocusIndex + 1]);
  }

  function updateTabbableNodes() {
    tabbableNodes = index$1(container);
  }
}

function isEscapeEvent(e) {
  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;
}

function tryFocus(node) {
  if (!node || !node.focus) return;
  node.focus();
  if (node.tagName.toLowerCase() === 'input') {
    node.select();
  }
}

var index = focusTrap;

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function createFocusTrapInstance(surfaceEl, acceptButtonEl) {
  var focusTrapFactory = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : index;

  return focusTrapFactory(surfaceEl, {
    initialFocus: acceptButtonEl,
    clickOutsideDeactivates: true
  });
}

var _createClass$8 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get$1 = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck$8(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$4(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$4(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MDCDialog = function (_MDCComponent) {
  _inherits$4(MDCDialog, _MDCComponent);

  function MDCDialog() {
    _classCallCheck$8(this, MDCDialog);

    return _possibleConstructorReturn$4(this, (MDCDialog.__proto__ || Object.getPrototypeOf(MDCDialog)).apply(this, arguments));
  }

  _createClass$8(MDCDialog, [{
    key: 'initialize',
    value: function initialize() {
      this.focusTrap_ = createFocusTrapInstance(this.dialogSurface_, this.acceptButton_);
      this.footerBtnRipples_ = [];

      var footerBtns = this.root_.querySelectorAll('.mdc-dialog__footer__button');
      for (var i = 0, footerBtn; footerBtn = footerBtns[i]; i++) {
        this.footerBtnRipples_.push(new MDCRipple(footerBtn));
      }
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      this.footerBtnRipples_.forEach(function (ripple) {
        return ripple.destroy();
      });
      _get$1(MDCDialog.prototype.__proto__ || Object.getPrototypeOf(MDCDialog.prototype), 'destroy', this).call(this);
    }
  }, {
    key: 'show',
    value: function show() {
      this.foundation_.open();
    }
  }, {
    key: 'close',
    value: function close() {
      this.foundation_.close();
    }
  }, {
    key: 'getDefaultFoundation',
    value: function getDefaultFoundation() {
      var _this2 = this;

      return new MDCDialogFoundation({
        addClass: function addClass(className) {
          return _this2.root_.classList.add(className);
        },
        removeClass: function removeClass(className) {
          return _this2.root_.classList.remove(className);
        },
        addBodyClass: function addBodyClass(className) {
          return document.body.classList.add(className);
        },
        removeBodyClass: function removeBodyClass(className) {
          return document.body.classList.remove(className);
        },
        eventTargetHasClass: function eventTargetHasClass(target, className) {
          return target.classList.contains(className);
        },
        registerInteractionHandler: function registerInteractionHandler(evt, handler) {
          return _this2.root_.addEventListener(evt, handler);
        },
        deregisterInteractionHandler: function deregisterInteractionHandler(evt, handler) {
          return _this2.root_.removeEventListener(evt, handler);
        },
        registerSurfaceInteractionHandler: function registerSurfaceInteractionHandler(evt, handler) {
          return _this2.dialogSurface_.addEventListener(evt, handler);
        },
        deregisterSurfaceInteractionHandler: function deregisterSurfaceInteractionHandler(evt, handler) {
          return _this2.dialogSurface_.removeEventListener(evt, handler);
        },
        registerDocumentKeydownHandler: function registerDocumentKeydownHandler(handler) {
          return document.addEventListener('keydown', handler);
        },
        deregisterDocumentKeydownHandler: function deregisterDocumentKeydownHandler(handler) {
          return document.removeEventListener('keydown', handler);
        },
        registerTransitionEndHandler: function registerTransitionEndHandler(handler) {
          return _this2.dialogSurface_.addEventListener('transitionend', handler);
        },
        deregisterTransitionEndHandler: function deregisterTransitionEndHandler(handler) {
          return _this2.dialogSurface_.removeEventListener('transitionend', handler);
        },
        notifyAccept: function notifyAccept() {
          return _this2.emit(MDCDialogFoundation.strings.ACCEPT_EVENT);
        },
        notifyCancel: function notifyCancel() {
          return _this2.emit(MDCDialogFoundation.strings.CANCEL_EVENT);
        },
        trapFocusOnSurface: function trapFocusOnSurface() {
          return _this2.focusTrap_.activate();
        },
        untrapFocusOnSurface: function untrapFocusOnSurface() {
          return _this2.focusTrap_.deactivate();
        },
        isDialog: function isDialog(el) {
          return el === _this2.dialogSurface_;
        }
      });
    }
  }, {
    key: 'open',
    get: function get() {
      return this.foundation_.isOpen();
    }
  }, {
    key: 'acceptButton_',
    get: function get() {
      return this.root_.querySelector(MDCDialogFoundation.strings.ACCEPT_SELECTOR);
    }
  }, {
    key: 'dialogSurface_',
    get: function get() {
      return this.root_.querySelector(MDCDialogFoundation.strings.DIALOG_SURFACE_SELECTOR);
    }
  }], [{
    key: 'attachTo',
    value: function attachTo(root) {
      return new MDCDialog(root);
    }
  }]);

  return MDCDialog;
}(MDCComponent);

var DialogSurfaceDirective = (function () {
    function DialogSurfaceDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    DialogSurfaceDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-dialog-surface], mdc-dialog-surface'
                },] },
    ];
    /** @nocollapse */
    DialogSurfaceDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    DialogSurfaceDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-dialog__surface',] },],
    };
    return DialogSurfaceDirective;
}());
var DialogHeaderDirective = (function () {
    function DialogHeaderDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    DialogHeaderDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-dialog-header], mdc-dialog-header'
                },] },
    ];
    /** @nocollapse */
    DialogHeaderDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    DialogHeaderDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-dialog__header',] },],
    };
    return DialogHeaderDirective;
}());
var DialogHeaderTitleDirective = (function () {
    function DialogHeaderTitleDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    DialogHeaderTitleDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-dialog-header-title], mdc-dialog-header-title'
                },] },
    ];
    /** @nocollapse */
    DialogHeaderTitleDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    DialogHeaderTitleDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-dialog__header__title',] },],
    };
    return DialogHeaderTitleDirective;
}());
var DialogBodyDirective = (function () {
    function DialogBodyDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    Object.defineProperty(DialogBodyDirective.prototype, "classScrollable", {
        get: function () {
            return this.scrollable ? 'mdc-dialog__body--scrollable' : '';
        },
        enumerable: true,
        configurable: true
    });
    DialogBodyDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-dialog-body], mdc-dialog-body'
                },] },
    ];
    /** @nocollapse */
    DialogBodyDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    DialogBodyDirective.propDecorators = {
        'scrollable': [{ type: _angular_core.Input },],
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-dialog__body',] },],
        'classScrollable': [{ type: _angular_core.HostBinding, args: ['class.mdc-dialog__body--scrollable',] },],
    };
    return DialogBodyDirective;
}());
var DialogFooterDirective = (function () {
    function DialogFooterDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    DialogFooterDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-dialog-footer], mdc-dialog-footer'
                },] },
    ];
    /** @nocollapse */
    DialogFooterDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    DialogFooterDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-dialog__footer',] },],
    };
    return DialogFooterDirective;
}());
var DialogBackdropDirective = (function () {
    function DialogBackdropDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    DialogBackdropDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-dialog-backdrop], mdc-dialog-backdrop'
                },] },
    ];
    /** @nocollapse */
    DialogBackdropDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    DialogBackdropDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-dialog__backdrop',] },],
    };
    return DialogBackdropDirective;
}());
var DialogButtonAcceptDirective = (function () {
    function DialogButtonAcceptDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
        this.isFooterButton = true;
    }
    DialogButtonAcceptDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-dialog-button-accept], mdc-dialog-button-accept'
                },] },
    ];
    /** @nocollapse */
    DialogButtonAcceptDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    DialogButtonAcceptDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-dialog__footer__button--accept',] },],
        'isFooterButton': [{ type: _angular_core.HostBinding, args: ['class.mdc-dialog__footer__button',] },],
    };
    return DialogButtonAcceptDirective;
}());
var DialogButtonCancelDirective = (function () {
    function DialogButtonCancelDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
        this.isFooterButton = true;
    }
    DialogButtonCancelDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-dialog-button-cancel], mdc-dialog-button-cancel'
                },] },
    ];
    /** @nocollapse */
    DialogButtonCancelDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    DialogButtonCancelDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-dialog__footer__button--cancel',] },],
        'isFooterButton': [{ type: _angular_core.HostBinding, args: ['class.mdc-dialog__footer__button',] },],
    };
    return DialogButtonCancelDirective;
}());
var DialogComponent = (function () {
    function DialogComponent(_renderer, _root, _registry) {
        var _this = this;
        this._renderer = _renderer;
        this._root = _root;
        this._registry = _registry;
        this.accept_ = new _angular_core.EventEmitter();
        this.cancel_ = new _angular_core.EventEmitter();
        this.isHostClass = true;
        this.role = 'alertdialog';
        this.ariaHidden = 'true';
        this._mdcAdapter = {
            addClass: function (className) {
                _this._renderer.addClass(_this._root.nativeElement, className);
            },
            removeClass: function (className) {
                _this._renderer.removeClass(_this._root.nativeElement, className);
            },
            addBodyClass: function (className) {
                if (isBrowser()) {
                    _this._renderer.addClass(document.body, className);
                }
            },
            removeBodyClass: function (className) {
                if (isBrowser()) {
                    _this._renderer.removeClass(document.body, className);
                }
            },
            eventTargetHasClass: function (target, className) { return target.classList.contains(className); },
            registerInteractionHandler: function (evt, handler) {
                _this._registry.listen_(_this._renderer, evt, handler, _this._root);
            },
            deregisterInteractionHandler: function (evt, handler) {
                _this._registry.unlisten_(evt, handler);
            },
            registerSurfaceInteractionHandler: function (evt, handler) {
                if (_this.dialogSurface) {
                    _this._registry.listen_(_this._renderer, evt, handler, _this.dialogSurface.elementRef);
                }
            },
            deregisterSurfaceInteractionHandler: function (evt, handler) {
                if (_this.dialogSurface) {
                    _this._registry.unlisten_(evt, handler);
                }
            },
            registerDocumentKeydownHandler: function (handler) {
                if (isBrowser()) {
                    _this._registry.listen_(_this._renderer, 'keydown', handler, 'document');
                }
            },
            deregisterDocumentKeydownHandler: function (handler) {
                if (isBrowser()) {
                    _this._registry.unlisten_('keydown', handler);
                }
            },
            registerTransitionEndHandler: function (handler) {
                if (_this.dialogSurface) {
                    _this._registry.listen_(_this._renderer, 'transitionend', handler, _this.dialogSurface.elementRef);
                }
            },
            deregisterTransitionEndHandler: function (handler) {
                if (_this.dialogSurface) {
                    _this._registry.unlisten_('transitionend', handler);
                }
            },
            notifyAccept: function () { return _this.accept_.emit('MDCDialog:accept'); },
            notifyCancel: function () { return _this.cancel_.emit('MDCDialog:cancel'); },
            trapFocusOnSurface: function () {
                if (_this.focusTrap_) {
                    _this.focusTrap_.activate();
                }
            },
            untrapFocusOnSurface: function () {
                if (_this.focusTrap_) {
                    _this.focusTrap_.deactivate();
                }
            },
            isDialog: function (el) {
                return _this.dialogSurface ? el === _this.dialogSurface.elementRef.nativeElement : false;
            }
        };
        this._foundation = new MDCDialogFoundation(this._mdcAdapter);
    }
    DialogComponent.prototype.ngAfterViewInit = function () {
        this._foundation.init();
    };
    DialogComponent.prototype.ngOnDestroy = function () {
        this._foundation.destroy();
    };
    DialogComponent.prototype.show = function () {
        if (this.dialogSurface && this.dialogAcceptButton) {
            this.focusTrap_ = createFocusTrapInstance(this.dialogSurface.elementRef.nativeElement, this.dialogAcceptButton.elementRef.nativeElement);
        }
        this._foundation.open();
    };
    DialogComponent.prototype.close = function () {
        this._foundation.close();
    };
    DialogComponent.prototype.isOpen = function () {
        return this._foundation.isOpen();
    };
    DialogComponent.prototype.accept = function () {
        this._foundation.accept();
    };
    DialogComponent.prototype.cancel = function () {
        this._foundation.cancel();
    };
    DialogComponent.decorators = [
        { type: _angular_core.Component, args: [{
                    selector: 'mdc-dialog',
                    template: "\n  <mdc-dialog-surface>\n    <ng-content></ng-content>\n  </mdc-dialog-surface>\n  <mdc-dialog-backdrop></mdc-dialog-backdrop>\n  ",
                    encapsulation: _angular_core.ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    DialogComponent.ctorParameters = function () { return [
        { type: _angular_core.Renderer2, },
        { type: _angular_core.ElementRef, },
        { type: EventRegistry, },
    ]; };
    DialogComponent.propDecorators = {
        'accept_': [{ type: _angular_core.Output, args: ['accept',] },],
        'cancel_': [{ type: _angular_core.Output, args: ['cancel',] },],
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-dialog',] },],
        'role': [{ type: _angular_core.HostBinding, args: ['attr.role',] },],
        'ariaHidden': [{ type: _angular_core.HostBinding, args: ['attr.aria-hidden',] },],
        'dialogSurface': [{ type: _angular_core.ViewChild, args: [DialogSurfaceDirective,] },],
        'dialogAcceptButton': [{ type: _angular_core.ContentChild, args: [DialogButtonAcceptDirective,] },],
        'dialogBody': [{ type: _angular_core.ContentChild, args: [DialogBodyDirective,] },],
    };
    return DialogComponent;
}());

var DIALOG_COMPONENTS = [
    DialogBackdropDirective,
    DialogBodyDirective,
    DialogComponent,
    DialogFooterDirective,
    DialogHeaderDirective,
    DialogSurfaceDirective,
    DialogHeaderTitleDirective,
    DialogButtonAcceptDirective,
    DialogButtonCancelDirective,
];
var DialogModule = (function () {
    function DialogModule() {
    }
    DialogModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    exports: DIALOG_COMPONENTS,
                    declarations: DIALOG_COMPONENTS
                },] },
    ];
    /** @nocollapse */
    DialogModule.ctorParameters = function () { return []; };
    return DialogModule;
}());

var PermanentDrawerSpacerDirective = (function () {
    function PermanentDrawerSpacerDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    PermanentDrawerSpacerDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-permanent-drawer-spacer], mdc-permanent-drawer-spacer'
                },] },
    ];
    /** @nocollapse */
    PermanentDrawerSpacerDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    PermanentDrawerSpacerDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-permanent-drawer__toolbar-spacer',] },],
    };
    return PermanentDrawerSpacerDirective;
}());
var PermanentDrawerContentDirective = (function () {
    function PermanentDrawerContentDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    PermanentDrawerContentDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-permanent-drawer-content], mdc-permanent-drawer-content'
                },] },
    ];
    /** @nocollapse */
    PermanentDrawerContentDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    PermanentDrawerContentDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-permanent-drawer__content',] },],
    };
    return PermanentDrawerContentDirective;
}());
var PermanentDrawerSelectedDirective = (function () {
    function PermanentDrawerSelectedDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    PermanentDrawerSelectedDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-permanent-drawer-selected]'
                },] },
    ];
    /** @nocollapse */
    PermanentDrawerSelectedDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    PermanentDrawerSelectedDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-permanent-drawer--selected',] },],
    };
    return PermanentDrawerSelectedDirective;
}());
var PermanentDrawerComponent = (function () {
    function PermanentDrawerComponent(_root) {
        this._root = _root;
        this.isHostClass = true;
        this.role = 'navigation';
    }
    PermanentDrawerComponent.decorators = [
        { type: _angular_core.Component, args: [{
                    selector: 'mdc-permanent-drawer',
                    template: '<ng-content></ng-content>',
                    encapsulation: _angular_core.ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    PermanentDrawerComponent.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    PermanentDrawerComponent.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-permanent-drawer',] },],
        'role': [{ type: _angular_core.HostBinding, args: ['attr.role',] },],
    };
    return PermanentDrawerComponent;
}());

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var TAB_DATA = 'data-mdc-tabindex';
var TAB_DATA_HANDLED = 'data-mdc-tabindex-handled';

var storedTransformPropertyName_ = void 0;
var supportsPassive_$1 = void 0;

// Remap touch events to pointer events, if the browser doesn't support touch events.
function remapEvent(eventName) {
  var globalObj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window;

  if (!('ontouchstart' in globalObj.document)) {
    switch (eventName) {
      case 'touchstart':
        return 'pointerdown';
      case 'touchmove':
        return 'pointermove';
      case 'touchend':
        return 'pointerup';
      default:
        return eventName;
    }
  }

  return eventName;
}

// Choose the correct transform property to use on the current browser.
function getTransformPropertyName() {
  var globalObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;
  var forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (storedTransformPropertyName_ === undefined || forceRefresh) {
    var el = globalObj.document.createElement('div');
    var transformPropertyName = 'transform' in el.style ? 'transform' : '-webkit-transform';
    storedTransformPropertyName_ = transformPropertyName;
  }

  return storedTransformPropertyName_;
}

// Determine whether the current browser supports CSS properties.
function supportsCssCustomProperties() {
  var globalObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;

  if ('CSS' in globalObj) {
    return globalObj.CSS.supports('(--color: red)');
  }
  return false;
}

// Determine whether the current browser supports passive event listeners, and if so, use them.
function applyPassive$1() {
  var globalObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;
  var forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (supportsPassive_$1 === undefined || forceRefresh) {
    var isSupported = false;
    try {
      globalObj.document.addEventListener('test', null, { get passive() {
          isSupported = true;
        } });
    } catch (e) {}

    supportsPassive_$1 = isSupported;
  }

  return supportsPassive_$1 ? { passive: true } : false;
}

// Save the tab state for an element.
function saveElementTabState(el) {
  if (el.hasAttribute('tabindex')) {
    el.setAttribute(TAB_DATA, el.getAttribute('tabindex'));
  }
  el.setAttribute(TAB_DATA_HANDLED, true);
}

// Restore the tab state for an element, if it was saved.
function restoreElementTabState(el) {
  // Only modify elements we've already handled, in case anything was dynamically added since we saved state.
  if (el.hasAttribute(TAB_DATA_HANDLED)) {
    if (el.hasAttribute(TAB_DATA)) {
      el.setAttribute('tabindex', el.getAttribute(TAB_DATA));
      el.removeAttribute(TAB_DATA);
    } else {
      el.removeAttribute('tabindex');
    }
    el.removeAttribute(TAB_DATA_HANDLED);
  }
}

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var FOCUSABLE_ELEMENTS = 'a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), ' + 'button:not([disabled]), iframe, object, embed, [tabindex], [contenteditable]';

var _createClass$12 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$12(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$8(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$8(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MDCSlidableDrawerFoundation = function (_MDCFoundation) {
  _inherits$8(MDCSlidableDrawerFoundation, _MDCFoundation);

  _createClass$12(MDCSlidableDrawerFoundation, null, [{
    key: 'defaultAdapter',
    get: function get() {
      return {
        addClass: function addClass() /* className: string */{},
        removeClass: function removeClass() /* className: string */{},
        hasClass: function hasClass() /* className: string */{},
        hasNecessaryDom: function hasNecessaryDom() {
          return (/* boolean */false
          );
        },
        registerInteractionHandler: function registerInteractionHandler() /* evt: string, handler: EventListener */{},
        deregisterInteractionHandler: function deregisterInteractionHandler() /* evt: string, handler: EventListener */{},
        registerDrawerInteractionHandler: function registerDrawerInteractionHandler() /* evt: string, handler: EventListener */{},
        deregisterDrawerInteractionHandler: function deregisterDrawerInteractionHandler() /* evt: string, handler: EventListener */{},
        registerTransitionEndHandler: function registerTransitionEndHandler() /* handler: EventListener */{},
        deregisterTransitionEndHandler: function deregisterTransitionEndHandler() /* handler: EventListener */{},
        registerDocumentKeydownHandler: function registerDocumentKeydownHandler() /* handler: EventListener */{},
        deregisterDocumentKeydownHandler: function deregisterDocumentKeydownHandler() /* handler: EventListener */{},
        setTranslateX: function setTranslateX() /* value: number | null */{},
        getFocusableElements: function getFocusableElements() /* NodeList */{},
        saveElementTabState: function saveElementTabState() /* el: Element */{},
        restoreElementTabState: function restoreElementTabState() /* el: Element */{},
        makeElementUntabbable: function makeElementUntabbable() /* el: Element */{},
        notifyOpen: function notifyOpen() {},
        notifyClose: function notifyClose() {},
        isRtl: function isRtl() {
          return (/* boolean */false
          );
        },
        getDrawerWidth: function getDrawerWidth() {
          return (/* number */0
          );
        }
      };
    }
  }]);

  function MDCSlidableDrawerFoundation(adapter, rootCssClass, animatingCssClass, openCssClass) {
    _classCallCheck$12(this, MDCSlidableDrawerFoundation);

    var _this = _possibleConstructorReturn$8(this, (MDCSlidableDrawerFoundation.__proto__ || Object.getPrototypeOf(MDCSlidableDrawerFoundation)).call(this, Object.assign(MDCSlidableDrawerFoundation.defaultAdapter, adapter)));

    _this.rootCssClass_ = rootCssClass;
    _this.animatingCssClass_ = animatingCssClass;
    _this.openCssClass_ = openCssClass;

    _this.transitionEndHandler_ = function (evt) {
      return _this.handleTransitionEnd_(evt);
    };

    _this.inert_ = false;

    _this.drawerClickHandler_ = function (evt) {
      return evt.stopPropagation();
    };
    _this.componentTouchStartHandler_ = function (evt) {
      return _this.handleTouchStart_(evt);
    };
    _this.componentTouchMoveHandler_ = function (evt) {
      return _this.handleTouchMove_(evt);
    };
    _this.componentTouchEndHandler_ = function (evt) {
      return _this.handleTouchEnd_(evt);
    };
    _this.documentKeydownHandler_ = function (evt) {
      if (evt.key && evt.key === 'Escape' || evt.keyCode === 27) {
        _this.close();
      }
    };
    return _this;
  }

  _createClass$12(MDCSlidableDrawerFoundation, [{
    key: 'init',
    value: function init() {
      var ROOT = this.rootCssClass_;
      var OPEN = this.openCssClass_;

      if (!this.adapter_.hasClass(ROOT)) {
        throw new Error(ROOT + ' class required in root element.');
      }

      if (!this.adapter_.hasNecessaryDom()) {
        throw new Error('Required DOM nodes missing in ' + ROOT + ' component.');
      }

      if (this.adapter_.hasClass(OPEN)) {
        this.isOpen_ = true;
      } else {
        this.detabinate_();
        this.isOpen_ = false;
      }

      this.adapter_.registerDrawerInteractionHandler('click', this.drawerClickHandler_);
      this.adapter_.registerDrawerInteractionHandler('touchstart', this.componentTouchStartHandler_);
      this.adapter_.registerInteractionHandler('touchmove', this.componentTouchMoveHandler_);
      this.adapter_.registerInteractionHandler('touchend', this.componentTouchEndHandler_);
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      this.adapter_.deregisterDrawerInteractionHandler('click', this.drawerClickHandler_);
      this.adapter_.deregisterDrawerInteractionHandler('touchstart', this.componentTouchStartHandler_);
      this.adapter_.deregisterInteractionHandler('touchmove', this.componentTouchMoveHandler_);
      this.adapter_.deregisterInteractionHandler('touchend', this.componentTouchEndHandler_);
      // Deregister the document keydown handler just in case the component is destroyed while the menu is open.
      this.adapter_.deregisterDocumentKeydownHandler(this.documentKeydownHandler_);
    }
  }, {
    key: 'open',
    value: function open() {
      this.adapter_.registerTransitionEndHandler(this.transitionEndHandler_);
      this.adapter_.registerDocumentKeydownHandler(this.documentKeydownHandler_);
      this.adapter_.addClass(this.animatingCssClass_);
      this.adapter_.addClass(this.openCssClass_);
      this.retabinate_();
      // Debounce multiple calls
      if (!this.isOpen_) {
        this.adapter_.notifyOpen();
      }
      this.isOpen_ = true;
    }
  }, {
    key: 'close',
    value: function close() {
      this.adapter_.deregisterDocumentKeydownHandler(this.documentKeydownHandler_);
      this.adapter_.registerTransitionEndHandler(this.transitionEndHandler_);
      this.adapter_.addClass(this.animatingCssClass_);
      this.adapter_.removeClass(this.openCssClass_);
      this.detabinate_();
      // Debounce multiple calls
      if (this.isOpen_) {
        this.adapter_.notifyClose();
      }
      this.isOpen_ = false;
    }
  }, {
    key: 'isOpen',
    value: function isOpen() {
      return this.isOpen_;
    }

    /**
     *  Render all children of the drawer inert when it's closed.
     */

  }, {
    key: 'detabinate_',
    value: function detabinate_() {
      if (this.inert_) {
        return;
      }

      var elements = this.adapter_.getFocusableElements();
      if (elements) {
        for (var i = 0; i < elements.length; i++) {
          this.adapter_.saveElementTabState(elements[i]);
          this.adapter_.makeElementUntabbable(elements[i]);
        }
      }

      this.inert_ = true;
    }

    /**
     *  Make all children of the drawer tabbable again when it's open.
     */

  }, {
    key: 'retabinate_',
    value: function retabinate_() {
      if (!this.inert_) {
        return;
      }

      var elements = this.adapter_.getFocusableElements();
      if (elements) {
        for (var i = 0; i < elements.length; i++) {
          this.adapter_.restoreElementTabState(elements[i]);
        }
      }

      this.inert_ = false;
    }
  }, {
    key: 'handleTouchStart_',
    value: function handleTouchStart_(evt) {
      if (!this.adapter_.hasClass(this.openCssClass_)) {
        return;
      }
      if (evt.pointerType && evt.pointerType !== 'touch') {
        return;
      }

      this.direction_ = this.adapter_.isRtl() ? -1 : 1;
      this.drawerWidth_ = this.adapter_.getDrawerWidth();
      this.startX_ = evt.touches ? evt.touches[0].pageX : evt.pageX;
      this.currentX_ = this.startX_;

      this.updateRaf_ = requestAnimationFrame(this.updateDrawer_.bind(this));
    }
  }, {
    key: 'handleTouchMove_',
    value: function handleTouchMove_(evt) {
      if (evt.pointerType && evt.pointerType !== 'touch') {
        return;
      }

      this.currentX_ = evt.touches ? evt.touches[0].pageX : evt.pageX;
    }
  }, {
    key: 'handleTouchEnd_',
    value: function handleTouchEnd_(evt) {
      if (evt.pointerType && evt.pointerType !== 'touch') {
        return;
      }

      this.prepareForTouchEnd_();

      // Did the user close the drawer by more than 50%?
      if (Math.abs(this.newPosition_ / this.drawerWidth_) >= 0.5) {
        this.close();
      } else {
        // Triggering an open here means we'll get a nice animation back to the fully open state.
        this.open();
      }
    }
  }, {
    key: 'prepareForTouchEnd_',
    value: function prepareForTouchEnd_() {
      cancelAnimationFrame(this.updateRaf_);
      this.adapter_.setTranslateX(null);
    }
  }, {
    key: 'updateDrawer_',
    value: function updateDrawer_() {
      this.updateRaf_ = requestAnimationFrame(this.updateDrawer_.bind(this));
      this.adapter_.setTranslateX(this.newPosition_);
    }
  }, {
    key: 'isRootTransitioningEventTarget_',
    value: function isRootTransitioningEventTarget_() {
      // Classes extending MDCSlidableDrawerFoundation should implement this method to return true or false
      // if the event target is the root event target currently transitioning.
      return false;
    }
  }, {
    key: 'handleTransitionEnd_',
    value: function handleTransitionEnd_(evt) {
      if (this.isRootTransitioningEventTarget_(evt.target)) {
        this.adapter_.removeClass(this.animatingCssClass_);
        this.adapter_.deregisterTransitionEndHandler(this.transitionEndHandler_);
      }
    }
  }, {
    key: 'newPosition_',
    get: function get() {
      var newPos = null;

      if (this.direction_ === 1) {
        newPos = Math.min(0, this.currentX_ - this.startX_);
      } else {
        newPos = Math.max(0, this.currentX_ - this.startX_);
      }

      return newPos;
    }
  }]);

  return MDCSlidableDrawerFoundation;
}(MDCFoundation);

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var cssClasses$3 = {
  ROOT: 'mdc-temporary-drawer',
  OPEN: 'mdc-temporary-drawer--open',
  ANIMATING: 'mdc-temporary-drawer--animating',
  SCROLL_LOCK: 'mdc-drawer-scroll-lock'
};

var strings$3 = {
  DRAWER_SELECTOR: '.mdc-temporary-drawer__drawer',
  OPACITY_VAR_NAME: '--mdc-temporary-drawer-opacity',
  FOCUSABLE_ELEMENTS: FOCUSABLE_ELEMENTS,
  OPEN_EVENT: 'MDCTemporaryDrawer:open',
  CLOSE_EVENT: 'MDCTemporaryDrawer:close'
};

var _get$2 = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass$11 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$11(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$7(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$7(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MDCTemporaryDrawerFoundation = function (_MDCSlidableDrawerFou) {
  _inherits$7(MDCTemporaryDrawerFoundation, _MDCSlidableDrawerFou);

  _createClass$11(MDCTemporaryDrawerFoundation, null, [{
    key: 'cssClasses',
    get: function get() {
      return cssClasses$3;
    }
  }, {
    key: 'strings',
    get: function get() {
      return strings$3;
    }
  }, {
    key: 'defaultAdapter',
    get: function get() {
      return Object.assign(MDCSlidableDrawerFoundation.defaultAdapter, {
        addBodyClass: function addBodyClass() /* className: string */{},
        removeBodyClass: function removeBodyClass() /* className: string */{},
        isDrawer: function isDrawer() {
          return false;
        },
        updateCssVariable: function updateCssVariable() /* value: string */{}
      });
    }
  }]);

  function MDCTemporaryDrawerFoundation(adapter) {
    _classCallCheck$11(this, MDCTemporaryDrawerFoundation);

    var _this = _possibleConstructorReturn$7(this, (MDCTemporaryDrawerFoundation.__proto__ || Object.getPrototypeOf(MDCTemporaryDrawerFoundation)).call(this, Object.assign(MDCTemporaryDrawerFoundation.defaultAdapter, adapter), MDCTemporaryDrawerFoundation.cssClasses.ROOT, MDCTemporaryDrawerFoundation.cssClasses.ANIMATING, MDCTemporaryDrawerFoundation.cssClasses.OPEN));

    _this.componentClickHandler_ = function () {
      return _this.close();
    };
    return _this;
  }

  _createClass$11(MDCTemporaryDrawerFoundation, [{
    key: 'init',
    value: function init() {
      _get$2(MDCTemporaryDrawerFoundation.prototype.__proto__ || Object.getPrototypeOf(MDCTemporaryDrawerFoundation.prototype), 'init', this).call(this);

      // Make browser aware of custom property being used in this element.
      // Workaround for certain types of hard-to-reproduce heisenbugs.
      this.adapter_.updateCssVariable(0);
      this.adapter_.registerInteractionHandler('click', this.componentClickHandler_);
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      _get$2(MDCTemporaryDrawerFoundation.prototype.__proto__ || Object.getPrototypeOf(MDCTemporaryDrawerFoundation.prototype), 'destroy', this).call(this);

      this.adapter_.deregisterInteractionHandler('click', this.componentClickHandler_);
      this.enableScroll_();
    }
  }, {
    key: 'open',
    value: function open() {
      this.disableScroll_();
      // Make sure custom property values are cleared before starting.
      this.adapter_.updateCssVariable('');

      _get$2(MDCTemporaryDrawerFoundation.prototype.__proto__ || Object.getPrototypeOf(MDCTemporaryDrawerFoundation.prototype), 'open', this).call(this);
    }
  }, {
    key: 'close',
    value: function close() {
      // Make sure custom property values are cleared before making any changes.
      this.adapter_.updateCssVariable('');

      _get$2(MDCTemporaryDrawerFoundation.prototype.__proto__ || Object.getPrototypeOf(MDCTemporaryDrawerFoundation.prototype), 'close', this).call(this);
    }
  }, {
    key: 'prepareForTouchEnd_',
    value: function prepareForTouchEnd_() {
      _get$2(MDCTemporaryDrawerFoundation.prototype.__proto__ || Object.getPrototypeOf(MDCTemporaryDrawerFoundation.prototype), 'prepareForTouchEnd_', this).call(this);

      this.adapter_.updateCssVariable('');
    }
  }, {
    key: 'updateDrawer_',
    value: function updateDrawer_() {
      _get$2(MDCTemporaryDrawerFoundation.prototype.__proto__ || Object.getPrototypeOf(MDCTemporaryDrawerFoundation.prototype), 'updateDrawer_', this).call(this);

      var newOpacity = Math.max(0, 1 + this.direction_ * (this.newPosition_ / this.drawerWidth_));
      this.adapter_.updateCssVariable(newOpacity);
    }
  }, {
    key: 'isRootTransitioningEventTarget_',
    value: function isRootTransitioningEventTarget_(el) {
      return this.adapter_.isDrawer(el);
    }
  }, {
    key: 'handleTransitionEnd_',
    value: function handleTransitionEnd_(evt) {
      _get$2(MDCTemporaryDrawerFoundation.prototype.__proto__ || Object.getPrototypeOf(MDCTemporaryDrawerFoundation.prototype), 'handleTransitionEnd_', this).call(this, evt);
      if (!this.isOpen_) {
        this.enableScroll_();
      }
    }
  }, {
    key: 'disableScroll_',
    value: function disableScroll_() {
      this.adapter_.addBodyClass(cssClasses$3.SCROLL_LOCK);
    }
  }, {
    key: 'enableScroll_',
    value: function enableScroll_() {
      this.adapter_.removeBodyClass(cssClasses$3.SCROLL_LOCK);
    }
  }]);

  return MDCTemporaryDrawerFoundation;
}(MDCSlidableDrawerFoundation);

var _createClass$10 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$10(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$6(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$6(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MDCTemporaryDrawer = function (_MDCComponent) {
  _inherits$6(MDCTemporaryDrawer, _MDCComponent);

  function MDCTemporaryDrawer() {
    _classCallCheck$10(this, MDCTemporaryDrawer);

    return _possibleConstructorReturn$6(this, (MDCTemporaryDrawer.__proto__ || Object.getPrototypeOf(MDCTemporaryDrawer)).apply(this, arguments));
  }

  _createClass$10(MDCTemporaryDrawer, [{
    key: 'getDefaultFoundation',
    value: function getDefaultFoundation() {
      var _this2 = this;

      var _MDCTemporaryDrawerFo = MDCTemporaryDrawerFoundation.strings,
          FOCUSABLE_ELEMENTS = _MDCTemporaryDrawerFo.FOCUSABLE_ELEMENTS,
          OPACITY_VAR_NAME = _MDCTemporaryDrawerFo.OPACITY_VAR_NAME;


      return new MDCTemporaryDrawerFoundation({
        addClass: function addClass(className) {
          return _this2.root_.classList.add(className);
        },
        removeClass: function removeClass(className) {
          return _this2.root_.classList.remove(className);
        },
        hasClass: function hasClass(className) {
          return _this2.root_.classList.contains(className);
        },
        addBodyClass: function addBodyClass(className) {
          return document.body.classList.add(className);
        },
        removeBodyClass: function removeBodyClass(className) {
          return document.body.classList.remove(className);
        },
        hasNecessaryDom: function hasNecessaryDom() {
          return Boolean(_this2.drawer);
        },
        registerInteractionHandler: function registerInteractionHandler(evt, handler) {
          return _this2.root_.addEventListener(remapEvent(evt), handler, applyPassive$1());
        },
        deregisterInteractionHandler: function deregisterInteractionHandler(evt, handler) {
          return _this2.root_.removeEventListener(remapEvent(evt), handler, applyPassive$1());
        },
        registerDrawerInteractionHandler: function registerDrawerInteractionHandler(evt, handler) {
          return _this2.drawer.addEventListener(remapEvent(evt), handler);
        },
        deregisterDrawerInteractionHandler: function deregisterDrawerInteractionHandler(evt, handler) {
          return _this2.drawer.removeEventListener(remapEvent(evt), handler);
        },
        registerTransitionEndHandler: function registerTransitionEndHandler(handler) {
          return _this2.drawer.addEventListener('transitionend', handler);
        },
        deregisterTransitionEndHandler: function deregisterTransitionEndHandler(handler) {
          return _this2.drawer.removeEventListener('transitionend', handler);
        },
        registerDocumentKeydownHandler: function registerDocumentKeydownHandler(handler) {
          return document.addEventListener('keydown', handler);
        },
        deregisterDocumentKeydownHandler: function deregisterDocumentKeydownHandler(handler) {
          return document.removeEventListener('keydown', handler);
        },
        getDrawerWidth: function getDrawerWidth() {
          return _this2.drawer.offsetWidth;
        },
        setTranslateX: function setTranslateX(value) {
          return _this2.drawer.style.setProperty(getTransformPropertyName(), value === null ? null : 'translateX(' + value + 'px)');
        },
        updateCssVariable: function updateCssVariable(value) {
          if (supportsCssCustomProperties()) {
            _this2.root_.style.setProperty(OPACITY_VAR_NAME, value);
          }
        },
        getFocusableElements: function getFocusableElements() {
          return _this2.drawer.querySelectorAll(FOCUSABLE_ELEMENTS);
        },
        saveElementTabState: function saveElementTabState$$1(el) {
          return saveElementTabState(el);
        },
        restoreElementTabState: function restoreElementTabState$$1(el) {
          return restoreElementTabState(el);
        },
        makeElementUntabbable: function makeElementUntabbable(el) {
          return el.setAttribute('tabindex', -1);
        },
        notifyOpen: function notifyOpen() {
          return _this2.emit(MDCTemporaryDrawerFoundation.strings.OPEN_EVENT);
        },
        notifyClose: function notifyClose() {
          return _this2.emit(MDCTemporaryDrawerFoundation.strings.CLOSE_EVENT);
        },
        isRtl: function isRtl() {
          return getComputedStyle(_this2.root_).getPropertyValue('direction') === 'rtl';
        },
        isDrawer: function isDrawer(el) {
          return el === _this2.drawer;
        }
      });
    }
  }, {
    key: 'open',
    get: function get() {
      return this.foundation_.isOpen();
    },
    set: function set(value) {
      if (value) {
        this.foundation_.open();
      } else {
        this.foundation_.close();
      }
    }

    /* Return the drawer element inside the component. */

  }, {
    key: 'drawer',
    get: function get() {
      return this.root_.querySelector(MDCTemporaryDrawerFoundation.strings.DRAWER_SELECTOR);
    }
  }], [{
    key: 'attachTo',
    value: function attachTo(root) {
      return new MDCTemporaryDrawer(root);
    }
  }]);

  return MDCTemporaryDrawer;
}(MDCComponent);

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var cssClasses$4 = {
  ROOT: 'mdc-persistent-drawer',
  OPEN: 'mdc-persistent-drawer--open',
  ANIMATING: 'mdc-persistent-drawer--animating'
};

var strings$4 = {
  DRAWER_SELECTOR: '.mdc-persistent-drawer__drawer',
  FOCUSABLE_ELEMENTS: FOCUSABLE_ELEMENTS,
  OPEN_EVENT: 'MDCPersistentDrawer:open',
  CLOSE_EVENT: 'MDCPersistentDrawer:close'
};

var _createClass$14 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$14(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$10(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$10(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MDCPersistentDrawerFoundation = function (_MDCSlidableDrawerFou) {
  _inherits$10(MDCPersistentDrawerFoundation, _MDCSlidableDrawerFou);

  _createClass$14(MDCPersistentDrawerFoundation, null, [{
    key: 'cssClasses',
    get: function get() {
      return cssClasses$4;
    }
  }, {
    key: 'strings',
    get: function get() {
      return strings$4;
    }
  }, {
    key: 'defaultAdapter',
    get: function get() {
      return Object.assign(MDCSlidableDrawerFoundation.defaultAdapter, {
        isDrawer: function isDrawer() {
          return false;
        }
      });
    }
  }]);

  function MDCPersistentDrawerFoundation(adapter) {
    _classCallCheck$14(this, MDCPersistentDrawerFoundation);

    return _possibleConstructorReturn$10(this, (MDCPersistentDrawerFoundation.__proto__ || Object.getPrototypeOf(MDCPersistentDrawerFoundation)).call(this, Object.assign(MDCPersistentDrawerFoundation.defaultAdapter, adapter), MDCPersistentDrawerFoundation.cssClasses.ROOT, MDCPersistentDrawerFoundation.cssClasses.ANIMATING, MDCPersistentDrawerFoundation.cssClasses.OPEN));
  }

  _createClass$14(MDCPersistentDrawerFoundation, [{
    key: 'isRootTransitioningEventTarget_',
    value: function isRootTransitioningEventTarget_(el) {
      return this.adapter_.isDrawer(el);
    }
  }]);

  return MDCPersistentDrawerFoundation;
}(MDCSlidableDrawerFoundation);

var _createClass$13 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$13(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$9(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$9(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MDCPersistentDrawer = function (_MDCComponent) {
  _inherits$9(MDCPersistentDrawer, _MDCComponent);

  function MDCPersistentDrawer() {
    _classCallCheck$13(this, MDCPersistentDrawer);

    return _possibleConstructorReturn$9(this, (MDCPersistentDrawer.__proto__ || Object.getPrototypeOf(MDCPersistentDrawer)).apply(this, arguments));
  }

  _createClass$13(MDCPersistentDrawer, [{
    key: 'getDefaultFoundation',
    value: function getDefaultFoundation() {
      var _this2 = this;

      var FOCUSABLE_ELEMENTS = MDCPersistentDrawerFoundation.strings.FOCUSABLE_ELEMENTS;


      return new MDCPersistentDrawerFoundation({
        addClass: function addClass(className) {
          return _this2.root_.classList.add(className);
        },
        removeClass: function removeClass(className) {
          return _this2.root_.classList.remove(className);
        },
        hasClass: function hasClass(className) {
          return _this2.root_.classList.contains(className);
        },
        hasNecessaryDom: function hasNecessaryDom() {
          return Boolean(_this2.drawer);
        },
        registerInteractionHandler: function registerInteractionHandler(evt, handler) {
          return _this2.root_.addEventListener(remapEvent(evt), handler, applyPassive$1());
        },
        deregisterInteractionHandler: function deregisterInteractionHandler(evt, handler) {
          return _this2.root_.removeEventListener(remapEvent(evt), handler, applyPassive$1());
        },
        registerDrawerInteractionHandler: function registerDrawerInteractionHandler(evt, handler) {
          return _this2.drawer.addEventListener(remapEvent(evt), handler);
        },
        deregisterDrawerInteractionHandler: function deregisterDrawerInteractionHandler(evt, handler) {
          return _this2.drawer.removeEventListener(remapEvent(evt), handler);
        },
        registerTransitionEndHandler: function registerTransitionEndHandler(handler) {
          return _this2.root_.addEventListener('transitionend', handler);
        },
        deregisterTransitionEndHandler: function deregisterTransitionEndHandler(handler) {
          return _this2.root_.removeEventListener('transitionend', handler);
        },
        registerDocumentKeydownHandler: function registerDocumentKeydownHandler(handler) {
          return document.addEventListener('keydown', handler);
        },
        deregisterDocumentKeydownHandler: function deregisterDocumentKeydownHandler(handler) {
          return document.removeEventListener('keydown', handler);
        },
        getDrawerWidth: function getDrawerWidth() {
          return _this2.drawer.offsetWidth;
        },
        setTranslateX: function setTranslateX(value) {
          return _this2.drawer.style.setProperty(getTransformPropertyName(), value === null ? null : 'translateX(' + value + 'px)');
        },
        getFocusableElements: function getFocusableElements() {
          return _this2.drawer.querySelectorAll(FOCUSABLE_ELEMENTS);
        },
        saveElementTabState: function saveElementTabState$$1(el) {
          return saveElementTabState(el);
        },
        restoreElementTabState: function restoreElementTabState$$1(el) {
          return restoreElementTabState(el);
        },
        makeElementUntabbable: function makeElementUntabbable(el) {
          return el.setAttribute('tabindex', -1);
        },
        notifyOpen: function notifyOpen() {
          return _this2.emit(MDCPersistentDrawerFoundation.strings.OPEN_EVENT);
        },
        notifyClose: function notifyClose() {
          return _this2.emit(MDCPersistentDrawerFoundation.strings.CLOSE_EVENT);
        },
        isRtl: function isRtl() {
          return getComputedStyle(_this2.root_).getPropertyValue('direction') === 'rtl';
        },
        isDrawer: function isDrawer(el) {
          return el === _this2.drawer;
        }
      });
    }
  }, {
    key: 'open',
    get: function get() {
      return this.foundation_.isOpen();
    },
    set: function set(value) {
      if (value) {
        this.foundation_.open();
      } else {
        this.foundation_.close();
      }
    }

    // Return the drawer element inside the component.

  }, {
    key: 'drawer',
    get: function get() {
      return this.root_.querySelector(MDCPersistentDrawerFoundation.strings.DRAWER_SELECTOR);
    }
  }], [{
    key: 'attachTo',
    value: function attachTo(root) {
      return new MDCPersistentDrawer(root);
    }
  }]);

  return MDCPersistentDrawer;
}(MDCComponent);

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var TemporaryDrawerNavigationDirective = (function () {
    function TemporaryDrawerNavigationDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
        this.role = 'navigation';
    }
    TemporaryDrawerNavigationDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: 'mdc-temporary-drawer-nav'
                },] },
    ];
    /** @nocollapse */
    TemporaryDrawerNavigationDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    TemporaryDrawerNavigationDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-temporary-drawer__drawer',] },],
        'role': [{ type: _angular_core.HostBinding, args: ['attr.role',] },],
    };
    return TemporaryDrawerNavigationDirective;
}());
var TemporaryDrawerSpacerDirective = (function () {
    function TemporaryDrawerSpacerDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    TemporaryDrawerSpacerDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-temporary-drawer-spacer], mdc-temporary-drawer-spacer'
                },] },
    ];
    /** @nocollapse */
    TemporaryDrawerSpacerDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    TemporaryDrawerSpacerDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-temporary-drawer__toolbar-spacer',] },],
    };
    return TemporaryDrawerSpacerDirective;
}());
var TemporaryDrawerContentDirective = (function () {
    function TemporaryDrawerContentDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    TemporaryDrawerContentDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-temporary-drawer-content], mdc-temporary-drawer-content'
                },] },
    ];
    /** @nocollapse */
    TemporaryDrawerContentDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    TemporaryDrawerContentDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-temporary-drawer__content',] },],
    };
    return TemporaryDrawerContentDirective;
}());
var TemporaryDrawerHeaderDirective = (function () {
    function TemporaryDrawerHeaderDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    TemporaryDrawerHeaderDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-temporary-drawer-header], mdc-temporary-drawer-header'
                },] },
    ];
    /** @nocollapse */
    TemporaryDrawerHeaderDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    TemporaryDrawerHeaderDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-temporary-drawer__header',] },],
    };
    return TemporaryDrawerHeaderDirective;
}());
var TemporaryDrawerHeaderContentDirective = (function () {
    function TemporaryDrawerHeaderContentDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    TemporaryDrawerHeaderContentDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-temporary-drawer-header-content], mdc-temporary-drawer-header-content'
                },] },
    ];
    /** @nocollapse */
    TemporaryDrawerHeaderContentDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    TemporaryDrawerHeaderContentDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-temporary-drawer__header-content',] },],
    };
    return TemporaryDrawerHeaderContentDirective;
}());
var TemporaryDrawerSelectedDirective = (function () {
    function TemporaryDrawerSelectedDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    TemporaryDrawerSelectedDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-temporary-drawer-selected]'
                },] },
    ];
    /** @nocollapse */
    TemporaryDrawerSelectedDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    TemporaryDrawerSelectedDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-temporary-drawer--selected',] },],
    };
    return TemporaryDrawerSelectedDirective;
}());
var TemporaryDrawerComponent = (function () {
    function TemporaryDrawerComponent(_renderer, _root, _registry) {
        var _this = this;
        this._renderer = _renderer;
        this._root = _root;
        this._registry = _registry;
        this.opened = new _angular_core.EventEmitter();
        this.closed = new _angular_core.EventEmitter();
        this.isHostClass = true;
        this._mdcAdapter = {
            addClass: function (className) {
                _this._renderer.addClass(_this._root.nativeElement, className);
            },
            removeClass: function (className) {
                _this._renderer.removeClass(_this._root.nativeElement, className);
            },
            hasClass: function (className) {
                return _this._root.nativeElement.classList.contains(className);
            },
            addBodyClass: function (className) {
                if (isBrowser()) {
                    _this._renderer.addClass(document.body, className);
                }
            },
            removeBodyClass: function (className) {
                if (isBrowser()) {
                    _this._renderer.removeClass(document.body, className);
                }
            },
            hasNecessaryDom: function () { return !!_this.drawerNav; },
            registerInteractionHandler: function (evt, handler) {
                if (_this._root) {
                    _this._registry.listen_(_this._renderer, remapEvent(evt), handler, _this._root);
                }
            },
            deregisterInteractionHandler: function (evt, handler) {
                _this._registry.unlisten_(evt, handler);
            },
            registerDrawerInteractionHandler: function (evt, handler) {
                if (_this._root) {
                    _this._registry.listen_(_this._renderer, remapEvent(evt), handler, _this._root);
                }
            },
            deregisterDrawerInteractionHandler: function (evt, handler) {
                _this._registry.unlisten_(evt, handler);
            },
            registerTransitionEndHandler: function (handler) {
                if (_this._root) {
                    _this._registry.listen_(_this._renderer, 'transitionend', handler, _this._root);
                }
            },
            deregisterTransitionEndHandler: function (handler) {
                _this._registry.unlisten_('transitionend', handler);
            },
            registerDocumentKeydownHandler: function (handler) {
                if (isBrowser()) {
                    _this._registry.listen_(_this._renderer, 'keydown', handler, 'document');
                }
            },
            deregisterDocumentKeydownHandler: function (handler) {
                _this._registry.unlisten_('keydown', handler);
            },
            getDrawerWidth: function () {
                return _this.drawerNav ? _this.drawerNav.elementRef.nativeElement.offsetWidth : 0;
            },
            setTranslateX: function (value) {
                if (_this.drawerNav) {
                    _this._renderer.setProperty(_this.drawerNav.elementRef, getTransformPropertyName(), value === null ? null : "translateX(" + value + "px)");
                }
            },
            updateCssVariable: function (value) {
                if (supportsCssCustomProperties()) {
                    _this._renderer.setStyle(_this._root.nativeElement, MDCTemporaryDrawerFoundation.strings.OPACITY_VAR_NAME, value);
                }
            },
            getFocusableElements: function () {
                return _this.drawerNav ?
                    _this.drawerNav.elementRef.nativeElement.querySelectorAll(MDCTemporaryDrawerFoundation.strings.FOCUSABLE_ELEMENTS) : null;
            },
            saveElementTabState: function (el) {
                saveElementTabState(el);
            },
            restoreElementTabState: function (el) {
                restoreElementTabState(el);
            },
            makeElementUntabbable: function (el) {
                _this._renderer.setAttribute(el, 'tabindex', '-1');
            },
            notifyOpen: function () { return _this.opened.emit(); },
            notifyClose: function () { return _this.closed.emit(); },
            isRtl: function () {
                return getComputedStyle(_this._root.nativeElement).getPropertyValue('direction') === 'rtl';
            },
            isDrawer: function (el) {
                return _this.drawerNav ? el === _this.drawerNav.elementRef.nativeElement : false;
            }
        };
        this._foundation = new MDCTemporaryDrawerFoundation(this._mdcAdapter);
    }
    TemporaryDrawerComponent.prototype.ngAfterViewInit = function () {
        this._foundation.init();
    };
    TemporaryDrawerComponent.prototype.ngOnDestroy = function () {
        this._foundation.destroy();
    };
    TemporaryDrawerComponent.prototype.open = function () {
        this._foundation.open();
    };
    TemporaryDrawerComponent.prototype.close = function () {
        this._foundation.close();
    };
    TemporaryDrawerComponent.prototype.isOpen = function () {
        return this._foundation.isOpen();
    };
    TemporaryDrawerComponent.decorators = [
        { type: _angular_core.Component, args: [{
                    selector: 'mdc-temporary-drawer',
                    template: "\n  <mdc-temporary-drawer-nav>\n    <ng-content></ng-content>\n  </mdc-temporary-drawer-nav>\n  ",
                    encapsulation: _angular_core.ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    TemporaryDrawerComponent.ctorParameters = function () { return [
        { type: _angular_core.Renderer2, },
        { type: _angular_core.ElementRef, },
        { type: EventRegistry, },
    ]; };
    TemporaryDrawerComponent.propDecorators = {
        'opened': [{ type: _angular_core.Output },],
        'closed': [{ type: _angular_core.Output },],
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-temporary-drawer',] },],
        'drawerNav': [{ type: _angular_core.ViewChild, args: [TemporaryDrawerNavigationDirective,] },],
    };
    return TemporaryDrawerComponent;
}());

var PersistentDrawerNavigationDirective = (function () {
    function PersistentDrawerNavigationDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
        this.role = 'navigation';
    }
    PersistentDrawerNavigationDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: 'mdc-persistent-drawer-nav'
                },] },
    ];
    /** @nocollapse */
    PersistentDrawerNavigationDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    PersistentDrawerNavigationDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-persistent-drawer__drawer',] },],
        'role': [{ type: _angular_core.HostBinding, args: ['attr.role',] },],
    };
    return PersistentDrawerNavigationDirective;
}());
var PersistentDrawerSpacerDirective = (function () {
    function PersistentDrawerSpacerDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    PersistentDrawerSpacerDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-persistent-drawer-spacer], mdc-persistent-drawer-spacer'
                },] },
    ];
    /** @nocollapse */
    PersistentDrawerSpacerDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    PersistentDrawerSpacerDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-persistent-drawer__toolbar-spacer',] },],
    };
    return PersistentDrawerSpacerDirective;
}());
var PersistentDrawerHeaderDirective = (function () {
    function PersistentDrawerHeaderDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    PersistentDrawerHeaderDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-persistent-drawer-header], mdc-persistent-drawer-header'
                },] },
    ];
    /** @nocollapse */
    PersistentDrawerHeaderDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    PersistentDrawerHeaderDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-persistent-drawer__header',] },],
    };
    return PersistentDrawerHeaderDirective;
}());
var PersistentDrawerHeaderContentDirective = (function () {
    function PersistentDrawerHeaderContentDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    PersistentDrawerHeaderContentDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-persistent-drawer-header-content], mdc-persistent-drawer-header-content'
                },] },
    ];
    /** @nocollapse */
    PersistentDrawerHeaderContentDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    PersistentDrawerHeaderContentDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-persistent-drawer__header-content',] },],
    };
    return PersistentDrawerHeaderContentDirective;
}());
var PersistentDrawerContentDirective = (function () {
    function PersistentDrawerContentDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    PersistentDrawerContentDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-persistent-drawer-content], mdc-persistent-drawer-content'
                },] },
    ];
    /** @nocollapse */
    PersistentDrawerContentDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    PersistentDrawerContentDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-persistent-drawer__content',] },],
    };
    return PersistentDrawerContentDirective;
}());
var PersistentDrawerSelectedDirective = (function () {
    function PersistentDrawerSelectedDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    PersistentDrawerSelectedDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-persistent-drawer-selected]'
                },] },
    ];
    /** @nocollapse */
    PersistentDrawerSelectedDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    PersistentDrawerSelectedDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-persistent-drawer--selected',] },],
    };
    return PersistentDrawerSelectedDirective;
}());
var PersistentDrawerComponent = (function () {
    function PersistentDrawerComponent(_renderer, _root, _registry) {
        var _this = this;
        this._renderer = _renderer;
        this._root = _root;
        this._registry = _registry;
        this.opened = new _angular_core.EventEmitter();
        this.closed = new _angular_core.EventEmitter();
        this.isHostClass = true;
        this._mdcAdapter = {
            addClass: function (className) {
                _this._renderer.addClass(_this._root.nativeElement, className);
            },
            removeClass: function (className) {
                _this._renderer.removeClass(_this._root.nativeElement, className);
            },
            hasClass: function (className) {
                return _this._root.nativeElement.classList.contains(className);
            },
            hasNecessaryDom: function () { return !!_this.drawerNav; },
            registerInteractionHandler: function (evt, handler) {
                if (_this._root) {
                    _this._registry.listen_(_this._renderer, remapEvent(evt), handler, _this._root);
                }
            },
            deregisterInteractionHandler: function (evt, handler) {
                _this._registry.unlisten_(evt, handler);
            },
            registerDrawerInteractionHandler: function (evt, handler) {
                if (_this._root) {
                    _this._registry.listen_(_this._renderer, remapEvent(evt), handler, _this._root);
                }
            },
            deregisterDrawerInteractionHandler: function (evt, handler) {
                _this._registry.unlisten_(evt, handler);
            },
            registerTransitionEndHandler: function (handler) {
                if (_this._root) {
                    _this._registry.listen_(_this._renderer, 'transitionend', handler, _this._root);
                }
            },
            deregisterTransitionEndHandler: function (handler) {
                _this._registry.unlisten_('transitionend', handler);
            },
            registerDocumentKeydownHandler: function (handler) {
                if (isBrowser()) {
                    _this._registry.listen_(_this._renderer, 'keydown', handler, 'document');
                }
            },
            deregisterDocumentKeydownHandler: function (handler) {
                _this._registry.unlisten_('keydown', handler);
            },
            getDrawerWidth: function () {
                return _this.drawerNav ? _this.drawerNav.elementRef.nativeElement.offsetWidth : 0;
            },
            setTranslateX: function (value) {
                if (_this.drawerNav) {
                    _this._renderer.setProperty(_this.drawerNav.elementRef, getTransformPropertyName(), value === null ? null : "translateX(" + value + "px)");
                }
            },
            getFocusableElements: function () {
                return _this.drawerNav ?
                    _this.drawerNav.elementRef.nativeElement.querySelectorAll(MDCPersistentDrawerFoundation.strings.FOCUSABLE_ELEMENTS) : null;
            },
            saveElementTabState: function (el) {
                saveElementTabState(el);
            },
            restoreElementTabState: function (el) {
                restoreElementTabState(el);
            },
            makeElementUntabbable: function (el) {
                _this._renderer.setAttribute(el, 'tabindex', '-1');
            },
            notifyOpen: function () { return _this.opened.emit(); },
            notifyClose: function () { return _this.closed.emit(); },
            isRtl: function () {
                return getComputedStyle(_this._root.nativeElement).getPropertyValue('direction') === 'rtl';
            },
            isDrawer: function (el) {
                return _this.drawerNav ? el === _this.drawerNav.elementRef.nativeElement : false;
            }
        };
        this._foundation = new MDCPersistentDrawerFoundation(this._mdcAdapter);
    }
    PersistentDrawerComponent.prototype.ngAfterViewInit = function () {
        this._foundation.init();
    };
    PersistentDrawerComponent.prototype.ngOnDestroy = function () {
        this._foundation.destroy();
    };
    PersistentDrawerComponent.prototype.isOpen = function () {
        return this._foundation.isOpen();
    };
    PersistentDrawerComponent.prototype.open = function () {
        this._foundation.open();
    };
    PersistentDrawerComponent.prototype.close = function () {
        this._foundation.close();
    };
    PersistentDrawerComponent.decorators = [
        { type: _angular_core.Component, args: [{
                    selector: 'mdc-persistent-drawer',
                    template: "\n  <mdc-persistent-drawer-nav>\n    <ng-content></ng-content>\n  </mdc-persistent-drawer-nav>\n  ",
                    encapsulation: _angular_core.ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    PersistentDrawerComponent.ctorParameters = function () { return [
        { type: _angular_core.Renderer2, },
        { type: _angular_core.ElementRef, },
        { type: EventRegistry, },
    ]; };
    PersistentDrawerComponent.propDecorators = {
        'opened': [{ type: _angular_core.Output },],
        'closed': [{ type: _angular_core.Output },],
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-persistent-drawer',] },],
        'drawerNav': [{ type: _angular_core.ViewChild, args: [PersistentDrawerNavigationDirective,] },],
    };
    return PersistentDrawerComponent;
}());

var DRAWER_COMPONENTS = [
    PermanentDrawerComponent,
    PermanentDrawerSpacerDirective,
    PermanentDrawerContentDirective,
    PermanentDrawerSelectedDirective,
    TemporaryDrawerComponent,
    TemporaryDrawerNavigationDirective,
    TemporaryDrawerContentDirective,
    TemporaryDrawerHeaderDirective,
    TemporaryDrawerSpacerDirective,
    TemporaryDrawerHeaderContentDirective,
    TemporaryDrawerSelectedDirective,
    PersistentDrawerComponent,
    PersistentDrawerHeaderDirective,
    PersistentDrawerNavigationDirective,
    PersistentDrawerHeaderContentDirective,
    PersistentDrawerContentDirective,
    PersistentDrawerSpacerDirective,
    PersistentDrawerSelectedDirective,
];
var DrawerModule = (function () {
    function DrawerModule() {
    }
    DrawerModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    exports: DRAWER_COMPONENTS,
                    declarations: DRAWER_COMPONENTS,
                },] },
    ];
    /** @nocollapse */
    DrawerModule.ctorParameters = function () { return []; };
    return DrawerModule;
}());

function toNumber(value, fallbackValue) {
    if (fallbackValue === void 0) { fallbackValue = 0; }
    return isNaN(parseFloat(value)) || isNaN(Number(value)) ? fallbackValue : Number(value);
}

var ElevationTransition = (function () {
    function ElevationTransition() {
        this.isHostClass = true;
    }
    ElevationTransition.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-elevation-transition]'
                },] },
    ];
    /** @nocollapse */
    ElevationTransition.ctorParameters = function () { return []; };
    ElevationTransition.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-elevation-transition',] },],
    };
    return ElevationTransition;
}());
var MDC_ELEVATION_VALUES = Array.from(Array(25), function (x, i) { return i; });
var ElevationDirective = (function () {
    function ElevationDirective(_renderer, _root) {
        this._renderer = _renderer;
        this._root = _root;
        this._mdcElevation = 0;
        this.nativeEl = this._root.nativeElement;
    }
    Object.defineProperty(ElevationDirective.prototype, "mdcElevation", {
        get: function () { return this._mdcElevation; },
        set: function (value) {
            this._mdcElevation = toNumber(value);
        },
        enumerable: true,
        configurable: true
    });
    ElevationDirective.prototype.ngOnChanges = function (changes) {
        var change = changes['mdcElevation'];
        if (MDC_ELEVATION_VALUES.indexOf(Number(this.mdcElevation)) === -1) {
            throw new Error("Valid mdc-elevation values are 0 through 24");
        }
        if (!change.isFirstChange()) {
            this._renderer.removeClass(this.nativeEl, "mdc-elevation--z" + change.previousValue);
        }
        this._renderer.addClass(this.nativeEl, "mdc-elevation--z" + change.currentValue);
    };
    ElevationDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-elevation]'
                },] },
    ];
    /** @nocollapse */
    ElevationDirective.ctorParameters = function () { return [
        { type: _angular_core.Renderer2, },
        { type: _angular_core.ElementRef, },
    ]; };
    ElevationDirective.propDecorators = {
        'mdcElevation': [{ type: _angular_core.Input, args: ['mdc-elevation',] },],
    };
    return ElevationDirective;
}());

var ELEVATION_DIRECTIVES = [
    ElevationTransition,
    ElevationDirective
];
var ElevationModule = (function () {
    function ElevationModule() {
    }
    ElevationModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    exports: [ELEVATION_DIRECTIVES],
                    declarations: [ELEVATION_DIRECTIVES],
                },] },
    ];
    /** @nocollapse */
    ElevationModule.ctorParameters = function () { return []; };
    return ElevationModule;
}());

var FabIconDirective = (function () {
    function FabIconDirective() {
        this.isHostClass = true;
    }
    FabIconDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: ' mdc-fab-icon, [mdc-fab-icon]'
                },] },
    ];
    /** @nocollapse */
    FabIconDirective.ctorParameters = function () { return []; };
    FabIconDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-fab__icon',] },],
    };
    return FabIconDirective;
}());
var FabComponent = (function () {
    function FabComponent(_renderer, _root, _ripple) {
        this._renderer = _renderer;
        this._root = _root;
        this._ripple = _ripple;
        this._disabled = false;
        this.isHostClass = true;
        this.classMaterialIcons = 'material-icons';
        this._ripple.init();
    }
    Object.defineProperty(FabComponent.prototype, "disabled", {
        get: function () { return this._disabled; },
        set: function (value) {
            this._disabled = toBoolean(value);
            if (this._disabled) {
                this._renderer.setAttribute(this._root.nativeElement, "disabled", 'true');
            }
            else {
                this._renderer.removeAttribute(this._root.nativeElement, "disabled");
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FabComponent.prototype, "disableRipple", {
        get: function () { return this._ripple.disabled; },
        set: function (value) {
            this._ripple.disabled = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FabComponent.prototype, "tabindex", {
        get: function () {
            return this.disabled ? -1 : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FabComponent.prototype, "classMini", {
        get: function () {
            return this.mini ? 'mdc-fab--mini' : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FabComponent.prototype, "classPlain", {
        get: function () {
            return this.plain ? 'mdc-fab--plain' : '';
        },
        enumerable: true,
        configurable: true
    });
    FabComponent.prototype.onkeypress = function (evt) {
        this.handleKeyPress(evt);
    };
    FabComponent.prototype.blur = function (evt) {
        this.handleBlur(evt);
    };
    FabComponent.prototype.ngOnChanges = function (changes) {
        var change = changes['disabled'];
        if (change) {
            this._ripple.disabled = toBoolean(change.currentValue);
        }
    };
    FabComponent.prototype.handleKeyPress = function (keyboardEvent) {
        var keyCode = keyboardEvent.keyCode;
        if (keyCode == KeyCodes.ENTER || isSpaceKey(keyboardEvent)) {
            this._ripple.active = true;
            if (keyCode != KeyCodes.ENTER) {
                keyboardEvent.preventDefault();
            }
        }
    };
    FabComponent.prototype.handleBlur = function (focusEvent) {
        this._ripple.active = false;
    };
    FabComponent.decorators = [
        { type: _angular_core.Component, args: [{
                    selector: 'button[mdc-fab], a[mdc-fab]',
                    template: '<ng-content></ng-content>',
                    encapsulation: _angular_core.ViewEncapsulation.None,
                    providers: [Ripple]
                },] },
    ];
    /** @nocollapse */
    FabComponent.ctorParameters = function () { return [
        { type: _angular_core.Renderer2, },
        { type: _angular_core.ElementRef, },
        { type: Ripple, },
    ]; };
    FabComponent.propDecorators = {
        'mini': [{ type: _angular_core.Input },],
        'plain': [{ type: _angular_core.Input },],
        'disabled': [{ type: _angular_core.Input },],
        'disableRipple': [{ type: _angular_core.Input },],
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-fab',] },],
        'tabindex': [{ type: _angular_core.HostBinding, args: ['tabindex',] },],
        'classMaterialIcons': [{ type: _angular_core.HostBinding, args: ['class.material-icons',] },],
        'classMini': [{ type: _angular_core.HostBinding, args: ['class.mdc-fab--mini',] },],
        'classPlain': [{ type: _angular_core.HostBinding, args: ['class.mdc-fab--plain',] },],
        'onkeypress': [{ type: _angular_core.HostListener, args: ['keypress', ['$event'],] },],
        'blur': [{ type: _angular_core.HostListener, args: ['blur', ['$event'],] },],
    };
    return FabComponent;
}());

var FAB_COMPONENTS = [
    FabComponent,
    FabIconDirective,
];
var FabModule = (function () {
    function FabModule() {
    }
    FabModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    exports: [FAB_COMPONENTS],
                    declarations: [FAB_COMPONENTS],
                },] },
    ];
    /** @nocollapse */
    FabModule.ctorParameters = function () { return []; };
    return FabModule;
}());

var _createClass$17 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$17(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-disable no-unused-vars */
/* eslint no-unused-vars: [2, {"args": "none"}] */

/**
 * Adapter for MDC Radio. Provides an interface for managing
 * - classes
 * - dom
 *
 * Additionally, provides type information for the adapter to the Closure
 * compiler.
 *
 * Implement this adapter for your framework of choice to delegate updates to
 * the component in your framework of choice. See architecture documentation
 * for more details.
 * https://github.com/material-components/material-components-web/blob/master/docs/architecture.md
 *
 * @record
 */

var MDCRadioAdapter = function () {
  function MDCRadioAdapter() {
    _classCallCheck$17(this, MDCRadioAdapter);
  }

  _createClass$17(MDCRadioAdapter, [{
    key: 'addClass',

    /** @param {string} className */
    value: function addClass(className) {}

    /** @param {string} className */

  }, {
    key: 'removeClass',
    value: function removeClass(className) {}

    /** @return {!SelectionControlState} */

  }, {
    key: 'getNativeControl',
    value: function getNativeControl() {}
  }]);

  return MDCRadioAdapter;
}();

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** @enum {string} */
var strings$5 = {
  NATIVE_CONTROL_SELECTOR: '.mdc-radio__native-control'
};

/** @enum {string} */
var cssClasses$5 = {
  ROOT: 'mdc-radio',
  DISABLED: 'mdc-radio--disabled'
};

var _createClass$16 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$16(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$12(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$12(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-disable no-unused-vars */
/* eslint-enable no-unused-vars */
/**
 * @extends {MDCFoundation<!MDCRadioAdapter>}
 */

var MDCRadioFoundation = function (_MDCFoundation) {
  _inherits$12(MDCRadioFoundation, _MDCFoundation);

  function MDCRadioFoundation() {
    _classCallCheck$16(this, MDCRadioFoundation);

    return _possibleConstructorReturn$12(this, (MDCRadioFoundation.__proto__ || Object.getPrototypeOf(MDCRadioFoundation)).apply(this, arguments));
  }

  _createClass$16(MDCRadioFoundation, [{
    key: 'isChecked',


    /** @return {boolean} */
    value: function isChecked() {
      return this.getNativeControl_().checked;
    }

    /** @param {boolean} checked */

  }, {
    key: 'setChecked',
    value: function setChecked(checked) {
      this.getNativeControl_().checked = checked;
    }

    /** @return {boolean} */

  }, {
    key: 'isDisabled',
    value: function isDisabled() {
      return this.getNativeControl_().disabled;
    }

    /** @param {boolean} disabled */

  }, {
    key: 'setDisabled',
    value: function setDisabled(disabled) {
      var DISABLED = MDCRadioFoundation.cssClasses.DISABLED;

      this.getNativeControl_().disabled = disabled;
      if (disabled) {
        this.adapter_.addClass(DISABLED);
      } else {
        this.adapter_.removeClass(DISABLED);
      }
    }

    /** @return {?string} */

  }, {
    key: 'getValue',
    value: function getValue() {
      return this.getNativeControl_().value;
    }

    /** @param {?string} value */

  }, {
    key: 'setValue',
    value: function setValue(value) {
      this.getNativeControl_().value = value;
    }

    /**
     * @return {!SelectionControlState}
     * @private
     */

  }, {
    key: 'getNativeControl_',
    value: function getNativeControl_() {
      return this.adapter_.getNativeControl() || {
        checked: false,
        disabled: false,
        value: null
      };
    }
  }], [{
    key: 'cssClasses',

    /** @return enum {cssClasses} */
    get: function get() {
      return cssClasses$5;
    }

    /** @return enum {strings} */

  }, {
    key: 'strings',
    get: function get() {
      return strings$5;
    }

    /** @return {!MDCRadioAdapter} */

  }, {
    key: 'defaultAdapter',
    get: function get() {
      return (/** @type {!MDCRadioAdapter} */{
          addClass: function addClass() /* className: string */{},
          removeClass: function removeClass() /* className: string */{},
          getNativeControl: function getNativeControl() /* !SelectionControlState */{}
        }
      );
    }
  }]);

  return MDCRadioFoundation;
}(MDCFoundation);

var _get$3 = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass$15 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$15(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$11(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$11(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-disable no-unused-vars */
/* eslint-enable no-unused-vars */
/**
 * @extends MDCComponent<!MDCRadioFoundation>
 */
var MDCRadio = function (_MDCComponent) {
  _inherits$11(MDCRadio, _MDCComponent);

  _createClass$15(MDCRadio, [{
    key: 'checked',


    /** @return {boolean} */
    get: function get() {
      return this.foundation_.isChecked();
    }

    /** @param {boolean} checked */
    ,
    set: function set(checked) {
      this.foundation_.setChecked(checked);
    }

    /** @return {boolean} */

  }, {
    key: 'disabled',
    get: function get() {
      return this.foundation_.isDisabled();
    }

    /** @param {boolean} disabled */
    ,
    set: function set(disabled) {
      this.foundation_.setDisabled(disabled);
    }

    /** @return {?string} */

  }, {
    key: 'value',
    get: function get() {
      return this.foundation_.getValue();
    }

    /** @param {?string} value */
    ,
    set: function set(value) {
      this.foundation_.setValue(value);
    }

    /** @return {!MDCRipple} */

  }, {
    key: 'ripple',
    get: function get() {
      return this.ripple_;
    }
  }], [{
    key: 'attachTo',
    value: function attachTo(root) {
      return new MDCRadio(root);
    }
  }]);

  function MDCRadio() {
    var _ref;

    _classCallCheck$15(this, MDCRadio);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    /** @private {!MDCRipple} */
    var _this = _possibleConstructorReturn$11(this, (_ref = MDCRadio.__proto__ || Object.getPrototypeOf(MDCRadio)).call.apply(_ref, [this].concat(args)));

    _this.ripple_ = _this.initRipple_();
    return _this;
  }

  /**
   * @return {!MDCRipple}
   * @private
   */


  _createClass$15(MDCRadio, [{
    key: 'initRipple_',
    value: function initRipple_() {
      var _this2 = this;

      var adapter = Object.assign(MDCRipple.createAdapter(this), {
        isUnbounded: function isUnbounded() {
          return true;
        },
        // Radio buttons technically go "active" whenever there is *any* keyboard interaction. This is not the
        // UI we desire.
        isSurfaceActive: function isSurfaceActive() {
          return false;
        },
        registerInteractionHandler: function registerInteractionHandler(type, handler) {
          return _this2.nativeControl_.addEventListener(type, handler);
        },
        deregisterInteractionHandler: function deregisterInteractionHandler(type, handler) {
          return _this2.nativeControl_.removeEventListener(type, handler);
        },
        computeBoundingRect: function computeBoundingRect() {
          var _root_$getBoundingCli = _this2.root_.getBoundingClientRect(),
              left = _root_$getBoundingCli.left,
              top = _root_$getBoundingCli.top;

          var DIM = 40;
          return {
            top: top,
            left: left,
            right: left + DIM,
            bottom: top + DIM,
            width: DIM,
            height: DIM
          };
        }
      });
      var foundation = new MDCRippleFoundation(adapter);
      return new MDCRipple(this.root_, foundation);
    }

    /**
     * Returns the state of the native control element, or null if the native control element is not present.
     * @return {?SelectionControlState}
     * @private
     */

  }, {
    key: 'destroy',
    value: function destroy() {
      this.ripple_.destroy();
      _get$3(MDCRadio.prototype.__proto__ || Object.getPrototypeOf(MDCRadio.prototype), 'destroy', this).call(this);
    }

    /** @return {!MDCRadioFoundation} */

  }, {
    key: 'getDefaultFoundation',
    value: function getDefaultFoundation() {
      var _this3 = this;

      return new MDCRadioFoundation({
        addClass: function addClass(className) {
          return _this3.root_.classList.add(className);
        },
        removeClass: function removeClass(className) {
          return _this3.root_.classList.remove(className);
        },
        getNativeControl: function getNativeControl() {
          return _this3.root_.querySelector(MDCRadioFoundation.strings.NATIVE_CONTROL_SELECTOR);
        }
      });
    }
  }, {
    key: 'nativeControl_',
    get: function get() {
      var NATIVE_CONTROL_SELECTOR = MDCRadioFoundation.strings.NATIVE_CONTROL_SELECTOR;

      var el = /** @type {?SelectionControlState} */this.root_.querySelector(NATIVE_CONTROL_SELECTOR);
      return el;
    }
  }]);

  return MDCRadio;
}(MDCComponent);

var nextElId_$1 = 0;
var MD_RADIO_CONTROL_VALUE_ACCESSOR = {
    provide: _angular_forms.NG_VALUE_ACCESSOR,
    useExisting: _angular_core.forwardRef(function () { return RadioComponent; }),
    multi: true
};
var RadioComponent = (function () {
    function RadioComponent(_renderer, root, ripple) {
        var _this = this;
        this._renderer = _renderer;
        this.root = root;
        this.ripple = ripple;
        this.id = "mdc-radio-" + ++nextElId_$1;
        this.tabindex = 0;
        this.change = new _angular_core.EventEmitter();
        this.isHostClass = true;
        this.onTouched = function () { };
        this._controlValueAccessorChangeFn = function () { };
        this._mdcAdapter = {
            addClass: function (className) {
                _this._renderer.addClass(_this.root.nativeElement, className);
            },
            removeClass: function (className) {
                _this._renderer.removeClass(_this.root.nativeElement, className);
            },
            getNativeControl: function () {
                return _this.inputEl.nativeElement;
            }
        };
        this._foundation = new MDCRadioFoundation(this._mdcAdapter);
        this.ripple.init(true);
    }
    Object.defineProperty(RadioComponent.prototype, "inputId", {
        get: function () {
            return "input-" + this.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadioComponent.prototype, "checked", {
        get: function () { return this._foundation.isChecked(); },
        set: function (value) {
            this._foundation.setChecked(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadioComponent.prototype, "value", {
        get: function () { return this._foundation.getValue(); },
        set: function (value) {
            this._foundation.setValue(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadioComponent.prototype, "disabled", {
        get: function () { return this._foundation.isDisabled(); },
        set: function (value) {
            this.setDisabledState(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadioComponent.prototype, "disableRipple", {
        get: function () { return this.ripple.disabled; },
        set: function (value) {
            this.ripple.disabled = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    RadioComponent.prototype.ngAfterViewInit = function () {
        this._foundation.init();
    };
    RadioComponent.prototype.ngOnDestroy = function () {
        this._foundation.destroy();
    };
    RadioComponent.prototype.onChange = function (evt) {
        evt.stopPropagation();
        this._controlValueAccessorChangeFn(evt.target.value);
        this.change.emit(evt);
    };
    RadioComponent.prototype.writeValue = function (value) {
        if (this.value === value) {
            this.checked = true;
        }
    };
    RadioComponent.prototype.registerOnChange = function (fn) {
        this._controlValueAccessorChangeFn = fn;
    };
    RadioComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    RadioComponent.prototype.setDisabledState = function (isDisabled) {
        this._foundation.setDisabled(isDisabled);
    };
    RadioComponent.decorators = [
        { type: _angular_core.Component, args: [{
                    selector: 'mdc-radio',
                    template: "\n  <input type=\"radio\"\n    #inputEl\n    class=\"mdc-radio__native-control\"\n    [id]=\"inputId\"\n    [name]=\"name\"\n    [attr.aria-label]=\"ariaLabel\"\n    [attr.aria-labelledby]=\"ariaLabelledby\"\n    [disabled]=\"disabled\"\n    [checked]=\"checked\"\n    [value]=\"value\"\n    (change)=\"onChange($event)\"\n    (blur)=\"onTouched()\" />\n    <div class=\"mdc-radio__background\">\n      <div class=\"mdc-radio__outer-circle\"></div>\n      <div class=\"mdc-radio__inner-circle\"></div>\n    </div>\n  ",
                    encapsulation: _angular_core.ViewEncapsulation.None,
                    providers: [
                        MD_RADIO_CONTROL_VALUE_ACCESSOR,
                        Ripple
                    ]
                },] },
    ];
    /** @nocollapse */
    RadioComponent.ctorParameters = function () { return [
        { type: _angular_core.Renderer2, },
        { type: _angular_core.ElementRef, },
        { type: Ripple, },
    ]; };
    RadioComponent.propDecorators = {
        'id': [{ type: _angular_core.Input },],
        'checked': [{ type: _angular_core.Input },],
        'name': [{ type: _angular_core.Input },],
        'value': [{ type: _angular_core.Input },],
        'disabled': [{ type: _angular_core.Input },],
        'disableRipple': [{ type: _angular_core.Input },],
        'tabindex': [{ type: _angular_core.Input },],
        'ariaLabel': [{ type: _angular_core.Input, args: ['aria-label',] },],
        'ariaLabelledby': [{ type: _angular_core.Input, args: ['aria-labelledby',] },],
        'change': [{ type: _angular_core.Output },],
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-radio',] },],
        'inputEl': [{ type: _angular_core.ViewChild, args: ['inputEl',] },],
    };
    return RadioComponent;
}());

var MD_SWITCH_CONTROL_VALUE_ACCESSOR = {
    provide: _angular_forms.NG_VALUE_ACCESSOR,
    useExisting: _angular_core.forwardRef(function () { return SwitchComponent; }),
    multi: true
};
var nextElId_$2 = 0;
var SwitchComponent = (function () {
    function SwitchComponent(_renderer, root, ripple) {
        this._renderer = _renderer;
        this.root = root;
        this.ripple = ripple;
        this.id = "mdc-switch-" + ++nextElId_$2;
        this.tabindex = 0;
        this.change = new _angular_core.EventEmitter();
        this.isHostClass = true;
        this.onTouched = function () { };
        this._controlValueAccessorChangeFn = function (value) { };
        this.ripple.init(true);
    }
    Object.defineProperty(SwitchComponent.prototype, "inputId", {
        get: function () {
            return "input-" + this.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwitchComponent.prototype, "disableRipple", {
        get: function () { return this.ripple.disabled; },
        set: function (value) {
            this.ripple.disabled = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwitchComponent.prototype, "classDisabled", {
        get: function () {
            return this.disabled ? 'mdc-switch--disabled' : '';
        },
        enumerable: true,
        configurable: true
    });
    SwitchComponent.prototype.ngOnChanges = function (changes) {
        var change = changes['disabled'];
        if (change) {
            this.ripple.disabled = toBoolean(change.currentValue);
        }
    };
    SwitchComponent.prototype.handleChange = function (evt) {
        evt.stopPropagation();
        this._controlValueAccessorChangeFn(evt.target.checked);
        this.change.emit(evt);
    };
    SwitchComponent.prototype.writeValue = function (value) {
        this.checked = !!value;
    };
    SwitchComponent.prototype.registerOnChange = function (fn) {
        this._controlValueAccessorChangeFn = fn;
    };
    SwitchComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    SwitchComponent.decorators = [
        { type: _angular_core.Component, args: [{
                    selector: 'mdc-switch',
                    template: "\n  <input type=\"checkbox\"\n    #inputEl\n    class=\"mdc-switch__native-control\"\n    [id]=\"inputId\"\n    [tabindex]=\"tabindex\"\n    [attr.aria-label]=\"ariaLabel\"\n    [attr.aria-labelledby]=\"ariaLabelledby\"\n    [disabled]=\"disabled\"\n    [checked]=\"checked\"\n    (change)=\"handleChange($event)\"/>\n  <div class=\"mdc-switch__background\">\n    <div class=\"mdc-switch__knob\"></div>\n  </div>\n  ",
                    encapsulation: _angular_core.ViewEncapsulation.None,
                    providers: [
                        MD_SWITCH_CONTROL_VALUE_ACCESSOR,
                        Ripple
                    ]
                },] },
    ];
    /** @nocollapse */
    SwitchComponent.ctorParameters = function () { return [
        { type: _angular_core.Renderer2, },
        { type: _angular_core.ElementRef, },
        { type: Ripple, },
    ]; };
    SwitchComponent.propDecorators = {
        'id': [{ type: _angular_core.Input },],
        'checked': [{ type: _angular_core.Input },],
        'disabled': [{ type: _angular_core.Input },],
        'tabindex': [{ type: _angular_core.Input },],
        'ariaLabel': [{ type: _angular_core.Input, args: ['aria-label',] },],
        'ariaLabelledby': [{ type: _angular_core.Input, args: ['aria-labelledby',] },],
        'disableRipple': [{ type: _angular_core.Input },],
        'change': [{ type: _angular_core.Output },],
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-switch',] },],
        'classDisabled': [{ type: _angular_core.HostBinding, args: ['class.mdc-switch--disabled',] },],
        'inputEl': [{ type: _angular_core.ViewChild, args: ['inputEl',] },],
    };
    return SwitchComponent;
}());

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var cssClasses$6 = {
  ROOT: 'mdc-form-field'
};

var strings$6 = {
  LABEL_SELECTOR: '.mdc-form-field > label'
};

var _createClass$19 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$19(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$14(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$14(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MDCFormFieldFoundation = function (_MDCFoundation) {
  _inherits$14(MDCFormFieldFoundation, _MDCFoundation);

  _createClass$19(MDCFormFieldFoundation, null, [{
    key: 'cssClasses',
    get: function get() {
      return cssClasses$6;
    }
  }, {
    key: 'strings',
    get: function get() {
      return strings$6;
    }
  }, {
    key: 'defaultAdapter',
    get: function get() {
      return {
        registerInteractionHandler: function registerInteractionHandler() /* type: string, handler: EventListener */{},
        deregisterInteractionHandler: function deregisterInteractionHandler() /* type: string, handler: EventListener */{},
        activateInputRipple: function activateInputRipple() {},
        deactivateInputRipple: function deactivateInputRipple() {}
      };
    }
  }]);

  function MDCFormFieldFoundation(adapter) {
    _classCallCheck$19(this, MDCFormFieldFoundation);

    var _this = _possibleConstructorReturn$14(this, (MDCFormFieldFoundation.__proto__ || Object.getPrototypeOf(MDCFormFieldFoundation)).call(this, Object.assign(MDCFormFieldFoundation.defaultAdapter, adapter)));

    _this.clickHandler_ = function (evt) {
      return _this.handleClick_(evt);
    };
    return _this;
  }

  _createClass$19(MDCFormFieldFoundation, [{
    key: 'init',
    value: function init() {
      this.adapter_.registerInteractionHandler('click', this.clickHandler_);
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      this.adapter_.deregisterInteractionHandler('click', this.clickHandler_);
    }
  }, {
    key: 'handleClick_',
    value: function handleClick_() {
      var _this2 = this;

      this.adapter_.activateInputRipple();
      requestAnimationFrame(function () {
        return _this2.adapter_.deactivateInputRipple();
      });
    }
  }]);

  return MDCFormFieldFoundation;
}(MDCFoundation);

var _createClass$18 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$18(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$13(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$13(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MDCFormField = function (_MDCComponent) {
  _inherits$13(MDCFormField, _MDCComponent);

  function MDCFormField() {
    _classCallCheck$18(this, MDCFormField);

    return _possibleConstructorReturn$13(this, (MDCFormField.__proto__ || Object.getPrototypeOf(MDCFormField)).apply(this, arguments));
  }

  _createClass$18(MDCFormField, [{
    key: 'getDefaultFoundation',
    value: function getDefaultFoundation() {
      var _this2 = this;

      return new MDCFormFieldFoundation({
        registerInteractionHandler: function registerInteractionHandler(type, handler) {
          return _this2.label_.addEventListener(type, handler);
        },
        deregisterInteractionHandler: function deregisterInteractionHandler(type, handler) {
          return _this2.label_.removeEventListener(type, handler);
        },
        activateInputRipple: function activateInputRipple() {
          if (_this2.input_ && _this2.input_.ripple) {
            _this2.input_.ripple.activate();
          }
        },
        deactivateInputRipple: function deactivateInputRipple() {
          if (_this2.input_ && _this2.input_.ripple) {
            _this2.input_.ripple.deactivate();
          }
        }
      });
    }
  }, {
    key: 'input',
    set: function set(input) {
      this.input_ = input;
    },
    get: function get() {
      return this.input_;
    }
  }, {
    key: 'label_',
    get: function get() {
      return this.root_.querySelector(MDCFormFieldFoundation.strings.LABEL_SELECTOR);
    }
  }], [{
    key: 'attachTo',
    value: function attachTo(root) {
      return new MDCFormField(root);
    }
  }]);

  return MDCFormField;
}(MDCComponent);

var FormFieldDirective = (function () {
    function FormFieldDirective(_renderer, _root, _registry) {
        var _this = this;
        this._renderer = _renderer;
        this._root = _root;
        this._registry = _registry;
        this.alignEnd = false;
        this._mdcAdapter = {
            registerInteractionHandler: function (type, handler) {
                _this._registry.listen_(_this._renderer, type, handler, _this._root);
            },
            deregisterInteractionHandler: function (type, handler) {
                _this._registry.unlisten_(type, handler);
            },
            activateInputRipple: function () {
                if (_this.inputCheckbox) {
                    if (!_this.inputCheckbox.disabled) {
                        _this.inputCheckbox.ripple.activate();
                    }
                }
                else if (_this.inputRadio) {
                    if (!_this.inputRadio.disabled) {
                        _this.inputRadio.ripple.activate();
                    }
                }
                else if (_this.inputSwitch) {
                    if (!_this.inputSwitch.disabled) {
                        _this.inputSwitch.ripple.activate();
                    }
                }
            },
            deactivateInputRipple: function () {
                if (_this.inputCheckbox) {
                    _this.inputCheckbox.ripple.deactivate();
                }
                else if (_this.inputRadio) {
                    _this.inputRadio.ripple.deactivate();
                }
                else if (_this.inputSwitch) {
                    _this.inputSwitch.ripple.deactivate();
                }
            }
        };
        this._foundation = new MDCFormFieldFoundation(this._mdcAdapter);
    }
    Object.defineProperty(FormFieldDirective.prototype, "className", {
        get: function () {
            return "mdc-form-field" + (this.alignEnd ? ' mdc-form-field--align-end' : '');
        },
        enumerable: true,
        configurable: true
    });
    FormFieldDirective.prototype.ngAfterContentInit = function () {
        this._foundation.init();
        if (this.inputCheckbox) {
            var checkBoxLabel = this._renderer.nextSibling(this.inputCheckbox.root.nativeElement);
            if (checkBoxLabel && checkBoxLabel.nextSibling) {
                if (checkBoxLabel.nextSibling.tagName === 'LABEL') {
                    this._renderer.setAttribute(checkBoxLabel.nextSibling, 'for', this.inputCheckbox.inputId);
                }
            }
        }
        else if (this.inputRadio) {
            var radioLabel = this._renderer.nextSibling(this.inputRadio.root.nativeElement);
            if (radioLabel && radioLabel.nextSibling) {
                if (radioLabel.nextSibling.tagName === 'LABEL') {
                    this._renderer.setAttribute(radioLabel.nextSibling, 'for', this.inputRadio.inputId);
                }
            }
        }
        else if (this.inputSwitch) {
            var switchLabel = this._renderer.nextSibling(this.inputSwitch.root.nativeElement);
            if (switchLabel && switchLabel.nextSibling) {
                if (switchLabel.nextSibling.tagName === 'LABEL') {
                    this._renderer.setAttribute(switchLabel.nextSibling, 'for', this.inputSwitch.inputId);
                }
            }
        }
    };
    FormFieldDirective.prototype.ngOnDestroy = function () {
        this._foundation.destroy();
    };
    FormFieldDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: 'mdc-form-field'
                },] },
    ];
    /** @nocollapse */
    FormFieldDirective.ctorParameters = function () { return [
        { type: _angular_core.Renderer2, },
        { type: _angular_core.ElementRef, },
        { type: EventRegistry, },
    ]; };
    FormFieldDirective.propDecorators = {
        'alignEnd': [{ type: _angular_core.Input },],
        'className': [{ type: _angular_core.HostBinding, args: ['class',] },],
        'inputCheckbox': [{ type: _angular_core.ContentChild, args: [CheckboxComponent,] },],
        'inputRadio': [{ type: _angular_core.ContentChild, args: [RadioComponent,] },],
        'inputSwitch': [{ type: _angular_core.ContentChild, args: [SwitchComponent,] },],
    };
    return FormFieldDirective;
}());

var FormFieldModule = (function () {
    function FormFieldModule() {
    }
    FormFieldModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    exports: [FormFieldDirective],
                    declarations: [FormFieldDirective]
                },] },
    ];
    /** @nocollapse */
    FormFieldModule.ctorParameters = function () { return []; };
    return FormFieldModule;
}());

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var cssClasses$7 = {
  CLOSED_CLASS: 'mdc-linear-progress--closed',
  INDETERMINATE_CLASS: 'mdc-linear-progress--indeterminate',
  REVERSED_CLASS: 'mdc-linear-progress--reversed'
};

var strings$7 = {
  PRIMARY_BAR_SELECTOR: '.mdc-linear-progress__primary-bar',
  BUFFER_SELECTOR: '.mdc-linear-progress__buffer'
};

var _createClass$21 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$21(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$16(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$16(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MDCLinearProgressFoundation = function (_MDCFoundation) {
  _inherits$16(MDCLinearProgressFoundation, _MDCFoundation);

  _createClass$21(MDCLinearProgressFoundation, null, [{
    key: 'cssClasses',
    get: function get() {
      return cssClasses$7;
    }
  }, {
    key: 'strings',
    get: function get() {
      return strings$7;
    }
  }, {
    key: 'defaultAdapter',
    get: function get() {
      return {
        addClass: function addClass() /* className: string */{},
        getPrimaryBar: function getPrimaryBar() /* el: Element */{},
        getBuffer: function getBuffer() /* el: Element */{},
        hasClass: function hasClass() {
          return (/* className: string */false
          );
        },
        removeClass: function removeClass() /* className: string */{},
        setStyle: function setStyle() /* el: Element, styleProperty: string, value: number */{}
      };
    }
  }]);

  function MDCLinearProgressFoundation(adapter) {
    _classCallCheck$21(this, MDCLinearProgressFoundation);

    return _possibleConstructorReturn$16(this, (MDCLinearProgressFoundation.__proto__ || Object.getPrototypeOf(MDCLinearProgressFoundation)).call(this, Object.assign(MDCLinearProgressFoundation.defaultAdapter, adapter)));
  }

  _createClass$21(MDCLinearProgressFoundation, [{
    key: 'init',
    value: function init() {
      this.determinate_ = !this.adapter_.hasClass(cssClasses$7.INDETERMINATE_CLASS);
      this.reverse_ = this.adapter_.hasClass(cssClasses$7.REVERSED_CLASS);
    }
  }, {
    key: 'setDeterminate',
    value: function setDeterminate(isDeterminate) {
      this.determinate_ = isDeterminate;
      if (this.determinate_) {
        this.adapter_.removeClass(cssClasses$7.INDETERMINATE_CLASS);
      } else {
        this.adapter_.addClass(cssClasses$7.INDETERMINATE_CLASS);
        this.setScale_(this.adapter_.getPrimaryBar(), 1);
        this.setScale_(this.adapter_.getBuffer(), 1);
      }
    }
  }, {
    key: 'setProgress',
    value: function setProgress(value) {
      if (this.determinate_) {
        this.setScale_(this.adapter_.getPrimaryBar(), value);
      }
    }
  }, {
    key: 'setBuffer',
    value: function setBuffer(value) {
      if (this.determinate_) {
        this.setScale_(this.adapter_.getBuffer(), value);
      }
    }
  }, {
    key: 'setReverse',
    value: function setReverse(isReversed) {
      this.reverse_ = isReversed;
      if (this.reverse_) {
        this.adapter_.addClass(cssClasses$7.REVERSED_CLASS);
      } else {
        this.adapter_.removeClass(cssClasses$7.REVERSED_CLASS);
      }
    }
  }, {
    key: 'open',
    value: function open() {
      this.adapter_.removeClass(cssClasses$7.CLOSED_CLASS);
    }
  }, {
    key: 'close',
    value: function close() {
      this.adapter_.addClass(cssClasses$7.CLOSED_CLASS);
    }
  }, {
    key: 'setScale_',
    value: function setScale_(el, scaleValue) {
      var _this2 = this;

      var value = 'scaleX(' + scaleValue + ')';
      transformStyleProperties.forEach(function (transformStyleProperty) {
        _this2.adapter_.setStyle(el, transformStyleProperty, value);
      });
    }
  }]);

  return MDCLinearProgressFoundation;
}(MDCFoundation);

var _createClass$20 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$20(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$15(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$15(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MDCLinearProgress = function (_MDCComponent) {
  _inherits$15(MDCLinearProgress, _MDCComponent);

  function MDCLinearProgress() {
    _classCallCheck$20(this, MDCLinearProgress);

    return _possibleConstructorReturn$15(this, (MDCLinearProgress.__proto__ || Object.getPrototypeOf(MDCLinearProgress)).apply(this, arguments));
  }

  _createClass$20(MDCLinearProgress, [{
    key: 'open',
    value: function open() {
      this.foundation_.open();
    }
  }, {
    key: 'close',
    value: function close() {
      this.foundation_.close();
    }
  }, {
    key: 'getDefaultFoundation',
    value: function getDefaultFoundation() {
      var _this2 = this;

      return new MDCLinearProgressFoundation({
        addClass: function addClass(className) {
          return _this2.root_.classList.add(className);
        },
        getPrimaryBar: function getPrimaryBar() {
          return _this2.root_.querySelector(MDCLinearProgressFoundation.strings.PRIMARY_BAR_SELECTOR);
        },
        getBuffer: function getBuffer() {
          return _this2.root_.querySelector(MDCLinearProgressFoundation.strings.BUFFER_SELECTOR);
        },
        hasClass: function hasClass(className) {
          return _this2.root_.classList.contains(className);
        },
        removeClass: function removeClass(className) {
          return _this2.root_.classList.remove(className);
        },
        setStyle: function setStyle(el, styleProperty, value) {
          return el.style[styleProperty] = value;
        }
      });
    }
  }, {
    key: 'determinate',
    set: function set(value) {
      this.foundation_.setDeterminate(value);
    }
  }, {
    key: 'progress',
    set: function set(value) {
      this.foundation_.setProgress(value);
    }
  }, {
    key: 'buffer',
    set: function set(value) {
      this.foundation_.setBuffer(value);
    }
  }, {
    key: 'reverse',
    set: function set(value) {
      this.foundation_.setReverse(value);
    }
  }], [{
    key: 'attachTo',
    value: function attachTo(root) {
      return new MDCLinearProgress(root);
    }
  }]);

  return MDCLinearProgress;
}(MDCComponent);

var LinearProgressComponent = (function () {
    function LinearProgressComponent(_renderer, _root) {
        var _this = this;
        this._renderer = _renderer;
        this._root = _root;
        this.role = 'progressbar';
        this.isHostClass = true;
        this._mdcAdapter = {
            addClass: function (className) {
                var _a = _this, renderer = _a._renderer, root = _a._root;
                renderer.addClass(root.nativeElement, className);
            },
            getPrimaryBar: function () {
                var root = _this._root;
                return root.nativeElement.querySelector(MDCLinearProgressFoundation.strings.PRIMARY_BAR_SELECTOR);
            },
            getBuffer: function () {
                var root = _this._root;
                return root.nativeElement.querySelector(MDCLinearProgressFoundation.strings.BUFFER_SELECTOR);
            },
            hasClass: function (className) {
                var _a = _this, renderer = _a._renderer, root = _a._root;
                return renderer.parentNode(root.nativeElement).classList.contains(className);
            },
            removeClass: function (className) {
                var _a = _this, renderer = _a._renderer, root = _a._root;
                renderer.removeClass(root.nativeElement, className);
            },
            setStyle: function (el, styleProperty, value) {
                var renderer = _this._renderer;
                renderer.setStyle(el, styleProperty, value);
            }
        };
        this._foundation = new MDCLinearProgressFoundation(this._mdcAdapter);
    }
    Object.defineProperty(LinearProgressComponent.prototype, "indeterminate", {
        get: function () { return this._indeterminate; },
        set: function (value) {
            this._foundation.setDeterminate(!value);
            this._indeterminate = !value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinearProgressComponent.prototype, "reversed", {
        get: function () { return this._reversed; },
        set: function (value) {
            this._foundation.setReverse(value);
            this._reversed = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinearProgressComponent.prototype, "classAccent", {
        get: function () {
            return this.accent ? 'mdc-linear-progress--accent' : '';
        },
        enumerable: true,
        configurable: true
    });
    LinearProgressComponent.prototype.ngAfterViewInit = function () {
        this._foundation.init();
    };
    LinearProgressComponent.prototype.open = function () {
        this._foundation.open();
    };
    LinearProgressComponent.prototype.close = function () {
        this._foundation.close();
    };
    LinearProgressComponent.prototype.setProgress = function (value) {
        this._foundation.setProgress(value);
    };
    LinearProgressComponent.prototype.setBuffer = function (value) {
        this._foundation.setBuffer(value);
    };
    LinearProgressComponent.decorators = [
        { type: _angular_core.Component, args: [{
                    selector: 'mdc-linear-progress',
                    template: "\n  <div class=\"mdc-linear-progress__buffering-dots\"></div>\n  <div class=\"mdc-linear-progress__buffer\"></div>\n  <div class=\"mdc-linear-progress__bar mdc-linear-progress__primary-bar\">\n   <span class=\"mdc-linear-progress__bar-inner\"></span>\n  </div>\n  <div class=\"mdc-linear-progress__bar mdc-linear-progress__secondary-bar\">\n   <span class=\"mdc-linear-progress__bar-inner\"></span>\n  </div>\n  ",
                    encapsulation: _angular_core.ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    LinearProgressComponent.ctorParameters = function () { return [
        { type: _angular_core.Renderer2, },
        { type: _angular_core.ElementRef, },
    ]; };
    LinearProgressComponent.propDecorators = {
        'indeterminate': [{ type: _angular_core.Input },],
        'reversed': [{ type: _angular_core.Input },],
        'accent': [{ type: _angular_core.Input },],
        'role': [{ type: _angular_core.HostBinding, args: ['attr.role',] },],
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-linear-progress',] },],
        'classAccent': [{ type: _angular_core.HostBinding, args: ['class.mdc-linear-progress--accent',] },],
    };
    return LinearProgressComponent;
}());

var LinearProgressModule = (function () {
    function LinearProgressModule() {
    }
    LinearProgressModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    exports: [LinearProgressComponent],
                    declarations: [LinearProgressComponent],
                },] },
    ];
    /** @nocollapse */
    LinearProgressModule.ctorParameters = function () { return []; };
    return LinearProgressModule;
}());

var ListItemDirective = (function () {
    function ListItemDirective(elementRef, _ripple, _parent) {
        this.elementRef = elementRef;
        this._ripple = _ripple;
        this._parent = _parent;
        this.isHostClass = true;
        this.role = 'listitem';
    }
    Object.defineProperty(ListItemDirective.prototype, "disableRipple", {
        get: function () { return this._ripple.disabled; },
        set: function (value) {
            this._ripple.disabled = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    ListItemDirective.prototype.ngAfterViewInit = function () {
        if (this.elementRef.nativeElement.tagName === 'A') {
            this._ripple.disabled = false;
        }
    };
    ListItemDirective.prototype.ngOnChanges = function (changes) {
        var change = changes['disableRipple'];
        if (toBoolean(change.currentValue)) {
            this._ripple.disabled = true;
        }
        else if (!this._parent.disableRipple) {
            this._ripple.disabled = false;
        }
    };
    ListItemDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: 'mdc-list-item, a[mdc-list-item]',
                    providers: [Ripple]
                },] },
    ];
    /** @nocollapse */
    ListItemDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
        { type: Ripple, },
        { type: ListComponent, decorators: [{ type: _angular_core.Inject, args: [_angular_core.forwardRef(function () { return ListComponent; }),] },] },
    ]; };
    ListItemDirective.propDecorators = {
        'disableRipple': [{ type: _angular_core.Input },],
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-list-item',] },],
        'role': [{ type: _angular_core.HostBinding, args: ['attr.role',] },],
    };
    return ListItemDirective;
}());
var ListItemStartDirective = (function () {
    function ListItemStartDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    ListItemStartDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-list-item-start]'
                },] },
    ];
    /** @nocollapse */
    ListItemStartDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    ListItemStartDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-list-item__start-detail',] },],
    };
    return ListItemStartDirective;
}());
var ListItemEndDirective = (function () {
    function ListItemEndDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    ListItemEndDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-list-item-end]'
                },] },
    ];
    /** @nocollapse */
    ListItemEndDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    ListItemEndDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-list-item__end-detail',] },],
    };
    return ListItemEndDirective;
}());
var ListItemTextDirective = (function () {
    function ListItemTextDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    ListItemTextDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-list-item-text], mdc-list-item-text'
                },] },
    ];
    /** @nocollapse */
    ListItemTextDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    ListItemTextDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-list-item__text',] },],
    };
    return ListItemTextDirective;
}());
var ListItemTextSecondaryDirective = (function () {
    function ListItemTextSecondaryDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    ListItemTextSecondaryDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-list-item-secondary], mdc-list-item-secondary'
                },] },
    ];
    /** @nocollapse */
    ListItemTextSecondaryDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    ListItemTextSecondaryDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-list-item__text__secondary',] },],
    };
    return ListItemTextSecondaryDirective;
}());

var ListComponent = (function () {
    function ListComponent(_root) {
        this._root = _root;
        this._disableRipple = false;
        this.isHostClass = true;
        this.role = 'list';
    }
    Object.defineProperty(ListComponent.prototype, "disableRipple", {
        get: function () { return this._disableRipple; },
        set: function (value) {
            this._disableRipple = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListComponent.prototype, "classDenseList", {
        get: function () {
            return this.dense ? 'mdc-list--dense' : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListComponent.prototype, "classTwoline", {
        get: function () {
            return this.twoLine ? 'mdc-list--two-line' : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListComponent.prototype, "classAvatarList", {
        get: function () {
            return this.avatar ? 'mdc-list--avatar-list' : '';
        },
        enumerable: true,
        configurable: true
    });
    ListComponent.prototype.ngOnChanges = function (changes) {
        var change = changes['disableRipple'];
        if (change) {
            this.disableRipples(toBoolean(change.currentValue));
        }
    };
    ListComponent.prototype.disableRipples = function (value) {
        if (this.listItems) {
            this.listItems.forEach(function (_) { return _.disableRipple = value; });
        }
    };
    ListComponent.decorators = [
        { type: _angular_core.Component, args: [{
                    selector: 'mdc-list',
                    template: "<ng-content></ng-content>",
                    encapsulation: _angular_core.ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    ListComponent.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    ListComponent.propDecorators = {
        'dense': [{ type: _angular_core.Input },],
        'twoLine': [{ type: _angular_core.Input },],
        'avatar': [{ type: _angular_core.Input },],
        'disableRipple': [{ type: _angular_core.Input },],
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-list',] },],
        'role': [{ type: _angular_core.HostBinding, args: ['attr.role',] },],
        'classDenseList': [{ type: _angular_core.HostBinding, args: ['class.mdc-list--dense',] },],
        'classTwoline': [{ type: _angular_core.HostBinding, args: ['class.mdc-list--two-line',] },],
        'classAvatarList': [{ type: _angular_core.HostBinding, args: ['class.mdc-list--avatar-list',] },],
        'listItems': [{ type: _angular_core.ContentChildren, args: [ListItemDirective,] },],
    };
    return ListComponent;
}());

var ListGroupDirective = (function () {
    function ListGroupDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    ListGroupDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-list-group], mdc-list-group'
                },] },
    ];
    /** @nocollapse */
    ListGroupDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    ListGroupDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-list-group',] },],
    };
    return ListGroupDirective;
}());
var ListGroupSubheaderDirective = (function () {
    function ListGroupSubheaderDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    ListGroupSubheaderDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-list-group-subheader], mdc-list-group-subheader'
                },] },
    ];
    /** @nocollapse */
    ListGroupSubheaderDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    ListGroupSubheaderDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-list-group__subheader',] },],
    };
    return ListGroupSubheaderDirective;
}());

var ListDividerComponent = (function () {
    function ListDividerComponent(elementRef, _renderer) {
        this.elementRef = elementRef;
        this._renderer = _renderer;
    }
    Object.defineProperty(ListDividerComponent.prototype, "inset", {
        get: function () { return this._inset; },
        set: function (value) {
            this._inset = toBoolean(value);
            if (this._inset) {
                this._renderer.addClass(this.listItem.nativeElement, 'mdc-list-divider--inset');
            }
            else {
                this._renderer.removeClass(this.listItem.nativeElement, 'mdc-list-divider--inset');
            }
        },
        enumerable: true,
        configurable: true
    });
    ListDividerComponent.decorators = [
        { type: _angular_core.Component, args: [{
                    selector: '[mdc-list-divider], mdc-list-divider',
                    template: "<div #divider class=\"mdc-list-divider\" role=\"seperator\"></div>",
                    encapsulation: _angular_core.ViewEncapsulation.None,
                },] },
    ];
    /** @nocollapse */
    ListDividerComponent.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
        { type: _angular_core.Renderer2, },
    ]; };
    ListDividerComponent.propDecorators = {
        'inset': [{ type: _angular_core.Input },],
        'listItem': [{ type: _angular_core.ViewChild, args: ['divider',] },],
    };
    return ListDividerComponent;
}());

var LIST_COMPONENTS = [
    ListComponent,
    ListItemDirective,
    ListItemStartDirective,
    ListItemEndDirective,
    ListItemTextDirective,
    ListItemTextSecondaryDirective,
    ListGroupDirective,
    ListGroupSubheaderDirective,
    ListDividerComponent,
];
var ListModule = (function () {
    function ListModule() {
    }
    ListModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    exports: LIST_COMPONENTS,
                    declarations: LIST_COMPONENTS,
                },] },
    ];
    /** @nocollapse */
    ListModule.ctorParameters = function () { return []; };
    return ListModule;
}());

var MaterialIcon = (function () {
    function MaterialIcon() {
        this.isHostClass = true;
    }
    MaterialIcon.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[material-icon]'
                },] },
    ];
    /** @nocollapse */
    MaterialIcon.ctorParameters = function () { return []; };
    MaterialIcon.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.material-icons',] },],
    };
    return MaterialIcon;
}());

var MaterialIconModule = (function () {
    function MaterialIconModule() {
    }
    MaterialIconModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    exports: [MaterialIcon],
                    declarations: [MaterialIcon],
                },] },
    ];
    /** @nocollapse */
    MaterialIconModule.ctorParameters = function () { return []; };
    return MaterialIconModule;
}());

var MenuItemDirective = (function () {
    function MenuItemDirective(_renderer, _root) {
        this._renderer = _renderer;
        this._root = _root;
        this.disabled_ = false;
        this.isHostClass = true;
        this.role = 'menuitem';
        this.tabindex = 0;
        this.itemEl = this._root;
    }
    Object.defineProperty(MenuItemDirective.prototype, "disabled", {
        get: function () {
            return this.disabled_;
        },
        set: function (value) {
            this.disabled_ = value;
            if (value) {
                this._renderer.setAttribute(this._root.nativeElement, 'aria-disabled', 'true');
                this.tabindex = -1;
            }
            else {
                this._renderer.removeAttribute(this._root.nativeElement, 'aria-disabled');
                this.tabindex = 0;
            }
        },
        enumerable: true,
        configurable: true
    });
    MenuItemDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: 'mdc-menu-item'
                },] },
    ];
    /** @nocollapse */
    MenuItemDirective.ctorParameters = function () { return [
        { type: _angular_core.Renderer2, },
        { type: _angular_core.ElementRef, },
    ]; };
    MenuItemDirective.propDecorators = {
        'id': [{ type: _angular_core.Input },],
        'label': [{ type: _angular_core.Input },],
        'icon': [{ type: _angular_core.Input },],
        'disabled': [{ type: _angular_core.Input },],
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-list-item',] },],
        'role': [{ type: _angular_core.HostBinding, args: ['attr.role',] },],
        'tabindex': [{ type: _angular_core.HostBinding, args: ['tabindex',] },],
    };
    return MenuItemDirective;
}());

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** @type {string|undefined} */
var storedTransformPropertyName_$1 = void 0;

/**
 * Returns the name of the correct transform property to use on the current browser.
 * @param {!Window} globalObj
 * @param {boolean=} forceRefresh
 * @return {string}
 */
function getTransformPropertyName$1(globalObj) {
  var forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (storedTransformPropertyName_$1 === undefined || forceRefresh) {
    var el = globalObj.document.createElement('div');
    var transformPropertyName = 'transform' in el.style ? 'transform' : 'webkitTransform';
    storedTransformPropertyName_$1 = transformPropertyName;
  }

  return storedTransformPropertyName_$1;
}

/**
 * Clamps a value between the minimum and the maximum, returning the clamped value.
 * @param {number} value
 * @param {number} min
 * @param {number} max
 * @return {number}
 */
function clamp(value) {
  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

  return Math.min(max, Math.max(min, value));
}

/**
 * Returns the easing value to apply at time t, for a given cubic bezier curve.
 * Control points P0 and P3 are assumed to be (0,0) and (1,1), respectively.
 * Parameters are as follows:
 * - time: The current time in the animation, scaled between 0 and 1.
 * - x1: The x value of control point P1.
 * - y1: The y value of control point P1.
 * - x2: The x value of control point P2.
 * - y2: The y value of control point P2.
 * @param {number} time
 * @param {number} x1
 * @param {number} y1
 * @param {number} x2
 * @param {number} y2
 * @return {number}
 */
function bezierProgress(time, x1, y1, x2, y2) {
  return getBezierCoordinate_(solvePositionFromXValue_(time, x1, x2), y1, y2);
}

/**
 * Compute a single coordinate at a position point between 0 and 1.
 * c1 and c2 are the matching coordinate on control points P1 and P2, respectively.
 * Control points P0 and P3 are assumed to be (0,0) and (1,1), respectively.
 * Adapted from https://github.com/google/closure-library/blob/master/closure/goog/math/bezier.js.
 * @param {number} t
 * @param {number} c1
 * @param {number} c2
 * @return {number}
 */
function getBezierCoordinate_(t, c1, c2) {
  // Special case start and end.
  if (t === 0 || t === 1) {
    return t;
  }

  // Step one - from 4 points to 3
  var ic0 = t * c1;
  var ic1 = c1 + t * (c2 - c1);
  var ic2 = c2 + t * (1 - c2);

  // Step two - from 3 points to 2
  ic0 += t * (ic1 - ic0);
  ic1 += t * (ic2 - ic1);

  // Final step - last point
  return ic0 + t * (ic1 - ic0);
}

/**
 * Project a point onto the Bezier curve, from a given X. Calculates the position t along the curve.
 * Adapted from https://github.com/google/closure-library/blob/master/closure/goog/math/bezier.js.
 * @param {number} xVal
 * @param {number} x1
 * @param {number} x2
 * @return {number}
 */
function solvePositionFromXValue_(xVal, x1, x2) {
  var EPSILON = 1e-6;
  var MAX_ITERATIONS = 8;

  if (xVal <= 0) {
    return 0;
  } else if (xVal >= 1) {
    return 1;
  }

  // Initial estimate of t using linear interpolation.
  var t = xVal;

  // Try gradient descent to solve for t. If it works, it is very fast.
  var tMin = 0;
  var tMax = 1;
  var value = 0;
  for (var i = 0; i < MAX_ITERATIONS; i++) {
    value = getBezierCoordinate_(t, x1, x2);
    var derivative = (getBezierCoordinate_(t + EPSILON, x1, x2) - value) / EPSILON;
    if (Math.abs(value - xVal) < EPSILON) {
      return t;
    } else if (Math.abs(derivative) < EPSILON) {
      break;
    } else {
      if (value < xVal) {
        tMin = t;
      } else {
        tMax = t;
      }
      t -= (value - xVal) / derivative;
    }
  }

  // If the gradient descent got stuck in a local minimum, e.g. because
  // the derivative was close to 0, use a Dichotomy refinement instead.
  // We limit the number of interations to 8.
  for (var _i = 0; Math.abs(value - xVal) > EPSILON && _i < MAX_ITERATIONS; _i++) {
    if (value < xVal) {
      tMin = t;
      t = (t + tMax) / 2;
    } else {
      tMax = t;
      t = (t + tMin) / 2;
    }
    value = getBezierCoordinate_(t, x1, x2);
  }
  return t;
}

var _createClass$24 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$24(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint no-unused-vars: [2, {"args": "none"}] */

/**
 * Adapter for MDC Simple Menu. Provides an interface for managing
 * - classes
 * - dom
 * - focus
 * - position
 * - dimensions
 * - event handlers
 *
 * Additionally, provides type information for the adapter to the Closure
 * compiler.
 *
 * Implement this adapter for your framework of choice to delegate updates to
 * the component in your framework of choice. See architecture documentation
 * for more details.
 * https://github.com/material-components/material-components-web/blob/master/docs/architecture.md
 *
 * @record
 */
var MDCSimpleMenuAdapter = function () {
  function MDCSimpleMenuAdapter() {
    _classCallCheck$24(this, MDCSimpleMenuAdapter);
  }

  _createClass$24(MDCSimpleMenuAdapter, [{
    key: "addClass",

    /** @param {string} className */
    value: function addClass(className) {}

    /** @param {string} className */

  }, {
    key: "removeClass",
    value: function removeClass(className) {}

    /**
     * @param {string} className
     * @return {boolean}
     */

  }, {
    key: "hasClass",
    value: function hasClass(className) {}

    /** @return {boolean} */

  }, {
    key: "hasNecessaryDom",
    value: function hasNecessaryDom() {}

    /**
     * @param {EventTarget} target
     * @param {string} attributeName
     * @return {string}
     */

  }, {
    key: "getAttributeForEventTarget",
    value: function getAttributeForEventTarget(target, attributeName) {}

    /** @return {{ width: number, height: number }} */

  }, {
    key: "getInnerDimensions",
    value: function getInnerDimensions() {}

    /** @return {boolean} */

  }, {
    key: "hasAnchor",
    value: function hasAnchor() {}

    /** @return {{width: number, height: number, top: number, right: number, bottom: number, left: number}} */

  }, {
    key: "getAnchorDimensions",
    value: function getAnchorDimensions() {}

    /** @return {{ width: number, height: number }} */

  }, {
    key: "getWindowDimensions",
    value: function getWindowDimensions() {}

    /**
     * @param {number} x
     * @param {number} y
     */

  }, {
    key: "setScale",
    value: function setScale(x, y) {}

    /**
     * @param {number} x
     * @param {number} y
     */

  }, {
    key: "setInnerScale",
    value: function setInnerScale(x, y) {}

    /** @return {number} */

  }, {
    key: "getNumberOfItems",
    value: function getNumberOfItems() {}

    /**
     * @param {string} type
     * @param {function(!Event)} handler
     */

  }, {
    key: "registerInteractionHandler",
    value: function registerInteractionHandler(type, handler) {}

    /**
     * @param {string} type
     * @param {function(!Event)} handler
     */

  }, {
    key: "deregisterInteractionHandler",
    value: function deregisterInteractionHandler(type, handler) {}

    /** @param {function(!Event)} handler */

  }, {
    key: "registerBodyClickHandler",
    value: function registerBodyClickHandler(handler) {}

    /** @param {function(!Event)} handler */

  }, {
    key: "deregisterBodyClickHandler",
    value: function deregisterBodyClickHandler(handler) {}

    /**
     * @param {number} index
     * @return {{top: number, height: number}}
     */

  }, {
    key: "getYParamsForItemAtIndex",
    value: function getYParamsForItemAtIndex(index) {}

    /**
     * @param {number} index
     * @param {string|null} value
     */

  }, {
    key: "setTransitionDelayForItemAtIndex",
    value: function setTransitionDelayForItemAtIndex(index, value) {}

    /**
     * @param {EventTarget} target
     * @return {number}
     */

  }, {
    key: "getIndexForEventTarget",
    value: function getIndexForEventTarget(target) {}

    /** @param {{index: number}} evtData */

  }, {
    key: "notifySelected",
    value: function notifySelected(evtData) {}
  }, {
    key: "notifyCancel",
    value: function notifyCancel() {}
  }, {
    key: "saveFocus",
    value: function saveFocus() {}
  }, {
    key: "restoreFocus",
    value: function restoreFocus() {}

    /** @return {boolean} */

  }, {
    key: "isFocused",
    value: function isFocused() {}
  }, {
    key: "focus",
    value: function focus() {}

    /** @return {number} */

  }, {
    key: "getFocusedItemIndex",
    value: function getFocusedItemIndex() /* number */{}

    /** @param {number} index */

  }, {
    key: "focusItemAtIndex",
    value: function focusItemAtIndex(index) {}

    /** @return {boolean} */

  }, {
    key: "isRtl",
    value: function isRtl() {}

    /** @param {string} origin */

  }, {
    key: "setTransformOrigin",
    value: function setTransformOrigin(origin) {}

    /** @param {{
    *   top: (string|undefined),
    *   right: (string|undefined),
    *   bottom: (string|undefined),
    *   left: (string|undefined)
    * }} position */

  }, {
    key: "setPosition",
    value: function setPosition(position) {}

    /** @return {number} */

  }, {
    key: "getAccurateTime",
    value: function getAccurateTime() {}
  }]);

  return MDCSimpleMenuAdapter;
}();

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** @enum {string} */
var cssClasses$8 = {
  ROOT: 'mdc-simple-menu',
  OPEN: 'mdc-simple-menu--open',
  ANIMATING: 'mdc-simple-menu--animating',
  TOP_RIGHT: 'mdc-simple-menu--open-from-top-right',
  BOTTOM_LEFT: 'mdc-simple-menu--open-from-bottom-left',
  BOTTOM_RIGHT: 'mdc-simple-menu--open-from-bottom-right'
};

/** @enum {string} */
var strings$8 = {
  ITEMS_SELECTOR: '.mdc-simple-menu__items',
  SELECTED_EVENT: 'MDCSimpleMenu:selected',
  CANCEL_EVENT: 'MDCSimpleMenu:cancel',
  ARIA_DISABLED_ATTR: 'aria-disabled'
};

/** @enum {number} */
var numbers$2 = {
  // Amount of time to wait before triggering a selected event on the menu. Note that this time
  // will most likely be bumped up once interactive lists are supported to allow for the ripple to
  // animate before closing the menu
  SELECTED_TRIGGER_DELAY: 50,
  // Total duration of the menu animation.
  TRANSITION_DURATION_MS: 300,
  // The menu starts its open animation with the X axis at this time value (0 - 1).
  TRANSITION_SCALE_ADJUSTMENT_X: 0.5,
  // The time value the menu waits until the animation starts on the Y axis (0 - 1).
  TRANSITION_SCALE_ADJUSTMENT_Y: 0.2,
  // The cubic bezier control points for the animation (cubic-bezier(0, 0, 0.2, 1)).
  TRANSITION_X1: 0,
  TRANSITION_Y1: 0,
  TRANSITION_X2: 0.2,
  TRANSITION_Y2: 1
};

var _createClass$23 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck$23(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$18(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$18(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @extends {MDCFoundation<!MDCSimpleMenuAdapter>}
 */

var MDCSimpleMenuFoundation = function (_MDCFoundation) {
  _inherits$18(MDCSimpleMenuFoundation, _MDCFoundation);

  _createClass$23(MDCSimpleMenuFoundation, null, [{
    key: 'cssClasses',

    /** @return enum{cssClasses} */
    get: function get() {
      return cssClasses$8;
    }

    /** @return enum{strings} */

  }, {
    key: 'strings',
    get: function get() {
      return strings$8;
    }

    /** @return enum{numbers} */

  }, {
    key: 'numbers',
    get: function get() {
      return numbers$2;
    }

    /**
     * {@see MDCSimpleMenuAdapter} for typing information on parameters and return
     * types.
     * @return {!MDCSimpleMenuAdapter}
     */

  }, {
    key: 'defaultAdapter',
    get: function get() {
      return (/** @type {!MDCSimpleMenuAdapter} */{
          addClass: function addClass() {},
          removeClass: function removeClass() {},
          hasClass: function hasClass() {
            return false;
          },
          hasNecessaryDom: function hasNecessaryDom() {
            return false;
          },
          getAttributeForEventTarget: function getAttributeForEventTarget() {},
          getInnerDimensions: function getInnerDimensions() {
            return {};
          },
          hasAnchor: function hasAnchor() {
            return false;
          },
          getAnchorDimensions: function getAnchorDimensions() {
            return {};
          },
          getWindowDimensions: function getWindowDimensions() {
            return {};
          },
          setScale: function setScale() {},
          setInnerScale: function setInnerScale() {},
          getNumberOfItems: function getNumberOfItems() {
            return 0;
          },
          registerInteractionHandler: function registerInteractionHandler() {},
          deregisterInteractionHandler: function deregisterInteractionHandler() {},
          registerBodyClickHandler: function registerBodyClickHandler() {},
          deregisterBodyClickHandler: function deregisterBodyClickHandler() {},
          getYParamsForItemAtIndex: function getYParamsForItemAtIndex() {
            return {};
          },
          setTransitionDelayForItemAtIndex: function setTransitionDelayForItemAtIndex() {},
          getIndexForEventTarget: function getIndexForEventTarget() {
            return 0;
          },
          notifySelected: function notifySelected() {},
          notifyCancel: function notifyCancel() {},
          saveFocus: function saveFocus() {},
          restoreFocus: function restoreFocus() {},
          isFocused: function isFocused() {
            return false;
          },
          focus: function focus() {},
          getFocusedItemIndex: function getFocusedItemIndex() {
            return -1;
          },
          focusItemAtIndex: function focusItemAtIndex() {},
          isRtl: function isRtl() {
            return false;
          },
          setTransformOrigin: function setTransformOrigin() {},
          setPosition: function setPosition() {},
          getAccurateTime: function getAccurateTime() {
            return 0;
          }
        }
      );
    }

    /** @param {!MDCSimpleMenuAdapter} adapter */

  }]);

  function MDCSimpleMenuFoundation(adapter) {
    _classCallCheck$23(this, MDCSimpleMenuFoundation);

    /** @private {function(!Event)} */
    var _this = _possibleConstructorReturn$18(this, (MDCSimpleMenuFoundation.__proto__ || Object.getPrototypeOf(MDCSimpleMenuFoundation)).call(this, Object.assign(MDCSimpleMenuFoundation.defaultAdapter, adapter)));

    _this.clickHandler_ = function (evt) {
      return _this.handlePossibleSelected_(evt);
    };
    /** @private {function(!Event)} */
    _this.keydownHandler_ = function (evt) {
      return _this.handleKeyboardDown_(evt);
    };
    /** @private {function(!Event)} */
    _this.keyupHandler_ = function (evt) {
      return _this.handleKeyboardUp_(evt);
    };
    /** @private {function(!Event)} */
    _this.documentClickHandler_ = function (evt) {
      _this.adapter_.notifyCancel();
      _this.close(evt);
    };
    /** @private {boolean} */
    _this.isOpen_ = false;
    /** @private {number} */
    _this.startScaleX_ = 0;
    /** @private {number} */
    _this.startScaleY_ = 0;
    /** @private {number} */
    _this.targetScale_ = 1;
    /** @private {number} */
    _this.scaleX_ = 0;
    /** @private {number} */
    _this.scaleY_ = 0;
    /** @private {boolean} */
    _this.running_ = false;
    /** @private {number} */
    _this.selectedTriggerTimerId_ = 0;
    /** @private {number} */
    _this.animationRequestId_ = 0;
    /** @private {!{ width: number, height: number }} */
    _this.dimensions_;
    /** @private {number} */
    _this.startTime_;
    /** @private {number} */
    _this.itemHeight_;
    return _this;
  }

  _createClass$23(MDCSimpleMenuFoundation, [{
    key: 'init',
    value: function init() {
      var _MDCSimpleMenuFoundat = MDCSimpleMenuFoundation.cssClasses,
          ROOT = _MDCSimpleMenuFoundat.ROOT,
          OPEN = _MDCSimpleMenuFoundat.OPEN;


      if (!this.adapter_.hasClass(ROOT)) {
        throw new Error(ROOT + ' class required in root element.');
      }

      if (!this.adapter_.hasNecessaryDom()) {
        throw new Error('Required DOM nodes missing in ' + ROOT + ' component.');
      }

      if (this.adapter_.hasClass(OPEN)) {
        this.isOpen_ = true;
      }

      this.adapter_.registerInteractionHandler('click', this.clickHandler_);
      this.adapter_.registerInteractionHandler('keyup', this.keyupHandler_);
      this.adapter_.registerInteractionHandler('keydown', this.keydownHandler_);
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      clearTimeout(this.selectedTriggerTimerId_);
      // Cancel any currently running animations.
      cancelAnimationFrame(this.animationRequestId_);
      this.adapter_.deregisterInteractionHandler('click', this.clickHandler_);
      this.adapter_.deregisterInteractionHandler('keyup', this.keyupHandler_);
      this.adapter_.deregisterInteractionHandler('keydown', this.keydownHandler_);
      this.adapter_.deregisterBodyClickHandler(this.documentClickHandler_);
    }

    /**
     * Calculates transition delays for individual menu items, so that they fade in one at a time.
     * @private
     */

  }, {
    key: 'applyTransitionDelays_',
    value: function applyTransitionDelays_() {
      var _MDCSimpleMenuFoundat2 = MDCSimpleMenuFoundation.cssClasses,
          BOTTOM_LEFT = _MDCSimpleMenuFoundat2.BOTTOM_LEFT,
          BOTTOM_RIGHT = _MDCSimpleMenuFoundat2.BOTTOM_RIGHT;

      var numItems = this.adapter_.getNumberOfItems();
      var height = this.dimensions_.height;

      var transitionDuration = MDCSimpleMenuFoundation.numbers.TRANSITION_DURATION_MS / 1000;
      var start = MDCSimpleMenuFoundation.numbers.TRANSITION_SCALE_ADJUSTMENT_Y;

      for (var index = 0; index < numItems; index++) {
        var _adapter_$getYParamsF = this.adapter_.getYParamsForItemAtIndex(index),
            itemTop = _adapter_$getYParamsF.top,
            itemHeight = _adapter_$getYParamsF.height;

        this.itemHeight_ = itemHeight;
        var itemDelayFraction = itemTop / height;
        if (this.adapter_.hasClass(BOTTOM_LEFT) || this.adapter_.hasClass(BOTTOM_RIGHT)) {
          itemDelayFraction = (height - itemTop - itemHeight) / height;
        }
        var itemDelay = (start + itemDelayFraction * (1 - start)) * transitionDuration;
        // Use toFixed() here to normalize CSS unit precision across browsers
        this.adapter_.setTransitionDelayForItemAtIndex(index, itemDelay.toFixed(3) + 's');
      }
    }

    /**
     * Removes transition delays from menu items.
     * @private
     */

  }, {
    key: 'removeTransitionDelays_',
    value: function removeTransitionDelays_() {
      var numItems = this.adapter_.getNumberOfItems();
      for (var i = 0; i < numItems; i++) {
        this.adapter_.setTransitionDelayForItemAtIndex(i, null);
      }
    }

    /**
     * Animates menu opening or closing.
     * @private
     */

  }, {
    key: 'animationLoop_',
    value: function animationLoop_() {
      var _this2 = this;

      var time = this.adapter_.getAccurateTime();
      var _MDCSimpleMenuFoundat3 = MDCSimpleMenuFoundation.numbers,
          TRANSITION_DURATION_MS = _MDCSimpleMenuFoundat3.TRANSITION_DURATION_MS,
          TRANSITION_X1 = _MDCSimpleMenuFoundat3.TRANSITION_X1,
          TRANSITION_Y1 = _MDCSimpleMenuFoundat3.TRANSITION_Y1,
          TRANSITION_X2 = _MDCSimpleMenuFoundat3.TRANSITION_X2,
          TRANSITION_Y2 = _MDCSimpleMenuFoundat3.TRANSITION_Y2,
          TRANSITION_SCALE_ADJUSTMENT_X = _MDCSimpleMenuFoundat3.TRANSITION_SCALE_ADJUSTMENT_X,
          TRANSITION_SCALE_ADJUSTMENT_Y = _MDCSimpleMenuFoundat3.TRANSITION_SCALE_ADJUSTMENT_Y;

      var currentTime = clamp((time - this.startTime_) / TRANSITION_DURATION_MS);

      // Animate X axis very slowly, so that only the Y axis animation is visible during fade-out.
      var currentTimeX = clamp((currentTime - TRANSITION_SCALE_ADJUSTMENT_X) / (1 - TRANSITION_SCALE_ADJUSTMENT_X));
      // No time-shifting on the Y axis when closing.
      var currentTimeY = currentTime;

      var startScaleY = this.startScaleY_;
      if (this.targetScale_ === 1) {
        // Start with the menu at the height of a single item.
        if (this.itemHeight_) {
          startScaleY = Math.max(this.itemHeight_ / this.dimensions_.height, startScaleY);
        }
        // X axis moves faster, so time-shift forward.
        currentTimeX = clamp(currentTime + TRANSITION_SCALE_ADJUSTMENT_X);
        // Y axis moves slower, so time-shift backwards and adjust speed by the difference.
        currentTimeY = clamp((currentTime - TRANSITION_SCALE_ADJUSTMENT_Y) / (1 - TRANSITION_SCALE_ADJUSTMENT_Y));
      }

      // Apply cubic bezier easing independently to each axis.
      var easeX = bezierProgress(currentTimeX, TRANSITION_X1, TRANSITION_Y1, TRANSITION_X2, TRANSITION_Y2);
      var easeY = bezierProgress(currentTimeY, TRANSITION_X1, TRANSITION_Y1, TRANSITION_X2, TRANSITION_Y2);

      // Calculate the scales to apply to the outer container and inner container.
      this.scaleX_ = this.startScaleX_ + (this.targetScale_ - this.startScaleX_) * easeX;
      var invScaleX = 1 / (this.scaleX_ === 0 ? 1 : this.scaleX_);
      this.scaleY_ = startScaleY + (this.targetScale_ - startScaleY) * easeY;
      var invScaleY = 1 / (this.scaleY_ === 0 ? 1 : this.scaleY_);

      // Apply scales.
      this.adapter_.setScale(this.scaleX_, this.scaleY_);
      this.adapter_.setInnerScale(invScaleX, invScaleY);

      // Stop animation when we've covered the entire 0 - 1 range of time.
      if (currentTime < 1) {
        this.animationRequestId_ = requestAnimationFrame(function () {
          return _this2.animationLoop_();
        });
      } else {
        this.animationRequestId_ = 0;
        this.running_ = false;
        this.adapter_.removeClass(MDCSimpleMenuFoundation.cssClasses.ANIMATING);
      }
    }

    /**
     * Starts the open or close animation.
     * @private
     */

  }, {
    key: 'animateMenu_',
    value: function animateMenu_() {
      var _this3 = this;

      this.startTime_ = this.adapter_.getAccurateTime();
      this.startScaleX_ = this.scaleX_;
      this.startScaleY_ = this.scaleY_;

      this.targetScale_ = this.isOpen_ ? 1 : 0;

      if (!this.running_) {
        this.running_ = true;
        this.animationRequestId_ = requestAnimationFrame(function () {
          return _this3.animationLoop_();
        });
      }
    }

    /**
     * @param {?number} focusIndex
     * @private
     */

  }, {
    key: 'focusOnOpen_',
    value: function focusOnOpen_(focusIndex) {
      if (focusIndex === null) {
        // First, try focusing the menu.
        this.adapter_.focus();
        // If that doesn't work, focus first item instead.
        if (!this.adapter_.isFocused()) {
          this.adapter_.focusItemAtIndex(0);
        }
      } else {
        this.adapter_.focusItemAtIndex(focusIndex);
      }
    }

    /**
     * Handle keys that we want to repeat on hold (tab and arrows).
     * @param {!Event} evt
     * @return {boolean}
     * @private
     */

  }, {
    key: 'handleKeyboardDown_',
    value: function handleKeyboardDown_(evt) {
      // Do nothing if Alt, Ctrl or Meta are pressed.
      if (evt.altKey || evt.ctrlKey || evt.metaKey) {
        return true;
      }

      var keyCode = evt.keyCode,
          key = evt.key,
          shiftKey = evt.shiftKey;

      var isTab = key === 'Tab' || keyCode === 9;
      var isArrowUp = key === 'ArrowUp' || keyCode === 38;
      var isArrowDown = key === 'ArrowDown' || keyCode === 40;
      var isSpace = key === 'Space' || keyCode === 32;

      var focusedItemIndex = this.adapter_.getFocusedItemIndex();
      var lastItemIndex = this.adapter_.getNumberOfItems() - 1;

      if (shiftKey && isTab && focusedItemIndex === 0) {
        this.adapter_.focusItemAtIndex(lastItemIndex);
        evt.preventDefault();
        return false;
      }

      if (!shiftKey && isTab && focusedItemIndex === lastItemIndex) {
        this.adapter_.focusItemAtIndex(0);
        evt.preventDefault();
        return false;
      }

      // Ensure Arrow{Up,Down} and space do not cause inadvertent scrolling
      if (isArrowUp || isArrowDown || isSpace) {
        evt.preventDefault();
      }

      if (isArrowUp) {
        if (focusedItemIndex === 0 || this.adapter_.isFocused()) {
          this.adapter_.focusItemAtIndex(lastItemIndex);
        } else {
          this.adapter_.focusItemAtIndex(focusedItemIndex - 1);
        }
      } else if (isArrowDown) {
        if (focusedItemIndex === lastItemIndex || this.adapter_.isFocused()) {
          this.adapter_.focusItemAtIndex(0);
        } else {
          this.adapter_.focusItemAtIndex(focusedItemIndex + 1);
        }
      }

      return true;
    }

    /**
     * Handle keys that we don't want to repeat on hold (Enter, Space, Escape).
     * @param {!Event} evt
     * @return {boolean}
     * @private
     */

  }, {
    key: 'handleKeyboardUp_',
    value: function handleKeyboardUp_(evt) {
      // Do nothing if Alt, Ctrl or Meta are pressed.
      if (evt.altKey || evt.ctrlKey || evt.metaKey) {
        return true;
      }

      var keyCode = evt.keyCode,
          key = evt.key;

      var isEnter = key === 'Enter' || keyCode === 13;
      var isSpace = key === 'Space' || keyCode === 32;
      var isEscape = key === 'Escape' || keyCode === 27;

      if (isEnter || isSpace) {
        this.handlePossibleSelected_(evt);
      }

      if (isEscape) {
        this.adapter_.notifyCancel();
        this.close();
      }

      return true;
    }

    /**
     * @param {!Event} evt
     * @private
     */

  }, {
    key: 'handlePossibleSelected_',
    value: function handlePossibleSelected_(evt) {
      var _this4 = this;

      if (this.adapter_.getAttributeForEventTarget(evt.target, strings$8.ARIA_DISABLED_ATTR) === 'true') {
        return;
      }
      var targetIndex = this.adapter_.getIndexForEventTarget(evt.target);
      if (targetIndex < 0) {
        return;
      }
      // Debounce multiple selections
      if (this.selectedTriggerTimerId_) {
        return;
      }
      this.selectedTriggerTimerId_ = setTimeout(function () {
        _this4.selectedTriggerTimerId_ = 0;
        _this4.close();
        _this4.adapter_.notifySelected({ index: targetIndex });
      }, numbers$2.SELECTED_TRIGGER_DELAY);
    }

    /** @private */

  }, {
    key: 'autoPosition_',
    value: function autoPosition_() {
      var _position;

      if (!this.adapter_.hasAnchor()) {
        return;
      }

      // Defaults: open from the top left.
      var vertical = 'top';
      var horizontal = 'left';

      var anchor = this.adapter_.getAnchorDimensions();
      var windowDimensions = this.adapter_.getWindowDimensions();

      var topOverflow = anchor.top + this.dimensions_.height - windowDimensions.height;
      var bottomOverflow = this.dimensions_.height - anchor.bottom;
      var extendsBeyondTopBounds = topOverflow > 0;

      if (extendsBeyondTopBounds) {
        if (bottomOverflow < topOverflow) {
          vertical = 'bottom';
        }
      }

      var leftOverflow = anchor.left + this.dimensions_.width - windowDimensions.width;
      var rightOverflow = this.dimensions_.width - anchor.right;
      var extendsBeyondLeftBounds = leftOverflow > 0;
      var extendsBeyondRightBounds = rightOverflow > 0;

      if (this.adapter_.isRtl()) {
        // In RTL, we prefer to open from the right.
        horizontal = 'right';
        if (extendsBeyondRightBounds && leftOverflow < rightOverflow) {
          horizontal = 'left';
        }
      } else if (extendsBeyondLeftBounds && rightOverflow < leftOverflow) {
        horizontal = 'right';
      }

      var position = (_position = {}, _defineProperty(_position, horizontal, '0'), _defineProperty(_position, vertical, '0'), _position);

      this.adapter_.setTransformOrigin(vertical + ' ' + horizontal);
      this.adapter_.setPosition(position);
    }

    /**
     * Open the menu.
     * @param {{focusIndex: ?number}=} options
     */

  }, {
    key: 'open',
    value: function open() {
      var _this5 = this;

      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$focusIndex = _ref.focusIndex,
          focusIndex = _ref$focusIndex === undefined ? null : _ref$focusIndex;

      this.adapter_.saveFocus();
      this.adapter_.addClass(MDCSimpleMenuFoundation.cssClasses.ANIMATING);
      this.animationRequestId_ = requestAnimationFrame(function () {
        _this5.dimensions_ = _this5.adapter_.getInnerDimensions();
        _this5.applyTransitionDelays_();
        _this5.autoPosition_();
        _this5.animateMenu_();
        _this5.adapter_.addClass(MDCSimpleMenuFoundation.cssClasses.OPEN);
        _this5.focusOnOpen_(focusIndex);
        _this5.adapter_.registerBodyClickHandler(_this5.documentClickHandler_);
      });
      this.isOpen_ = true;
    }

    /**
     * Closes the menu.
     * @param {Event=} evt
     */

  }, {
    key: 'close',
    value: function close() {
      var _this6 = this;

      var evt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      var targetIsDisabled = evt ? this.adapter_.getAttributeForEventTarget(evt.target, strings$8.ARIA_DISABLED_ATTR) === 'true' : false;

      if (targetIsDisabled) {
        return;
      }

      this.adapter_.deregisterBodyClickHandler(this.documentClickHandler_);
      this.adapter_.addClass(MDCSimpleMenuFoundation.cssClasses.ANIMATING);
      requestAnimationFrame(function () {
        _this6.removeTransitionDelays_();
        _this6.animateMenu_();
        _this6.adapter_.removeClass(MDCSimpleMenuFoundation.cssClasses.OPEN);
      });
      this.isOpen_ = false;
      this.adapter_.restoreFocus();
    }

    /** @return {boolean} */

  }, {
    key: 'isOpen',
    value: function isOpen() {
      return this.isOpen_;
    }
  }]);

  return MDCSimpleMenuFoundation;
}(MDCFoundation);

var _createClass$22 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$22(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$17(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$17(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @extends MDCComponent<!MDCSimpleMenuFoundation>
 */
var MDCSimpleMenu = function (_MDCComponent) {
  _inherits$17(MDCSimpleMenu, _MDCComponent);

  /** @param {...?} args */
  function MDCSimpleMenu() {
    var _ref;

    _classCallCheck$22(this, MDCSimpleMenu);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    /** @private {!Element} */
    var _this = _possibleConstructorReturn$17(this, (_ref = MDCSimpleMenu.__proto__ || Object.getPrototypeOf(MDCSimpleMenu)).call.apply(_ref, [this].concat(args)));

    _this.previousFocus_;
    return _this;
  }

  /**
   * @param {!Element} root
   * @return {!MDCSimpleMenu}
   */


  _createClass$22(MDCSimpleMenu, [{
    key: 'show',


    /** @param {{focusIndex: ?number}=} options */
    value: function show() {
      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref2$focusIndex = _ref2.focusIndex,
          focusIndex = _ref2$focusIndex === undefined ? null : _ref2$focusIndex;

      this.foundation_.open({ focusIndex: focusIndex });
    }
  }, {
    key: 'hide',
    value: function hide() {
      this.foundation_.close();
    }

    /**
     * Return the item container element inside the component.
     * @return {?Element}
     */

  }, {
    key: 'getDefaultFoundation',


    /** @return {!MDCSimpleMenuFoundation} */
    value: function getDefaultFoundation() {
      var _this2 = this;

      return new MDCSimpleMenuFoundation({
        addClass: function addClass(className) {
          return _this2.root_.classList.add(className);
        },
        removeClass: function removeClass(className) {
          return _this2.root_.classList.remove(className);
        },
        hasClass: function hasClass(className) {
          return _this2.root_.classList.contains(className);
        },
        hasNecessaryDom: function hasNecessaryDom() {
          return Boolean(_this2.itemsContainer_);
        },
        getAttributeForEventTarget: function getAttributeForEventTarget(target, attributeName) {
          return target.getAttribute(attributeName);
        },
        getInnerDimensions: function getInnerDimensions() {
          var itemsContainer = _this2.itemsContainer_;

          return { width: itemsContainer.offsetWidth, height: itemsContainer.offsetHeight };
        },
        hasAnchor: function hasAnchor() {
          return _this2.root_.parentElement && _this2.root_.parentElement.classList.contains('mdc-menu-anchor');
        },
        getAnchorDimensions: function getAnchorDimensions() {
          return _this2.root_.parentElement.getBoundingClientRect();
        },
        getWindowDimensions: function getWindowDimensions() {
          return { width: window.innerWidth, height: window.innerHeight };
        },
        setScale: function setScale(x, y) {
          _this2.root_.style[getTransformPropertyName$1(window)] = 'scale(' + x + ', ' + y + ')';
        },
        setInnerScale: function setInnerScale(x, y) {
          _this2.itemsContainer_.style[getTransformPropertyName$1(window)] = 'scale(' + x + ', ' + y + ')';
        },
        getNumberOfItems: function getNumberOfItems() {
          return _this2.items.length;
        },
        registerInteractionHandler: function registerInteractionHandler(type, handler) {
          return _this2.root_.addEventListener(type, handler);
        },
        deregisterInteractionHandler: function deregisterInteractionHandler(type, handler) {
          return _this2.root_.removeEventListener(type, handler);
        },
        registerBodyClickHandler: function registerBodyClickHandler(handler) {
          return document.body.addEventListener('click', handler);
        },
        deregisterBodyClickHandler: function deregisterBodyClickHandler(handler) {
          return document.body.removeEventListener('click', handler);
        },
        getYParamsForItemAtIndex: function getYParamsForItemAtIndex(index) {
          var _items$index = _this2.items[index],
              top = _items$index.offsetTop,
              height = _items$index.offsetHeight;

          return { top: top, height: height };
        },
        setTransitionDelayForItemAtIndex: function setTransitionDelayForItemAtIndex(index, value) {
          return _this2.items[index].style.setProperty('transition-delay', value);
        },
        getIndexForEventTarget: function getIndexForEventTarget(target) {
          return _this2.items.indexOf(target);
        },
        notifySelected: function notifySelected(evtData) {
          return _this2.emit(MDCSimpleMenuFoundation.strings.SELECTED_EVENT, {
            index: evtData.index,
            item: _this2.items[evtData.index]
          });
        },
        notifyCancel: function notifyCancel() {
          return _this2.emit(MDCSimpleMenuFoundation.strings.CANCEL_EVENT, {});
        },
        saveFocus: function saveFocus() {
          _this2.previousFocus_ = document.activeElement;
        },
        restoreFocus: function restoreFocus() {
          if (_this2.previousFocus_) {
            _this2.previousFocus_.focus();
          }
        },
        isFocused: function isFocused() {
          return document.activeElement === _this2.root_;
        },
        focus: function focus() {
          return _this2.root_.focus();
        },
        getFocusedItemIndex: function getFocusedItemIndex() {
          return _this2.items.indexOf(document.activeElement);
        },
        focusItemAtIndex: function focusItemAtIndex(index) {
          return _this2.items[index].focus();
        },
        isRtl: function isRtl() {
          return getComputedStyle(_this2.root_).getPropertyValue('direction') === 'rtl';
        },
        setTransformOrigin: function setTransformOrigin(origin) {
          _this2.root_.style[getTransformPropertyName$1(window) + '-origin'] = origin;
        },
        setPosition: function setPosition(position) {
          _this2.root_.style.left = 'left' in position ? position.left : null;
          _this2.root_.style.right = 'right' in position ? position.right : null;
          _this2.root_.style.top = 'top' in position ? position.top : null;
          _this2.root_.style.bottom = 'bottom' in position ? position.bottom : null;
        },
        getAccurateTime: function getAccurateTime() {
          return window.performance.now();
        }
      });
    }
  }, {
    key: 'open',


    /** @return {boolean} */
    get: function get() {
      return this.foundation_.isOpen();
    }

    /** @param {boolean} value */
    ,
    set: function set(value) {
      if (value) {
        this.foundation_.open();
      } else {
        this.foundation_.close();
      }
    }
  }, {
    key: 'itemsContainer_',
    get: function get() {
      return this.root_.querySelector(MDCSimpleMenuFoundation.strings.ITEMS_SELECTOR);
    }

    /**
     * Return the items within the menu. Note that this only contains the set of elements within
     * the items container that are proper list items, and not supplemental / presentational DOM
     * elements.
     * @return {!Array<!Element>}
     */

  }, {
    key: 'items',
    get: function get() {
      var itemsContainer = this.itemsContainer_;

      return [].slice.call(itemsContainer.querySelectorAll('.mdc-list-item[role]'));
    }
  }], [{
    key: 'attachTo',
    value: function attachTo(root) {
      return new MDCSimpleMenu(root);
    }
  }]);

  return MDCSimpleMenu;
}(MDCComponent);

(function (MenuOpenFrom) {
    MenuOpenFrom[MenuOpenFrom["topLeft"] = "mdc-simple-menu--open-from-top-left"] = "topLeft";
    MenuOpenFrom[MenuOpenFrom["topRight"] = "mdc-simple-menu--open-from-top-right"] = "topRight";
    MenuOpenFrom[MenuOpenFrom["bottomLeft"] = "mdc-simple-menu--open-from-bottom-left"] = "bottomLeft";
    MenuOpenFrom[MenuOpenFrom["bottomRight"] = "mdc-simple-menu--open-from-bottom-right"] = "bottomRight";
})(exports.MenuOpenFrom || (exports.MenuOpenFrom = {}));
var MenuAnchorDirective = (function () {
    function MenuAnchorDirective() {
        this.isHostClass = true;
    }
    MenuAnchorDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-menu-anchor]'
                },] },
    ];
    /** @nocollapse */
    MenuAnchorDirective.ctorParameters = function () { return []; };
    MenuAnchorDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-menu-anchor',] },],
    };
    return MenuAnchorDirective;
}());
var MenuDividerComponent = (function () {
    function MenuDividerComponent() {
    }
    MenuDividerComponent.decorators = [
        { type: _angular_core.Component, args: [{
                    selector: 'mdc-menu-divider',
                    template: "<div #divider class=\"mdc-list-divider\" role=\"seperator\"></div>",
                },] },
    ];
    /** @nocollapse */
    MenuDividerComponent.ctorParameters = function () { return []; };
    return MenuDividerComponent;
}());
var MenuComponent = (function () {
    function MenuComponent(_renderer, _root, _registry) {
        var _this = this;
        this._renderer = _renderer;
        this._root = _root;
        this._registry = _registry;
        this.openFrom = exports.MenuOpenFrom.topLeft;
        this.cancel = new _angular_core.EventEmitter();
        this.select = new _angular_core.EventEmitter();
        this.tabindex = -1;
        this._mdcAdapter = {
            addClass: function (className) {
                _this._renderer.addClass(_this._root.nativeElement, className);
            },
            removeClass: function (className) {
                _this._renderer.removeClass(_this._root.nativeElement, className);
            },
            getAttributeForEventTarget: function (target, attributeName) {
                return target.getAttribute(attributeName);
            },
            hasClass: function (className) {
                return _this._root.nativeElement.classList.contains(className);
            },
            hasNecessaryDom: function () { return !!_this.menuContainerEl; },
            getInnerDimensions: function () {
                return {
                    width: _this._root.nativeElement.offsetWidth,
                    height: _this._root.nativeElement.offsetHeight
                };
            },
            hasAnchor: function () {
                return _this._renderer.parentNode(_this._root.nativeElement) && _this._renderer.parentNode(_this._root.nativeElement).classList.contains('mdc-menu-anchor');
            },
            getAnchorDimensions: function () {
                return _this._renderer.parentNode(_this._root.nativeElement).getBoundingClientRect();
            },
            getWindowDimensions: function () {
                return {
                    width: isBrowser() ? window.innerWidth : 0,
                    height: isBrowser() ? window.innerHeight : 0
                };
            },
            setScale: function (x, y) {
                if (isBrowser()) {
                    var _a = _this, renderer = _a._renderer, root = _a._root;
                    renderer.setStyle(root.nativeElement, getTransformPropertyName$1(window), "scale(" + x + ", " + y + ")");
                }
            },
            setInnerScale: function (x, y) {
                if (isBrowser()) {
                    _this._renderer.setStyle(_this.menuContainerEl.nativeElement, getTransformPropertyName$1(window), "scale(" + x + ", " + y + ")");
                }
            },
            getNumberOfItems: function () {
                return _this.menuItems ? _this.menuItems.length : 0;
            },
            registerInteractionHandler: function (type, handler) {
                if (_this._root) {
                    _this._registry.listen_(_this._renderer, type, handler, _this._root);
                }
            },
            deregisterInteractionHandler: function (type, handler) {
                _this._registry.unlisten_(type, handler);
            },
            registerBodyClickHandler: function (handler) {
                if (_this._root) {
                    _this._registry.listen_(_this._renderer, 'click', handler, 'body');
                }
            },
            deregisterBodyClickHandler: function (handler) {
                _this._registry.unlisten_('click', handler);
            },
            getYParamsForItemAtIndex: function (index) {
                var _a = _this.menuItems.toArray()[index].itemEl.nativeElement, top = _a.offsetTop, height = _a.offsetHeight;
                return { top: top, height: height };
            },
            setTransitionDelayForItemAtIndex: function (index, value) {
                _this._renderer.setStyle(_this.menuItems.toArray()[index].itemEl.nativeElement, 'transition-delay', value);
            },
            getIndexForEventTarget: function (target) {
                return _this.menuItems.toArray().findIndex(function (_) { return _.itemEl.nativeElement === target; });
            },
            notifySelected: function (evtData) {
                _this.select.emit(evtData.index);
            },
            notifyCancel: function () {
                _this.cancel.emit();
            },
            saveFocus: function () {
                if (isBrowser()) {
                    _this.previousFocus_ = document.activeElement;
                }
            },
            restoreFocus: function () {
                if (_this.previousFocus_) {
                    _this.previousFocus_.focus();
                }
            },
            isFocused: function () {
                return _this._root.nativeElement.ownerDocument.activeElement === _this._root.nativeElement;
            },
            focus: function () {
                _this._root.nativeElement.focus();
            },
            getFocusedItemIndex: function () {
                return _this.menuItems.length ? _this.menuItems.toArray().findIndex(function (_) {
                    return _.itemEl.nativeElement === _this._root.nativeElement.ownerDocument.activeElement;
                }) : -1;
            },
            focusItemAtIndex: function (index) {
                if (_this.menuItems.toArray()[index] !== undefined) {
                    _this.menuItems.toArray()[index].itemEl.nativeElement.focus();
                }
                else {
                    // set focus back to root element when index is undefined
                    _this._root.nativeElement.focus();
                }
            },
            isRtl: function () {
                return false;
            },
            setTransformOrigin: function (origin) {
                if (isBrowser()) {
                    _this._renderer.setStyle(_this._root.nativeElement, getTransformPropertyName$1(window) + "-origin", origin);
                }
            },
            setPosition: function (position) {
                var _a = _this, renderer = _a._renderer, root = _a._root;
                position.left ? renderer.setStyle(root.nativeElement, 'left', 0) : renderer.removeStyle(root.nativeElement, 'left');
                position.right ? renderer.setStyle(root.nativeElement, 'right', 0) : renderer.removeStyle(root.nativeElement, 'right');
                position.top ? renderer.setStyle(root.nativeElement, 'top', 0) : renderer.removeStyle(root.nativeElement, 'top');
                position.bottom ? renderer.setStyle(root.nativeElement, 'bottom', 0) : renderer.removeStyle(root.nativeElement, 'bottom');
            },
            getAccurateTime: function () {
                return isBrowser() ? window.performance.now() : Date.now();
            }
        };
        this._foundation = new MDCSimpleMenuFoundation(this._mdcAdapter);
    }
    Object.defineProperty(MenuComponent.prototype, "className", {
        get: function () {
            return "mdc-simple-menu" + (exports.MenuOpenFrom[this.openFrom] ? " " + exports.MenuOpenFrom[this.openFrom] : '');
        },
        enumerable: true,
        configurable: true
    });
    MenuComponent.prototype.ngAfterViewInit = function () {
        this._foundation.init();
    };
    MenuComponent.prototype.ngOnDestroy = function () {
        this._foundation.destroy();
    };
    MenuComponent.prototype.isOpen = function () {
        return this._foundation.isOpen();
    };
    MenuComponent.prototype.open = function (focusIndex) {
        if (!this.isOpen()) {
            this._foundation.open({ focusIndex: focusIndex });
        }
    };
    MenuComponent.prototype.close = function () {
        this._foundation.close();
    };
    MenuComponent.decorators = [
        { type: _angular_core.Component, args: [{
                    selector: 'mdc-menu',
                    template: "\n  <ul #menuContainer class=\"mdc-simple-menu__items mdc-list\" role=\"menu\" aria-hidden=\"true\">\n   <ng-content select=\"mdc-menu-item, mdc-menu-divider\"></ng-content>\n  </ul>\n  ",
                    encapsulation: _angular_core.ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    MenuComponent.ctorParameters = function () { return [
        { type: _angular_core.Renderer2, },
        { type: _angular_core.ElementRef, },
        { type: EventRegistry, },
    ]; };
    MenuComponent.propDecorators = {
        'openFrom': [{ type: _angular_core.Input },],
        'cancel': [{ type: _angular_core.Output },],
        'select': [{ type: _angular_core.Output },],
        'className': [{ type: _angular_core.HostBinding, args: ['class',] },],
        'tabindex': [{ type: _angular_core.HostBinding, args: ['tabindex',] },],
        'menuContainerEl': [{ type: _angular_core.ViewChild, args: ['menuContainer',] },],
        'menuItems': [{ type: _angular_core.ContentChildren, args: [MenuItemDirective,] },],
    };
    return MenuComponent;
}());

var MENU_COMPONENTS = [
    MenuComponent,
    MenuItemDirective,
    MenuAnchorDirective,
    MenuDividerComponent,
];
var MenuModule = (function () {
    function MenuModule() {
    }
    MenuModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    imports: [_angular_common.CommonModule],
                    exports: [MENU_COMPONENTS],
                    declarations: [MENU_COMPONENTS],
                },] },
    ];
    /** @nocollapse */
    MenuModule.ctorParameters = function () { return []; };
    return MenuModule;
}());

var RadioModule = (function () {
    function RadioModule() {
    }
    RadioModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    exports: [RadioComponent],
                    declarations: [RadioComponent]
                },] },
    ];
    /** @nocollapse */
    RadioModule.ctorParameters = function () { return []; };
    return RadioModule;
}());

var RippleModule = (function () {
    function RippleModule() {
    }
    RippleModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    exports: [Ripple],
                    declarations: [Ripple],
                    providers: [EventRegistry]
                },] },
    ];
    /** @nocollapse */
    RippleModule.ctorParameters = function () { return []; };
    return RippleModule;
}());

var SnackbarTextDirective = (function () {
    function SnackbarTextDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    SnackbarTextDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-snackbar-text], mdc-snackbar-text'
                },] },
    ];
    /** @nocollapse */
    SnackbarTextDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    SnackbarTextDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-snackbar__text',] },],
    };
    return SnackbarTextDirective;
}());

var SnackbarActionWrapperDirective = (function () {
    function SnackbarActionWrapperDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    SnackbarActionWrapperDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: 'mdc-snackbar-action-wrapper'
                },] },
    ];
    /** @nocollapse */
    SnackbarActionWrapperDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    SnackbarActionWrapperDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-snackbar__action-wrapper',] },],
    };
    return SnackbarActionWrapperDirective;
}());

var SnackbarActionButtonDirective = (function () {
    function SnackbarActionButtonDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
        this.isButtonClass = true;
    }
    SnackbarActionButtonDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-snackbar-action-button]'
                },] },
    ];
    /** @nocollapse */
    SnackbarActionButtonDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    SnackbarActionButtonDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-snackbar__action-button',] },],
        'isButtonClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-button',] },],
    };
    return SnackbarActionButtonDirective;
}());

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var cssClasses$9 = {
  ROOT: 'mdc-snackbar',
  TEXT: 'mdc-snackbar__text',
  ACTION_WRAPPER: 'mdc-snackbar__action-wrapper',
  ACTION_BUTTON: 'mdc-snackbar__action-button',
  ACTIVE: 'mdc-snackbar--active',
  MULTILINE: 'mdc-snackbar--multiline',
  ACTION_ON_BOTTOM: 'mdc-snackbar--action-on-bottom'
};

var strings$9 = {
  TEXT_SELECTOR: '.mdc-snackbar__text',
  ACTION_WRAPPER_SELECTOR: '.mdc-snackbar__action-wrapper',
  ACTION_BUTTON_SELECTOR: '.mdc-snackbar__action-button'
};

var numbers$3 = {
  MESSAGE_TIMEOUT: 2750
};

var _createClass$26 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$26(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$20(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$20(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MDCSnackbarFoundation = function (_MDCFoundation) {
  _inherits$20(MDCSnackbarFoundation, _MDCFoundation);

  _createClass$26(MDCSnackbarFoundation, [{
    key: 'active',
    get: function get() {
      return this.active_;
    }
  }], [{
    key: 'cssClasses',
    get: function get() {
      return cssClasses$9;
    }
  }, {
    key: 'strings',
    get: function get() {
      return strings$9;
    }
  }, {
    key: 'defaultAdapter',
    get: function get() {
      return {
        addClass: function addClass() /* className: string */{},
        removeClass: function removeClass() /* className: string */{},
        setAriaHidden: function setAriaHidden() {},
        unsetAriaHidden: function unsetAriaHidden() {},
        setActionAriaHidden: function setActionAriaHidden() {},
        unsetActionAriaHidden: function unsetActionAriaHidden() {},
        setActionText: function setActionText() /* actionText: string */{},
        setMessageText: function setMessageText() /* message: string */{},
        setFocus: function setFocus() {},
        visibilityIsHidden: function visibilityIsHidden() {
          return (/* boolean */false
          );
        },
        registerCapturedBlurHandler: function registerCapturedBlurHandler() /* handler: EventListener */{},
        deregisterCapturedBlurHandler: function deregisterCapturedBlurHandler() /* handler: EventListener */{},
        registerVisibilityChangeHandler: function registerVisibilityChangeHandler() /* handler: EventListener */{},
        deregisterVisibilityChangeHandler: function deregisterVisibilityChangeHandler() /* handler: EventListener */{},
        registerCapturedInteractionHandler: function registerCapturedInteractionHandler() /* evtType: string, handler: EventListener */{},
        deregisterCapturedInteractionHandler: function deregisterCapturedInteractionHandler() /* evtType: string, handler: EventListener */{},
        registerActionClickHandler: function registerActionClickHandler() /* handler: EventListener */{},
        deregisterActionClickHandler: function deregisterActionClickHandler() /* handler: EventListener */{},
        registerTransitionEndHandler: function registerTransitionEndHandler() /* handler: EventListener */{},
        deregisterTransitionEndHandler: function deregisterTransitionEndHandler() /* handler: EventListener */{}
      };
    }
  }]);

  function MDCSnackbarFoundation(adapter) {
    _classCallCheck$26(this, MDCSnackbarFoundation);

    var _this = _possibleConstructorReturn$20(this, (MDCSnackbarFoundation.__proto__ || Object.getPrototypeOf(MDCSnackbarFoundation)).call(this, Object.assign(MDCSnackbarFoundation.defaultAdapter, adapter)));

    _this.active_ = false;
    _this.actionWasClicked_ = false;
    _this.dismissOnAction_ = true;
    _this.firstFocus_ = true;
    _this.pointerDownRecognized_ = false;
    _this.snackbarHasFocus_ = false;
    _this.snackbarData_ = null;
    _this.queue_ = [];
    _this.actionClickHandler_ = function () {
      _this.actionWasClicked_ = true;
      _this.invokeAction_();
    };
    _this.visibilitychangeHandler_ = function () {
      clearTimeout(_this.timeoutId_);
      _this.snackbarHasFocus_ = true;

      if (!_this.adapter_.visibilityIsHidden()) {
        setTimeout(_this.cleanup_.bind(_this), _this.snackbarData_.timeout || numbers$3.MESSAGE_TIMEOUT);
      }
    };
    _this.interactionHandler_ = function (evt) {
      if (evt.type == 'touchstart' || evt.type == 'mousedown') {
        _this.pointerDownRecognized_ = true;
      }
      _this.handlePossibleTabKeyboardFocus_(evt);

      if (evt.type == 'focus') {
        _this.pointerDownRecognized_ = false;
      }
    };
    _this.blurHandler_ = function () {
      clearTimeout(_this.timeoutId_);
      _this.snackbarHasFocus_ = false;
      _this.timeoutId_ = setTimeout(_this.cleanup_.bind(_this), _this.snackbarData_.timeout || numbers$3.MESSAGE_TIMEOUT);
    };
    return _this;
  }

  _createClass$26(MDCSnackbarFoundation, [{
    key: 'init',
    value: function init() {
      this.adapter_.registerActionClickHandler(this.actionClickHandler_);
      this.adapter_.setAriaHidden();
      this.adapter_.setActionAriaHidden();
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      var _this2 = this;

      this.adapter_.deregisterActionClickHandler(this.actionClickHandler_);
      this.adapter_.deregisterCapturedBlurHandler(this.blurHandler_);
      this.adapter_.deregisterVisibilityChangeHandler(this.visibilitychangeHandler_);
      ['touchstart', 'mousedown', 'focus'].forEach(function (evtType) {
        _this2.adapter_.deregisterCapturedInteractionHandler(evtType, _this2.interactionHandler_);
      });
    }
  }, {
    key: 'dismissesOnAction',
    value: function dismissesOnAction() {
      return this.dismissOnAction_;
    }
  }, {
    key: 'setDismissOnAction',
    value: function setDismissOnAction(dismissOnAction) {
      this.dismissOnAction_ = !!dismissOnAction;
    }
  }, {
    key: 'show',
    value: function show(data) {
      var _this3 = this;

      clearTimeout(this.timeoutId_);
      this.snackbarData_ = data;
      this.firstFocus_ = true;
      this.adapter_.registerVisibilityChangeHandler(this.visibilitychangeHandler_);
      this.adapter_.registerCapturedBlurHandler(this.blurHandler_);
      ['touchstart', 'mousedown', 'focus'].forEach(function (evtType) {
        _this3.adapter_.registerCapturedInteractionHandler(evtType, _this3.interactionHandler_);
      });

      if (!this.snackbarData_) {
        throw new Error('Please provide a data object with at least a message to display.');
      }
      if (!this.snackbarData_.message) {
        throw new Error('Please provide a message to be displayed.');
      }
      if (this.snackbarData_.actionHandler && !this.snackbarData_.actionText) {
        throw new Error('Please provide action text with the handler.');
      }
      if (this.active) {
        this.queue_.push(this.snackbarData_);
      }

      var ACTIVE = cssClasses$9.ACTIVE,
          MULTILINE = cssClasses$9.MULTILINE,
          ACTION_ON_BOTTOM = cssClasses$9.ACTION_ON_BOTTOM;


      this.adapter_.setMessageText(this.snackbarData_.message);

      if (this.snackbarData_.multiline) {
        this.adapter_.addClass(MULTILINE);
        if (this.snackbarData_.actionOnBottom) {
          this.adapter_.addClass(ACTION_ON_BOTTOM);
        }
      }

      if (this.snackbarData_.actionHandler) {
        this.adapter_.setActionText(this.snackbarData_.actionText);
        this.actionHandler_ = this.snackbarData_.actionHandler;
        this.setActionHidden_(false);
      } else {
        this.setActionHidden_(true);
        this.actionHandler_ = null;
        this.adapter_.setActionText(null);
      }

      this.active_ = true;
      this.adapter_.addClass(ACTIVE);
      this.adapter_.unsetAriaHidden();

      this.timeoutId_ = setTimeout(this.cleanup_.bind(this), this.snackbarData_.timeout || numbers$3.MESSAGE_TIMEOUT);
    }
  }, {
    key: 'handlePossibleTabKeyboardFocus_',
    value: function handlePossibleTabKeyboardFocus_() {
      var hijackFocus = this.firstFocus_ && !this.pointerDownRecognized_;

      if (hijackFocus) {
        this.setFocusOnAction_();
      }

      this.firstFocus_ = false;
    }
  }, {
    key: 'setFocusOnAction_',
    value: function setFocusOnAction_() {
      this.adapter_.setFocus();
      this.snackbarHasFocus_ = true;
      this.firstFocus_ = false;
    }
  }, {
    key: 'invokeAction_',
    value: function invokeAction_() {
      try {
        if (!this.actionHandler_) {
          return;
        }

        this.actionHandler_();
      } finally {
        if (this.dismissOnAction_) {
          this.cleanup_();
        }
      }
    }
  }, {
    key: 'cleanup_',
    value: function cleanup_() {
      var _this4 = this;

      var allowDismissal = !this.snackbarHasFocus_ || this.actionWasClicked_;

      if (allowDismissal) {
        var ACTIVE = cssClasses$9.ACTIVE,
            MULTILINE = cssClasses$9.MULTILINE,
            ACTION_ON_BOTTOM = cssClasses$9.ACTION_ON_BOTTOM;


        this.adapter_.removeClass(ACTIVE);

        var handler = function handler() {
          clearTimeout(_this4.timeoutId_);
          _this4.adapter_.deregisterTransitionEndHandler(handler);
          _this4.adapter_.removeClass(MULTILINE);
          _this4.adapter_.removeClass(ACTION_ON_BOTTOM);
          _this4.setActionHidden_(true);
          _this4.adapter_.setAriaHidden();
          _this4.active_ = false;
          _this4.snackbarHasFocus_ = false;
          _this4.showNext_();
        };

        this.adapter_.registerTransitionEndHandler(handler);
      }
    }
  }, {
    key: 'showNext_',
    value: function showNext_() {
      if (!this.queue_.length) {
        return;
      }
      this.show(this.queue_.shift());
    }
  }, {
    key: 'setActionHidden_',
    value: function setActionHidden_(isHidden) {
      if (isHidden) {
        this.adapter_.setActionAriaHidden();
      } else {
        this.adapter_.unsetActionAriaHidden();
      }
    }
  }]);

  return MDCSnackbarFoundation;
}(MDCFoundation);

var _createClass$25 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$25(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$19(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$19(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MDCSnackbar = function (_MDCComponent) {
  _inherits$19(MDCSnackbar, _MDCComponent);

  function MDCSnackbar() {
    _classCallCheck$25(this, MDCSnackbar);

    return _possibleConstructorReturn$19(this, (MDCSnackbar.__proto__ || Object.getPrototypeOf(MDCSnackbar)).apply(this, arguments));
  }

  _createClass$25(MDCSnackbar, [{
    key: 'show',
    value: function show(data) {
      this.foundation_.show(data);
    }
  }, {
    key: 'getDefaultFoundation',
    value: function getDefaultFoundation() {
      var _this2 = this;

      var _MDCSnackbarFoundatio = MDCSnackbarFoundation.strings,
          TEXT_SELECTOR = _MDCSnackbarFoundatio.TEXT_SELECTOR,
          ACTION_BUTTON_SELECTOR = _MDCSnackbarFoundatio.ACTION_BUTTON_SELECTOR;

      var getText = function getText() {
        return _this2.root_.querySelector(TEXT_SELECTOR);
      };
      var getActionButton = function getActionButton() {
        return _this2.root_.querySelector(ACTION_BUTTON_SELECTOR);
      };

      /* eslint brace-style: "off" */
      return new MDCSnackbarFoundation({
        addClass: function addClass(className) {
          return _this2.root_.classList.add(className);
        },
        removeClass: function removeClass(className) {
          return _this2.root_.classList.remove(className);
        },
        setAriaHidden: function setAriaHidden() {
          return _this2.root_.setAttribute('aria-hidden', 'true');
        },
        unsetAriaHidden: function unsetAriaHidden() {
          return _this2.root_.removeAttribute('aria-hidden');
        },
        setActionAriaHidden: function setActionAriaHidden() {
          return getActionButton().setAttribute('aria-hidden', 'true');
        },
        unsetActionAriaHidden: function unsetActionAriaHidden() {
          return getActionButton().removeAttribute('aria-hidden');
        },
        setActionText: function setActionText(text) {
          getActionButton().textContent = text;
        },
        setMessageText: function setMessageText(text) {
          getText().textContent = text;
        },
        setFocus: function setFocus() {
          return getActionButton().focus();
        },
        visibilityIsHidden: function visibilityIsHidden() {
          return document.hidden;
        },
        registerCapturedBlurHandler: function registerCapturedBlurHandler(handler) {
          return getActionButton().addEventListener('blur', handler, true);
        },
        deregisterCapturedBlurHandler: function deregisterCapturedBlurHandler(handler) {
          return getActionButton().removeEventListener('blur', handler, true);
        },
        registerVisibilityChangeHandler: function registerVisibilityChangeHandler(handler) {
          return document.addEventListener('visibilitychange', handler);
        },
        deregisterVisibilityChangeHandler: function deregisterVisibilityChangeHandler(handler) {
          return document.removeEventListener('visibilitychange', handler);
        },
        registerCapturedInteractionHandler: function registerCapturedInteractionHandler(evt, handler) {
          return document.body.addEventListener(evt, handler, true);
        },
        deregisterCapturedInteractionHandler: function deregisterCapturedInteractionHandler(evt, handler) {
          return document.body.removeEventListener(evt, handler, true);
        },
        registerActionClickHandler: function registerActionClickHandler(handler) {
          return getActionButton().addEventListener('click', handler);
        },
        deregisterActionClickHandler: function deregisterActionClickHandler(handler) {
          return getActionButton().removeEventListener('click', handler);
        },
        registerTransitionEndHandler: function registerTransitionEndHandler(handler) {
          return _this2.root_.addEventListener(getCorrectEventName(window, 'transitionend'), handler);
        },
        deregisterTransitionEndHandler: function deregisterTransitionEndHandler(handler) {
          return _this2.root_.removeEventListener(getCorrectEventName(window, 'transitionend'), handler);
        }
      });
    }
  }, {
    key: 'dismissesOnAction',
    get: function get() {
      return this.foundation_.dismissesOnAction();
    },
    set: function set(dismissesOnAction) {
      this.foundation_.setDismissOnAction(dismissesOnAction);
    }
  }], [{
    key: 'attachTo',
    value: function attachTo(root) {
      return new MDCSnackbar(root);
    }
  }]);

  return MDCSnackbar;
}(MDCComponent);

var SnackbarComponent = (function () {
    function SnackbarComponent(_renderer, _root, _registry) {
        var _this = this;
        this._renderer = _renderer;
        this._root = _root;
        this._registry = _registry;
        this.isHostClass = true;
        this.ariaLive = 'assertive';
        this.ariaAtomic = 'true';
        this.ariaHidden = 'true';
        this._mdcAdapter = {
            addClass: function (className) {
                _this._renderer.addClass(_this._root.nativeElement, className);
            },
            removeClass: function (className) {
                _this._renderer.removeClass(_this._root.nativeElement, className);
            },
            setAriaHidden: function () {
                _this._renderer.setAttribute(_this._root.nativeElement, 'aria-hidden', 'true');
            },
            unsetAriaHidden: function () {
                _this._renderer.removeAttribute(_this._root.nativeElement, 'aria-hidden');
            },
            setActionAriaHidden: function () {
                if (_this.actionButton) {
                    _this._renderer.setAttribute(_this.actionButton.elementRef.nativeElement, 'aria-hidden', 'true');
                }
            },
            unsetActionAriaHidden: function () {
                if (_this.actionButton) {
                    _this._renderer.removeAttribute(_this.actionButton.elementRef.nativeElement, 'aria-hidden');
                }
            },
            setMessageText: function (message) {
                if (_this.snackText) {
                    _this.snackText.elementRef.nativeElement.textContent = message;
                }
            },
            setActionText: function (actionText) {
                if (_this.actionButton) {
                    _this.actionButton.elementRef.nativeElement.textContent = actionText;
                }
            },
            setFocus: function () {
                if (isBrowser()) {
                    _this.actionButton.elementRef.nativeElement.focus();
                }
            },
            visibilityIsHidden: function () {
                return isBrowser ? document.hidden : false;
            },
            registerCapturedBlurHandler: function (handler) {
                if (_this._root && _this.actionButton) {
                    _this._registry.listen_(_this._renderer, 'blur', handler, _this.actionButton.elementRef);
                }
            },
            deregisterCapturedBlurHandler: function (handler) {
                if (_this._root) {
                    _this._registry.unlisten_('blur', handler);
                }
            },
            registerVisibilityChangeHandler: function (handler) {
                if (_this._root && isBrowser()) {
                    _this._registry.listen_(_this._renderer, 'visibilitychange', handler, _this._root);
                }
            },
            deregisterVisibilityChangeHandler: function (handler) {
                if (_this._root && isBrowser()) {
                    _this._registry.unlisten_('visibilitychange', handler);
                }
            },
            registerCapturedInteractionHandler: function (evtType, handler) {
                if (isBrowser()) {
                    _this._registry.listen_(_this._renderer, evtType, handler, 'body');
                }
            },
            deregisterCapturedInteractionHandler: function (evtType, handler) {
                if (isBrowser()) {
                    _this._registry.unlisten_(evtType, handler);
                }
            },
            registerActionClickHandler: function (handler) {
                if (_this._root && _this.actionButton) {
                    _this._registry.listen_(_this._renderer, 'click', handler, _this.actionButton.elementRef);
                }
            },
            deregisterActionClickHandler: function (handler) {
                _this._registry.unlisten_('click', handler);
            },
            registerTransitionEndHandler: function (handler) {
                if (_this._root && isBrowser()) {
                    _this._registry.listen_(_this._renderer, getCorrectEventName(window, 'transitionend'), handler, _this._root);
                }
            },
            deregisterTransitionEndHandler: function (handler) {
                if (isBrowser()) {
                    _this._registry.unlisten_(getCorrectEventName(window, 'transitionend'), handler);
                }
            }
        };
        this._foundation = new MDCSnackbarFoundation(this._mdcAdapter);
    }
    Object.defineProperty(SnackbarComponent.prototype, "dismissOnAction", {
        get: function () { return this._foundation.dismissesOnAction(); },
        set: function (value) {
            this._foundation.setDismissOnAction(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SnackbarComponent.prototype, "classAlignStart", {
        get: function () {
            return this.alignStart ? 'mdc-snackbar--align-start' : '';
        },
        enumerable: true,
        configurable: true
    });
    SnackbarComponent.prototype.ngAfterViewInit = function () {
        this._foundation.init();
    };
    SnackbarComponent.prototype.ngOnDestroy = function () {
        this._foundation.destroy();
    };
    SnackbarComponent.prototype.show = function (data) {
        if (data) {
            if (!data.actionHandler && data.actionText) {
                data.actionHandler = function () { };
            }
            if (!data.actionText) {
                data.actionHandler = null;
            }
            this._foundation.show(data);
        }
    };
    SnackbarComponent.decorators = [
        { type: _angular_core.Component, args: [{
                    selector: 'mdc-snackbar',
                    template: "\n  <mdc-snackbar-text></mdc-snackbar-text>\n  <mdc-snackbar-action-wrapper>\n    <button mdc-snackbar-action-button></button>\n  </mdc-snackbar-action-wrapper>\n  ",
                    encapsulation: _angular_core.ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    SnackbarComponent.ctorParameters = function () { return [
        { type: _angular_core.Renderer2, },
        { type: _angular_core.ElementRef, },
        { type: EventRegistry, },
    ]; };
    SnackbarComponent.propDecorators = {
        'alignStart': [{ type: _angular_core.Input },],
        'dismissOnAction': [{ type: _angular_core.Input },],
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-snackbar',] },],
        'ariaLive': [{ type: _angular_core.HostBinding, args: ['attr.aria-live',] },],
        'ariaAtomic': [{ type: _angular_core.HostBinding, args: ['attr.aria-atomic',] },],
        'ariaHidden': [{ type: _angular_core.HostBinding, args: ['attr.aria-hidden',] },],
        'classAlignStart': [{ type: _angular_core.HostBinding, args: ['class.mdc-snackbar--align-start',] },],
        'snackText': [{ type: _angular_core.ViewChild, args: [SnackbarTextDirective,] },],
        'actionWrapper': [{ type: _angular_core.ViewChild, args: [SnackbarActionWrapperDirective,] },],
        'actionButton': [{ type: _angular_core.ViewChild, args: [SnackbarActionButtonDirective,] },],
    };
    return SnackbarComponent;
}());

var SNACKBAR_COMPONENTS = [
    SnackbarComponent,
    SnackbarTextDirective,
    SnackbarActionWrapperDirective,
    SnackbarActionButtonDirective
];
var SnackbarModule = (function () {
    function SnackbarModule() {
    }
    SnackbarModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    exports: [SNACKBAR_COMPONENTS],
                    declarations: [SNACKBAR_COMPONENTS],
                },] },
    ];
    /** @nocollapse */
    SnackbarModule.ctorParameters = function () { return []; };
    return SnackbarModule;
}());

var SwitchModule = (function () {
    function SwitchModule() {
    }
    SwitchModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    exports: [SwitchComponent],
                    declarations: [SwitchComponent],
                },] },
    ];
    /** @nocollapse */
    SwitchModule.ctorParameters = function () { return []; };
    return SwitchModule;
}());

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var cssClasses$10 = {
  ACTIVE: 'mdc-tab--active'
};

var strings$10 = {
  SELECTED_EVENT: 'MDCTab:selected'
};

var _createClass$28 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$28(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$22(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$22(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MDCTabFoundation = function (_MDCFoundation) {
  _inherits$22(MDCTabFoundation, _MDCFoundation);

  _createClass$28(MDCTabFoundation, null, [{
    key: 'cssClasses',
    get: function get() {
      return cssClasses$10;
    }
  }, {
    key: 'strings',
    get: function get() {
      return strings$10;
    }
  }, {
    key: 'defaultAdapter',
    get: function get() {
      return {
        addClass: function addClass() /* className: string */{},
        removeClass: function removeClass() /* className: string */{},
        registerInteractionHandler: function registerInteractionHandler() /* type: string, handler: EventListener */{},
        deregisterInteractionHandler: function deregisterInteractionHandler() /* type: string, handler: EventListener */{},
        getOffsetWidth: function getOffsetWidth() {
          return (/* number */0
          );
        },
        getOffsetLeft: function getOffsetLeft() {
          return (/* number */0
          );
        },
        notifySelected: function notifySelected() {}
      };
    }
  }]);

  function MDCTabFoundation() {
    var adapter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck$28(this, MDCTabFoundation);

    var _this = _possibleConstructorReturn$22(this, (MDCTabFoundation.__proto__ || Object.getPrototypeOf(MDCTabFoundation)).call(this, Object.assign(MDCTabFoundation.defaultAdapter, adapter)));

    _this.computedWidth_ = 0;
    _this.computedLeft_ = 0;
    _this.isActive_ = false;
    _this.preventDefaultOnClick_ = false;

    _this.clickHandler_ = function (evt) {
      if (_this.preventDefaultOnClick_) {
        evt.preventDefault();
      }
      _this.adapter_.notifySelected();
    };

    _this.keydownHandler_ = function (evt) {
      if (evt.key && evt.key === 'Enter' || evt.keyCode === 13) {
        _this.adapter_.notifySelected();
      }
    };
    return _this;
  }

  _createClass$28(MDCTabFoundation, [{
    key: 'init',
    value: function init() {
      this.adapter_.registerInteractionHandler('click', this.clickHandler_);
      this.adapter_.registerInteractionHandler('keydown', this.keydownHandler_);
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      this.adapter_.deregisterInteractionHandler('click', this.clickHandler_);
      this.adapter_.deregisterInteractionHandler('keydown', this.keydownHandler_);
    }
  }, {
    key: 'getComputedWidth',
    value: function getComputedWidth() {
      return this.computedWidth_;
    }
  }, {
    key: 'getComputedLeft',
    value: function getComputedLeft() {
      return this.computedLeft_;
    }
  }, {
    key: 'isActive',
    value: function isActive() {
      return this.isActive_;
    }
  }, {
    key: 'setActive',
    value: function setActive(isActive) {
      this.isActive_ = isActive;
      if (this.isActive_) {
        this.adapter_.addClass(cssClasses$10.ACTIVE);
      } else {
        this.adapter_.removeClass(cssClasses$10.ACTIVE);
      }
    }
  }, {
    key: 'preventsDefaultOnClick',
    value: function preventsDefaultOnClick() {
      return this.preventDefaultOnClick_;
    }
  }, {
    key: 'setPreventDefaultOnClick',
    value: function setPreventDefaultOnClick(preventDefaultOnClick) {
      this.preventDefaultOnClick_ = preventDefaultOnClick;
    }
  }, {
    key: 'measureSelf',
    value: function measureSelf() {
      this.computedWidth_ = this.adapter_.getOffsetWidth();
      this.computedLeft_ = this.adapter_.getOffsetLeft();
    }
  }]);

  return MDCTabFoundation;
}(MDCFoundation);

var _get$4 = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _createClass$27 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$27(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$21(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$21(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MDCTab = function (_MDCComponent) {
  _inherits$21(MDCTab, _MDCComponent);

  _createClass$27(MDCTab, [{
    key: 'computedWidth',
    get: function get() {
      return this.foundation_.getComputedWidth();
    }
  }, {
    key: 'computedLeft',
    get: function get() {
      return this.foundation_.getComputedLeft();
    }
  }, {
    key: 'isActive',
    get: function get() {
      return this.foundation_.isActive();
    },
    set: function set(isActive) {
      this.foundation_.setActive(isActive);
    }
  }, {
    key: 'preventDefaultOnClick',
    get: function get() {
      return this.foundation_.preventsDefaultOnClick();
    },
    set: function set(preventDefaultOnClick) {
      this.foundation_.setPreventDefaultOnClick(preventDefaultOnClick);
    }
  }], [{
    key: 'attachTo',
    value: function attachTo(root) {
      return new MDCTab(root);
    }
  }]);

  function MDCTab() {
    var _ref;

    _classCallCheck$27(this, MDCTab);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = _possibleConstructorReturn$21(this, (_ref = MDCTab.__proto__ || Object.getPrototypeOf(MDCTab)).call.apply(_ref, [this].concat(args)));

    _this.ripple_ = MDCRipple.attachTo(_this.root_);
    return _this;
  }

  _createClass$27(MDCTab, [{
    key: 'destroy',
    value: function destroy() {
      this.ripple_.destroy();
      _get$4(MDCTab.prototype.__proto__ || Object.getPrototypeOf(MDCTab.prototype), 'destroy', this).call(this);
    }
  }, {
    key: 'getDefaultFoundation',
    value: function getDefaultFoundation() {
      var _this2 = this;

      return new MDCTabFoundation({
        addClass: function addClass(className) {
          return _this2.root_.classList.add(className);
        },
        removeClass: function removeClass(className) {
          return _this2.root_.classList.remove(className);
        },
        registerInteractionHandler: function registerInteractionHandler(type, handler) {
          return _this2.root_.addEventListener(type, handler);
        },
        deregisterInteractionHandler: function deregisterInteractionHandler(type, handler) {
          return _this2.root_.removeEventListener(type, handler);
        },
        getOffsetWidth: function getOffsetWidth() {
          return _this2.root_.offsetWidth;
        },
        getOffsetLeft: function getOffsetLeft() {
          return _this2.root_.offsetLeft;
        },
        notifySelected: function notifySelected() {
          return _this2.emit(MDCTabFoundation.strings.SELECTED_EVENT, { tab: _this2 }, true);
        }
      });
    }
  }, {
    key: 'initialSyncWithDOM',
    value: function initialSyncWithDOM() {
      this.isActive = this.root_.classList.contains(cssClasses$10.ACTIVE);
    }
  }, {
    key: 'measureSelf',
    value: function measureSelf() {
      this.foundation_.measureSelf();
    }
  }]);

  return MDCTab;
}(MDCComponent);

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var cssClasses$11 = {
  UPGRADED: 'mdc-tab-bar-upgraded'
};

var strings$11 = {
  TAB_SELECTOR: '.mdc-tab',
  INDICATOR_SELECTOR: '.mdc-tab-bar__indicator',
  CHANGE_EVENT: 'MDCTabBar:change'
};

var _createClass$30 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$30(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$24(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$24(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MDCTabBarFoundation = function (_MDCFoundation) {
  _inherits$24(MDCTabBarFoundation, _MDCFoundation);

  _createClass$30(MDCTabBarFoundation, null, [{
    key: 'cssClasses',
    get: function get() {
      return cssClasses$11;
    }
  }, {
    key: 'strings',
    get: function get() {
      return strings$11;
    }
  }, {
    key: 'defaultAdapter',
    get: function get() {
      return {
        addClass: function addClass() /* className: string */{},
        removeClass: function removeClass() /* className: string */{},
        bindOnMDCTabSelectedEvent: function bindOnMDCTabSelectedEvent() {},
        unbindOnMDCTabSelectedEvent: function unbindOnMDCTabSelectedEvent() {},
        registerResizeHandler: function registerResizeHandler() /* handler: EventListener */{},
        deregisterResizeHandler: function deregisterResizeHandler() /* handler: EventListener */{},
        getOffsetWidth: function getOffsetWidth() {
          return (/* number */0
          );
        },
        setStyleForIndicator: function setStyleForIndicator() /* propertyName: string, value: string */{},
        getOffsetWidthForIndicator: function getOffsetWidthForIndicator() {
          return (/* number */0
          );
        },
        notifyChange: function notifyChange() /* evtData: {activeTabIndex: number} */{},
        getNumberOfTabs: function getNumberOfTabs() {
          return (/* number */0
          );
        },
        isTabActiveAtIndex: function isTabActiveAtIndex() {
          return (/* index: number */ /* boolean */false
          );
        },
        setTabActiveAtIndex: function setTabActiveAtIndex() /* index: number, isActive: true */{},
        isDefaultPreventedOnClickForTabAtIndex: function isDefaultPreventedOnClickForTabAtIndex() {
          return (/* index: number */ /* boolean */false
          );
        },
        setPreventDefaultOnClickForTabAtIndex: function setPreventDefaultOnClickForTabAtIndex() /* index: number, preventDefaultOnClick: boolean */{},
        measureTabAtIndex: function measureTabAtIndex() /* index: number */{},
        getComputedWidthForTabAtIndex: function getComputedWidthForTabAtIndex() {
          return (/* index: number */ /* number */0
          );
        },
        getComputedLeftForTabAtIndex: function getComputedLeftForTabAtIndex() {
          return (/* index: number */ /* number */0
          );
        }
      };
    }
  }]);

  function MDCTabBarFoundation(adapter) {
    _classCallCheck$30(this, MDCTabBarFoundation);

    var _this = _possibleConstructorReturn$24(this, (MDCTabBarFoundation.__proto__ || Object.getPrototypeOf(MDCTabBarFoundation)).call(this, Object.assign(MDCTabBarFoundation.defaultAdapter, adapter)));

    _this.isIndicatorShown_ = false;
    _this.computedWidth_ = 0;
    _this.computedLeft_ = 0;
    _this.activeTabIndex_ = 0;
    _this.layoutFrame_ = 0;
    _this.resizeHandler_ = function () {
      return _this.layout();
    };
    return _this;
  }

  _createClass$30(MDCTabBarFoundation, [{
    key: 'init',
    value: function init() {
      this.adapter_.addClass(cssClasses$11.UPGRADED);
      this.adapter_.bindOnMDCTabSelectedEvent();
      this.adapter_.registerResizeHandler(this.resizeHandler_);
      var activeTabIndex = this.findActiveTabIndex_();
      if (activeTabIndex >= 0) {
        this.activeTabIndex_ = activeTabIndex;
      }
      this.layout();
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      this.adapter_.removeClass(cssClasses$11.UPGRADED);
      this.adapter_.unbindOnMDCTabSelectedEvent();
      this.adapter_.deregisterResizeHandler(this.resizeHandler_);
    }
  }, {
    key: 'layoutInternal_',
    value: function layoutInternal_() {
      var _this2 = this;

      this.forEachTabIndex_(function (index) {
        return _this2.adapter_.measureTabAtIndex(index);
      });
      this.computedWidth_ = this.adapter_.getOffsetWidth();
      this.layoutIndicator_();
    }
  }, {
    key: 'layoutIndicator_',
    value: function layoutIndicator_() {
      var isIndicatorFirstRender = !this.isIndicatorShown_;

      // Ensure that indicator appears in the right position immediately for correct first render.
      if (isIndicatorFirstRender) {
        this.adapter_.setStyleForIndicator('transition', 'none');
      }

      var translateAmtForActiveTabLeft = this.adapter_.getComputedLeftForTabAtIndex(this.activeTabIndex_);
      var scaleAmtForActiveTabWidth = this.adapter_.getComputedWidthForTabAtIndex(this.activeTabIndex_) / this.adapter_.getOffsetWidth();

      var transformValue = 'translateX(' + translateAmtForActiveTabLeft + 'px) scale(' + scaleAmtForActiveTabWidth + ', 1)';
      this.adapter_.setStyleForIndicator(getCorrectPropertyName(window, 'transform'), transformValue);

      if (isIndicatorFirstRender) {
        // Force layout so that transform styles to take effect.
        this.adapter_.getOffsetWidthForIndicator();
        this.adapter_.setStyleForIndicator('transition', '');
        this.adapter_.setStyleForIndicator('visibility', 'visible');
        this.isIndicatorShown_ = true;
      }
    }
  }, {
    key: 'findActiveTabIndex_',
    value: function findActiveTabIndex_() {
      var _this3 = this;

      var activeTabIndex = -1;
      this.forEachTabIndex_(function (index) {
        if (_this3.adapter_.isTabActiveAtIndex(index)) {
          activeTabIndex = index;
          return true;
        }
      });
      return activeTabIndex;
    }
  }, {
    key: 'forEachTabIndex_',
    value: function forEachTabIndex_(iterator) {
      var numTabs = this.adapter_.getNumberOfTabs();
      for (var index = 0; index < numTabs; index++) {
        var shouldBreak = iterator(index);
        if (shouldBreak) {
          break;
        }
      }
    }
  }, {
    key: 'layout',
    value: function layout() {
      var _this4 = this;

      if (this.layoutFrame_) {
        cancelAnimationFrame(this.layoutFrame_);
      }

      this.layoutFrame_ = requestAnimationFrame(function () {
        _this4.layoutInternal_();
        _this4.layoutFrame_ = 0;
      });
    }
  }, {
    key: 'switchToTabAtIndex',
    value: function switchToTabAtIndex(index, shouldNotify) {
      var _this5 = this;

      if (index === this.activeTabIndex_) {
        return;
      }

      if (index < 0 || index >= this.adapter_.getNumberOfTabs()) {
        throw new Error('Out of bounds index specified for tab: ' + index);
      }

      var prevActiveTabIndex = this.activeTabIndex_;
      this.activeTabIndex_ = index;
      requestAnimationFrame(function () {
        if (prevActiveTabIndex >= 0) {
          _this5.adapter_.setTabActiveAtIndex(prevActiveTabIndex, false);
        }
        _this5.adapter_.setTabActiveAtIndex(_this5.activeTabIndex_, true);
        _this5.layoutIndicator_();
        if (shouldNotify) {
          _this5.adapter_.notifyChange({ activeTabIndex: _this5.activeTabIndex_ });
        }
      });
    }
  }, {
    key: 'getActiveTabIndex',
    value: function getActiveTabIndex() {
      return this.findActiveTabIndex_();
    }
  }]);

  return MDCTabBarFoundation;
}(MDCFoundation);

var _createClass$29 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$29(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$23(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$23(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MDCTabBar = function (_MDCComponent) {
  _inherits$23(MDCTabBar, _MDCComponent);

  function MDCTabBar() {
    _classCallCheck$29(this, MDCTabBar);

    return _possibleConstructorReturn$23(this, (MDCTabBar.__proto__ || Object.getPrototypeOf(MDCTabBar)).apply(this, arguments));
  }

  _createClass$29(MDCTabBar, [{
    key: 'initialize',
    value: function initialize() {
      var _this2 = this;

      var tabFactory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (el) {
        return new MDCTab(el);
      };

      this.indicator_ = this.root_.querySelector(MDCTabBarFoundation.strings.INDICATOR_SELECTOR);
      this.tabs_ = this.gatherTabs_(tabFactory);
      this.tabSelectedHandler_ = function (_ref) {
        var detail = _ref.detail;
        var tab = detail.tab;

        _this2.setActiveTab_(tab, true);
      };
    }
  }, {
    key: 'getDefaultFoundation',
    value: function getDefaultFoundation() {
      var _this3 = this;

      return new MDCTabBarFoundation({
        addClass: function addClass(className) {
          return _this3.root_.classList.add(className);
        },
        removeClass: function removeClass(className) {
          return _this3.root_.classList.remove(className);
        },
        bindOnMDCTabSelectedEvent: function bindOnMDCTabSelectedEvent() {
          return _this3.listen(MDCTabFoundation.strings.SELECTED_EVENT, _this3.tabSelectedHandler_);
        },
        unbindOnMDCTabSelectedEvent: function unbindOnMDCTabSelectedEvent() {
          return _this3.unlisten(MDCTabFoundation.strings.SELECTED_EVENT, _this3.tabSelectedHandler_);
        },
        registerResizeHandler: function registerResizeHandler(handler) {
          return window.addEventListener('resize', handler);
        },
        deregisterResizeHandler: function deregisterResizeHandler(handler) {
          return window.removeEventListener('resize', handler);
        },
        getOffsetWidth: function getOffsetWidth() {
          return _this3.root_.offsetWidth;
        },
        setStyleForIndicator: function setStyleForIndicator(propertyName, value) {
          return _this3.indicator_.style.setProperty(propertyName, value);
        },
        getOffsetWidthForIndicator: function getOffsetWidthForIndicator() {
          return _this3.indicator_.offsetWidth;
        },
        notifyChange: function notifyChange(evtData) {
          return _this3.emit(MDCTabBarFoundation.strings.CHANGE_EVENT, evtData);
        },
        getNumberOfTabs: function getNumberOfTabs() {
          return _this3.tabs.length;
        },
        isTabActiveAtIndex: function isTabActiveAtIndex(index) {
          return _this3.tabs[index].isActive;
        },
        setTabActiveAtIndex: function setTabActiveAtIndex(index, isActive) {
          _this3.tabs[index].isActive = isActive;
        },
        isDefaultPreventedOnClickForTabAtIndex: function isDefaultPreventedOnClickForTabAtIndex(index) {
          return _this3.tabs[index].preventDefaultOnClick;
        },
        setPreventDefaultOnClickForTabAtIndex: function setPreventDefaultOnClickForTabAtIndex(index, preventDefaultOnClick) {
          _this3.tabs[index].preventDefaultOnClick = preventDefaultOnClick;
        },
        measureTabAtIndex: function measureTabAtIndex(index) {
          return _this3.tabs[index].measureSelf();
        },
        getComputedWidthForTabAtIndex: function getComputedWidthForTabAtIndex(index) {
          return _this3.tabs[index].computedWidth;
        },
        getComputedLeftForTabAtIndex: function getComputedLeftForTabAtIndex(index) {
          return _this3.tabs[index].computedLeft;
        }
      });
    }
  }, {
    key: 'gatherTabs_',
    value: function gatherTabs_(tabFactory) {
      var tabElements = [].slice.call(this.root_.querySelectorAll(MDCTabBarFoundation.strings.TAB_SELECTOR));
      return tabElements.map(function (el) {
        return tabFactory(el);
      });
    }
  }, {
    key: 'setActiveTabIndex_',
    value: function setActiveTabIndex_(activeTabIndex, notifyChange) {
      this.foundation_.switchToTabAtIndex(activeTabIndex, notifyChange);
    }
  }, {
    key: 'layout',
    value: function layout() {
      this.foundation_.layout();
    }
  }, {
    key: 'setActiveTab_',
    value: function setActiveTab_(activeTab, notifyChange) {
      var indexOfTab = this.tabs.indexOf(activeTab);
      if (indexOfTab < 0) {
        throw new Error('Invalid tab component given as activeTab: Tab not found within this component\'s tab list');
      }
      this.setActiveTabIndex_(indexOfTab, notifyChange);
    }
  }, {
    key: 'tabs',
    get: function get() {
      return this.tabs_;
    }
  }, {
    key: 'activeTab',
    get: function get() {
      var activeIndex = this.foundation_.getActiveTabIndex();
      return this.tabs[activeIndex];
    },
    set: function set(tab) {
      this.setActiveTab_(tab, false);
    }
  }, {
    key: 'activeTabIndex',
    get: function get() {
      return this.foundation_.getActiveTabIndex();
    },
    set: function set(index) {
      this.setActiveTabIndex_(index, false);
    }
  }], [{
    key: 'attachTo',
    value: function attachTo(root) {
      return new MDCTabBar(root);
    }
  }]);

  return MDCTabBar;
}(MDCComponent);

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var cssClasses$12 = {
  INDICATOR_FORWARD: 'mdc-tab-bar-scroller__indicator--forward',
  INDICATOR_BACK: 'mdc-tab-bar-scroller__indicator--back',
  INDICATOR_ENABLED: 'mdc-tab-bar-scroller__indicator--enabled',
  TAB: 'mdc-tab'
};

var strings$12 = {
  FRAME_SELECTOR: '.mdc-tab-bar-scroller__scroll-frame',
  TABS_SELECTOR: '.mdc-tab-bar-scroller__scroll-frame__tabs',
  TAB_SELECTOR: '.mdc-tab',
  INDICATOR_FORWARD_SELECTOR: '.mdc-tab-bar-scroller__indicator--forward',
  INDICATOR_BACK_SELECTOR: '.mdc-tab-bar-scroller__indicator--back'
};

var _createClass$32 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$32(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$26(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$26(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MDCTabBarScrollerFoundation = function (_MDCFoundation) {
  _inherits$26(MDCTabBarScrollerFoundation, _MDCFoundation);

  _createClass$32(MDCTabBarScrollerFoundation, null, [{
    key: 'cssClasses',
    get: function get() {
      return cssClasses$12;
    }
  }, {
    key: 'strings',
    get: function get() {
      return strings$12;
    }
  }, {
    key: 'defaultAdapter',
    get: function get() {
      return {
        addClass: function addClass() /* className: string */{},
        removeClass: function removeClass() /* className: string */{},
        eventTargetHasClass: function eventTargetHasClass() {
          return (/* target: EventTarget, className: string */ /* boolean */false
          );
        },
        addClassToForwardIndicator: function addClassToForwardIndicator() /* className: string */{},
        removeClassFromForwardIndicator: function removeClassFromForwardIndicator() /* className: string */{},
        addClassToBackIndicator: function addClassToBackIndicator() /* className: string */{},
        removeClassFromBackIndicator: function removeClassFromBackIndicator() /* className: string */{},
        isRTL: function isRTL() {
          return (/* boolean */false
          );
        },
        registerBackIndicatorClickHandler: function registerBackIndicatorClickHandler() /* handler: EventListener */{},
        deregisterBackIndicatorClickHandler: function deregisterBackIndicatorClickHandler() /* handler: EventListener */{},
        registerForwardIndicatorClickHandler: function registerForwardIndicatorClickHandler() /* handler: EventListener */{},
        deregisterForwardIndicatorClickHandler: function deregisterForwardIndicatorClickHandler() /* handler: EventListener */{},
        registerCapturedInteractionHandler: function registerCapturedInteractionHandler() /* evt: string, handler: EventListener */{},
        deregisterCapturedInteractionHandler: function deregisterCapturedInteractionHandler() /* evt: string, handler: EventListener */{},
        registerWindowResizeHandler: function registerWindowResizeHandler() /* handler: EventListener */{},
        deregisterWindowResizeHandler: function deregisterWindowResizeHandler() /* handler: EventListener */{},
        getNumberOfTabs: function getNumberOfTabs() {
          return (/* number */0
          );
        },
        getComputedWidthForTabAtIndex: function getComputedWidthForTabAtIndex() {
          return (/* number */0
          );
        },
        getComputedLeftForTabAtIndex: function getComputedLeftForTabAtIndex() {
          return (/* number */0
          );
        },
        getOffsetWidthForScrollFrame: function getOffsetWidthForScrollFrame() {
          return (/* number */0
          );
        },
        getScrollLeftForScrollFrame: function getScrollLeftForScrollFrame() {
          return (/* number */0
          );
        },
        setScrollLeftForScrollFrame: function setScrollLeftForScrollFrame() /* scrollLeftAmount: number */{},
        getOffsetWidthForTabBar: function getOffsetWidthForTabBar() {
          return (/* number */0
          );
        },
        setTransformStyleForTabBar: function setTransformStyleForTabBar() /* value: string */{},
        getOffsetLeftForEventTarget: function getOffsetLeftForEventTarget() {
          return (/* target: EventTarget */ /* number */0
          );
        },
        getOffsetWidthForEventTarget: function getOffsetWidthForEventTarget() {
          return (/* target: EventTarget */ /* number */0
          );
        }
      };
    }
  }]);

  function MDCTabBarScrollerFoundation(adapter) {
    _classCallCheck$32(this, MDCTabBarScrollerFoundation);

    var _this = _possibleConstructorReturn$26(this, (MDCTabBarScrollerFoundation.__proto__ || Object.getPrototypeOf(MDCTabBarScrollerFoundation)).call(this, Object.assign(MDCTabBarScrollerFoundation.defaultAdapter, adapter)));

    _this.pointerDownRecognized_ = false;
    _this.currentTranslateOffset_ = 0;
    _this.focusedTarget_ = null;
    _this.layoutFrame_ = 0;
    _this.scrollFrameScrollLeft_ = 0;
    _this.forwardIndicatorClickHandler_ = function (evt) {
      return _this.scrollForward(evt);
    };
    _this.backIndicatorClickHandler_ = function (evt) {
      return _this.scrollBack(evt);
    };
    _this.resizeHandler_ = function () {
      return _this.layout();
    };
    _this.interactionHandler_ = function (evt) {
      if (evt.type == 'touchstart' || evt.type == 'mousedown') {
        _this.pointerDownRecognized_ = true;
      }
      _this.handlePossibleTabKeyboardFocus_(evt);

      if (evt.type == 'focus') {
        _this.pointerDownRecognized_ = false;
      }
    };
    return _this;
  }

  _createClass$32(MDCTabBarScrollerFoundation, [{
    key: 'init',
    value: function init() {
      var _this2 = this;

      this.adapter_.registerBackIndicatorClickHandler(this.backIndicatorClickHandler_);
      this.adapter_.registerForwardIndicatorClickHandler(this.forwardIndicatorClickHandler_);
      this.adapter_.registerWindowResizeHandler(this.resizeHandler_);
      ['touchstart', 'mousedown', 'focus'].forEach(function (evtType) {
        _this2.adapter_.registerCapturedInteractionHandler(evtType, _this2.interactionHandler_);
      });
      this.layout();
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      var _this3 = this;

      this.adapter_.deregisterBackIndicatorClickHandler(this.backIndicatorClickHandler_);
      this.adapter_.deregisterForwardIndicatorClickHandler(this.forwardIndicatorClickHandler_);
      this.adapter_.deregisterWindowResizeHandler(this.resizeHandler_);
      ['touchstart', 'mousedown', 'focus'].forEach(function (evtType) {
        _this3.adapter_.deregisterCapturedInteractionHandler(evtType, _this3.interactionHandler_);
      });
    }
  }, {
    key: 'scrollBack',
    value: function scrollBack() {
      var evt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      if (evt) {
        evt.preventDefault();
      }

      var tabWidthAccumulator = 0;
      var scrollTargetIndex = 0;

      for (var i = this.adapter_.getNumberOfTabs() - 1; i > 0; i--) {
        var tabOffsetLeft = this.adapter_.getComputedLeftForTabAtIndex(i);
        var tabBarWidthLessTabOffsetLeft = this.adapter_.getOffsetWidthForTabBar() - tabOffsetLeft;

        var tabIsNotOccluded = tabOffsetLeft > this.currentTranslateOffset_;
        if (this.isRTL_()) {
          tabIsNotOccluded = tabBarWidthLessTabOffsetLeft > this.currentTranslateOffset_;
        }

        if (tabIsNotOccluded) {
          continue;
        }

        tabWidthAccumulator += this.adapter_.getComputedWidthForTabAtIndex(i);

        var scrollTargetDetermined = tabWidthAccumulator > this.adapter_.getOffsetWidthForScrollFrame();
        if (scrollTargetDetermined) {
          scrollTargetIndex = this.isRTL_() ? i + 1 : i;
          break;
        }
      }

      this.scrollToTabAtIndex_(scrollTargetIndex);
    }
  }, {
    key: 'scrollForward',
    value: function scrollForward() {
      var evt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      if (evt) {
        evt.preventDefault();
      }

      var scrollFrameOffsetWidth = this.adapter_.getOffsetWidthForScrollFrame() + this.currentTranslateOffset_;
      var scrollTargetIndex = 0;

      for (var i = 0; i < this.adapter_.getNumberOfTabs(); i++) {
        var tabOffsetLeftAndWidth = this.adapter_.getComputedLeftForTabAtIndex(i) + this.adapter_.getComputedWidthForTabAtIndex(i);
        var scrollTargetDetermined = tabOffsetLeftAndWidth > scrollFrameOffsetWidth;

        if (this.isRTL_()) {
          var frameOffsetAndTabWidth = scrollFrameOffsetWidth - this.adapter_.getComputedWidthForTabAtIndex(i);
          var _tabOffsetLeftAndWidth = this.adapter_.getComputedLeftForTabAtIndex(i) + this.adapter_.getComputedWidthForTabAtIndex(i);
          var tabRightOffset = this.adapter_.getOffsetWidthForTabBar() - _tabOffsetLeftAndWidth;

          scrollTargetDetermined = tabRightOffset > frameOffsetAndTabWidth;
        }

        if (scrollTargetDetermined) {
          scrollTargetIndex = i;
          break;
        }
      }

      this.scrollToTabAtIndex_(scrollTargetIndex);
    }
  }, {
    key: 'layout',
    value: function layout() {
      var _this4 = this;

      cancelAnimationFrame(this.layoutFrame_);
      this.scrollFrameScrollLeft_ = this.adapter_.getScrollLeftForScrollFrame();
      this.layoutFrame_ = requestAnimationFrame(function () {
        return _this4.layout_();
      });
    }
  }, {
    key: 'isRTL_',
    value: function isRTL_() {
      return this.adapter_.isRTL();
    }
  }, {
    key: 'handlePossibleTabKeyboardFocus_',
    value: function handlePossibleTabKeyboardFocus_(evt) {
      if (!this.adapter_.eventTargetHasClass(evt.target, cssClasses$12.TAB) || this.pointerDownRecognized_) {
        return;
      }

      var resetAmt = this.isRTL_() ? this.scrollFrameScrollLeft_ : 0;
      this.adapter_.setScrollLeftForScrollFrame(resetAmt);

      this.focusedTarget_ = evt.target;
      var scrollFrameWidth = this.adapter_.getOffsetWidthForScrollFrame();
      var tabBarWidth = this.adapter_.getOffsetWidthForTabBar();
      var leftEdge = this.adapter_.getOffsetLeftForEventTarget(this.focusedTarget_);
      var rightEdge = leftEdge + this.adapter_.getOffsetWidthForEventTarget(this.focusedTarget_);

      var shouldScrollBack = rightEdge <= this.currentTranslateOffset_;
      var shouldScrollForward = rightEdge > this.currentTranslateOffset_ + scrollFrameWidth;

      if (this.isRTL_()) {
        var normalizedLeftOffset = tabBarWidth - leftEdge;
        shouldScrollBack = leftEdge >= tabBarWidth - this.currentTranslateOffset_;
        shouldScrollForward = normalizedLeftOffset > scrollFrameWidth + this.currentTranslateOffset_;
      }

      if (shouldScrollForward) {
        this.scrollForward();
      } else if (shouldScrollBack) {
        this.scrollBack();
      }

      this.pointerDownRecognized_ = false;
    }
  }, {
    key: 'layout_',
    value: function layout_() {
      var frameWidth = this.adapter_.getOffsetWidthForScrollFrame();
      var isOverflowing = this.adapter_.getOffsetWidthForTabBar() > frameWidth;

      if (!isOverflowing) {
        this.currentTranslateOffset_ = 0;
      }

      this.shiftFrame_();
      this.updateIndicatorEnabledStates_();
    }
  }, {
    key: 'scrollToTabAtIndex_',
    value: function scrollToTabAtIndex_(index) {
      var _this5 = this;

      var scrollTargetOffsetLeft = this.adapter_.getComputedLeftForTabAtIndex(index);
      var scrollTargetOffsetWidth = this.adapter_.getComputedWidthForTabAtIndex(index);

      this.currentTranslateOffset_ = this.normalizeForRTL_(scrollTargetOffsetLeft, scrollTargetOffsetWidth);

      requestAnimationFrame(function () {
        return _this5.shiftFrame_();
      });
    }
  }, {
    key: 'normalizeForRTL_',
    value: function normalizeForRTL_(left, width) {
      return this.isRTL_() ? this.adapter_.getOffsetWidthForTabBar() - (left + width) : left;
    }
  }, {
    key: 'shiftFrame_',
    value: function shiftFrame_() {
      var shiftAmount = this.isRTL_() ? this.currentTranslateOffset_ : -this.currentTranslateOffset_;

      this.adapter_.setTransformStyleForTabBar('translateX(' + shiftAmount + 'px)');
      this.updateIndicatorEnabledStates_();
    }
  }, {
    key: 'updateIndicatorEnabledStates_',
    value: function updateIndicatorEnabledStates_() {
      var INDICATOR_ENABLED = cssClasses$12.INDICATOR_ENABLED;

      if (this.currentTranslateOffset_ === 0) {
        this.adapter_.removeClassFromBackIndicator(INDICATOR_ENABLED);
      } else {
        this.adapter_.addClassToBackIndicator(INDICATOR_ENABLED);
      }

      var remainingTabBarWidth = this.adapter_.getOffsetWidthForTabBar() - this.currentTranslateOffset_;
      if (remainingTabBarWidth > this.adapter_.getOffsetWidthForScrollFrame()) {
        this.adapter_.addClassToForwardIndicator(INDICATOR_ENABLED);
      } else {
        this.adapter_.removeClassFromForwardIndicator(INDICATOR_ENABLED);
      }
    }
  }]);

  return MDCTabBarScrollerFoundation;
}(MDCFoundation);

var _createClass$31 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$31(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$25(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$25(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MDCTabBarScroller = function (_MDCComponent) {
  _inherits$25(MDCTabBarScroller, _MDCComponent);

  function MDCTabBarScroller() {
    _classCallCheck$31(this, MDCTabBarScroller);

    return _possibleConstructorReturn$25(this, (MDCTabBarScroller.__proto__ || Object.getPrototypeOf(MDCTabBarScroller)).apply(this, arguments));
  }

  _createClass$31(MDCTabBarScroller, [{
    key: 'initialize',
    value: function initialize() {
      var tabBarFactory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (root) {
        return new MDCTabBar(root);
      };

      this.scrollFrame_ = this.root_.querySelector(MDCTabBarScrollerFoundation.strings.FRAME_SELECTOR);
      this.tabBarEl_ = this.root_.querySelector(MDCTabBarScrollerFoundation.strings.TABS_SELECTOR);
      this.forwardIndicator_ = this.root_.querySelector(MDCTabBarScrollerFoundation.strings.INDICATOR_FORWARD_SELECTOR);
      this.backIndicator_ = this.root_.querySelector(MDCTabBarScrollerFoundation.strings.INDICATOR_BACK_SELECTOR);
      this.tabBar_ = tabBarFactory(this.tabBarEl_);
    }
  }, {
    key: 'getDefaultFoundation',
    value: function getDefaultFoundation() {
      var _this2 = this;

      return new MDCTabBarScrollerFoundation({
        addClass: function addClass(className) {
          return _this2.root_.classList.add(className);
        },
        removeClass: function removeClass(className) {
          return _this2.root_.classList.remove(className);
        },
        eventTargetHasClass: function eventTargetHasClass(target, className) {
          return target.classList.contains(className);
        },
        addClassToForwardIndicator: function addClassToForwardIndicator(className) {
          return _this2.forwardIndicator_.classList.add(className);
        },
        removeClassFromForwardIndicator: function removeClassFromForwardIndicator(className) {
          return _this2.forwardIndicator_.classList.remove(className);
        },
        addClassToBackIndicator: function addClassToBackIndicator(className) {
          return _this2.backIndicator_.classList.add(className);
        },
        removeClassFromBackIndicator: function removeClassFromBackIndicator(className) {
          return _this2.backIndicator_.classList.remove(className);
        },
        isRTL: function isRTL() {
          return getComputedStyle(_this2.root_).getPropertyValue('direction') === 'rtl';
        },
        registerBackIndicatorClickHandler: function registerBackIndicatorClickHandler(handler) {
          return _this2.backIndicator_.addEventListener('click', handler);
        },
        deregisterBackIndicatorClickHandler: function deregisterBackIndicatorClickHandler(handler) {
          return _this2.backIndicator_.removeEventListener('click', handler);
        },
        registerForwardIndicatorClickHandler: function registerForwardIndicatorClickHandler(handler) {
          return _this2.forwardIndicator_.addEventListener('click', handler);
        },
        deregisterForwardIndicatorClickHandler: function deregisterForwardIndicatorClickHandler(handler) {
          return _this2.forwardIndicator_.removeEventListener('click', handler);
        },
        registerCapturedInteractionHandler: function registerCapturedInteractionHandler(evt, handler) {
          return _this2.root_.addEventListener(evt, handler, true);
        },
        deregisterCapturedInteractionHandler: function deregisterCapturedInteractionHandler(evt, handler) {
          return _this2.root_.removeEventListener(evt, handler, true);
        },
        registerWindowResizeHandler: function registerWindowResizeHandler(handler) {
          return window.addEventListener('resize', handler);
        },
        deregisterWindowResizeHandler: function deregisterWindowResizeHandler(handler) {
          return window.removeEventListener('resize', handler);
        },
        getNumberOfTabs: function getNumberOfTabs() {
          return _this2.tabBar.tabs.length;
        },
        getComputedWidthForTabAtIndex: function getComputedWidthForTabAtIndex(index) {
          return _this2.tabBar.tabs[index].computedWidth;
        },
        getComputedLeftForTabAtIndex: function getComputedLeftForTabAtIndex(index) {
          return _this2.tabBar.tabs[index].computedLeft;
        },
        getOffsetWidthForScrollFrame: function getOffsetWidthForScrollFrame() {
          return _this2.scrollFrame_.offsetWidth;
        },
        getScrollLeftForScrollFrame: function getScrollLeftForScrollFrame() {
          return _this2.scrollFrame_.scrollLeft;
        },
        setScrollLeftForScrollFrame: function setScrollLeftForScrollFrame(scrollLeftAmount) {
          return _this2.scrollFrame_.scrollLeft = scrollLeftAmount;
        },
        getOffsetWidthForTabBar: function getOffsetWidthForTabBar() {
          return _this2.tabBarEl_.offsetWidth;
        },
        setTransformStyleForTabBar: function setTransformStyleForTabBar(value) {
          _this2.tabBarEl_.style.setProperty(getCorrectPropertyName(window, 'transform'), value);
        },
        getOffsetLeftForEventTarget: function getOffsetLeftForEventTarget(target) {
          return target.offsetLeft;
        },
        getOffsetWidthForEventTarget: function getOffsetWidthForEventTarget(target) {
          return target.offsetWidth;
        }
      });
    }
  }, {
    key: 'layout',
    value: function layout() {
      this.foundation_.layout();
    }
  }, {
    key: 'tabBar',
    get: function get() {
      return this.tabBar_;
    }
  }], [{
    key: 'attachTo',
    value: function attachTo(root) {
      return new MDCTabBarScroller(root);
    }
  }]);

  return MDCTabBarScroller;
}(MDCComponent);

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var TabIconDirective = (function () {
    function TabIconDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    TabIconDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-tab-icon], mdc-tab-icon'
                },] },
    ];
    /** @nocollapse */
    TabIconDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    TabIconDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-tab__icon',] },],
    };
    return TabIconDirective;
}());
var TabIconTextDirective = (function () {
    function TabIconTextDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    TabIconTextDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-tab-icon-text], mdc-tab-icon-text'
                },] },
    ];
    /** @nocollapse */
    TabIconTextDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    TabIconTextDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-tab__icon-text',] },],
    };
    return TabIconTextDirective;
}());
var TabComponent = (function () {
    function TabComponent(_renderer, _root, _registry, _ripple) {
        var _this = this;
        this._renderer = _renderer;
        this._root = _root;
        this._registry = _registry;
        this._ripple = _ripple;
        this.select = new _angular_core.EventEmitter();
        this.isHostClass = true;
        this.role = 'tab';
        this._mdcAdapter = {
            addClass: function (className) {
                _this._renderer.addClass(_this._root.nativeElement, className);
            },
            removeClass: function (className) {
                _this._renderer.removeClass(_this._root.nativeElement, className);
            },
            registerInteractionHandler: function (type, handler) {
                _this._registry.listen_(_this._renderer, type, handler, _this._root);
            },
            deregisterInteractionHandler: function (type, handler) {
                _this._registry.unlisten_(type, handler);
            },
            getOffsetWidth: function () { return _this._root.nativeElement.offsetWidth; },
            getOffsetLeft: function () { return _this._root.nativeElement.offsetLeft; },
            notifySelected: function () { return _this.select.emit({ tab: _this }); }
        };
        this.foundation = new MDCTabFoundation(this._mdcAdapter);
        this._ripple.init();
    }
    Object.defineProperty(TabComponent.prototype, "active", {
        get: function () { return this.foundation.isActive(); },
        set: function (value) {
            this.foundation.setActive(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabComponent.prototype, "preventsDefaultOnClick", {
        get: function () { return this.foundation.preventsDefaultOnClick(); },
        set: function (value) {
            this.foundation.setPreventDefaultOnClick(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabComponent.prototype, "disableRipple", {
        get: function () { return this._ripple.disabled; },
        set: function (value) {
            this._ripple.disabled = toBoolean(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabComponent.prototype, "classIconText", {
        get: function () {
            return this.tabIcon != null && this.tabIconText != null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabComponent.prototype, "classActive", {
        get: function () {
            return this.foundation.isActive();
        },
        enumerable: true,
        configurable: true
    });
    TabComponent.prototype.ngAfterViewInit = function () {
        this.foundation.init();
    };
    TabComponent.prototype.ngOnDestroy = function () {
        this.foundation.destroy();
    };
    TabComponent.decorators = [
        { type: _angular_core.Component, args: [{
                    selector: '[mdc-tab], mdc-tab',
                    template: '<ng-content></ng-content>',
                    providers: [Ripple],
                    encapsulation: _angular_core.ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    TabComponent.ctorParameters = function () { return [
        { type: _angular_core.Renderer2, },
        { type: _angular_core.ElementRef, },
        { type: EventRegistry, },
        { type: Ripple, },
    ]; };
    TabComponent.propDecorators = {
        'active': [{ type: _angular_core.Input },],
        'preventsDefaultOnClick': [{ type: _angular_core.Input },],
        'disableRipple': [{ type: _angular_core.Input },],
        'select': [{ type: _angular_core.Output },],
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-tab',] },],
        'role': [{ type: _angular_core.HostBinding, args: ['attr.role',] },],
        'classIconText': [{ type: _angular_core.HostBinding, args: ['class.mdc-tab--with-icon-and-text',] },],
        'classActive': [{ type: _angular_core.HostBinding, args: ['class.mdc-tab--active',] },],
        'tabIcon': [{ type: _angular_core.ContentChild, args: [TabIconDirective,] },],
        'tabIconText': [{ type: _angular_core.ContentChild, args: [TabIconTextDirective,] },],
    };
    return TabComponent;
}());

var TabBarDirective = (function () {
    function TabBarDirective(_renderer, root, _registry) {
        var _this = this;
        this._renderer = _renderer;
        this.root = root;
        this._registry = _registry;
        this.change = new _angular_core.EventEmitter();
        this.isHostClass = true;
        this.scrollFrameContent = false;
        this.role = 'tablist';
        this._mdcAdapter = {
            addClass: function (className) {
                _this._renderer.addClass(_this.root.nativeElement, className);
            },
            removeClass: function (className) {
                _this._renderer.removeClass(_this.root.nativeElement, className);
            },
            bindOnMDCTabSelectedEvent: function () { return _this.listenTabSelect(); },
            unbindOnMDCTabSelectedEvent: function () { return _this.unlistenTabSelect(); },
            registerResizeHandler: function (handler) {
                if (isBrowser()) {
                    _this._registry.listen_(_this._renderer, 'resize', handler, 'window');
                }
            },
            deregisterResizeHandler: function (handler) {
                if (isBrowser()) {
                    _this._registry.unlisten_('resize', handler);
                }
            },
            getOffsetWidth: function () { return _this.root.nativeElement.offsetWidth; },
            setStyleForIndicator: function (propertyName, value) { return _this._renderer.setStyle(_this.tabBarIndicator, propertyName, value); },
            getOffsetWidthForIndicator: function () { return _this.tabBarIndicator.offsetWidth; },
            notifyChange: function (evtData) { return _this.change.emit(evtData); },
            getNumberOfTabs: function () { return _this.tabs.length; },
            isTabActiveAtIndex: function (index) { return index >= 0 ? _this.tabs.toArray()[index].active : false; },
            setTabActiveAtIndex: function (index, isActive) { return _this.tabs.toArray()[index].active = isActive; },
            isDefaultPreventedOnClickForTabAtIndex: function (index) { return !!_this.tabs.toArray()[index].foundation.preventsDefaultOnClick; },
            setPreventDefaultOnClickForTabAtIndex: function (index, preventDefaultOnClick) {
                return _this.tabs.toArray()[index].foundation.setPreventDefaultOnClick(preventDefaultOnClick);
            },
            measureTabAtIndex: function (index) { return _this.tabs.toArray()[index].foundation.measureSelf(); },
            getComputedWidthForTabAtIndex: function (index) { return _this.tabs.toArray()[index].foundation.getComputedWidth(); },
            getComputedLeftForTabAtIndex: function (index) { return _this.tabs.toArray()[index].foundation.getComputedLeft(); }
        };
        this._foundation = new MDCTabBarFoundation(this._mdcAdapter);
    }
    Object.defineProperty(TabBarDirective.prototype, "classIndicatorPrimary", {
        get: function () {
            return this.primaryColor ? 'mdc-tab-bar--indicator-primary' : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabBarDirective.prototype, "classIndicatorAccent", {
        get: function () {
            return this.accentColor ? 'mdc-tab-bar--indicator-accent' : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabBarDirective.prototype, "classTabIcon", {
        get: function () {
            return this.tabs.length > 0
                && this.tabs.first.tabIcon != null
                && this.tabs.first.tabIconText == null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabBarDirective.prototype, "classTabIconText", {
        get: function () {
            return this.tabs.length > 0
                && this.tabs.first.tabIcon != null
                && this.tabs.first.tabIconText != null;
        },
        enumerable: true,
        configurable: true
    });
    TabBarDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.tabs.changes.subscribe(function () {
            if (_this.tabEvents) {
                _this.listenTabSelect();
            }
        });
        this.createTabBarIndicator();
        this._foundation.init();
    };
    TabBarDirective.prototype.ngOnDestroy = function () {
        this._foundation.destroy();
    };
    TabBarDirective.prototype.createTabBarIndicator = function () {
        this.tabBarIndicator = this._renderer.createElement('span');
        this._renderer.addClass(this.tabBarIndicator, 'mdc-tab-bar__indicator');
        this._renderer.appendChild(this.root.nativeElement, this.tabBarIndicator);
    };
    TabBarDirective.prototype.listenTabSelect = function () {
        var _this = this;
        if (this.tabEvents) {
            this.unlistenTabSelect();
        }
        this.tabEvents = new Array();
        this.tabs.forEach(function (_) {
            _this.tabEvents.push(_.select.subscribe(function (event) {
                _this._foundation.switchToTabAtIndex(_this.tabs.toArray().indexOf(event.tab), true);
            }));
        });
    };
    TabBarDirective.prototype.unlistenTabSelect = function () {
        this.tabEvents.forEach(function (_) {
            return _.unsubscribe();
        });
        this.tabEvents = null;
    };
    TabBarDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-tab-bar], mdc-tab-bar'
                },] },
    ];
    /** @nocollapse */
    TabBarDirective.ctorParameters = function () { return [
        { type: _angular_core.Renderer2, },
        { type: _angular_core.ElementRef, },
        { type: EventRegistry, },
    ]; };
    TabBarDirective.propDecorators = {
        'primaryColor': [{ type: _angular_core.Input },],
        'accentColor': [{ type: _angular_core.Input },],
        'change': [{ type: _angular_core.Output },],
        'tabs': [{ type: _angular_core.ContentChildren, args: [TabComponent, { descendants: false },] },],
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-tab-bar',] },],
        'scrollFrameContent': [{ type: _angular_core.HostBinding, args: ['class.mdc-tab-bar-scroller__scroll-frame__tabs',] },],
        'role': [{ type: _angular_core.HostBinding, args: ['attr.role',] },],
        'classIndicatorPrimary': [{ type: _angular_core.HostBinding, args: ['class.mdc-tab-bar--indicator-primary',] },],
        'classIndicatorAccent': [{ type: _angular_core.HostBinding, args: ['class.mdc-tab-bar--indicator-accent',] },],
        'classTabIcon': [{ type: _angular_core.HostBinding, args: ['class.mdc-tab-bar--icon-tab-bar',] },],
        'classTabIconText': [{ type: _angular_core.HostBinding, args: ['class.mdc-tab-bar--icons-with-text',] },],
    };
    return TabBarDirective;
}());

var TabBarScrollIndicatorInnerDirective = (function () {
    function TabBarScrollIndicatorInnerDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    TabBarScrollIndicatorInnerDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-tab-bar-scroll-button], mdc-tab-bar-scroll-button'
                },] },
    ];
    /** @nocollapse */
    TabBarScrollIndicatorInnerDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    TabBarScrollIndicatorInnerDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-tab-bar-scroller__indicator__inner',] },],
    };
    return TabBarScrollIndicatorInnerDirective;
}());
var TabBarScrollBackDirective = (function () {
    function TabBarScrollBackDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
        this.isBackClass = true;
    }
    TabBarScrollBackDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-tab-bar-scroll-back], mdc-tab-bar-scroll-back'
                },] },
    ];
    /** @nocollapse */
    TabBarScrollBackDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    TabBarScrollBackDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-tab-bar-scroller__indicator',] },],
        'isBackClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-tab-bar-scroller__indicator--back',] },],
    };
    return TabBarScrollBackDirective;
}());
var TabBarScrollForwardDirective = (function () {
    function TabBarScrollForwardDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
        this.isFowardClass = true;
    }
    TabBarScrollForwardDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-tab-bar-scroll-forward], mdc-tab-bar-scroll-forward'
                },] },
    ];
    /** @nocollapse */
    TabBarScrollForwardDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    TabBarScrollForwardDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-tab-bar-scroller__indicator',] },],
        'isFowardClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-tab-bar-scroller__indicator--forward',] },],
    };
    return TabBarScrollForwardDirective;
}());
var TabBarScrollFrameDirective = (function () {
    function TabBarScrollFrameDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    TabBarScrollFrameDirective.prototype.ngAfterContentInit = function () {
        if (this.tabBar) {
            this.tabBar.scrollFrameContent = true;
        }
    };
    TabBarScrollFrameDirective.prototype.findTab = function (index) {
        if (this.tabBar) {
            var tabs = this.tabBar.tabs.toArray();
            if (index >= 0 && index < tabs.length) {
                return tabs[index];
            }
        }
        return null;
    };
    TabBarScrollFrameDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-tab-bar-scroll-frame], mdc-tab-bar-scroll-frame'
                },] },
    ];
    /** @nocollapse */
    TabBarScrollFrameDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    TabBarScrollFrameDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-tab-bar-scroller__scroll-frame',] },],
        'tabBar': [{ type: _angular_core.ContentChild, args: [TabBarDirective,] },],
    };
    return TabBarScrollFrameDirective;
}());
var TabBarScrollerDirective = (function () {
    function TabBarScrollerDirective(_renderer, _root, _registry) {
        var _this = this;
        this._renderer = _renderer;
        this._root = _root;
        this._registry = _registry;
        this.direction = 'ltr';
        this.isHostClass = true;
        this._mdcAdapter = {
            addClass: function (className) {
                _this._renderer.addClass(_this._root.nativeElement, className);
            },
            removeClass: function (className) {
                _this._renderer.removeClass(_this._root.nativeElement, className);
            },
            eventTargetHasClass: function (target, className) { return target.classList.contains(className); },
            addClassToForwardIndicator: function (className) {
                if (_this.scrollForward) {
                    _this._renderer.addClass(_this.scrollForward.elementRef.nativeElement, className);
                }
            },
            removeClassFromForwardIndicator: function (className) {
                if (_this.scrollForward) {
                    _this._renderer.removeClass(_this.scrollForward.elementRef.nativeElement, className);
                }
            },
            addClassToBackIndicator: function (className) {
                if (_this.scrollBack) {
                    _this._renderer.addClass(_this.scrollBack.elementRef.nativeElement, className);
                }
            },
            removeClassFromBackIndicator: function (className) {
                if (_this.scrollBack) {
                    _this._renderer.removeClass(_this.scrollBack.elementRef.nativeElement, className);
                }
            },
            isRTL: function () { return _this.direction === 'rtl'; },
            registerBackIndicatorClickHandler: function (handler) {
                if (_this.scrollBack) {
                    _this._registry.listen_(_this._renderer, 'click', handler, _this.scrollBack.elementRef);
                }
            },
            deregisterBackIndicatorClickHandler: function (handler) {
                if (_this.scrollBack) {
                    _this._registry.unlisten_('click', handler);
                }
            },
            registerForwardIndicatorClickHandler: function (handler) {
                if (_this.scrollForward) {
                    _this._registry.listen_(_this._renderer, 'click', handler, _this.scrollForward.elementRef);
                }
            },
            deregisterForwardIndicatorClickHandler: function (handler) {
                if (_this.scrollForward) {
                    _this._registry.unlisten_('click', handler);
                }
            },
            registerCapturedInteractionHandler: function (evt, handler) {
                _this._registry.listen_(_this._renderer, evt, handler, _this._root);
            },
            deregisterCapturedInteractionHandler: function (evt, handler) {
                _this._registry.unlisten_(evt, handler);
            },
            registerWindowResizeHandler: function (handler) {
                if (isBrowser()) {
                    _this._registry.listen_(_this._renderer, 'resize', handler, 'window');
                }
            },
            deregisterWindowResizeHandler: function (handler) {
                if (isBrowser()) {
                    _this._registry.unlisten_('resize', handler);
                }
            },
            getNumberOfTabs: function () {
                return (_this.scrollFrame && _this.scrollFrame.tabBar) ? _this.scrollFrame.tabBar.tabs.length : 0;
            },
            getComputedWidthForTabAtIndex: function (index) { return _this.findTab(index).foundation.getComputedWidth(); },
            getComputedLeftForTabAtIndex: function (index) { return _this.findTab(index).foundation.getComputedLeft(); },
            getOffsetWidthForScrollFrame: function () {
                return _this.scrollFrame ? _this.scrollFrame.elementRef.nativeElement.offsetWidth : 0;
            },
            getScrollLeftForScrollFrame: function () {
                return _this.scrollFrame ? _this.scrollFrame.elementRef.nativeElement.scrollLeft : 0;
            },
            setScrollLeftForScrollFrame: function (scrollLeftAmount) {
                if (_this.scrollFrame) {
                    _this._renderer.setProperty(_this.scrollFrame.elementRef.nativeElement, 'scrollLeft', scrollLeftAmount);
                }
            },
            getOffsetWidthForTabBar: function () {
                return (_this.scrollFrame && _this.scrollFrame.tabBar) ? _this.scrollFrame.tabBar.root.nativeElement.offsetWidth : 0;
            },
            setTransformStyleForTabBar: function (value) {
                if (_this.scrollFrame && _this.scrollFrame.tabBar) {
                    _this._renderer.setStyle(_this.scrollFrame.tabBar.root.nativeElement, getCorrectPropertyName(window, 'transform'), value);
                }
            },
            getOffsetLeftForEventTarget: function (target) { return target.offsetLeft; },
            getOffsetWidthForEventTarget: function (target) { return target.offsetWidth; }
        };
        this._foundation = new MDCTabBarScrollerFoundation(this._mdcAdapter);
    }
    TabBarScrollerDirective.prototype.ngAfterViewInit = function () {
        this._foundation.init();
    };
    TabBarScrollerDirective.prototype.ngOnDestroy = function () {
        this._foundation.destroy();
    };
    TabBarScrollerDirective.prototype.findTab = function (index) {
        return this.scrollFrame ? this.scrollFrame.findTab(index) : null;
    };
    TabBarScrollerDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-tab-bar-scroller], mdc-tab-bar-scroller'
                },] },
    ];
    /** @nocollapse */
    TabBarScrollerDirective.ctorParameters = function () { return [
        { type: _angular_core.Renderer2, },
        { type: _angular_core.ElementRef, },
        { type: EventRegistry, },
    ]; };
    TabBarScrollerDirective.propDecorators = {
        'direction': [{ type: _angular_core.Input },],
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-tab-bar-scoller',] },],
        'scrollFrame': [{ type: _angular_core.ContentChild, args: [TabBarScrollFrameDirective,] },],
        'scrollBack': [{ type: _angular_core.ContentChild, args: [TabBarScrollBackDirective,] },],
        'scrollForward': [{ type: _angular_core.ContentChild, args: [TabBarScrollForwardDirective,] },],
    };
    return TabBarScrollerDirective;
}());

var TAB_COMPONENTS = [
    TabComponent,
    TabIconDirective,
    TabIconTextDirective,
    TabBarDirective,
    TabBarScrollerDirective,
    TabBarScrollBackDirective,
    TabBarScrollForwardDirective,
    TabBarScrollFrameDirective,
    TabBarScrollIndicatorInnerDirective,
];
var TabModule = (function () {
    function TabModule() {
    }
    TabModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    exports: TAB_COMPONENTS,
                    declarations: TAB_COMPONENTS
                },] },
    ];
    /** @nocollapse */
    TabModule.ctorParameters = function () { return []; };
    return TabModule;
}());

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var strings$13 = {
  ARIA_HIDDEN: 'aria-hidden',
  ROLE: 'role',
  INPUT_SELECTOR: '.mdc-textfield__input',
  LABEL_SELECTOR: '.mdc-textfield__label'
};

var cssClasses$13 = {
  ROOT: 'mdc-textfield',
  UPGRADED: 'mdc-textfield--upgraded',
  DISABLED: 'mdc-textfield--disabled',
  FOCUSED: 'mdc-textfield--focused',
  INVALID: 'mdc-textfield--invalid',
  HELPTEXT_PERSISTENT: 'mdc-textfield-helptext--persistent',
  HELPTEXT_VALIDATION_MSG: 'mdc-textfield-helptext--validation-msg',
  LABEL_FLOAT_ABOVE: 'mdc-textfield__label--float-above',
  BOX: 'mdc-textfield--box'
};

var _createClass$34 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$34(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$28(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$28(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MDCTextfieldFoundation = function (_MDCFoundation) {
  _inherits$28(MDCTextfieldFoundation, _MDCFoundation);

  _createClass$34(MDCTextfieldFoundation, null, [{
    key: 'cssClasses',
    get: function get() {
      return cssClasses$13;
    }
  }, {
    key: 'strings',
    get: function get() {
      return strings$13;
    }
  }, {
    key: 'defaultAdapter',
    get: function get() {
      return {
        addClass: function addClass() /* className: string */{},
        removeClass: function removeClass() /* className: string */{},
        addClassToLabel: function addClassToLabel() /* className: string */{},
        removeClassFromLabel: function removeClassFromLabel() /* className: string */{},
        addClassToHelptext: function addClassToHelptext() /* className: string */{},
        removeClassFromHelptext: function removeClassFromHelptext() /* className: string */{},
        helptextHasClass: function helptextHasClass() {
          return (/* className: string */ /* boolean */false
          );
        },
        registerInputFocusHandler: function registerInputFocusHandler() /* handler: EventListener */{},
        deregisterInputFocusHandler: function deregisterInputFocusHandler() /* handler: EventListener */{},
        registerInputBlurHandler: function registerInputBlurHandler() /* handler: EventListener */{},
        deregisterInputBlurHandler: function deregisterInputBlurHandler() /* handler: EventListener */{},
        registerInputInputHandler: function registerInputInputHandler() /* handler: EventListener */{},
        deregisterInputInputHandler: function deregisterInputInputHandler() /* handler: EventListener */{},
        registerInputKeydownHandler: function registerInputKeydownHandler() /* handler: EventListener */{},
        deregisterInputKeydownHandler: function deregisterInputKeydownHandler() /* handler: EventListener */{},
        setHelptextAttr: function setHelptextAttr() /* name: string, value: string */{},
        removeHelptextAttr: function removeHelptextAttr() /* name: string */{},
        getNativeInput: function getNativeInput() {
          return (/* HTMLInputElement */{}
          );
        }
      };
    }
  }]);

  function MDCTextfieldFoundation() {
    var adapter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck$34(this, MDCTextfieldFoundation);

    var _this = _possibleConstructorReturn$28(this, (MDCTextfieldFoundation.__proto__ || Object.getPrototypeOf(MDCTextfieldFoundation)).call(this, Object.assign(MDCTextfieldFoundation.defaultAdapter, adapter)));

    _this.receivedUserInput_ = false;
    _this.inputFocusHandler_ = function () {
      return _this.activateFocus_();
    };
    _this.inputBlurHandler_ = function () {
      return _this.deactivateFocus_();
    };
    _this.inputInputHandler_ = function () {
      return _this.autoCompleteFocus_();
    };
    _this.inputKeydownHandler_ = function () {
      return _this.receivedUserInput_ = true;
    };
    return _this;
  }

  _createClass$34(MDCTextfieldFoundation, [{
    key: 'init',
    value: function init() {
      this.adapter_.addClass(MDCTextfieldFoundation.cssClasses.UPGRADED);
      this.adapter_.registerInputFocusHandler(this.inputFocusHandler_);
      this.adapter_.registerInputBlurHandler(this.inputBlurHandler_);
      this.adapter_.registerInputInputHandler(this.inputInputHandler_);
      this.adapter_.registerInputKeydownHandler(this.inputKeydownHandler_);

      // Ensure label does not collide with any pre-filled value.
      if (this.getNativeInput_().value) {
        this.adapter_.addClassToLabel(MDCTextfieldFoundation.cssClasses.LABEL_FLOAT_ABOVE);
      }
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      this.adapter_.removeClass(MDCTextfieldFoundation.cssClasses.UPGRADED);
      this.adapter_.deregisterInputFocusHandler(this.inputFocusHandler_);
      this.adapter_.deregisterInputBlurHandler(this.inputBlurHandler_);
      this.adapter_.deregisterInputInputHandler(this.inputInputHandler_);
      this.adapter_.deregisterInputKeydownHandler(this.inputKeydownHandler_);
    }
  }, {
    key: 'activateFocus_',
    value: function activateFocus_() {
      var _MDCTextfieldFoundati = MDCTextfieldFoundation.cssClasses,
          FOCUSED = _MDCTextfieldFoundati.FOCUSED,
          LABEL_FLOAT_ABOVE = _MDCTextfieldFoundati.LABEL_FLOAT_ABOVE;

      this.adapter_.addClass(FOCUSED);
      this.adapter_.addClassToLabel(LABEL_FLOAT_ABOVE);
      this.showHelptext_();
    }
  }, {
    key: 'autoCompleteFocus_',
    value: function autoCompleteFocus_() {
      if (!this.receivedUserInput_) {
        this.activateFocus_();
      }
    }
  }, {
    key: 'showHelptext_',
    value: function showHelptext_() {
      var ARIA_HIDDEN = MDCTextfieldFoundation.strings.ARIA_HIDDEN;

      this.adapter_.removeHelptextAttr(ARIA_HIDDEN);
    }
  }, {
    key: 'deactivateFocus_',
    value: function deactivateFocus_() {
      var _MDCTextfieldFoundati2 = MDCTextfieldFoundation.cssClasses,
          FOCUSED = _MDCTextfieldFoundati2.FOCUSED,
          INVALID = _MDCTextfieldFoundati2.INVALID,
          LABEL_FLOAT_ABOVE = _MDCTextfieldFoundati2.LABEL_FLOAT_ABOVE;

      var input = this.getNativeInput_();
      var isValid = input.checkValidity();

      this.adapter_.removeClass(FOCUSED);
      if (!input.value && !this.isBadInput_()) {
        this.adapter_.removeClassFromLabel(LABEL_FLOAT_ABOVE);
        this.receivedUserInput_ = false;
      }
      if (isValid) {
        this.adapter_.removeClass(INVALID);
      } else {
        this.adapter_.addClass(INVALID);
      }
      this.updateHelptextOnDeactivation_(isValid);
    }
  }, {
    key: 'updateHelptextOnDeactivation_',
    value: function updateHelptextOnDeactivation_(isValid) {
      var _MDCTextfieldFoundati3 = MDCTextfieldFoundation.cssClasses,
          HELPTEXT_PERSISTENT = _MDCTextfieldFoundati3.HELPTEXT_PERSISTENT,
          HELPTEXT_VALIDATION_MSG = _MDCTextfieldFoundati3.HELPTEXT_VALIDATION_MSG;
      var ROLE = MDCTextfieldFoundation.strings.ROLE;

      var helptextIsPersistent = this.adapter_.helptextHasClass(HELPTEXT_PERSISTENT);
      var helptextIsValidationMsg = this.adapter_.helptextHasClass(HELPTEXT_VALIDATION_MSG);
      var validationMsgNeedsDisplay = helptextIsValidationMsg && !isValid;

      if (validationMsgNeedsDisplay) {
        this.adapter_.setHelptextAttr(ROLE, 'alert');
      } else {
        this.adapter_.removeHelptextAttr(ROLE);
      }

      if (helptextIsPersistent || validationMsgNeedsDisplay) {
        return;
      }
      this.hideHelptext_();
    }
  }, {
    key: 'hideHelptext_',
    value: function hideHelptext_() {
      var ARIA_HIDDEN = MDCTextfieldFoundation.strings.ARIA_HIDDEN;

      this.adapter_.setHelptextAttr(ARIA_HIDDEN, 'true');
    }
  }, {
    key: 'isBadInput_',
    value: function isBadInput_() {
      var input = this.getNativeInput_();
      return input.validity ? input.validity.badInput : input.badInput;
    }
  }, {
    key: 'isDisabled',
    value: function isDisabled() {
      return this.getNativeInput_().disabled;
    }
  }, {
    key: 'setDisabled',
    value: function setDisabled(disabled) {
      var DISABLED = MDCTextfieldFoundation.cssClasses.DISABLED;

      this.getNativeInput_().disabled = disabled;
      if (disabled) {
        this.adapter_.addClass(DISABLED);
      } else {
        this.adapter_.removeClass(DISABLED);
      }
    }
  }, {
    key: 'getNativeInput_',
    value: function getNativeInput_() {
      return this.adapter_.getNativeInput() || {
        checkValidity: function checkValidity() {
          return true;
        },
        value: '',
        disabled: false,
        badInput: false
      };
    }
  }]);

  return MDCTextfieldFoundation;
}(MDCFoundation);

var _createClass$33 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get$5 = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck$33(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$27(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$27(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MDCTextfield = function (_MDCComponent) {
  _inherits$27(MDCTextfield, _MDCComponent);

  function MDCTextfield() {
    _classCallCheck$33(this, MDCTextfield);

    return _possibleConstructorReturn$27(this, (MDCTextfield.__proto__ || Object.getPrototypeOf(MDCTextfield)).apply(this, arguments));
  }

  _createClass$33(MDCTextfield, [{
    key: 'initialize',
    value: function initialize() {
      var rippleFactory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function (el) {
        return new MDCRipple(el);
      };

      this.input_ = this.root_.querySelector(strings$13.INPUT_SELECTOR);
      this.label_ = this.root_.querySelector(strings$13.LABEL_SELECTOR);
      this.helptextElement = null;
      this.ripple = null;
      if (this.input_.hasAttribute('aria-controls')) {
        this.helptextElement = document.getElementById(this.input_.getAttribute('aria-controls'));
      }
      if (this.root_.classList.contains(cssClasses$13.BOX)) {
        this.ripple = rippleFactory(this.root_);
      }
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      if (this.ripple) {
        this.ripple.destroy();
      }
      _get$5(MDCTextfield.prototype.__proto__ || Object.getPrototypeOf(MDCTextfield.prototype), 'destroy', this).call(this);
    }
  }, {
    key: 'initialSyncWithDom',
    value: function initialSyncWithDom() {
      this.disabled = this.input_.disabled;
    }
  }, {
    key: 'getDefaultFoundation',
    value: function getDefaultFoundation() {
      var _this2 = this;

      return new MDCTextfieldFoundation(Object.assign({
        addClass: function addClass(className) {
          return _this2.root_.classList.add(className);
        },
        removeClass: function removeClass(className) {
          return _this2.root_.classList.remove(className);
        },
        addClassToLabel: function addClassToLabel(className) {
          var label = _this2.label_;
          if (label) {
            label.classList.add(className);
          }
        },
        removeClassFromLabel: function removeClassFromLabel(className) {
          var label = _this2.label_;
          if (label) {
            label.classList.remove(className);
          }
        }
      }, this.getInputAdapterMethods_(), this.getHelptextAdapterMethods_()));
    }
  }, {
    key: 'getInputAdapterMethods_',
    value: function getInputAdapterMethods_() {
      var _this3 = this;

      return {
        registerInputFocusHandler: function registerInputFocusHandler(handler) {
          return _this3.input_.addEventListener('focus', handler);
        },
        registerInputBlurHandler: function registerInputBlurHandler(handler) {
          return _this3.input_.addEventListener('blur', handler);
        },
        registerInputInputHandler: function registerInputInputHandler(handler) {
          return _this3.input_.addEventListener('input', handler);
        },
        registerInputKeydownHandler: function registerInputKeydownHandler(handler) {
          return _this3.input_.addEventListener('keydown', handler);
        },
        deregisterInputFocusHandler: function deregisterInputFocusHandler(handler) {
          return _this3.input_.removeEventListener('focus', handler);
        },
        deregisterInputBlurHandler: function deregisterInputBlurHandler(handler) {
          return _this3.input_.removeEventListener('blur', handler);
        },
        deregisterInputInputHandler: function deregisterInputInputHandler(handler) {
          return _this3.input_.removeEventListener('input', handler);
        },
        deregisterInputKeydownHandler: function deregisterInputKeydownHandler(handler) {
          return _this3.input_.removeEventListener('keydown', handler);
        },
        getNativeInput: function getNativeInput() {
          return _this3.input_;
        }
      };
    }
  }, {
    key: 'getHelptextAdapterMethods_',
    value: function getHelptextAdapterMethods_() {
      var _this4 = this;

      return {
        addClassToHelptext: function addClassToHelptext(className) {
          if (_this4.helptextElement) {
            _this4.helptextElement.classList.add(className);
          }
        },
        removeClassFromHelptext: function removeClassFromHelptext(className) {
          if (_this4.helptextElement) {
            _this4.helptextElement.classList.remove(className);
          }
        },
        helptextHasClass: function helptextHasClass(className) {
          if (!_this4.helptextElement) {
            return false;
          }
          return _this4.helptextElement.classList.contains(className);
        },
        setHelptextAttr: function setHelptextAttr(name, value) {
          if (_this4.helptextElement) {
            _this4.helptextElement.setAttribute(name, value);
          }
        },
        removeHelptextAttr: function removeHelptextAttr(name) {
          if (_this4.helptextElement) {
            _this4.helptextElement.removeAttribute(name);
          }
        }
      };
    }
  }, {
    key: 'disabled',
    get: function get() {
      return this.foundation_.isDisabled();
    },
    set: function set(disabled) {
      this.foundation_.setDisabled(disabled);
    }
  }], [{
    key: 'attachTo',
    value: function attachTo(root) {
      return new MDCTextfield(root);
    }
  }]);

  return MDCTextfield;
}(MDCComponent);

var MD_TEXTFIELD_CONTROL_VALUE_ACCESSOR = {
    provide: _angular_forms.NG_VALUE_ACCESSOR,
    useExisting: _angular_core.forwardRef(function () { return TextfieldComponent; }),
    multi: true
};
var nextElId_$3 = 0;
var TextfieldHelptextDirective = (function () {
    function TextfieldHelptextDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
        this.ariaHidden = 'true';
    }
    Object.defineProperty(TextfieldHelptextDirective.prototype, "classPersistent", {
        get: function () {
            return this.persistent ? 'mdc-textfield-helptext--persistent' : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextfieldHelptextDirective.prototype, "classValidation", {
        get: function () {
            return this.validation ? 'mdc-textfield-helptext--validation-msg' : '';
        },
        enumerable: true,
        configurable: true
    });
    TextfieldHelptextDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-textfield-helptext]'
                },] },
    ];
    /** @nocollapse */
    TextfieldHelptextDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    TextfieldHelptextDirective.propDecorators = {
        'id': [{ type: _angular_core.Input },],
        'persistent': [{ type: _angular_core.Input },],
        'validation': [{ type: _angular_core.Input },],
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-textfield-helptext',] },],
        'ariaHidden': [{ type: _angular_core.HostBinding, args: ['attr.aria-hidden',] },],
        'classPersistent': [{ type: _angular_core.HostBinding, args: ['class.mdc-textfield-helptext--persistent',] },],
        'classValidation': [{ type: _angular_core.HostBinding, args: ['class.mdc-textfield-helptext--validation-msg',] },],
    };
    return TextfieldHelptextDirective;
}());
var TextfieldLabelDirective = (function () {
    function TextfieldLabelDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    TextfieldLabelDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-textfield-label], mdc-textfield-label'
                },] },
    ];
    /** @nocollapse */
    TextfieldLabelDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    TextfieldLabelDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-textfield__label',] },],
    };
    return TextfieldLabelDirective;
}());
var TextfieldComponent = (function () {
    function TextfieldComponent(_renderer, _root, _registry) {
        var _this = this;
        this._renderer = _renderer;
        this._root = _root;
        this._registry = _registry;
        this.id = "mdc-textfield-" + ++nextElId_$3;
        this.type = 'text';
        this.placeholder = '';
        this.focus = new _angular_core.EventEmitter();
        this.blur = new _angular_core.EventEmitter();
        this.input = new _angular_core.EventEmitter();
        this.keydown = new _angular_core.EventEmitter();
        this.isHostClass = true;
        this.onTouched = function () { };
        this._controlValueAccessorChangeFn = function (value) { };
        this._mdcAdapter = {
            addClass: function (className) {
                _this._renderer.addClass(_this._root.nativeElement, className);
            },
            removeClass: function (className) {
                _this._renderer.removeClass(_this._root.nativeElement, className);
            },
            addClassToLabel: function (className) {
                if (_this.inputLabel) {
                    if (_this.label && !_this.fullwidth) {
                        _this._renderer.addClass(_this.inputLabel.elementRef.nativeElement, className);
                    }
                }
            },
            removeClassFromLabel: function (className) {
                if (_this.inputLabel) {
                    if (_this.label && !_this.fullwidth) {
                        _this._renderer.removeClass(_this.inputLabel.elementRef.nativeElement, className);
                    }
                }
            },
            addClassToHelptext: function (className) {
                if (_this.helpText) {
                    _this._renderer.addClass(_this.helpText, className);
                }
            },
            removeClassFromHelptext: function (className) {
                if (_this.helpText) {
                    _this._renderer.removeClass(_this.helpText, className);
                }
            },
            registerInputFocusHandler: function (handler) {
                if (_this.inputEl) {
                    _this._registry.listen_(_this._renderer, 'focus', handler, _this.inputEl);
                }
            },
            deregisterInputFocusHandler: function (handler) {
                _this._registry.unlisten_('focus', handler);
            },
            registerInputBlurHandler: function (handler) {
                if (_this.inputEl) {
                    _this._registry.listen_(_this._renderer, 'blur', handler, _this.inputEl);
                }
            },
            deregisterInputBlurHandler: function (handler) {
                _this._registry.unlisten_('blur', handler);
            },
            registerInputInputHandler: function (handler) {
                if (_this.inputEl) {
                    _this._registry.listen_(_this._renderer, 'input', handler, _this.inputEl);
                }
            },
            deregisterInputInputHandler: function (handler) {
                _this._registry.unlisten_('input', handler);
            },
            registerInputKeydownHandler: function (handler) {
                if (_this.inputEl) {
                    _this._registry.listen_(_this._renderer, 'keydown', handler, _this.inputEl);
                }
            },
            deregisterInputKeydownHandler: function (handler) {
                _this._registry.unlisten_('keydown', handler);
            },
            setHelptextAttr: function (name, value) {
                if (_this.helpText) {
                    _this._renderer.setAttribute(_this.helpText.elementRef.nativeElement, name, value);
                }
            },
            removeHelptextAttr: function (name) {
                if (_this.helpText) {
                    _this._renderer.removeAttribute(_this.helpText.elementRef.nativeElement, name);
                }
            },
            helptextHasClass: function (className) {
                return _this.helpText ? _this.helpText.elementRef.nativeElement.classList.contains(className) : false;
            },
            getNativeInput: function () {
                return _this.inputEl ? _this.inputEl.nativeElement : null;
            }
        };
        this._foundation = new MDCTextfieldFoundation(this._mdcAdapter);
    }
    Object.defineProperty(TextfieldComponent.prototype, "inputId", {
        get: function () {
            return "input-" + this.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextfieldComponent.prototype, "disabled", {
        get: function () { return this._foundation.isDisabled(); },
        set: function (value) {
            if (this.inputEl) {
                this._foundation.setDisabled(value);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextfieldComponent.prototype, "classMultiline", {
        get: function () {
            return this.multiline ? 'mdc-textfield--multiline' : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextfieldComponent.prototype, "classFullwidth", {
        get: function () {
            return this.fullwidth ? 'mdc-textfield--fullwidth' : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextfieldComponent.prototype, "classDense", {
        get: function () {
            return this.dense ? 'mdc-textfield--dense' : '';
        },
        enumerable: true,
        configurable: true
    });
    TextfieldComponent.prototype.ngAfterViewInit = function () {
        this._foundation.init();
    };
    TextfieldComponent.prototype.ngOnDestroy = function () {
        this._foundation.destroy();
    };
    TextfieldComponent.prototype.onFocus = function (evt) {
        this.focus.emit(evt);
    };
    TextfieldComponent.prototype.onBlur = function (evt) {
        this._controlValueAccessorChangeFn(evt.target.value);
        this.blur.emit(evt);
    };
    TextfieldComponent.prototype.onInput = function (evt) {
        evt.stopPropagation();
        this._controlValueAccessorChangeFn(evt.target.value);
        this.input.emit(evt);
    };
    TextfieldComponent.prototype.onKeyDown = function (evt) {
        evt.stopPropagation();
        this.keydown.emit(evt);
    };
    TextfieldComponent.prototype.writeValue = function (value) {
        if (value) {
            this.value = value;
            this._mdcAdapter.addClass('mdc-textfield--upgraded');
            if (!this.fullwidth) {
                this._mdcAdapter.addClassToLabel('mdc-textfield__label--float-above');
            }
        }
    };
    TextfieldComponent.prototype.registerOnChange = function (fn) {
        this._controlValueAccessorChangeFn = fn;
    };
    TextfieldComponent.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    TextfieldComponent.decorators = [
        { type: _angular_core.Component, args: [{
                    selector: 'mdc-textfield',
                    template: "\n  <textarea *ngIf=\"multiline\"\n    #input\n    [rows]=\"rows\"\n    [cols]=\"cols\"\n    class=\"mdc-textfield__input\"\n    type=\"text\"\n    [attr.name]=\"name\"\n    [id]=\"inputId\"\n    [placeholder]=\"placeholder ? placeholder : ''\"\n    [tabindex]=\"tabindex\"\n    [maxlength]=\"maxlength\"\n    [attr.aria-label]=\"placeholder\"\n    (focus)=\"onFocus($event)\"\n    (blur)=\"onBlur($event)\"\n    (input)=\"onInput($event)\"\n    (keydown)=\"onKeyDown($event)\"\n    [(ngModel)]=\"value\"\n    [disabled]=\"disabled\"\n    [required]=\"required\"></textarea>\n  <input *ngIf=\"!multiline\"\n    #input\n    class=\"mdc-textfield__input\"\n    [type]=\"type\"\n    [id]=\"inputId\"\n    [attr.name]=\"name\"\n    [(ngModel)]=\"value\"\n    [placeholder]=\"placeholder\"\n    [tabindex]=\"tabindex\"\n    [maxlength]=\"maxlength\"\n    [disabled]=\"disabled\"\n    [required]=\"required\"\n    (focus)=\"onFocus($event)\"\n    (keydown)=\"onKeyDown($event)\"\n    (blur)=\"onBlur($event)\"\n    (input)=\"onInput($event)\" />\n    <mdc-textfield-label [attr.for]=\"inputId\" *ngIf=\"!placeholder\">{{label}}</mdc-textfield-label>\n  ",
                    encapsulation: _angular_core.ViewEncapsulation.None,
                    providers: [
                        MD_TEXTFIELD_CONTROL_VALUE_ACCESSOR
                    ],
                },] },
    ];
    /** @nocollapse */
    TextfieldComponent.ctorParameters = function () { return [
        { type: _angular_core.Renderer2, },
        { type: _angular_core.ElementRef, },
        { type: EventRegistry, },
    ]; };
    TextfieldComponent.propDecorators = {
        'id': [{ type: _angular_core.Input },],
        'name': [{ type: _angular_core.Input },],
        'type': [{ type: _angular_core.Input },],
        'value': [{ type: _angular_core.Input },],
        'disabled': [{ type: _angular_core.Input },],
        'dense': [{ type: _angular_core.Input },],
        'required': [{ type: _angular_core.Input },],
        'label': [{ type: _angular_core.Input },],
        'placeholder': [{ type: _angular_core.Input },],
        'tabindex': [{ type: _angular_core.Input },],
        'rows': [{ type: _angular_core.Input },],
        'cols': [{ type: _angular_core.Input },],
        'maxlength': [{ type: _angular_core.Input },],
        'fullwidth': [{ type: _angular_core.Input },],
        'multiline': [{ type: _angular_core.Input },],
        'focus': [{ type: _angular_core.Output },],
        'blur': [{ type: _angular_core.Output },],
        'input': [{ type: _angular_core.Output },],
        'keydown': [{ type: _angular_core.Output },],
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-textfield',] },],
        'classMultiline': [{ type: _angular_core.HostBinding, args: ['class.mdc-textfield--multiline',] },],
        'classFullwidth': [{ type: _angular_core.HostBinding, args: ['class.mdc-textfield--fullwidth',] },],
        'classDense': [{ type: _angular_core.HostBinding, args: ['class.mdc-textfield--dense',] },],
        'inputEl': [{ type: _angular_core.ViewChild, args: ['input',] },],
        'helpText': [{ type: _angular_core.ViewChild, args: [TextfieldHelptextDirective,] },],
        'inputLabel': [{ type: _angular_core.ViewChild, args: [TextfieldLabelDirective,] },],
    };
    return TextfieldComponent;
}());

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = Object.setPrototypeOf ||
    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var MD_TEXTFIELDBOX_CONTROL_VALUE_ACCESSOR = {
    provide: _angular_forms.NG_VALUE_ACCESSOR,
    useExisting: _angular_core.forwardRef(function () { return TextfieldBoxComponent; }),
    multi: true
};
var TextfieldBottomLineDirective = (function () {
    function TextfieldBottomLineDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    TextfieldBottomLineDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-textfield-bottom-line], mdc-textfield-bottom-line'
                },] },
    ];
    /** @nocollapse */
    TextfieldBottomLineDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    TextfieldBottomLineDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-textfield__bottom-line',] },],
    };
    return TextfieldBottomLineDirective;
}());
var TextfieldBoxComponent = (function (_super) {
    __extends(TextfieldBoxComponent, _super);
    function TextfieldBoxComponent(_renderer, _root, _registry, _ripple) {
        var _this = _super.call(this, _renderer, _root, _registry) || this;
        _this._ripple = _ripple;
        _this.isHostClass = true;
        _this._ripple.init();
        return _this;
    }
    TextfieldBoxComponent.decorators = [
        { type: _angular_core.Component, args: [{
                    selector: 'mdc-textfield-box',
                    template: "\n  <input #input class=\"mdc-textfield__input\"\n  [type]=\"type\"\n  [id]=\"id\"\n  [attr.name]=\"name\"\n  [(ngModel)]=\"value\"\n  [tabindex]=\"tabindex\"\n  [maxlength]=\"maxlength\"\n  [disabled]=\"disabled\"\n  [required]=\"required\"\n  (focus)=\"onFocus($event)\"\n  (keydown)=\"onKeyDown($event)\"\n  (blur)=\"onBlur($event)\"\n  (input)=\"onInput($event)\" />\n  <mdc-textfield-label [attr.for]=\"inputId\">{{label}}</mdc-textfield-label>\n  <mdc-textfield-bottom-line></mdc-textfield-bottom-line>\n  ",
                    providers: [
                        MD_TEXTFIELDBOX_CONTROL_VALUE_ACCESSOR,
                        Ripple,
                    ]
                },] },
    ];
    /** @nocollapse */
    TextfieldBoxComponent.ctorParameters = function () { return [
        { type: _angular_core.Renderer2, decorators: [{ type: _angular_core.Inject, args: [_angular_core.Renderer2,] },] },
        { type: _angular_core.ElementRef, decorators: [{ type: _angular_core.Inject, args: [_angular_core.ElementRef,] },] },
        { type: EventRegistry, decorators: [{ type: _angular_core.Inject, args: [EventRegistry,] },] },
        { type: Ripple, },
    ]; };
    TextfieldBoxComponent.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-textfield--box',] },],
    };
    return TextfieldBoxComponent;
}(TextfieldComponent));

var TEXTFIELD_COMPONENTS = [
    TextfieldComponent,
    TextfieldHelptextDirective,
    TextfieldBoxComponent,
    TextfieldBottomLineDirective,
    TextfieldLabelDirective,
];
var TextfieldModule = (function () {
    function TextfieldModule() {
    }
    TextfieldModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    imports: [_angular_forms.FormsModule, _angular_common.CommonModule],
                    exports: [TEXTFIELD_COMPONENTS],
                    declarations: [TEXTFIELD_COMPONENTS],
                },] },
    ];
    /** @nocollapse */
    TextfieldModule.ctorParameters = function () { return []; };
    return TextfieldModule;
}());

var ThemeDark = (function () {
    function ThemeDark(_renderer, _root) {
        this._renderer = _renderer;
        this._root = _root;
        this.nativeEl = this._root.nativeElement;
    }
    ThemeDark.prototype.ngOnChanges = function (changes) {
        var change = changes['mdcThemeDark'];
        if (!toBoolean(change.currentValue)) {
            this._renderer.removeClass(this.nativeEl, 'mdc-theme--dark');
        }
        else {
            this._renderer.addClass(this.nativeEl, 'mdc-theme--dark');
        }
    };
    ThemeDark.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-theme-dark]'
                },] },
    ];
    /** @nocollapse */
    ThemeDark.ctorParameters = function () { return [
        { type: _angular_core.Renderer2, },
        { type: _angular_core.ElementRef, },
    ]; };
    ThemeDark.propDecorators = {
        'mdcThemeDark': [{ type: _angular_core.Input, args: ['mdc-theme-dark',] },],
    };
    return ThemeDark;
}());

var THEME_DIRECTIVES = [
    ThemeDark
];
var ThemeModule = (function () {
    function ThemeModule() {
    }
    ThemeModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    exports: [THEME_DIRECTIVES],
                    declarations: [THEME_DIRECTIVES],
                },] },
    ];
    /** @nocollapse */
    ThemeModule.ctorParameters = function () { return []; };
    return ThemeModule;
}());

var ToolbarTitleDirective = (function () {
    function ToolbarTitleDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    ToolbarTitleDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-toolbar-title], mdc-toolbar-title'
                },] },
    ];
    /** @nocollapse */
    ToolbarTitleDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    ToolbarTitleDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-toolbar__title',] },],
    };
    return ToolbarTitleDirective;
}());

var ToolbarRowDirective = (function () {
    function ToolbarRowDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    ToolbarRowDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: 'mdc-toolbar-row'
                },] },
    ];
    /** @nocollapse */
    ToolbarRowDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    ToolbarRowDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-toolbar__row',] },],
    };
    return ToolbarRowDirective;
}());

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var cssClasses$14 = {
  FIXED: 'mdc-toolbar--fixed',
  FIXED_LASTROW: 'mdc-toolbar--fixed-lastrow-only',
  FIXED_AT_LAST_ROW: 'mdc-toolbar--fixed-at-last-row',
  TOOLBAR_ROW_FLEXIBLE: 'mdc-toolbar--flexible',
  FLEXIBLE_DEFAULT_BEHAVIOR: 'mdc-toolbar--flexible-default-behavior',
  FLEXIBLE_MAX: 'mdc-toolbar--flexible-space-maximized',
  FLEXIBLE_MIN: 'mdc-toolbar--flexible-space-minimized'
};

var strings$14 = {
  TITLE_SELECTOR: '.mdc-toolbar__title',
  FIRST_ROW_SELECTOR: '.mdc-toolbar__row:first-child',
  CHANGE_EVENT: 'MDCToolbar:change'
};

var numbers$4 = {
  MAX_TITLE_SIZE: 2.125,
  MIN_TITLE_SIZE: 1.25,
  TOOLBAR_ROW_HEIGHT: 64,
  TOOLBAR_ROW_MOBILE_HEIGHT: 56,
  TOOLBAR_MOBILE_BREAKPOINT: 600
};

var _createClass$36 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$36(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$30(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$30(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var MDCToolbarFoundation = function (_MDCFoundation) {
  _inherits$30(MDCToolbarFoundation, _MDCFoundation);

  _createClass$36(MDCToolbarFoundation, null, [{
    key: 'cssClasses',
    get: function get() {
      return cssClasses$14;
    }
  }, {
    key: 'strings',
    get: function get() {
      return strings$14;
    }
  }, {
    key: 'numbers',
    get: function get() {
      return numbers$4;
    }
  }, {
    key: 'defaultAdapter',
    get: function get() {
      return {
        hasClass: function hasClass() {
          return (/* className: string */ /* boolean */false
          );
        },
        addClass: function addClass() /* className: string */{},
        removeClass: function removeClass() /* className: string */{},
        registerScrollHandler: function registerScrollHandler() /* handler: EventListener */{},
        deregisterScrollHandler: function deregisterScrollHandler() /* handler: EventListener */{},
        registerResizeHandler: function registerResizeHandler() /* handler: EventListener */{},
        deregisterResizeHandler: function deregisterResizeHandler() /* handler: EventListener */{},
        getViewportWidth: function getViewportWidth() {
          return (/* number */0
          );
        },
        getViewportScrollY: function getViewportScrollY() {
          return (/* number */0
          );
        },
        getOffsetHeight: function getOffsetHeight() {
          return (/* number */0
          );
        },
        getFirstRowElementOffsetHeight: function getFirstRowElementOffsetHeight() {
          return (/* number */0
          );
        },
        notifyChange: function notifyChange() /* evtData: {flexibleExpansionRatio: number} */{},
        setStyle: function setStyle() /* property: string, value: string */{},
        setStyleForTitleElement: function setStyleForTitleElement() /* property: string, value: string */{},
        setStyleForFlexibleRowElement: function setStyleForFlexibleRowElement() /* property: string, value: string */{},
        setStyleForFixedAdjustElement: function setStyleForFixedAdjustElement() /* property: string, value: string */{}
      };
    }
  }]);

  function MDCToolbarFoundation(adapter) {
    _classCallCheck$36(this, MDCToolbarFoundation);

    var _this = _possibleConstructorReturn$30(this, (MDCToolbarFoundation.__proto__ || Object.getPrototypeOf(MDCToolbarFoundation)).call(this, Object.assign(MDCToolbarFoundation.defaultAdapter, adapter)));

    _this.resizeHandler_ = function () {
      return _this.checkRowHeight_();
    };
    _this.scrollHandler_ = function () {
      return _this.updateToolbarStyles_();
    };
    _this.checkRowHeightFrame_ = 0;
    _this.scrollFrame_ = 0;
    _this.executedLastChange_ = false;

    _this.calculations_ = {
      toolbarRowHeight: 0,
      // Calculated Height ratio. We use ratio to calculate corresponding heights in resize event.
      toolbarRatio: 0, // The ratio of toolbar height to row height
      flexibleExpansionRatio: 0, // The ratio of flexible space height to row height
      maxTranslateYRatio: 0, // The ratio of max toolbar move up distance to row height
      scrollThresholdRatio: 0, // The ratio of max scrollTop that we should listen to to row height
      // Derived Heights based on the above key ratios.
      toolbarHeight: 0,
      flexibleExpansionHeight: 0, // Flexible row minus toolbar height (derived)
      maxTranslateYDistance: 0, // When toolbar only fix last row (derived)
      scrollThreshold: 0
    };
    // Toolbar fixed behavior
    // If toolbar is fixed
    _this.fixed_ = false;
    // If fixed is targeted only at the last row
    _this.fixedLastrow_ = false;
    // Toolbar flexible behavior
    // If the first row is flexible
    _this.hasFlexibleRow_ = false;
    // If use the default behavior
    _this.useFlexDefaultBehavior_ = false;
    return _this;
  }

  _createClass$36(MDCToolbarFoundation, [{
    key: 'init',
    value: function init() {
      this.fixed_ = this.adapter_.hasClass(MDCToolbarFoundation.cssClasses.FIXED);
      this.fixedLastrow_ = this.adapter_.hasClass(MDCToolbarFoundation.cssClasses.FIXED_LASTROW) & this.fixed_;
      this.hasFlexibleRow_ = this.adapter_.hasClass(MDCToolbarFoundation.cssClasses.TOOLBAR_ROW_FLEXIBLE);
      if (this.hasFlexibleRow_) {
        this.useFlexDefaultBehavior_ = this.adapter_.hasClass(MDCToolbarFoundation.cssClasses.FLEXIBLE_DEFAULT_BEHAVIOR);
      }
      this.initKeyRatio_();
      this.setKeyHeights_();
      this.adapter_.registerResizeHandler(this.resizeHandler_);
      this.adapter_.registerScrollHandler(this.scrollHandler_);
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      this.adapter_.deregisterResizeHandler(this.resizeHandler_);
      this.adapter_.deregisterScrollHandler(this.scrollHandler_);
    }
  }, {
    key: 'updateAdjustElementStyles',
    value: function updateAdjustElementStyles() {
      if (this.fixed_) {
        this.adapter_.setStyleForFixedAdjustElement('margin-top', this.calculations_.toolbarHeight + 'px');
      }
    }
  }, {
    key: 'getFlexibleExpansionRatio_',
    value: function getFlexibleExpansionRatio_(scrollTop) {
      // To prevent division by zero when there is no flexibleExpansionHeight
      var delta = 0.0001;
      return Math.max(0, 1 - scrollTop / (this.calculations_.flexibleExpansionHeight + delta));
    }
  }, {
    key: 'checkRowHeight_',
    value: function checkRowHeight_() {
      var _this2 = this;

      cancelAnimationFrame(this.checkRowHeightFrame_);
      this.checkRowHeightFrame_ = requestAnimationFrame(function () {
        return _this2.setKeyHeights_();
      });
    }
  }, {
    key: 'setKeyHeights_',
    value: function setKeyHeights_() {
      var newToolbarRowHeight = this.getRowHeight_();
      if (newToolbarRowHeight !== this.calculations_.toolbarRowHeight) {
        this.calculations_.toolbarRowHeight = newToolbarRowHeight;
        this.calculations_.toolbarHeight = this.calculations_.toolbarRatio * this.calculations_.toolbarRowHeight;
        this.calculations_.flexibleExpansionHeight = this.calculations_.flexibleExpansionRatio * this.calculations_.toolbarRowHeight;
        this.calculations_.maxTranslateYDistance = this.calculations_.maxTranslateYRatio * this.calculations_.toolbarRowHeight;
        this.calculations_.scrollThreshold = this.calculations_.scrollThresholdRatio * this.calculations_.toolbarRowHeight;
        this.updateAdjustElementStyles();
        this.updateToolbarStyles_();
      }
    }
  }, {
    key: 'updateToolbarStyles_',
    value: function updateToolbarStyles_() {
      var _this3 = this;

      cancelAnimationFrame(this.scrollFrame_);
      this.scrollFrame_ = requestAnimationFrame(function () {
        var scrollTop = _this3.adapter_.getViewportScrollY();
        var hasScrolledOutOfThreshold = _this3.scrolledOutOfThreshold_(scrollTop);

        if (hasScrolledOutOfThreshold && _this3.executedLastChange_) {
          return;
        }

        var flexibleExpansionRatio = _this3.getFlexibleExpansionRatio_(scrollTop);

        _this3.updateToolbarFlexibleState_(flexibleExpansionRatio);
        if (_this3.fixedLastrow_) {
          _this3.updateToolbarFixedState_(scrollTop);
        }
        if (_this3.hasFlexibleRow_) {
          _this3.updateFlexibleRowElementStyles_(flexibleExpansionRatio);
        }
        _this3.executedLastChange_ = hasScrolledOutOfThreshold;
        _this3.adapter_.notifyChange({ flexibleExpansionRatio: flexibleExpansionRatio });
      });
    }
  }, {
    key: 'scrolledOutOfThreshold_',
    value: function scrolledOutOfThreshold_(scrollTop) {
      return scrollTop > this.calculations_.scrollThreshold;
    }
  }, {
    key: 'initKeyRatio_',
    value: function initKeyRatio_() {
      var toolbarRowHeight = this.getRowHeight_();
      var firstRowMaxRatio = this.adapter_.getFirstRowElementOffsetHeight() / toolbarRowHeight;
      this.calculations_.toolbarRatio = this.adapter_.getOffsetHeight() / toolbarRowHeight;
      this.calculations_.flexibleExpansionRatio = firstRowMaxRatio - 1;
      this.calculations_.maxTranslateYRatio = this.fixedLastrow_ ? this.calculations_.toolbarRatio - firstRowMaxRatio : 0;
      this.calculations_.scrollThresholdRatio = (this.fixedLastrow_ ? this.calculations_.toolbarRatio : firstRowMaxRatio) - 1;
    }
  }, {
    key: 'getRowHeight_',
    value: function getRowHeight_() {
      var breakpoint = MDCToolbarFoundation.numbers.TOOLBAR_MOBILE_BREAKPOINT;
      return this.adapter_.getViewportWidth() < breakpoint ? MDCToolbarFoundation.numbers.TOOLBAR_ROW_MOBILE_HEIGHT : MDCToolbarFoundation.numbers.TOOLBAR_ROW_HEIGHT;
    }
  }, {
    key: 'updateToolbarFlexibleState_',
    value: function updateToolbarFlexibleState_(flexibleExpansionRatio) {
      this.adapter_.removeClass(MDCToolbarFoundation.cssClasses.FLEXIBLE_MAX);
      this.adapter_.removeClass(MDCToolbarFoundation.cssClasses.FLEXIBLE_MIN);
      if (flexibleExpansionRatio === 1) {
        this.adapter_.addClass(MDCToolbarFoundation.cssClasses.FLEXIBLE_MAX);
      } else if (flexibleExpansionRatio === 0) {
        this.adapter_.addClass(MDCToolbarFoundation.cssClasses.FLEXIBLE_MIN);
      }
    }
  }, {
    key: 'updateToolbarFixedState_',
    value: function updateToolbarFixedState_(scrollTop) {
      var translateDistance = Math.max(0, Math.min(scrollTop - this.calculations_.flexibleExpansionHeight, this.calculations_.maxTranslateYDistance));
      this.adapter_.setStyle('transform', 'translateY(' + -translateDistance + 'px)');

      if (translateDistance === this.calculations_.maxTranslateYDistance) {
        this.adapter_.addClass(MDCToolbarFoundation.cssClasses.FIXED_AT_LAST_ROW);
      } else {
        this.adapter_.removeClass(MDCToolbarFoundation.cssClasses.FIXED_AT_LAST_ROW);
      }
    }
  }, {
    key: 'updateFlexibleRowElementStyles_',
    value: function updateFlexibleRowElementStyles_(flexibleExpansionRatio) {
      if (this.fixed_) {
        var height = this.calculations_.flexibleExpansionHeight * flexibleExpansionRatio;
        this.adapter_.setStyleForFlexibleRowElement('height', height + this.calculations_.toolbarRowHeight + 'px');
      }
      if (this.useFlexDefaultBehavior_) {
        this.updateElementStylesDefaultBehavior_(flexibleExpansionRatio);
      }
    }
  }, {
    key: 'updateElementStylesDefaultBehavior_',
    value: function updateElementStylesDefaultBehavior_(flexibleExpansionRatio) {
      var maxTitleSize = MDCToolbarFoundation.numbers.MAX_TITLE_SIZE;
      var minTitleSize = MDCToolbarFoundation.numbers.MIN_TITLE_SIZE;
      var currentTitleSize = (maxTitleSize - minTitleSize) * flexibleExpansionRatio + minTitleSize;

      this.adapter_.setStyleForTitleElement('font-size', currentTitleSize + 'rem');
    }
  }]);

  return MDCToolbarFoundation;
}(MDCFoundation);

/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var supportsPassive_$2 = void 0;

// Determine whether the current browser supports passive event listeners, and if so, use them.
function applyPassive$2() {
  var globalObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;
  var forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (supportsPassive_$2 === undefined || forceRefresh) {
    var isSupported = false;
    try {
      globalObj.document.addEventListener('test', null, { get passive() {
          isSupported = true;
        } });
    } catch (e) {}

    supportsPassive_$2 = isSupported;
  }

  return supportsPassive_$2 ? { passive: true } : false;
}

var _createClass$35 = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck$35(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$29(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$29(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var MDCToolbar = function (_MDCComponent) {
  _inherits$29(MDCToolbar, _MDCComponent);

  function MDCToolbar() {
    _classCallCheck$35(this, MDCToolbar);

    return _possibleConstructorReturn$29(this, (MDCToolbar.__proto__ || Object.getPrototypeOf(MDCToolbar)).apply(this, arguments));
  }

  _createClass$35(MDCToolbar, [{
    key: 'getDefaultFoundation',
    value: function getDefaultFoundation() {
      var _this2 = this;

      return new MDCToolbarFoundation({
        hasClass: function hasClass(className) {
          return _this2.root_.classList.contains(className);
        },
        addClass: function addClass(className) {
          return _this2.root_.classList.add(className);
        },
        removeClass: function removeClass(className) {
          return _this2.root_.classList.remove(className);
        },
        registerScrollHandler: function registerScrollHandler(handler) {
          return window.addEventListener('scroll', handler, applyPassive$2());
        },
        deregisterScrollHandler: function deregisterScrollHandler(handler) {
          return window.removeEventListener('scroll', handler, applyPassive$2());
        },
        registerResizeHandler: function registerResizeHandler(handler) {
          return window.addEventListener('resize', handler);
        },
        deregisterResizeHandler: function deregisterResizeHandler(handler) {
          return window.removeEventListener('resize', handler);
        },
        getViewportWidth: function getViewportWidth() {
          return window.innerWidth;
        },
        getViewportScrollY: function getViewportScrollY() {
          return window.pageYOffset;
        },
        getOffsetHeight: function getOffsetHeight() {
          return _this2.root_.offsetHeight;
        },
        getFirstRowElementOffsetHeight: function getFirstRowElementOffsetHeight() {
          return _this2.firstRowElement_.offsetHeight;
        },
        notifyChange: function notifyChange(evtData) {
          return _this2.emit(MDCToolbarFoundation.strings.CHANGE_EVENT, evtData);
        },
        setStyle: function setStyle(property, value) {
          return _this2.root_.style.setProperty(property, value);
        },
        setStyleForTitleElement: function setStyleForTitleElement(property, value) {
          return _this2.titleElement_.style.setProperty(property, value);
        },
        setStyleForFlexibleRowElement: function setStyleForFlexibleRowElement(property, value) {
          return _this2.firstRowElement_.style.setProperty(property, value);
        },
        setStyleForFixedAdjustElement: function setStyleForFixedAdjustElement(property, value) {
          if (_this2.fixedAdjustElement) {
            _this2.fixedAdjustElement.style.setProperty(property, value);
          }
        }
      });
    }
  }, {
    key: 'firstRowElement_',
    get: function get() {
      return this.root_.querySelector(MDCToolbarFoundation.strings.FIRST_ROW_SELECTOR);
    }
  }, {
    key: 'titleElement_',
    get: function get() {
      return this.root_.querySelector(MDCToolbarFoundation.strings.TITLE_SELECTOR);
    }
  }, {
    key: 'fixedAdjustElement',
    set: function set(fixedAdjustElement) {
      this.fixedAdjustElement_ = fixedAdjustElement;
      this.foundation_.updateAdjustElementStyles();
    },
    get: function get() {
      return this.fixedAdjustElement_;
    }
  }], [{
    key: 'attachTo',
    value: function attachTo(root) {
      return new MDCToolbar(root);
    }
  }]);

  return MDCToolbar;
}(MDCComponent);

var ToolbarComponent = (function () {
    function ToolbarComponent(_renderer, _root, _registry) {
        var _this = this;
        this._renderer = _renderer;
        this._root = _root;
        this._registry = _registry;
        this.flexibleDefaultBehavior = true;
        this.change = new _angular_core.EventEmitter();
        this.isHostClass = true;
        this._mdcAdapter = {
            hasClass: function (className) {
                return _this._root.nativeElement.classList.contains(className);
            },
            addClass: function (className) {
                _this._renderer.addClass(_this._root.nativeElement, className);
            },
            removeClass: function (className) {
                _this._renderer.removeClass(_this._root.nativeElement, className);
            },
            registerScrollHandler: function (handler) {
                if (isBrowser()) {
                    _this._registry.listen_(_this._renderer, 'scroll', handler, 'window');
                }
            },
            deregisterScrollHandler: function (handler) {
                if (isBrowser()) {
                    _this._registry.unlisten_('scroll', handler);
                }
            },
            registerResizeHandler: function (handler) {
                if (isBrowser()) {
                    _this._registry.listen_(_this._renderer, 'resize', handler, 'window');
                }
            },
            deregisterResizeHandler: function (handler) {
                if (isBrowser()) {
                    _this._registry.unlisten_('resize', handler);
                }
            },
            getViewportWidth: function () {
                return isBrowser() ? window.innerWidth : 0;
            },
            getViewportScrollY: function () {
                return isBrowser() ? window.pageYOffset : 0;
            },
            getOffsetHeight: function () { return _this._root.nativeElement.offsetHeight; },
            getFirstRowElementOffsetHeight: function () {
                return _this.mdcFirstRow ? _this.mdcFirstRow.elementRef.nativeElement.offsetHeight : 0;
            },
            notifyChange: function (evtData) {
                _this.change.emit(evtData.flexibleExpansionRatio);
            },
            setStyle: function (property, value) {
                _this._renderer.setStyle(_this._root.nativeElement, property, value);
            },
            setStyleForTitleElement: function (property, value) {
                if (_this.mdcTitle) {
                    _this._renderer.setStyle(_this.mdcTitle.elementRef.nativeElement, property, value);
                }
            },
            setStyleForFlexibleRowElement: function (property, value) {
                if (_this.mdcFirstRow) {
                    _this._renderer.setStyle(_this.mdcFirstRow.elementRef.nativeElement, property, value);
                }
            },
            setStyleForFixedAdjustElement: function (property, value) {
                if (isBrowser() && _this.fixed) {
                    _this._renderer.setStyle(document.body, property, value);
                }
            }
        };
        this._foundation = new MDCToolbarFoundation(this._mdcAdapter);
    }
    Object.defineProperty(ToolbarComponent.prototype, "classFixedToolbar", {
        get: function () {
            return this.fixed ? 'mdc-toolbar--fixed' : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToolbarComponent.prototype, "classWaterfallToolbar", {
        get: function () {
            return this.waterfall ? 'mdc-toolbar--waterfall' : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToolbarComponent.prototype, "classFlexibleToolbar", {
        get: function () {
            return this.flexible ? 'mdc-toolbar--flexible' : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToolbarComponent.prototype, "classFixedLastrow", {
        get: function () {
            return this.fixedLastrow ? 'mdc-toolbar--fixed-lastrow-only' : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToolbarComponent.prototype, "classFlexibleDefaultBehavior", {
        get: function () {
            return this.flexible && this.flexibleDefaultBehavior ? 'mdc-toolbar--flexible-default-behavior' : '';
        },
        enumerable: true,
        configurable: true
    });
    ToolbarComponent.prototype.ngAfterViewInit = function () {
        this._foundation.init();
    };
    ToolbarComponent.prototype.ngOnDestroy = function () {
        this._foundation.destroy();
    };
    ToolbarComponent.prototype.updateAdjustElementStyles = function () {
        this._foundation.updateAdjustElementStyles();
    };
    ToolbarComponent.decorators = [
        { type: _angular_core.Component, args: [{
                    selector: 'mdc-toolbar',
                    template: '<ng-content></ng-content>',
                    encapsulation: _angular_core.ViewEncapsulation.None
                },] },
    ];
    /** @nocollapse */
    ToolbarComponent.ctorParameters = function () { return [
        { type: _angular_core.Renderer2, },
        { type: _angular_core.ElementRef, },
        { type: EventRegistry, },
    ]; };
    ToolbarComponent.propDecorators = {
        'flexible': [{ type: _angular_core.Input },],
        'flexibleDefaultBehavior': [{ type: _angular_core.Input },],
        'fixed': [{ type: _angular_core.Input },],
        'waterfall': [{ type: _angular_core.Input },],
        'fixedLastrow': [{ type: _angular_core.Input },],
        'change': [{ type: _angular_core.Output },],
        'mdcFirstRow': [{ type: _angular_core.ContentChild, args: [ToolbarRowDirective,] },],
        'mdcTitle': [{ type: _angular_core.ContentChild, args: [ToolbarTitleDirective,] },],
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-toolbar',] },],
        'classFixedToolbar': [{ type: _angular_core.HostBinding, args: ['class.mdc-toolbar--fixed',] },],
        'classWaterfallToolbar': [{ type: _angular_core.HostBinding, args: ['class.mdc-toolbar--waterfall',] },],
        'classFlexibleToolbar': [{ type: _angular_core.HostBinding, args: ['class.mdc-toolbar--flexible',] },],
        'classFixedLastrow': [{ type: _angular_core.HostBinding, args: ['class.mdc-toolbar--fixed-lastrow-only',] },],
        'classFlexibleDefaultBehavior': [{ type: _angular_core.HostBinding, args: ['class.mdc-toolbar--flexible-default-behavior',] },],
    };
    return ToolbarComponent;
}());

var ToolbarSectionDirective = (function () {
    function ToolbarSectionDirective() {
        this.isHostClass = true;
    }
    Object.defineProperty(ToolbarSectionDirective.prototype, "classAlignStart", {
        get: function () {
            return this.alignStart ? 'mdc-toolbar__section--align-start' : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToolbarSectionDirective.prototype, "classAlignEnd", {
        get: function () {
            return this.alignEnd ? 'mdc-toolbar__section--align-end' : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ToolbarSectionDirective.prototype, "classShrinkToFit", {
        get: function () {
            return this.shrinkToFit ? 'mdc-toolbar__section--shrink-to-fit' : '';
        },
        enumerable: true,
        configurable: true
    });
    ToolbarSectionDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: 'mdc-toolbar-section'
                },] },
    ];
    /** @nocollapse */
    ToolbarSectionDirective.ctorParameters = function () { return []; };
    ToolbarSectionDirective.propDecorators = {
        'alignStart': [{ type: _angular_core.Input },],
        'alignEnd': [{ type: _angular_core.Input },],
        'shrinkToFit': [{ type: _angular_core.Input },],
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-toolbar__section',] },],
        'classAlignStart': [{ type: _angular_core.HostBinding, args: ['class.mdc-toolbar__section--align-start',] },],
        'classAlignEnd': [{ type: _angular_core.HostBinding, args: ['class.mdc-toolbar__section--align-end',] },],
        'classShrinkToFit': [{ type: _angular_core.HostBinding, args: ['class.mdc-toolbar__section--shrink-to-fit',] },],
    };
    return ToolbarSectionDirective;
}());

var ToolbarFixedAdjustDirective = (function () {
    function ToolbarFixedAdjustDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    ToolbarFixedAdjustDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-toolbar-fixed-adjust], mdc-toolbar-fixed-adjust'
                },] },
    ];
    /** @nocollapse */
    ToolbarFixedAdjustDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    ToolbarFixedAdjustDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-toolbar-fixed-adjust',] },],
    };
    return ToolbarFixedAdjustDirective;
}());

var ToolbarIconDirective = (function () {
    function ToolbarIconDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    ToolbarIconDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: 'a[mdc-toolbar-icon], span[mdc-toolbar-icon], button[mdc-toolbar-icon]'
                },] },
    ];
    /** @nocollapse */
    ToolbarIconDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    ToolbarIconDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-toolbar__icon',] },],
    };
    return ToolbarIconDirective;
}());

var ToolbarIconMenuDirective = (function () {
    function ToolbarIconMenuDirective(elementRef) {
        this.elementRef = elementRef;
        this.isHostClass = true;
    }
    ToolbarIconMenuDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: 'a[mdc-toolbar-icon-menu], span[mdc-toolbar-icon-menu], button[mdc-toolbar-icon-menu]'
                },] },
    ];
    /** @nocollapse */
    ToolbarIconMenuDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
    ]; };
    ToolbarIconMenuDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-toolbar__icon--menu',] },],
    };
    return ToolbarIconMenuDirective;
}());

var TOOLBAR_COMPONENTS = [
    ToolbarComponent,
    ToolbarRowDirective,
    ToolbarSectionDirective,
    ToolbarTitleDirective,
    ToolbarFixedAdjustDirective,
    ToolbarIconDirective,
    ToolbarIconMenuDirective
];
var ToolbarModule = (function () {
    function ToolbarModule() {
    }
    ToolbarModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    exports: [TOOLBAR_COMPONENTS],
                    declarations: [TOOLBAR_COMPONENTS],
                },] },
    ];
    /** @nocollapse */
    ToolbarModule.ctorParameters = function () { return []; };
    return ToolbarModule;
}());

var Typography = (function () {
    function Typography() {
        this.isHostClass = true;
    }
    Typography.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-typography]'
                },] },
    ];
    /** @nocollapse */
    Typography.ctorParameters = function () { return []; };
    Typography.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-typography',] },],
    };
    return Typography;
}());
var AdjustMarginDirective = (function () {
    function AdjustMarginDirective() {
        this.isHostClass = true;
    }
    AdjustMarginDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-typography-adjust-margin]'
                },] },
    ];
    /** @nocollapse */
    AdjustMarginDirective.ctorParameters = function () { return []; };
    AdjustMarginDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-typography--adjust-margin',] },],
    };
    return AdjustMarginDirective;
}());
var Display4Directive = (function () {
    function Display4Directive() {
        this.isHostClass = true;
    }
    Display4Directive.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-typography-display4]'
                },] },
    ];
    /** @nocollapse */
    Display4Directive.ctorParameters = function () { return []; };
    Display4Directive.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-typography--display4',] },],
    };
    return Display4Directive;
}());
var Display3Directive = (function () {
    function Display3Directive() {
        this.isHostClass = true;
    }
    Display3Directive.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-typography-display3]'
                },] },
    ];
    /** @nocollapse */
    Display3Directive.ctorParameters = function () { return []; };
    Display3Directive.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-typography--display3',] },],
    };
    return Display3Directive;
}());
var Display2Directive = (function () {
    function Display2Directive() {
        this.isHostClass = true;
    }
    Display2Directive.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-typography-display2]'
                },] },
    ];
    /** @nocollapse */
    Display2Directive.ctorParameters = function () { return []; };
    Display2Directive.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-typography--display2',] },],
    };
    return Display2Directive;
}());
var Display1Directive = (function () {
    function Display1Directive() {
        this.isHostClass = true;
    }
    Display1Directive.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-typography-display1]'
                },] },
    ];
    /** @nocollapse */
    Display1Directive.ctorParameters = function () { return []; };
    Display1Directive.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-typography--display1',] },],
    };
    return Display1Directive;
}());
var HeadlineDirective = (function () {
    function HeadlineDirective() {
        this.isHostClass = true;
    }
    HeadlineDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-typography-headline]'
                },] },
    ];
    /** @nocollapse */
    HeadlineDirective.ctorParameters = function () { return []; };
    HeadlineDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-typography--headline',] },],
    };
    return HeadlineDirective;
}());
var TitleDirective = (function () {
    function TitleDirective() {
        this.isHostClass = true;
    }
    TitleDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-typography-title]'
                },] },
    ];
    /** @nocollapse */
    TitleDirective.ctorParameters = function () { return []; };
    TitleDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-typography--title',] },],
    };
    return TitleDirective;
}());
var Subheading2Directive = (function () {
    function Subheading2Directive() {
        this.isHostClass = true;
    }
    Subheading2Directive.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-typography-subheading2]'
                },] },
    ];
    /** @nocollapse */
    Subheading2Directive.ctorParameters = function () { return []; };
    Subheading2Directive.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-typography--subheading2',] },],
    };
    return Subheading2Directive;
}());
var Subheading1Directive = (function () {
    function Subheading1Directive() {
        this.isHostClass = true;
    }
    Subheading1Directive.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-typography-subheading1]'
                },] },
    ];
    /** @nocollapse */
    Subheading1Directive.ctorParameters = function () { return []; };
    Subheading1Directive.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-typography--subheading1',] },],
    };
    return Subheading1Directive;
}());
var Body2Directive = (function () {
    function Body2Directive() {
        this.isHostClass = true;
    }
    Body2Directive.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-typography-body2]'
                },] },
    ];
    /** @nocollapse */
    Body2Directive.ctorParameters = function () { return []; };
    Body2Directive.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-typography--body2',] },],
    };
    return Body2Directive;
}());
var Body1Directive = (function () {
    function Body1Directive() {
        this.isHostClass = true;
    }
    Body1Directive.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-typography-body1]'
                },] },
    ];
    /** @nocollapse */
    Body1Directive.ctorParameters = function () { return []; };
    Body1Directive.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-typography--body1',] },],
    };
    return Body1Directive;
}());
var CaptionDirective = (function () {
    function CaptionDirective() {
        this.isHostClass = true;
    }
    CaptionDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[mdc-typography-caption]'
                },] },
    ];
    /** @nocollapse */
    CaptionDirective.ctorParameters = function () { return []; };
    CaptionDirective.propDecorators = {
        'isHostClass': [{ type: _angular_core.HostBinding, args: ['class.mdc-typography--caption',] },],
    };
    return CaptionDirective;
}());

var TYPOGRAPHY_DIRECTIVES = [
    Typography,
    AdjustMarginDirective,
    Display1Directive,
    Display2Directive,
    Display3Directive,
    Display4Directive,
    HeadlineDirective,
    TitleDirective,
    Subheading1Directive,
    Subheading2Directive,
    Body1Directive,
    Body2Directive,
    CaptionDirective
];
var TypographyModule = (function () {
    function TypographyModule() {
    }
    TypographyModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    exports: [TYPOGRAPHY_DIRECTIVES],
                    declarations: [TYPOGRAPHY_DIRECTIVES],
                },] },
    ];
    /** @nocollapse */
    TypographyModule.ctorParameters = function () { return []; };
    return TypographyModule;
}());

var MATERIAL_MODULES = [
    ButtonModule,
    CardModule,
    CheckboxModule,
    ElevationModule,
    DialogModule,
    DrawerModule,
    FabModule,
    FormFieldModule,
    LinearProgressModule,
    ListModule,
    MaterialIconModule,
    MenuModule,
    RadioModule,
    RippleModule,
    SnackbarModule,
    SwitchModule,
    TabModule,
    TextfieldModule,
    ThemeModule,
    ToolbarModule,
    TypographyModule,
];
var MaterialModule = (function () {
    function MaterialModule() {
    }
    MaterialModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    imports: MATERIAL_MODULES,
                    exports: MATERIAL_MODULES
                },] },
    ];
    /** @nocollapse */
    MaterialModule.ctorParameters = function () { return []; };
    return MaterialModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

exports.ɵa = EventRegistry;
exports.ɵd = ListDividerComponent;
exports.ɵb = ListGroupDirective;
exports.ɵc = ListGroupSubheaderDirective;
exports.ɵe = MenuItemDirective;
exports.ɵh = SnackbarActionButtonDirective;
exports.ɵg = SnackbarActionWrapperDirective;
exports.ɵf = SnackbarTextDirective;
exports.ɵj = AdjustMarginDirective;
exports.ɵt = Body1Directive;
exports.ɵs = Body2Directive;
exports.ɵu = CaptionDirective;
exports.ɵn = Display1Directive;
exports.ɵm = Display2Directive;
exports.ɵl = Display3Directive;
exports.ɵk = Display4Directive;
exports.ɵo = HeadlineDirective;
exports.ɵr = Subheading1Directive;
exports.ɵq = Subheading2Directive;
exports.ɵp = TitleDirective;
exports.ɵi = Typography;
exports.MaterialModule = MaterialModule;
exports.ButtonModule = ButtonModule;
exports.ButtonComponent = ButtonComponent;
exports.CardModule = CardModule;
exports.CardComponent = CardComponent;
exports.CardPrimaryDirective = CardPrimaryDirective;
exports.CardSupportingTextDirective = CardSupportingTextDirective;
exports.CardTitleDirective = CardTitleDirective;
exports.CardSubtitleComponent = CardSubtitleComponent;
exports.CardActionsDirective = CardActionsDirective;
exports.CardMediaItemDirective = CardMediaItemDirective;
exports.CardMediaComponent = CardMediaComponent;
exports.CardHorizontalComponent = CardHorizontalComponent;
exports.CheckboxModule = CheckboxModule;
exports.MD_CHECKBOX_CONTROL_VALUE_ACCESSOR = MD_CHECKBOX_CONTROL_VALUE_ACCESSOR;
exports.CheckboxComponent = CheckboxComponent;
exports.ElevationModule = ElevationModule;
exports.ElevationTransition = ElevationTransition;
exports.ElevationDirective = ElevationDirective;
exports.DialogModule = DialogModule;
exports.DialogSurfaceDirective = DialogSurfaceDirective;
exports.DialogHeaderDirective = DialogHeaderDirective;
exports.DialogHeaderTitleDirective = DialogHeaderTitleDirective;
exports.DialogBodyDirective = DialogBodyDirective;
exports.DialogFooterDirective = DialogFooterDirective;
exports.DialogBackdropDirective = DialogBackdropDirective;
exports.DialogButtonAcceptDirective = DialogButtonAcceptDirective;
exports.DialogButtonCancelDirective = DialogButtonCancelDirective;
exports.DialogComponent = DialogComponent;
exports.DrawerModule = DrawerModule;
exports.PermanentDrawerSpacerDirective = PermanentDrawerSpacerDirective;
exports.PermanentDrawerContentDirective = PermanentDrawerContentDirective;
exports.PermanentDrawerSelectedDirective = PermanentDrawerSelectedDirective;
exports.PermanentDrawerComponent = PermanentDrawerComponent;
exports.TemporaryDrawerNavigationDirective = TemporaryDrawerNavigationDirective;
exports.TemporaryDrawerSpacerDirective = TemporaryDrawerSpacerDirective;
exports.TemporaryDrawerContentDirective = TemporaryDrawerContentDirective;
exports.TemporaryDrawerHeaderDirective = TemporaryDrawerHeaderDirective;
exports.TemporaryDrawerHeaderContentDirective = TemporaryDrawerHeaderContentDirective;
exports.TemporaryDrawerSelectedDirective = TemporaryDrawerSelectedDirective;
exports.TemporaryDrawerComponent = TemporaryDrawerComponent;
exports.PersistentDrawerNavigationDirective = PersistentDrawerNavigationDirective;
exports.PersistentDrawerSpacerDirective = PersistentDrawerSpacerDirective;
exports.PersistentDrawerHeaderDirective = PersistentDrawerHeaderDirective;
exports.PersistentDrawerHeaderContentDirective = PersistentDrawerHeaderContentDirective;
exports.PersistentDrawerContentDirective = PersistentDrawerContentDirective;
exports.PersistentDrawerSelectedDirective = PersistentDrawerSelectedDirective;
exports.PersistentDrawerComponent = PersistentDrawerComponent;
exports.FabModule = FabModule;
exports.FabIconDirective = FabIconDirective;
exports.FabComponent = FabComponent;
exports.FormFieldModule = FormFieldModule;
exports.FormFieldDirective = FormFieldDirective;
exports.LinearProgressModule = LinearProgressModule;
exports.LinearProgressComponent = LinearProgressComponent;
exports.ListModule = ListModule;
exports.ListComponent = ListComponent;
exports.ListItemDirective = ListItemDirective;
exports.ListItemStartDirective = ListItemStartDirective;
exports.ListItemEndDirective = ListItemEndDirective;
exports.ListItemTextDirective = ListItemTextDirective;
exports.ListItemTextSecondaryDirective = ListItemTextSecondaryDirective;
exports.MaterialIconModule = MaterialIconModule;
exports.MaterialIcon = MaterialIcon;
exports.MenuModule = MenuModule;
exports.MenuAnchorDirective = MenuAnchorDirective;
exports.MenuDividerComponent = MenuDividerComponent;
exports.MenuComponent = MenuComponent;
exports.RadioModule = RadioModule;
exports.MD_RADIO_CONTROL_VALUE_ACCESSOR = MD_RADIO_CONTROL_VALUE_ACCESSOR;
exports.RadioComponent = RadioComponent;
exports.RippleModule = RippleModule;
exports.Ripple = Ripple;
exports.SnackbarModule = SnackbarModule;
exports.SnackbarComponent = SnackbarComponent;
exports.SwitchModule = SwitchModule;
exports.MD_SWITCH_CONTROL_VALUE_ACCESSOR = MD_SWITCH_CONTROL_VALUE_ACCESSOR;
exports.SwitchComponent = SwitchComponent;
exports.TabModule = TabModule;
exports.TabIconDirective = TabIconDirective;
exports.TabIconTextDirective = TabIconTextDirective;
exports.TabComponent = TabComponent;
exports.TabBarDirective = TabBarDirective;
exports.TabBarScrollIndicatorInnerDirective = TabBarScrollIndicatorInnerDirective;
exports.TabBarScrollBackDirective = TabBarScrollBackDirective;
exports.TabBarScrollForwardDirective = TabBarScrollForwardDirective;
exports.TabBarScrollFrameDirective = TabBarScrollFrameDirective;
exports.TabBarScrollerDirective = TabBarScrollerDirective;
exports.TextfieldModule = TextfieldModule;
exports.MD_TEXTFIELD_CONTROL_VALUE_ACCESSOR = MD_TEXTFIELD_CONTROL_VALUE_ACCESSOR;
exports.TextfieldHelptextDirective = TextfieldHelptextDirective;
exports.TextfieldLabelDirective = TextfieldLabelDirective;
exports.TextfieldComponent = TextfieldComponent;
exports.MD_TEXTFIELDBOX_CONTROL_VALUE_ACCESSOR = MD_TEXTFIELDBOX_CONTROL_VALUE_ACCESSOR;
exports.TextfieldBottomLineDirective = TextfieldBottomLineDirective;
exports.TextfieldBoxComponent = TextfieldBoxComponent;
exports.ThemeModule = ThemeModule;
exports.ThemeDark = ThemeDark;
exports.ToolbarModule = ToolbarModule;
exports.ToolbarComponent = ToolbarComponent;
exports.ToolbarRowDirective = ToolbarRowDirective;
exports.ToolbarSectionDirective = ToolbarSectionDirective;
exports.ToolbarTitleDirective = ToolbarTitleDirective;
exports.ToolbarFixedAdjustDirective = ToolbarFixedAdjustDirective;
exports.ToolbarIconDirective = ToolbarIconDirective;
exports.ToolbarIconMenuDirective = ToolbarIconMenuDirective;
exports.TypographyModule = TypographyModule;

});

var material_es5_2 = material_es5.MaterialModule;
var material_es5_3 = material_es5.ButtonModule;
var material_es5_4 = material_es5.ButtonComponent;
var material_es5_5 = material_es5.CardModule;
var material_es5_6 = material_es5.CardComponent;
var material_es5_7 = material_es5.CardPrimaryDirective;
var material_es5_8 = material_es5.CardSupportingTextDirective;
var material_es5_9 = material_es5.CardTitleDirective;
var material_es5_10 = material_es5.CardSubtitleComponent;
var material_es5_11 = material_es5.CardActionsDirective;
var material_es5_12 = material_es5.CardMediaItemDirective;
var material_es5_13 = material_es5.CardMediaComponent;
var material_es5_14 = material_es5.CardHorizontalComponent;
var material_es5_15 = material_es5.CheckboxModule;
var material_es5_17 = material_es5.CheckboxComponent;
var material_es5_18 = material_es5.ElevationModule;
var material_es5_20 = material_es5.ElevationDirective;
var material_es5_21 = material_es5.DialogModule;
var material_es5_22 = material_es5.DialogSurfaceDirective;
var material_es5_23 = material_es5.DialogHeaderDirective;
var material_es5_24 = material_es5.DialogHeaderTitleDirective;
var material_es5_25 = material_es5.DialogBodyDirective;
var material_es5_26 = material_es5.DialogFooterDirective;
var material_es5_27 = material_es5.DialogBackdropDirective;
var material_es5_28 = material_es5.DialogButtonAcceptDirective;
var material_es5_29 = material_es5.DialogButtonCancelDirective;
var material_es5_30 = material_es5.DialogComponent;
var material_es5_31 = material_es5.DrawerModule;
var material_es5_33 = material_es5.PermanentDrawerContentDirective;
var material_es5_34 = material_es5.PermanentDrawerSelectedDirective;
var material_es5_35 = material_es5.PermanentDrawerComponent;
var material_es5_36 = material_es5.TemporaryDrawerNavigationDirective;
var material_es5_37 = material_es5.TemporaryDrawerSpacerDirective;
var material_es5_38 = material_es5.TemporaryDrawerContentDirective;
var material_es5_39 = material_es5.TemporaryDrawerHeaderDirective;
var material_es5_40 = material_es5.TemporaryDrawerHeaderContentDirective;
var material_es5_41 = material_es5.TemporaryDrawerSelectedDirective;
var material_es5_42 = material_es5.TemporaryDrawerComponent;
var material_es5_43 = material_es5.PersistentDrawerNavigationDirective;
var material_es5_44 = material_es5.PersistentDrawerSpacerDirective;
var material_es5_48 = material_es5.PersistentDrawerSelectedDirective;
var material_es5_49 = material_es5.PersistentDrawerComponent;
var material_es5_50 = material_es5.FabModule;
var material_es5_51 = material_es5.FabIconDirective;
var material_es5_52 = material_es5.FabComponent;
var material_es5_53 = material_es5.FormFieldModule;
var material_es5_54 = material_es5.FormFieldDirective;
var material_es5_55 = material_es5.LinearProgressModule;
var material_es5_56 = material_es5.LinearProgressComponent;
var material_es5_57 = material_es5.ListModule;
var material_es5_58 = material_es5.ListComponent;
var material_es5_59 = material_es5.ListItemDirective;
var material_es5_60 = material_es5.ListItemStartDirective;
var material_es5_61 = material_es5.ListItemEndDirective;
var material_es5_62 = material_es5.ListItemTextDirective;
var material_es5_63 = material_es5.ListItemTextSecondaryDirective;
var material_es5_64 = material_es5.MaterialIconModule;
var material_es5_65 = material_es5.MaterialIcon;
var material_es5_66 = material_es5.MenuModule;
var material_es5_67 = material_es5.MenuAnchorDirective;
var material_es5_68 = material_es5.MenuDividerComponent;
var material_es5_69 = material_es5.MenuComponent;
var material_es5_70 = material_es5.RadioModule;
var material_es5_72 = material_es5.RadioComponent;
var material_es5_73 = material_es5.RippleModule;
var material_es5_74 = material_es5.Ripple;
var material_es5_75 = material_es5.SnackbarModule;
var material_es5_76 = material_es5.SnackbarComponent;
var material_es5_77 = material_es5.SwitchModule;
var material_es5_79 = material_es5.SwitchComponent;
var material_es5_80 = material_es5.TabModule;
var material_es5_81 = material_es5.TabIconDirective;
var material_es5_82 = material_es5.TabIconTextDirective;
var material_es5_83 = material_es5.TabComponent;
var material_es5_84 = material_es5.TabBarDirective;
var material_es5_85 = material_es5.TabBarScrollIndicatorInnerDirective;
var material_es5_86 = material_es5.TabBarScrollBackDirective;
var material_es5_87 = material_es5.TabBarScrollForwardDirective;
var material_es5_88 = material_es5.TabBarScrollFrameDirective;
var material_es5_89 = material_es5.TabBarScrollerDirective;
var material_es5_90 = material_es5.TextfieldModule;
var material_es5_92 = material_es5.TextfieldHelptextDirective;
var material_es5_93 = material_es5.TextfieldLabelDirective;
var material_es5_94 = material_es5.TextfieldComponent;
var material_es5_96 = material_es5.TextfieldBottomLineDirective;
var material_es5_97 = material_es5.TextfieldBoxComponent;
var material_es5_98 = material_es5.ThemeModule;
var material_es5_99 = material_es5.ThemeDark;
var material_es5_100 = material_es5.ToolbarModule;
var material_es5_101 = material_es5.ToolbarComponent;
var material_es5_102 = material_es5.ToolbarRowDirective;
var material_es5_103 = material_es5.ToolbarSectionDirective;
var material_es5_104 = material_es5.ToolbarTitleDirective;
var material_es5_106 = material_es5.ToolbarIconDirective;
var material_es5_107 = material_es5.ToolbarIconMenuDirective;
var material_es5_108 = material_es5.TypographyModule;

var __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$3 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var ButtonDemoComponent = (function () {
    function ButtonDemoComponent() {
    }
    ButtonDemoComponent.prototype.handleClick = function () {
        this.message = {
            message: 'Sample text',
            actionText: 'Ok',
        };
        this.snack.show(this.message);
    };
    __decorate$3([
        ViewChild('snack'),
        __metadata$3("design:type", material_es5_76)
    ], ButtonDemoComponent.prototype, "snack", void 0);
    ButtonDemoComponent = __decorate$3([
        Component({
            selector: 'button-demo',
            templateUrl: './button-demo.component.html'
        })
    ], ButtonDemoComponent);
    return ButtonDemoComponent;
}());

var __decorate$4 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CardDemoComponent = (function () {
    function CardDemoComponent() {
    }
    CardDemoComponent = __decorate$4([
        Component({
            selector: 'card-demo',
            templateUrl: './card-demo.component.html'
        })
    ], CardDemoComponent);
    return CardDemoComponent;
}());

var __decorate$5 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CheckboxDemoComponent = (function () {
    function CheckboxDemoComponent() {
        this.isChecked = true;
    }
    CheckboxDemoComponent = __decorate$5([
        Component({
            selector: 'checkbox-demo',
            templateUrl: './checkbox-demo.component.html'
        })
    ], CheckboxDemoComponent);
    return CheckboxDemoComponent;
}());

var __decorate$6 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$4 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var DialogDemoComponent = (function () {
    function DialogDemoComponent() {
    }
    DialogDemoComponent.prototype.showDialog = function () {
        this.dialog.show();
    };
    DialogDemoComponent.prototype.showDialogScroll = function () {
        this.dialogScroll.show();
    };
    __decorate$6([
        ViewChild('dialog'),
        __metadata$4("design:type", material_es5_30)
    ], DialogDemoComponent.prototype, "dialog", void 0);
    __decorate$6([
        ViewChild('dialogscroll'),
        __metadata$4("design:type", material_es5_30)
    ], DialogDemoComponent.prototype, "dialogScroll", void 0);
    DialogDemoComponent = __decorate$6([
        Component({
            selector: 'dialog-demo',
            templateUrl: './dialog-demo.component.html'
        })
    ], DialogDemoComponent);
    return DialogDemoComponent;
}());

var __decorate$7 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$5 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var DrawerDemoComponent = (function () {
    function DrawerDemoComponent() {
    }
    DrawerDemoComponent.prototype.handleTemporary = function () {
        this.temporaryDrawer.open();
    };
    DrawerDemoComponent.prototype.handlePersistent = function () {
        if (!this.persistentDrawer.isOpen()) {
            this.persistentDrawer.open();
        }
        else {
            this.persistentDrawer.close();
        }
    };
    __decorate$7([
        ViewChild('temporary'),
        __metadata$5("design:type", material_es5_42)
    ], DrawerDemoComponent.prototype, "temporaryDrawer", void 0);
    __decorate$7([
        ViewChild('persistent'),
        __metadata$5("design:type", material_es5_49)
    ], DrawerDemoComponent.prototype, "persistentDrawer", void 0);
    DrawerDemoComponent = __decorate$7([
        Component({
            selector: 'drawer-demo',
            templateUrl: './drawer-demo.component.html'
        })
    ], DrawerDemoComponent);
    return DrawerDemoComponent;
}());

var __decorate$8 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var FabDemoComponent = (function () {
    function FabDemoComponent() {
    }
    FabDemoComponent = __decorate$8([
        Component({
            selector: 'fab-demo',
            templateUrl: './fab-demo.component.html'
        })
    ], FabDemoComponent);
    return FabDemoComponent;
}());

var __decorate$9 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ElevationDemoComponent = (function () {
    function ElevationDemoComponent() {
        this.items = Array.from(Array(25), function (x, i) { return i; });
    }
    ElevationDemoComponent = __decorate$9([
        Component({
            selector: 'elevation-demo',
            templateUrl: './elevation-demo.component.html'
        })
    ], ElevationDemoComponent);
    return ElevationDemoComponent;
}());

var __decorate$10 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var LinearProgressDemoComponent = (function () {
    function LinearProgressDemoComponent() {
    }
    LinearProgressDemoComponent = __decorate$10([
        Component({
            selector: 'linear-progress-demo',
            templateUrl: './linear-progress-demo.component.html'
        })
    ], LinearProgressDemoComponent);
    return LinearProgressDemoComponent;
}());

var __decorate$11 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ListDemoComponent = (function () {
    function ListDemoComponent() {
    }
    ListDemoComponent = __decorate$11([
        Component({
            selector: 'list-demo',
            templateUrl: './list-demo.component.html'
        })
    ], ListDemoComponent);
    return ListDemoComponent;
}());

var __decorate$12 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$6 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var MenuDemoComponent = (function () {
    function MenuDemoComponent() {
        this.selectedIndex = -1;
        this.focusedItemIndex = null;
        this.openingPoint = "topLeft";
    }
    MenuDemoComponent.prototype.handleChange = function () {
        this.menu.openFrom = this.openingPoint;
    };
    MenuDemoComponent.prototype.showMenu = function () {
        this.menu.open(this.focusedItemIndex);
    };
    MenuDemoComponent.prototype.handleMenuSelect = function (event) {
        this.selectedIndex = event;
    };
    __decorate$12([
        ViewChild('menu'),
        __metadata$6("design:type", material_es5_69)
    ], MenuDemoComponent.prototype, "menu", void 0);
    MenuDemoComponent = __decorate$12([
        Component({
            selector: 'menu-demo',
            templateUrl: './menu-demo.component.html'
        })
    ], MenuDemoComponent);
    return MenuDemoComponent;
}());

var __decorate$13 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var RadioDemoComponent = (function () {
    function RadioDemoComponent() {
        this.radioOption = "apple";
    }
    RadioDemoComponent = __decorate$13([
        Component({
            selector: 'radio-demo',
            templateUrl: './radio-demo.component.html'
        })
    ], RadioDemoComponent);
    return RadioDemoComponent;
}());

var __decorate$14 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$7 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var SnackbarDemoComponent = (function () {
    function SnackbarDemoComponent() {
        this.message = {
            message: 'Hello',
            actionText: 'Ok',
        };
    }
    SnackbarDemoComponent.prototype.show = function () {
        this.snack.show(this.message);
    };
    SnackbarDemoComponent.prototype.showStartAligned = function () {
        this.snackStart.show(this.message);
    };
    __decorate$14([
        ViewChild('snack'),
        __metadata$7("design:type", material_es5_76)
    ], SnackbarDemoComponent.prototype, "snack", void 0);
    __decorate$14([
        ViewChild('snackStart'),
        __metadata$7("design:type", material_es5_76)
    ], SnackbarDemoComponent.prototype, "snackStart", void 0);
    SnackbarDemoComponent = __decorate$14([
        Component({
            selector: 'snackbar-demo',
            templateUrl: './snackbar-demo.component.html'
        })
    ], SnackbarDemoComponent);
    return SnackbarDemoComponent;
}());

var __decorate$15 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SwitchDemoComponent = (function () {
    function SwitchDemoComponent() {
        this.isSwitchOn = true;
    }
    SwitchDemoComponent = __decorate$15([
        Component({
            selector: 'switch-demo',
            templateUrl: './switch-demo.component.html'
        })
    ], SwitchDemoComponent);
    return SwitchDemoComponent;
}());

var __decorate$16 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var TextfieldDemoComponent = (function () {
    function TextfieldDemoComponent() {
        this.username = null;
        this.prefill = 'John Doe';
        this.password = null;
        this.comments = null;
        this.subject = null;
        this.message = null;
        this.isDisabled = false;
        this.isRequired = true;
        this.isDense = false;
    }
    TextfieldDemoComponent = __decorate$16([
        Component({
            selector: 'textfield-demo',
            templateUrl: './textfield-demo.component.html'
        })
    ], TextfieldDemoComponent);
    return TextfieldDemoComponent;
}());

var __decorate$17 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ToolbarDemoComponent = (function () {
    function ToolbarDemoComponent() {
        this.isFixed = false;
        this.isFlexible = false;
        this.isWaterfall = false;
        this.isFixedLastRow = false;
    }
    ToolbarDemoComponent.prototype.handleToolbarChange = function (evt) {
        this.flexibleExpansionRatio = evt;
    };
    ToolbarDemoComponent = __decorate$17([
        Component({
            selector: 'toolbar-demo',
            templateUrl: './toolbar-demo.component.html'
        })
    ], ToolbarDemoComponent);
    return ToolbarDemoComponent;
}());

var __decorate$18 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var TypographyDemoComponent = (function () {
    function TypographyDemoComponent() {
    }
    TypographyDemoComponent = __decorate$18([
        Component({
            selector: 'typography-progress-demo',
            templateUrl: './typography-demo.component.html'
        })
    ], TypographyDemoComponent);
    return TypographyDemoComponent;
}());

var __decorate$19 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var TabDemoComponent = (function () {
    function TabDemoComponent() {
        this.tabLinks = [
            { label: 'Item One', link: 'first-tab', active: true },
            { label: 'Item Two', link: 'second-tab' },
            { label: 'Item Three', link: 'third-tab' },
        ];
    }
    TabDemoComponent = __decorate$19([
        Component({
            selector: 'tab-demo',
            templateUrl: './tab-demo.component.html'
        })
    ], TabDemoComponent);
    return TabDemoComponent;
}());
var ItemOneContent = (function () {
    function ItemOneContent() {
    }
    ItemOneContent = __decorate$19([
        Component({
            selector: 'item-one-routed-content',
            template: '<p class="panel" role="tabpanel">Item One</p>',
        })
    ], ItemOneContent);
    return ItemOneContent;
}());
var ItemTwoContent = (function () {
    function ItemTwoContent() {
    }
    ItemTwoContent = __decorate$19([
        Component({
            selector: 'item-two-routed-content',
            template: '<p class="panel" role="tabpanel">Item Two</p>',
        })
    ], ItemTwoContent);
    return ItemTwoContent;
}());
var ItemThreeContent = (function () {
    function ItemThreeContent() {
    }
    ItemThreeContent = __decorate$19([
        Component({
            selector: 'item-three-routed-content',
            template: '<p class="panel" role="tabpanel">Item Three</p>',
        })
    ], ItemThreeContent);
    return ItemThreeContent;
}());

var navigationLinks = [
    { name: 'Home', route: '/', icon: 'home', desc: '' },
    { name: 'Button', route: 'button-demo', icon: 'code', desc: 'Buttons communicate the action that will occur when the user touches them.' },
    { name: 'Card', route: 'card-demo', icon: 'credit_card', desc: 'A card is a sheet of material that serves as an entry point to more detailed information.' },
    { name: 'Checkbox', route: 'checkbox-demo', icon: 'check_box', desc: 'Checkboxes allow the user to select multiple options from a set.' },
    { name: 'Dialog', route: 'dialog-demo', icon: 'question_answer', desc: 'Dialogs inform users about a specific task, require decisions, or involve multiple tasks.' },
    { name: 'Drawer', route: 'drawer-demo', icon: 'code', desc: 'Drawers slide in from the left and contains the navigation destinations for your app.' },
    { name: 'Elevation', route: 'elevation-demo', icon: 'filter', desc: 'Elevation is the relative depth, or distance, between two surfaces along the z-axis.' },
    { name: 'Floating Action Button (FAB)', route: 'fab-demo', icon: 'add_circle_outline', desc: 'A floating action button represents the primary action in an application.' },
    { name: 'Linear-Progress', route: 'linear-progress-demo', icon: 'linear_scale', desc: 'Progress and activity indicators are visual indications of an app loading content.' },
    { name: 'List', route: 'list-demo', icon: 'list', desc: 'Lists present multiple line items vertically as a single continuous element.' },
    { name: 'Menu', route: 'menu-demo', icon: 'menu', desc: 'Menus display a list of choices on a transient sheet of material.' },
    { name: 'Radio Button', route: 'radio-demo', icon: 'radio_button_checked', desc: 'Radio buttons allow the user to select one option from a set.' },
    { name: 'Snackbar', route: 'snackbar-demo', icon: 'info_outline', desc: 'Snackbars provide brief feedback through a message at the bottom of the screen.' },
    { name: 'Switch', route: 'switch-demo', icon: 'wb_incandescent', desc: 'On/off switches toggle the state of a single settings option.' },
    { name: 'Tabs', route: 'tab-demo', icon: 'tab', desc: 'Tabs make it easy to explore and switch between different views.' },
    { name: 'Textfield', route: 'textfield-demo', icon: 'text_fields', desc: 'Text fields allow users to input, edit, and select text.' },
    { name: 'Toolbar', route: 'toolbar-demo', icon: 'code', desc: 'Toolbars appear a step above the sheet of material affected by their actions.' },
    { name: 'Typography', route: 'typography-demo', icon: 'text_format', desc: 'Material Design typography uses the Roboto font.' }
];

var __decorate$20 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HomeComponent = (function () {
    function HomeComponent() {
        this.navLinks = navigationLinks.filter(function (_) { return _.desc.length > 0; });
    }
    HomeComponent = __decorate$20([
        Component({
            selector: 'home',
            templateUrl: './home.component.html'
        })
    ], HomeComponent);
    return HomeComponent;
}());

var __decorate$21 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$8 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var NavbarComponent = (function () {
    function NavbarComponent(router) {
        this.router = router;
        this.navLinks = navigationLinks;
    }
    NavbarComponent.prototype.handleMenuClick = function () {
        if (!this.drawer.isOpen()) {
            this.drawer.open();
        }
        else {
            this.drawer.close();
        }
    };
    __decorate$21([
        ViewChild('drawer'),
        __metadata$8("design:type", material_es5_42)
    ], NavbarComponent.prototype, "drawer", void 0);
    NavbarComponent = __decorate$21([
        Component({
            selector: 'navbar',
            templateUrl: './navbar.component.html'
        }),
        __metadata$8("design:paramtypes", [Router])
    ], NavbarComponent);
    return NavbarComponent;
}());

var TABS_DEMO_ROUTES = [
    { path: '', component: ItemOneContent, outlet: 'taboutlet' },
    { path: 'first-tab', component: ItemOneContent, outlet: 'taboutlet' },
    { path: 'second-tab', component: ItemTwoContent, outlet: 'taboutlet' },
    { path: 'third-tab', component: ItemThreeContent, outlet: 'taboutlet' },
];

var demoAppRoutes = [
    { path: 'button-demo', component: ButtonDemoComponent },
    { path: 'checkbox-demo', component: CheckboxDemoComponent },
    { path: 'fab-demo', component: FabDemoComponent },
    { path: 'switch-demo', component: SwitchDemoComponent },
    { path: 'snackbar-demo', component: SnackbarDemoComponent },
    { path: 'menu-demo', component: MenuDemoComponent },
    { path: 'textfield-demo', component: TextfieldDemoComponent },
    { path: 'toolbar-demo', component: ToolbarDemoComponent },
    { path: 'linear-progress-demo', component: LinearProgressDemoComponent },
    { path: 'typography-demo', component: TypographyDemoComponent },
    { path: 'radio-demo', component: RadioDemoComponent },
    { path: 'card-demo', component: CardDemoComponent },
    { path: 'elevation-demo', component: ElevationDemoComponent },
    { path: 'list-demo', component: ListDemoComponent },
    { path: 'drawer-demo', component: DrawerDemoComponent },
    { path: 'dialog-demo', component: DialogDemoComponent },
    { path: 'tab-demo', component: TabDemoComponent, children: TABS_DEMO_ROUTES },
    { path: '', component: HomeComponent, pathMatch: 'full' },
    { path: '**', redirectTo: '' }
];

var __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$1 = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
// import { MaterialModule } from '../lib/public_api';
var AppModule = (function () {
    function AppModule(_appRef) {
        this._appRef = _appRef;
    }
    AppModule.prototype.ngDoBootstrap = function () {
        this._appRef.bootstrap(AppComponent);
    };
    AppModule = __decorate$1([
        NgModule({
            imports: [
                BrowserModule,
                FormsModule,
                HttpModule,
                FlexLayoutModule,
                material_es5_2,
                RouterModule.forRoot(demoAppRoutes, { useHash: true })
            ],
            declarations: [
                AppComponent,
                ButtonDemoComponent,
                CardDemoComponent,
                CheckboxDemoComponent,
                DialogDemoComponent,
                DrawerDemoComponent,
                ElevationDemoComponent,
                FabDemoComponent,
                HomeComponent,
                LinearProgressDemoComponent,
                ListDemoComponent,
                MenuDemoComponent,
                NavbarComponent,
                RadioDemoComponent,
                SnackbarDemoComponent,
                SwitchDemoComponent,
                TabDemoComponent,
                TextfieldDemoComponent,
                ToolbarDemoComponent,
                TypographyDemoComponent,
                ItemOneContent,
                ItemTwoContent,
                ItemThreeContent,
            ],
            entryComponents: [
                AppComponent
            ]
        }),
        __metadata$1("design:paramtypes", [ApplicationRef])
    ], AppModule);
    return AppModule;
}());

/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
/* tslint:disable */
var MaterialModuleNgFactory = createNgModuleFactory(material_es5_2, [], function (_l) {
    return moduleDef([moduleProvideDef(512, ComponentFactoryResolver, CodegenComponentFactoryResolver, [[8, []], [3, ComponentFactoryResolver], NgModuleRef]), moduleProvideDef(4608, RadioControlRegistry, RadioControlRegistry, []), moduleProvideDef(4608, NgLocalization, NgLocaleLocalization, [LOCALE_ID]), moduleProvideDef(4608, undefined, undefined, []), moduleProvideDef(512, material_es5_3, material_es5_3, []), moduleProvideDef(512, material_es5_5, material_es5_5, []),
        moduleProvideDef(512, InternalFormsSharedModule, InternalFormsSharedModule, []), moduleProvideDef(512, FormsModule, FormsModule, []), moduleProvideDef(512, material_es5_15, material_es5_15, []),
        moduleProvideDef(512, material_es5_18, material_es5_18, []), moduleProvideDef(512, material_es5_21, material_es5_21, []), moduleProvideDef(512, material_es5_31, material_es5_31, []), moduleProvideDef(512, material_es5_50, material_es5_50, []), moduleProvideDef(512, material_es5_53, material_es5_53, []),
        moduleProvideDef(512, material_es5_55, material_es5_55, []),
        moduleProvideDef(512, material_es5_57, material_es5_57, []), moduleProvideDef(512, material_es5_64, material_es5_64, []), moduleProvideDef(512, CommonModule, CommonModule, []), moduleProvideDef(512, material_es5_66, material_es5_66, []),
        moduleProvideDef(512, material_es5_70, material_es5_70, []), moduleProvideDef(512, material_es5_73, material_es5_73, []), moduleProvideDef(512, material_es5_75, material_es5_75, []), moduleProvideDef(512, material_es5_77, material_es5_77, []),
        moduleProvideDef(512, material_es5_80, material_es5_80, []), moduleProvideDef(512, material_es5_90, material_es5_90, []), moduleProvideDef(512, material_es5_98, material_es5_98, []), moduleProvideDef(512, material_es5_100, material_es5_100, []),
        moduleProvideDef(512, material_es5_108, material_es5_108, []), moduleProvideDef(512, material_es5_2, material_es5_2, [])]);
});
var ButtonModuleNgFactory = createNgModuleFactory(material_es5_3, [], function (_l) {
    return moduleDef([moduleProvideDef(512, ComponentFactoryResolver, CodegenComponentFactoryResolver, [[8, []], [3, ComponentFactoryResolver], NgModuleRef]), moduleProvideDef(512, material_es5_3, material_es5_3, [])]);
});
var CardModuleNgFactory = createNgModuleFactory(material_es5_5, [], function (_l) {
    return moduleDef([moduleProvideDef(512, ComponentFactoryResolver, CodegenComponentFactoryResolver, [[8, []], [3, ComponentFactoryResolver], NgModuleRef]), moduleProvideDef(512, material_es5_5, material_es5_5, [])]);
});
var CheckboxModuleNgFactory = createNgModuleFactory(material_es5_15, [], function (_l) {
    return moduleDef([moduleProvideDef(512, ComponentFactoryResolver, CodegenComponentFactoryResolver, [[8, []], [3, ComponentFactoryResolver], NgModuleRef]), moduleProvideDef(4608, RadioControlRegistry, RadioControlRegistry, []), moduleProvideDef(512, InternalFormsSharedModule, InternalFormsSharedModule, []), moduleProvideDef(512, FormsModule, FormsModule, []), moduleProvideDef(512, material_es5_15, material_es5_15, [])]);
});
var ElevationModuleNgFactory = createNgModuleFactory(material_es5_18, [], function (_l) {
    return moduleDef([moduleProvideDef(512, ComponentFactoryResolver, CodegenComponentFactoryResolver, [[8, []], [3, ComponentFactoryResolver], NgModuleRef]), moduleProvideDef(512, material_es5_18, material_es5_18, [])]);
});
var DialogModuleNgFactory = createNgModuleFactory(material_es5_21, [], function (_l) {
    return moduleDef([moduleProvideDef(512, ComponentFactoryResolver, CodegenComponentFactoryResolver, [[8, []], [3, ComponentFactoryResolver], NgModuleRef]), moduleProvideDef(512, material_es5_21, material_es5_21, [])]);
});
var DrawerModuleNgFactory = createNgModuleFactory(material_es5_31, [], function (_l) {
    return moduleDef([moduleProvideDef(512, ComponentFactoryResolver, CodegenComponentFactoryResolver, [[8, []], [3, ComponentFactoryResolver], NgModuleRef]), moduleProvideDef(512, material_es5_31, material_es5_31, [])]);
});
var FabModuleNgFactory = createNgModuleFactory(material_es5_50, [], function (_l) {
    return moduleDef([moduleProvideDef(512, ComponentFactoryResolver, CodegenComponentFactoryResolver, [[8, []], [3, ComponentFactoryResolver], NgModuleRef]), moduleProvideDef(512, material_es5_50, material_es5_50, [])]);
});
var FormFieldModuleNgFactory = createNgModuleFactory(material_es5_53, [], function (_l) {
    return moduleDef([moduleProvideDef(512, ComponentFactoryResolver, CodegenComponentFactoryResolver, [[8, []], [3, ComponentFactoryResolver], NgModuleRef]), moduleProvideDef(512, material_es5_53, material_es5_53, [])]);
});
var LinearProgressModuleNgFactory = createNgModuleFactory(material_es5_55, [], function (_l) {
    return moduleDef([moduleProvideDef(512, ComponentFactoryResolver, CodegenComponentFactoryResolver, [[8, []], [3, ComponentFactoryResolver], NgModuleRef]), moduleProvideDef(512, material_es5_55, material_es5_55, [])]);
});
var ListModuleNgFactory = createNgModuleFactory(material_es5_57, [], function (_l) {
    return moduleDef([moduleProvideDef(512, ComponentFactoryResolver, CodegenComponentFactoryResolver, [[8, []], [3, ComponentFactoryResolver], NgModuleRef]), moduleProvideDef(512, material_es5_57, material_es5_57, [])]);
});
var MaterialIconModuleNgFactory = createNgModuleFactory(material_es5_64, [], function (_l) {
    return moduleDef([moduleProvideDef(512, ComponentFactoryResolver, CodegenComponentFactoryResolver, [[8, []], [3, ComponentFactoryResolver], NgModuleRef]), moduleProvideDef(512, material_es5_64, material_es5_64, [])]);
});
var MenuModuleNgFactory = createNgModuleFactory(material_es5_66, [], function (_l) {
    return moduleDef([moduleProvideDef(512, ComponentFactoryResolver, CodegenComponentFactoryResolver, [[8, []], [3, ComponentFactoryResolver], NgModuleRef]), moduleProvideDef(4608, NgLocalization, NgLocaleLocalization, [LOCALE_ID]), moduleProvideDef(512, CommonModule, CommonModule, []), moduleProvideDef(512, material_es5_66, material_es5_66, [])]);
});
var RadioModuleNgFactory = createNgModuleFactory(material_es5_70, [], function (_l) {
    return moduleDef([moduleProvideDef(512, ComponentFactoryResolver, CodegenComponentFactoryResolver, [[8, []], [3, ComponentFactoryResolver], NgModuleRef]), moduleProvideDef(512, material_es5_70, material_es5_70, [])]);
});
var RippleModuleNgFactory = createNgModuleFactory(material_es5_73, [], function (_l) {
    return moduleDef([moduleProvideDef(512, ComponentFactoryResolver, CodegenComponentFactoryResolver, [[8, []], [3, ComponentFactoryResolver], NgModuleRef]), moduleProvideDef(4608, undefined, undefined, []), moduleProvideDef(512, material_es5_73, material_es5_73, [])]);
});
var SnackbarModuleNgFactory = createNgModuleFactory(material_es5_75, [], function (_l) {
    return moduleDef([moduleProvideDef(512, ComponentFactoryResolver, CodegenComponentFactoryResolver, [[8, []], [3, ComponentFactoryResolver], NgModuleRef]), moduleProvideDef(512, material_es5_75, material_es5_75, [])]);
});
var SwitchModuleNgFactory = createNgModuleFactory(material_es5_77, [], function (_l) {
    return moduleDef([moduleProvideDef(512, ComponentFactoryResolver, CodegenComponentFactoryResolver, [[8, []], [3, ComponentFactoryResolver], NgModuleRef]), moduleProvideDef(512, material_es5_77, material_es5_77, [])]);
});
var TabModuleNgFactory = createNgModuleFactory(material_es5_80, [], function (_l) {
    return moduleDef([moduleProvideDef(512, ComponentFactoryResolver, CodegenComponentFactoryResolver, [[8, []], [3, ComponentFactoryResolver], NgModuleRef]), moduleProvideDef(512, material_es5_80, material_es5_80, [])]);
});
var TextfieldModuleNgFactory = createNgModuleFactory(material_es5_90, [], function (_l) {
    return moduleDef([moduleProvideDef(512, ComponentFactoryResolver, CodegenComponentFactoryResolver, [[8, []], [3, ComponentFactoryResolver], NgModuleRef]), moduleProvideDef(4608, RadioControlRegistry, RadioControlRegistry, []), moduleProvideDef(4608, NgLocalization, NgLocaleLocalization, [LOCALE_ID]), moduleProvideDef(512, InternalFormsSharedModule, InternalFormsSharedModule, []), moduleProvideDef(512, FormsModule, FormsModule, []), moduleProvideDef(512, CommonModule, CommonModule, []), moduleProvideDef(512, material_es5_90, material_es5_90, [])]);
});
var ThemeModuleNgFactory = createNgModuleFactory(material_es5_98, [], function (_l) {
    return moduleDef([moduleProvideDef(512, ComponentFactoryResolver, CodegenComponentFactoryResolver, [[8, []], [3, ComponentFactoryResolver], NgModuleRef]), moduleProvideDef(512, material_es5_98, material_es5_98, [])]);
});
var ToolbarModuleNgFactory = createNgModuleFactory(material_es5_100, [], function (_l) {
    return moduleDef([moduleProvideDef(512, ComponentFactoryResolver, CodegenComponentFactoryResolver, [[8, []], [3, ComponentFactoryResolver], NgModuleRef]), moduleProvideDef(512, material_es5_100, material_es5_100, [])]);
});
var TypographyModuleNgFactory = createNgModuleFactory(material_es5_108, [], function (_l) {
    return moduleDef([moduleProvideDef(512, ComponentFactoryResolver, CodegenComponentFactoryResolver, [[8, []], [3, ComponentFactoryResolver], NgModuleRef]), moduleProvideDef(512, material_es5_108, material_es5_108, [])]);
});
var styles_ButtonComponent = [];
var RenderType_ButtonComponent = createRendererType2({ encapsulation: 2,
    styles: styles_ButtonComponent, data: {} });
function View_ButtonComponent_0(_l) {
    return viewDef(0, [ngContentDef(null, 0)], null, null);
}
function View_ButtonComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 2, 'button', [['mdc-button',
                '']], [[8, 'tabIndex', 0], [1, 'type', 0], [2, 'mdc-button', null], [2, 'mdc-button--raised',
                null], [2, 'mdc-button--primary', null], [2, 'mdc-button--accent',
                null], [2, 'mdc-button--dense', null], [2, 'mdc-button--compact',
                null], [2, 'mdc-card__action', null]], [[null, 'keypress'],
            [null, 'blur']], function (_v, en, $event) {
            var ad = true;
            if (('keypress' === en)) {
                var pd_0 = (nodeValue(_v, 2).onkeypress($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 2).blur($event) !== false);
                ad = (pd_1 && ad);
            }
            return ad;
        }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], null, null)], null, function (_ck, _v) {
        var currVal_0 = nodeValue(_v, 2).tabindex;
        var currVal_1 = nodeValue(_v, 2).attrType;
        var currVal_2 = nodeValue(_v, 2).isHostClass;
        var currVal_3 = nodeValue(_v, 2).classRaised;
        var currVal_4 = nodeValue(_v, 2).classPrimary;
        var currVal_5 = nodeValue(_v, 2).classAccent;
        var currVal_6 = nodeValue(_v, 2).classDense;
        var currVal_7 = nodeValue(_v, 2).classCompact;
        var currVal_8 = nodeValue(_v, 2).classCardAction;
        _ck(_v, 0, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6, currVal_7, currVal_8);
    });
}
var ButtonComponentNgFactory = createComponentFactory('button[mdc-button], a[mdc-button]', material_es5_4, View_ButtonComponent_Host_0, { type: 'type', raised: 'raised', primary: 'primary',
    dense: 'dense', compact: 'compact', accent: 'accent', cardAction: 'cardAction', disabled: 'disabled',
    disableRipple: 'disableRipple' }, {}, ['*']);
var styles_CardComponent = [];
var RenderType_CardComponent = createRendererType2({ encapsulation: 2,
    styles: styles_CardComponent, data: {} });
function View_CardComponent_0(_l) {
    return viewDef(0, [ngContentDef(null, 0)], null, null);
}
function View_CardComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1, 'mdc-card', [], [[2, 'mdc-card', null], [2, 'mdc-card--theme-dark', null]], null, null, View_CardComponent_0, RenderType_CardComponent)), directiveDef(49152, null, 0, material_es5_6, [], null, null)], null, function (_ck, _v) {
        var currVal_0 = nodeValue(_v, 1).isHostClass;
        var currVal_1 = nodeValue(_v, 1).classDarkTheme;
        _ck(_v, 0, 0, currVal_0, currVal_1);
    });
}
var CardComponentNgFactory = createComponentFactory('mdc-card', material_es5_6, View_CardComponent_Host_0, { darkTheme: 'darkTheme' }, {}, ['*']);
var styles_CardHorizontalComponent = [];
var RenderType_CardHorizontalComponent = createRendererType2({ encapsulation: 2,
    styles: styles_CardHorizontalComponent, data: {} });
function View_CardHorizontalComponent_0(_l) {
    return viewDef(0, [ngContentDef(null, 0)], null, null);
}
function View_CardHorizontalComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1, 'mdc-card-horizontal', [], [[2, 'mdc-card__horizontal-block', null]], null, null, View_CardHorizontalComponent_0, RenderType_CardHorizontalComponent)),
        directiveDef(49152, null, 0, material_es5_14, [], null, null)], null, function (_ck, _v) {
        var currVal_0 = nodeValue(_v, 1).isHostClass;
        _ck(_v, 0, 0, currVal_0);
    });
}
var CardHorizontalComponentNgFactory = createComponentFactory('mdc-card-horizontal', material_es5_14, View_CardHorizontalComponent_Host_0, {}, {}, ['mdc-card-primary, mdc-card-title, mdc-card-subtitle, [mdc-card-media-item], mdc-card-actions']);
var styles_CardMediaComponent = [];
var RenderType_CardMediaComponent = createRendererType2({ encapsulation: 2,
    styles: styles_CardMediaComponent, data: {} });
function View_CardMediaComponent_0(_l) {
    return viewDef(0, [ngContentDef(null, 0)], null, null);
}
function View_CardMediaComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1, 'mdc-card-media', [], [[2, 'mdc-card__media', null]], null, null, View_CardMediaComponent_0, RenderType_CardMediaComponent)), directiveDef(49152, null, 0, material_es5_13, [], null, null)], null, function (_ck, _v) {
        var currVal_0 = nodeValue(_v, 1).isHostClass;
        _ck(_v, 0, 0, currVal_0);
    });
}
var CardMediaComponentNgFactory = createComponentFactory('mdc-card-media', material_es5_13, View_CardMediaComponent_Host_0, {}, {}, ['*']);
var styles_CheckboxComponent = [];
var RenderType_CheckboxComponent = createRendererType2({ encapsulation: 2,
    styles: styles_CheckboxComponent, data: {} });
function View_CheckboxComponent_0(_l) {
    return viewDef(0, [queryDef(402653184, 1, { inputEl: 0 }), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, [[1, 0], ['nativeCb', 1]], null, 0, 'input', [['class', 'mdc-checkbox__native-control'], ['type', 'checkbox']], [[8, 'id', 0], [8,
                'name', 0], [8, 'tabIndex', 0], [1, 'aria-label', 0], [1, 'aria-labelledby', 0], [8,
                'disabled', 0], [8, 'checked', 0], [8, 'value', 0], [8, 'indeterminate', 0]], [[null,
                'change']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('change' === en)) {
                var pd_0 = (_co.onChange($event) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, null, null)), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 8, 'div', [['class', 'mdc-checkbox__background']], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 3, ':svg:svg', [['class', 'mdc-checkbox__checkmark'], ['viewBox', '0 0 24 24']], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 0, ':svg:path', [['class', 'mdc-checkbox__checkmark__path'], ['d',
                'M1.73,12.91 8.1,19.28 22.79,4.59'], ['fill', 'none'], ['stroke', 'white']], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 0, 'div', [['class', 'mdc-checkbox__mixedmark']], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  ']))], null, function (_ck, _v) {
        var _co = _v.component;
        var currVal_0 = _co.inputId;
        var currVal_1 = _co.name;
        var currVal_2 = _co.tabindex;
        var currVal_3 = _co.ariaLabel;
        var currVal_4 = _co.ariaLabelledby;
        var currVal_5 = _co.disabled;
        var currVal_6 = _co.checked;
        var currVal_7 = _co.value;
        var currVal_8 = _co.indeterminate;
        _ck(_v, 2, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6, currVal_7, currVal_8);
    });
}
function View_CheckboxComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 3, 'mdc-checkbox', [], [[2, 'mdc-checkbox', null]], null, null, View_CheckboxComponent_0, RenderType_CheckboxComponent)), providerDef(5120, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_17]), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2,
            ElementRef, undefined]), directiveDef(4374528, null, 0, material_es5_17, [Renderer2,
            ElementRef, material_es5_74, undefined], null, null)], null, function (_ck, _v) {
        var currVal_0 = nodeValue(_v, 3).isHostClass;
        _ck(_v, 0, 0, currVal_0);
    });
}
var CheckboxComponentNgFactory = createComponentFactory('mdc-checkbox', material_es5_17, View_CheckboxComponent_Host_0, { id: 'id', name: 'name', checked: 'checked',
    value: 'value', disabled: 'disabled', indeterminate: 'indeterminate', disableRipple: 'disableRipple',
    tabindex: 'tabindex', ariaLabel: 'aria-label', ariaLabelledby: 'aria-labelledby' }, { change: 'change' }, []);
var styles_DialogComponent = [];
var RenderType_DialogComponent = createRendererType2({ encapsulation: 2,
    styles: styles_DialogComponent, data: {} });
function View_DialogComponent_0(_l) {
    return viewDef(0, [queryDef(402653184, 1, { dialogSurface: 0 }), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 4, 'mdc-dialog-surface', [], [[2, 'mdc-dialog__surface', null]], null, null, null, null)), directiveDef(16384, [[1, 4]], 0, material_es5_22, [ElementRef], null, null), (_l()(), textDef(null, ['\n    '])),
        ngContentDef(null, 0), (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 1, 'mdc-dialog-backdrop', [], [[2, 'mdc-dialog__backdrop', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_27, [ElementRef], null, null), (_l()(), textDef(null, ['\n  ']))], null, function (_ck, _v) {
        var currVal_0 = nodeValue(_v, 3).isHostClass;
        _ck(_v, 2, 0, currVal_0);
        var currVal_1 = nodeValue(_v, 9).isHostClass;
        _ck(_v, 8, 0, currVal_1);
    });
}
function View_DialogComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 3, 'mdc-dialog', [], [[2, 'mdc-dialog', null], [1, 'role', 0], [1, 'aria-hidden', 0]], null, null, View_DialogComponent_0, RenderType_DialogComponent)), directiveDef(4374528, null, 2, material_es5_30, [Renderer2, ElementRef, undefined], null, null), queryDef(335544320, 1, { dialogAcceptButton: 0 }), queryDef(335544320, 2, { dialogBody: 0 })], null, function (_ck, _v) {
        var currVal_0 = nodeValue(_v, 1).isHostClass;
        var currVal_1 = nodeValue(_v, 1).role;
        var currVal_2 = nodeValue(_v, 1).ariaHidden;
        _ck(_v, 0, 0, currVal_0, currVal_1, currVal_2);
    });
}
var DialogComponentNgFactory = createComponentFactory('mdc-dialog', material_es5_30, View_DialogComponent_Host_0, {}, { accept_: 'accept', cancel_: 'cancel' }, ['*']);
var styles_PermanentDrawerComponent = [];
var RenderType_PermanentDrawerComponent = createRendererType2({ encapsulation: 2,
    styles: styles_PermanentDrawerComponent, data: {} });
function View_PermanentDrawerComponent_0(_l) {
    return viewDef(0, [ngContentDef(null, 0)], null, null);
}
function View_PermanentDrawerComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1, 'mdc-permanent-drawer', [], [[2, 'mdc-permanent-drawer', null], [1, 'role', 0]], null, null, View_PermanentDrawerComponent_0, RenderType_PermanentDrawerComponent)),
        directiveDef(49152, null, 0, material_es5_35, [ElementRef], null, null)], null, function (_ck, _v) {
        var currVal_0 = nodeValue(_v, 1).isHostClass;
        var currVal_1 = nodeValue(_v, 1).role;
        _ck(_v, 0, 0, currVal_0, currVal_1);
    });
}
var PermanentDrawerComponentNgFactory = createComponentFactory('mdc-permanent-drawer', material_es5_35, View_PermanentDrawerComponent_Host_0, {}, {}, ['*']);
var styles_TemporaryDrawerComponent = [];
var RenderType_TemporaryDrawerComponent = createRendererType2({ encapsulation: 2,
    styles: styles_TemporaryDrawerComponent, data: {} });
function View_TemporaryDrawerComponent_0(_l) {
    return viewDef(0, [queryDef(402653184, 1, { drawerNav: 0 }), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 4, 'mdc-temporary-drawer-nav', [], [[2, 'mdc-temporary-drawer__drawer', null], [1, 'role', 0]], null, null, null, null)), directiveDef(16384, [[1,
                4]], 0, material_es5_36, [ElementRef], null, null),
        (_l()(), textDef(null, ['\n    '])), ngContentDef(null, 0), (_l()(),
            textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  ']))], null, function (_ck, _v) {
        var currVal_0 = nodeValue(_v, 3).isHostClass;
        var currVal_1 = nodeValue(_v, 3).role;
        _ck(_v, 2, 0, currVal_0, currVal_1);
    });
}
function View_TemporaryDrawerComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1, 'mdc-temporary-drawer', [], [[2, 'mdc-temporary-drawer', null]], null, null, View_TemporaryDrawerComponent_0, RenderType_TemporaryDrawerComponent)), directiveDef(4374528, null, 0, material_es5_42, [Renderer2, ElementRef, undefined], null, null)], null, function (_ck, _v) {
        var currVal_0 = nodeValue(_v, 1).isHostClass;
        _ck(_v, 0, 0, currVal_0);
    });
}
var TemporaryDrawerComponentNgFactory = createComponentFactory('mdc-temporary-drawer', material_es5_42, View_TemporaryDrawerComponent_Host_0, {}, { opened: 'opened',
    closed: 'closed' }, ['*']);
var styles_PersistentDrawerComponent = [];
var RenderType_PersistentDrawerComponent = createRendererType2({ encapsulation: 2,
    styles: styles_PersistentDrawerComponent, data: {} });
function View_PersistentDrawerComponent_0(_l) {
    return viewDef(0, [queryDef(402653184, 1, { drawerNav: 0 }), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 4, 'mdc-persistent-drawer-nav', [], [[2, 'mdc-persistent-drawer__drawer', null], [1, 'role', 0]], null, null, null, null)), directiveDef(16384, [[1,
                4]], 0, material_es5_43, [ElementRef], null, null),
        (_l()(), textDef(null, ['\n    '])), ngContentDef(null, 0), (_l()(),
            textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  ']))], null, function (_ck, _v) {
        var currVal_0 = nodeValue(_v, 3).isHostClass;
        var currVal_1 = nodeValue(_v, 3).role;
        _ck(_v, 2, 0, currVal_0, currVal_1);
    });
}
function View_PersistentDrawerComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1, 'mdc-persistent-drawer', [], [[2, 'mdc-persistent-drawer', null]], null, null, View_PersistentDrawerComponent_0, RenderType_PersistentDrawerComponent)), directiveDef(4374528, null, 0, material_es5_49, [Renderer2, ElementRef, undefined], null, null)], null, function (_ck, _v) {
        var currVal_0 = nodeValue(_v, 1).isHostClass;
        _ck(_v, 0, 0, currVal_0);
    });
}
var PersistentDrawerComponentNgFactory = createComponentFactory('mdc-persistent-drawer', material_es5_49, View_PersistentDrawerComponent_Host_0, {}, { opened: 'opened',
    closed: 'closed' }, ['*']);
var styles_FabComponent = [];
var RenderType_FabComponent = createRendererType2({ encapsulation: 2, styles: styles_FabComponent,
    data: {} });
function View_FabComponent_0(_l) {
    return viewDef(0, [ngContentDef(null, 0)], null, null);
}
function View_FabComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 2, 'button', [['mdc-fab',
                '']], [[2, 'mdc-fab', null], [8, 'tabIndex', 0], [2, 'material-icons', null],
            [2, 'mdc-fab--mini', null], [2, 'mdc-fab--plain', null]], [[null,
                'keypress'], [null, 'blur']], function (_v, en, $event) {
            var ad = true;
            if (('keypress' === en)) {
                var pd_0 = (nodeValue(_v, 2).onkeypress($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 2).blur($event) !== false);
                ad = (pd_1 && ad);
            }
            return ad;
        }, View_FabComponent_0, RenderType_FabComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_52, [Renderer2, ElementRef, material_es5_74], null, null)], null, function (_ck, _v) {
        var currVal_0 = nodeValue(_v, 2).isHostClass;
        var currVal_1 = nodeValue(_v, 2).tabindex;
        var currVal_2 = nodeValue(_v, 2).classMaterialIcons;
        var currVal_3 = nodeValue(_v, 2).classMini;
        var currVal_4 = nodeValue(_v, 2).classPlain;
        _ck(_v, 0, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4);
    });
}
var FabComponentNgFactory = createComponentFactory('button[mdc-fab], a[mdc-fab]', material_es5_52, View_FabComponent_Host_0, { mini: 'mini', plain: 'plain', disabled: 'disabled',
    disableRipple: 'disableRipple' }, {}, ['*']);
var styles_LinearProgressComponent = [];
var RenderType_LinearProgressComponent = createRendererType2({ encapsulation: 2,
    styles: styles_LinearProgressComponent, data: {} });
function View_LinearProgressComponent_0(_l) {
    return viewDef(0, [(_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 0, 'div', [['class', 'mdc-linear-progress__buffering-dots']], null, null, null, null, null)), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 0, 'div', [['class', 'mdc-linear-progress__buffer']], null, null, null, null, null)), (_l()(),
            textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 3, 'div', [['class', 'mdc-linear-progress__bar mdc-linear-progress__primary-bar']], null, null, null, null, null)), (_l()(),
            textDef(null, ['\n   '])), (_l()(), elementDef(0, null, null, 0, 'span', [['class', 'mdc-linear-progress__bar-inner']], null, null, null, null, null)), (_l()(), textDef(null, ['\n  '])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 3, 'div', [['class', 'mdc-linear-progress__bar mdc-linear-progress__secondary-bar']], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n   '])), (_l()(), elementDef(0, null, null, 0, 'span', [['class', 'mdc-linear-progress__bar-inner']], null, null, null, null, null)), (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  ']))], null, null);
}
function View_LinearProgressComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1, 'mdc-linear-progress', [], [[1, 'role', 0], [2, 'mdc-linear-progress', null], [2, 'mdc-linear-progress--accent',
                null]], null, null, View_LinearProgressComponent_0, RenderType_LinearProgressComponent)), directiveDef(4243456, null, 0, material_es5_56, [Renderer2, ElementRef], null, null)], null, function (_ck, _v) {
        var currVal_0 = nodeValue(_v, 1).role;
        var currVal_1 = nodeValue(_v, 1).isHostClass;
        var currVal_2 = nodeValue(_v, 1).classAccent;
        _ck(_v, 0, 0, currVal_0, currVal_1, currVal_2);
    });
}
var LinearProgressComponentNgFactory = createComponentFactory('mdc-linear-progress', material_es5_56, View_LinearProgressComponent_Host_0, { indeterminate: 'indeterminate',
    reversed: 'reversed', accent: 'accent' }, {}, []);
var styles_ListComponent = [];
var RenderType_ListComponent = createRendererType2({ encapsulation: 2,
    styles: styles_ListComponent, data: {} });
function View_ListComponent_0(_l) {
    return viewDef(0, [ngContentDef(null, 0)], null, null);
}
function View_ListComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 2, 'mdc-list', [], [[2, 'mdc-list', null], [1, 'role', 0], [2, 'mdc-list--dense', null],
            [2, 'mdc-list--two-line', null], [2, 'mdc-list--avatar-list', null]], null, null, View_ListComponent_0, RenderType_ListComponent)),
        directiveDef(573440, null, 1, material_es5_58, [ElementRef], null, null), queryDef(603979776, 1, { listItems: 1 })], null, function (_ck, _v) {
        var currVal_0 = nodeValue(_v, 1).isHostClass;
        var currVal_1 = nodeValue(_v, 1).role;
        var currVal_2 = nodeValue(_v, 1).classDenseList;
        var currVal_3 = nodeValue(_v, 1).classTwoline;
        var currVal_4 = nodeValue(_v, 1).classAvatarList;
        _ck(_v, 0, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4);
    });
}
var ListComponentNgFactory = createComponentFactory('mdc-list', material_es5_58, View_ListComponent_Host_0, { dense: 'dense', twoLine: 'twoLine', avatar: 'avatar',
    disableRipple: 'disableRipple' }, {}, ['*']);
var styles_ɵd = [];
var RenderType_ɵd = createRendererType2({ encapsulation: 2, styles: styles_ɵd,
    data: {} });
function View_ɵd_0(_l) {
    return viewDef(0, [queryDef(402653184, 1, { listItem: 0 }), (_l()(), elementDef(0, [[1, 0], ['divider',
                1]], null, 0, 'div', [['class', 'mdc-list-divider'], ['role', 'seperator']], null, null, null, null, null))], null, null);
}
function View_ɵd_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1, 'div', [['mdc-list-divider',
                '']], null, null, null, View_ɵd_0, RenderType_ɵd)), directiveDef(49152, null, 0, undefined, [ElementRef, Renderer2], null, null)], null, null);
}
var ɵdNgFactory = createComponentFactory('[mdc-list-divider], mdc-list-divider', undefined, View_ɵd_Host_0, { inset: 'inset' }, {}, []);
var styles_MenuComponent = [];
var RenderType_MenuComponent = createRendererType2({ encapsulation: 2,
    styles: styles_MenuComponent, data: {} });
function View_MenuComponent_0(_l) {
    return viewDef(0, [queryDef(402653184, 1, { menuContainerEl: 0 }), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, [[1, 0], ['menuContainer', 1]], null, 3, 'ul', [['aria-hidden', 'true'], ['class', 'mdc-simple-menu__items mdc-list'], ['role',
                'menu']], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n   '])), ngContentDef(null, 0), (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  ']))], null, null);
}
function View_MenuComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 2, 'mdc-menu', [], [[8, 'className', 0], [8, 'tabIndex', 0]], null, null, View_MenuComponent_0, RenderType_MenuComponent)), directiveDef(4374528, null, 1, material_es5_69, [Renderer2, ElementRef, undefined], null, null), queryDef(603979776, 1, { menuItems: 1 })], null, function (_ck, _v) {
        var currVal_0 = nodeValue(_v, 1).className;
        var currVal_1 = nodeValue(_v, 1).tabindex;
        _ck(_v, 0, 0, currVal_0, currVal_1);
    });
}
var MenuComponentNgFactory = createComponentFactory('mdc-menu', material_es5_69, View_MenuComponent_Host_0, { openFrom: 'openFrom' }, { cancel: 'cancel',
    select: 'select' }, ['mdc-menu-item, mdc-menu-divider']);
var styles_MenuDividerComponent = [];
var RenderType_MenuDividerComponent = createRendererType2({ encapsulation: 2,
    styles: styles_MenuDividerComponent, data: {} });
function View_MenuDividerComponent_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, [['divider', 1]], null, 0, 'div', [['class',
                'mdc-list-divider'], ['role', 'seperator']], null, null, null, null, null))], null, null);
}
function View_MenuDividerComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1, 'mdc-menu-divider', [], null, null, null, View_MenuDividerComponent_0, RenderType_MenuDividerComponent)), directiveDef(49152, null, 0, material_es5_68, [], null, null)], null, null);
}
var MenuDividerComponentNgFactory = createComponentFactory('mdc-menu-divider', material_es5_68, View_MenuDividerComponent_Host_0, {}, {}, []);
var styles_RadioComponent = [];
var RenderType_RadioComponent = createRendererType2({ encapsulation: 2,
    styles: styles_RadioComponent, data: {} });
function View_RadioComponent_0(_l) {
    return viewDef(0, [queryDef(402653184, 1, { inputEl: 0 }), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, [[1, 0], ['inputEl', 1]], null, 0, 'input', [['class',
                'mdc-radio__native-control'], ['type', 'radio']], [[8, 'id', 0], [8, 'name', 0], [1, 'aria-label',
                0], [1, 'aria-labelledby', 0], [8, 'disabled', 0], [8, 'checked', 0], [8, 'value', 0]], [[null,
                'change'], [null, 'blur']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('change' === en)) {
                var pd_0 = (_co.onChange($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (_co.onTouched() !== false);
                ad = (pd_1 && ad);
            }
            return ad;
        }, null, null)), (_l()(), textDef(null, ['\n    '])), (_l()(),
            elementDef(0, null, null, 5, 'div', [['class', 'mdc-radio__background']], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 0, 'div', [['class', 'mdc-radio__outer-circle']], null, null, null, null, null)), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 0, 'div', [['class',
                'mdc-radio__inner-circle']], null, null, null, null, null)), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n  ']))], null, function (_ck, _v) {
        var _co = _v.component;
        var currVal_0 = _co.inputId;
        var currVal_1 = _co.name;
        var currVal_2 = _co.ariaLabel;
        var currVal_3 = _co.ariaLabelledby;
        var currVal_4 = _co.disabled;
        var currVal_5 = _co.checked;
        var currVal_6 = _co.value;
        _ck(_v, 2, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6);
    });
}
function View_RadioComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 3, 'mdc-radio', [], [[2, 'mdc-radio', null]], null, null, View_RadioComponent_0, RenderType_RadioComponent)), providerDef(5120, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_72]), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2,
            ElementRef, undefined]), directiveDef(4374528, null, 0, material_es5_72, [Renderer2,
            ElementRef, material_es5_74], null, null)], null, function (_ck, _v) {
        var currVal_0 = nodeValue(_v, 3).isHostClass;
        _ck(_v, 0, 0, currVal_0);
    });
}
var RadioComponentNgFactory = createComponentFactory('mdc-radio', material_es5_72, View_RadioComponent_Host_0, { id: 'id', checked: 'checked', name: 'name',
    value: 'value', disabled: 'disabled', disableRipple: 'disableRipple', tabindex: 'tabindex',
    ariaLabel: 'aria-label', ariaLabelledby: 'aria-labelledby' }, { change: 'change' }, []);
var styles_SnackbarComponent = [];
var RenderType_SnackbarComponent = createRendererType2({ encapsulation: 2,
    styles: styles_SnackbarComponent, data: {} });
function View_SnackbarComponent_0(_l) {
    return viewDef(0, [queryDef(402653184, 1, { snackText: 0 }), queryDef(402653184, 2, { actionWrapper: 0 }),
        queryDef(402653184, 3, { actionButton: 0 }), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 1, 'mdc-snackbar-text', [], [[2, 'mdc-snackbar__text', null]], null, null, null, null)), directiveDef(16384, [[1, 4]], 0, undefined, [ElementRef], null, null), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 5, 'mdc-snackbar-action-wrapper', [], [[2, 'mdc-snackbar__action-wrapper', null]], null, null, null, null)), directiveDef(16384, [[2, 4]], 0, undefined, [ElementRef], null, null), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 1, 'button', [['mdc-snackbar-action-button',
                '']], [[2, 'mdc-snackbar__action-button', null], [2, 'mdc-button', null]], null, null, null, null)), directiveDef(16384, [[3, 4]], 0, undefined, [ElementRef], null, null), (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  ']))], null, function (_ck, _v) {
        var currVal_0 = nodeValue(_v, 5).isHostClass;
        _ck(_v, 4, 0, currVal_0);
        var currVal_1 = nodeValue(_v, 8).isHostClass;
        _ck(_v, 7, 0, currVal_1);
        var currVal_2 = nodeValue(_v, 11).isHostClass;
        var currVal_3 = nodeValue(_v, 11).isButtonClass;
        _ck(_v, 10, 0, currVal_2, currVal_3);
    });
}
function View_SnackbarComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1, 'mdc-snackbar', [], [[2, 'mdc-snackbar', null], [1, 'aria-live', 0], [1, 'aria-atomic',
                0], [1, 'aria-hidden', 0], [2, 'mdc-snackbar--align-start', null]], null, null, View_SnackbarComponent_0, RenderType_SnackbarComponent)), directiveDef(4374528, null, 0, material_es5_76, [Renderer2, ElementRef, undefined], null, null)], null, function (_ck, _v) {
        var currVal_0 = nodeValue(_v, 1).isHostClass;
        var currVal_1 = nodeValue(_v, 1).ariaLive;
        var currVal_2 = nodeValue(_v, 1).ariaAtomic;
        var currVal_3 = nodeValue(_v, 1).ariaHidden;
        var currVal_4 = nodeValue(_v, 1).classAlignStart;
        _ck(_v, 0, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4);
    });
}
var SnackbarComponentNgFactory = createComponentFactory('mdc-snackbar', material_es5_76, View_SnackbarComponent_Host_0, { alignStart: 'alignStart', dismissOnAction: 'dismissOnAction' }, {}, []);
var styles_SwitchComponent = [];
var RenderType_SwitchComponent = createRendererType2({ encapsulation: 2,
    styles: styles_SwitchComponent, data: {} });
function View_SwitchComponent_0(_l) {
    return viewDef(0, [queryDef(402653184, 1, { inputEl: 0 }), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, [[1, 0], ['inputEl', 1]], null, 0, 'input', [['class',
                'mdc-switch__native-control'], ['type', 'checkbox']], [[8, 'id', 0], [8, 'tabIndex',
                0], [1, 'aria-label', 0], [1, 'aria-labelledby', 0], [8, 'disabled', 0], [8, 'checked',
                0]], [[null, 'change']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('change' === en)) {
                var pd_0 = (_co.handleChange($event) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, null, null)), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 3, 'div', [['class', 'mdc-switch__background']], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 0, 'div', [['class', 'mdc-switch__knob']], null, null, null, null, null)), (_l()(), textDef(null, ['\n  '])), (_l()(),
            textDef(null, ['\n  ']))], null, function (_ck, _v) {
        var _co = _v.component;
        var currVal_0 = _co.inputId;
        var currVal_1 = _co.tabindex;
        var currVal_2 = _co.ariaLabel;
        var currVal_3 = _co.ariaLabelledby;
        var currVal_4 = _co.disabled;
        var currVal_5 = _co.checked;
        _ck(_v, 2, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5);
    });
}
function View_SwitchComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 3, 'mdc-switch', [], [[2, 'mdc-switch', null], [2, 'mdc-switch--disabled', null]], null, null, View_SwitchComponent_0, RenderType_SwitchComponent)), providerDef(5120, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_79]), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2,
            ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_79, [Renderer2,
            ElementRef, material_es5_74], null, null)], null, function (_ck, _v) {
        var currVal_0 = nodeValue(_v, 3).isHostClass;
        var currVal_1 = nodeValue(_v, 3).classDisabled;
        _ck(_v, 0, 0, currVal_0, currVal_1);
    });
}
var SwitchComponentNgFactory = createComponentFactory('mdc-switch', material_es5_79, View_SwitchComponent_Host_0, { id: 'id', checked: 'checked', disabled: 'disabled',
    tabindex: 'tabindex', ariaLabel: 'aria-label', ariaLabelledby: 'aria-labelledby',
    disableRipple: 'disableRipple' }, { change: 'change' }, []);
var styles_TabComponent = [];
var RenderType_TabComponent = createRendererType2({ encapsulation: 2, styles: styles_TabComponent,
    data: {} });
function View_TabComponent_0(_l) {
    return viewDef(0, [ngContentDef(null, 0)], null, null);
}
function View_TabComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 4, 'div', [['mdc-tab',
                '']], [[2, 'mdc-tab', null], [1, 'role', 0], [2, 'mdc-tab--with-icon-and-text',
                null], [2, 'mdc-tab--active', null]], null, null, View_TabComponent_0, RenderType_TabComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, null, 2, material_es5_83, [Renderer2, ElementRef, undefined, material_es5_74], null, null), queryDef(335544320, 1, { tabIcon: 0 }), queryDef(335544320, 2, { tabIconText: 0 })], null, function (_ck, _v) {
        var currVal_0 = nodeValue(_v, 2).isHostClass;
        var currVal_1 = nodeValue(_v, 2).role;
        var currVal_2 = nodeValue(_v, 2).classIconText;
        var currVal_3 = nodeValue(_v, 2).classActive;
        _ck(_v, 0, 0, currVal_0, currVal_1, currVal_2, currVal_3);
    });
}
var TabComponentNgFactory = createComponentFactory('[mdc-tab], mdc-tab', material_es5_83, View_TabComponent_Host_0, { active: 'active', preventsDefaultOnClick: 'preventsDefaultOnClick',
    disableRipple: 'disableRipple' }, { select: 'select' }, ['*']);
var styles_TextfieldComponent = [];
var RenderType_TextfieldComponent = createRendererType2({ encapsulation: 2,
    styles: styles_TextfieldComponent, data: {} });
function View_TextfieldComponent_1(_l) {
    return viewDef(0, [(_l()(), elementDef(0, [[1, 0], ['input', 1]], null, 8, 'textarea', [['class', 'mdc-textfield__input'], ['type', 'text']], [[8, 'rows', 0], [8, 'cols', 0],
            [1, 'name', 0], [8, 'id', 0], [8, 'placeholder', 0], [8, 'tabIndex', 0], [1, 'aria-label',
                0], [1, 'required', 0], [1, 'maxlength', 0], [2, 'ng-untouched', null],
            [2, 'ng-touched', null], [2, 'ng-pristine', null], [2, 'ng-dirty',
                null], [2, 'ng-valid', null], [2, 'ng-invalid', null],
            [2, 'ng-pending', null]], [[null, 'focus'], [null,
                'blur'], [null, 'input'], [null, 'keydown'], [null,
                'ngModelChange'], [null, 'compositionstart'], [null, 'compositionend']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('input' === en)) {
                var pd_0 = (nodeValue(_v, 1)._handleInput($event.target.value) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 1).onTouched() !== false);
                ad = (pd_1 && ad);
            }
            if (('compositionstart' === en)) {
                var pd_2 = (nodeValue(_v, 1)._compositionStart() !== false);
                ad = (pd_2 && ad);
            }
            if (('compositionend' === en)) {
                var pd_3 = (nodeValue(_v, 1)._compositionEnd($event.target.value) !== false);
                ad = (pd_3 && ad);
            }
            if (('focus' === en)) {
                var pd_4 = (_co.onFocus($event) !== false);
                ad = (pd_4 && ad);
            }
            if (('blur' === en)) {
                var pd_5 = (_co.onBlur($event) !== false);
                ad = (pd_5 && ad);
            }
            if (('input' === en)) {
                var pd_6 = (_co.onInput($event) !== false);
                ad = (pd_6 && ad);
            }
            if (('keydown' === en)) {
                var pd_7 = (_co.onKeyDown($event) !== false);
                ad = (pd_7 && ad);
            }
            if (('ngModelChange' === en)) {
                var pd_8 = ((_co.value = $event) !== false);
                ad = (pd_8 && ad);
            }
            return ad;
        }, null, null)), directiveDef(16384, null, 0, DefaultValueAccessor, [Renderer2, ElementRef, [2, COMPOSITION_BUFFER_MODE]], null, null),
        directiveDef(16384, null, 0, RequiredValidator, [], { required: [0,
                'required'] }, null), directiveDef(540672, null, 0, MaxLengthValidator, [], { maxlength: [0, 'maxlength'] }, null), providerDef(1024, null, NG_VALIDATORS, function (p0_0, p1_0) {
            return [p0_0, p1_0];
        }, [RequiredValidator, MaxLengthValidator]), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [DefaultValueAccessor]), directiveDef(671744, null, 0, NgModel, [[8,
                null], [2, NG_VALIDATORS], [8, null], [2, NG_VALUE_ACCESSOR]], { isDisabled: [0, 'isDisabled'], model: [1, 'model'] }, { update: 'ngModelChange' }),
        providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null)], function (_ck, _v) {
        var _co = _v.component;
        var currVal_16 = _co.required;
        _ck(_v, 2, 0, currVal_16);
        var currVal_17 = _co.maxlength;
        _ck(_v, 3, 0, currVal_17);
        var currVal_18 = _co.disabled;
        var currVal_19 = _co.value;
        _ck(_v, 6, 0, currVal_18, currVal_19);
    }, function (_ck, _v) {
        var _co = _v.component;
        var currVal_0 = _co.rows;
        var currVal_1 = _co.cols;
        var currVal_2 = _co.name;
        var currVal_3 = _co.inputId;
        var currVal_4 = (_co.placeholder ? _co.placeholder : '');
        var currVal_5 = _co.tabindex;
        var currVal_6 = _co.placeholder;
        var currVal_7 = (nodeValue(_v, 2).required ? '' : null);
        var currVal_8 = (nodeValue(_v, 3).maxlength ? nodeValue(_v, 3).maxlength : null);
        var currVal_9 = nodeValue(_v, 8).ngClassUntouched;
        var currVal_10 = nodeValue(_v, 8).ngClassTouched;
        var currVal_11 = nodeValue(_v, 8).ngClassPristine;
        var currVal_12 = nodeValue(_v, 8).ngClassDirty;
        var currVal_13 = nodeValue(_v, 8).ngClassValid;
        var currVal_14 = nodeValue(_v, 8).ngClassInvalid;
        var currVal_15 = nodeValue(_v, 8).ngClassPending;
        _ck(_v, 0, 1, [currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6,
            currVal_7, currVal_8, currVal_9, currVal_10, currVal_11, currVal_12, currVal_13,
            currVal_14, currVal_15]);
    });
}
function View_TextfieldComponent_2(_l) {
    return viewDef(0, [(_l()(), elementDef(0, [[1, 0], ['input', 1]], null, 8, 'input', [['class', 'mdc-textfield__input']], [[8, 'type', 0], [8, 'id', 0], [1, 'name', 0], [8,
                'placeholder', 0], [8, 'tabIndex', 0], [1, 'required', 0], [1, 'maxlength', 0], [2,
                'ng-untouched', null], [2, 'ng-touched', null], [2, 'ng-pristine',
                null], [2, 'ng-dirty', null], [2, 'ng-valid', null],
            [2, 'ng-invalid', null], [2, 'ng-pending', null]], [[null,
                'ngModelChange'], [null, 'focus'], [null, 'keydown'], [null,
                'blur'], [null, 'input'], [null, 'compositionstart'], [null,
                'compositionend']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('input' === en)) {
                var pd_0 = (nodeValue(_v, 1)._handleInput($event.target.value) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 1).onTouched() !== false);
                ad = (pd_1 && ad);
            }
            if (('compositionstart' === en)) {
                var pd_2 = (nodeValue(_v, 1)._compositionStart() !== false);
                ad = (pd_2 && ad);
            }
            if (('compositionend' === en)) {
                var pd_3 = (nodeValue(_v, 1)._compositionEnd($event.target.value) !== false);
                ad = (pd_3 && ad);
            }
            if (('ngModelChange' === en)) {
                var pd_4 = ((_co.value = $event) !== false);
                ad = (pd_4 && ad);
            }
            if (('focus' === en)) {
                var pd_5 = (_co.onFocus($event) !== false);
                ad = (pd_5 && ad);
            }
            if (('keydown' === en)) {
                var pd_6 = (_co.onKeyDown($event) !== false);
                ad = (pd_6 && ad);
            }
            if (('blur' === en)) {
                var pd_7 = (_co.onBlur($event) !== false);
                ad = (pd_7 && ad);
            }
            if (('input' === en)) {
                var pd_8 = (_co.onInput($event) !== false);
                ad = (pd_8 && ad);
            }
            return ad;
        }, null, null)), directiveDef(16384, null, 0, DefaultValueAccessor, [Renderer2, ElementRef, [2, COMPOSITION_BUFFER_MODE]], null, null),
        directiveDef(16384, null, 0, RequiredValidator, [], { required: [0,
                'required'] }, null), directiveDef(540672, null, 0, MaxLengthValidator, [], { maxlength: [0, 'maxlength'] }, null), providerDef(1024, null, NG_VALIDATORS, function (p0_0, p1_0) {
            return [p0_0, p1_0];
        }, [RequiredValidator, MaxLengthValidator]), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [DefaultValueAccessor]), directiveDef(671744, null, 0, NgModel, [[8,
                null], [2, NG_VALIDATORS], [8, null], [2, NG_VALUE_ACCESSOR]], { isDisabled: [0, 'isDisabled'], model: [1, 'model'] }, { update: 'ngModelChange' }),
        providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null)], function (_ck, _v) {
        var _co = _v.component;
        var currVal_14 = _co.required;
        _ck(_v, 2, 0, currVal_14);
        var currVal_15 = _co.maxlength;
        _ck(_v, 3, 0, currVal_15);
        var currVal_16 = _co.disabled;
        var currVal_17 = _co.value;
        _ck(_v, 6, 0, currVal_16, currVal_17);
    }, function (_ck, _v) {
        var _co = _v.component;
        var currVal_0 = _co.type;
        var currVal_1 = _co.inputId;
        var currVal_2 = _co.name;
        var currVal_3 = _co.placeholder;
        var currVal_4 = _co.tabindex;
        var currVal_5 = (nodeValue(_v, 2).required ? '' : null);
        var currVal_6 = (nodeValue(_v, 3).maxlength ? nodeValue(_v, 3).maxlength : null);
        var currVal_7 = nodeValue(_v, 8).ngClassUntouched;
        var currVal_8 = nodeValue(_v, 8).ngClassTouched;
        var currVal_9 = nodeValue(_v, 8).ngClassPristine;
        var currVal_10 = nodeValue(_v, 8).ngClassDirty;
        var currVal_11 = nodeValue(_v, 8).ngClassValid;
        var currVal_12 = nodeValue(_v, 8).ngClassInvalid;
        var currVal_13 = nodeValue(_v, 8).ngClassPending;
        _ck(_v, 0, 1, [currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6,
            currVal_7, currVal_8, currVal_9, currVal_10, currVal_11, currVal_12, currVal_13]);
    });
}
function View_TextfieldComponent_3(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 2, 'mdc-textfield-label', [], [[1, 'for', 0], [2, 'mdc-textfield__label', null]], null, null, null, null)), directiveDef(16384, [[3, 4]], 0, material_es5_93, [ElementRef], null, null), (_l()(), textDef(null, ['',
            '']))], null, function (_ck, _v) {
        var _co = _v.component;
        var currVal_0 = _co.inputId;
        var currVal_1 = nodeValue(_v, 1).isHostClass;
        _ck(_v, 0, 0, currVal_0, currVal_1);
        var currVal_2 = _co.label;
        _ck(_v, 2, 0, currVal_2);
    });
}
function View_TextfieldComponent_0(_l) {
    return viewDef(0, [queryDef(671088640, 1, { inputEl: 0 }), queryDef(402653184, 2, { helpText: 0 }),
        queryDef(671088640, 3, { inputLabel: 0 }), (_l()(), textDef(null, ['\n  '])),
        (_l()(), anchorDef(16777216, null, null, 1, null, View_TextfieldComponent_1)),
        directiveDef(16384, null, 0, NgIf, [ViewContainerRef, TemplateRef], { ngIf: [0,
                'ngIf'] }, null), (_l()(), textDef(null, ['\n  '])), (_l()(),
            anchorDef(16777216, null, null, 1, null, View_TextfieldComponent_2)),
        directiveDef(16384, null, 0, NgIf, [ViewContainerRef, TemplateRef], { ngIf: [0,
                'ngIf'] }, null), (_l()(), textDef(null, ['\n    '])), (_l()(),
            anchorDef(16777216, null, null, 1, null, View_TextfieldComponent_3)),
        directiveDef(16384, null, 0, NgIf, [ViewContainerRef, TemplateRef], { ngIf: [0,
                'ngIf'] }, null), (_l()(), textDef(null, ['\n  ']))], function (_ck, _v) {
        var _co = _v.component;
        var currVal_0 = _co.multiline;
        _ck(_v, 5, 0, currVal_0);
        var currVal_1 = !_co.multiline;
        _ck(_v, 8, 0, currVal_1);
        var currVal_2 = !_co.placeholder;
        _ck(_v, 11, 0, currVal_2);
    }, null);
}
function View_TextfieldComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 2, 'mdc-textfield', [], [[2, 'mdc-textfield', null], [2, 'mdc-textfield--multiline',
                null], [2, 'mdc-textfield--fullwidth', null], [2, 'mdc-textfield--dense',
                null]], null, null, View_TextfieldComponent_0, RenderType_TextfieldComponent)),
        providerDef(5120, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_94]), directiveDef(4374528, null, 0, material_es5_94, [Renderer2, ElementRef, undefined], null, null)], null, function (_ck, _v) {
        var currVal_0 = nodeValue(_v, 2).isHostClass;
        var currVal_1 = nodeValue(_v, 2).classMultiline;
        var currVal_2 = nodeValue(_v, 2).classFullwidth;
        var currVal_3 = nodeValue(_v, 2).classDense;
        _ck(_v, 0, 0, currVal_0, currVal_1, currVal_2, currVal_3);
    });
}
var TextfieldComponentNgFactory = createComponentFactory('mdc-textfield', material_es5_94, View_TextfieldComponent_Host_0, { id: 'id', name: 'name', type: 'type',
    value: 'value', disabled: 'disabled', dense: 'dense', required: 'required', label: 'label',
    placeholder: 'placeholder', tabindex: 'tabindex', rows: 'rows', cols: 'cols', maxlength: 'maxlength',
    fullwidth: 'fullwidth', multiline: 'multiline' }, { focus: 'focus', blur: 'blur', input: 'input',
    keydown: 'keydown' }, []);
var styles_TextfieldBoxComponent = [];
var RenderType_TextfieldBoxComponent = createRendererType2({ encapsulation: 2,
    styles: styles_TextfieldBoxComponent, data: {} });
function View_TextfieldBoxComponent_0(_l) {
    return viewDef(0, [queryDef(402653184, 1, { inputEl: 0 }), queryDef(402653184, 2, { helpText: 0 }),
        queryDef(402653184, 3, { inputLabel: 0 }), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, [[1, 0], ['input', 1]], null, 8, 'input', [['class', 'mdc-textfield__input']], [[8, 'type', 0], [8, 'id', 0], [1, 'name', 0], [8, 'tabIndex', 0], [1, 'required', 0],
            [1, 'maxlength', 0], [2, 'ng-untouched', null], [2, 'ng-touched', null],
            [2, 'ng-pristine', null], [2, 'ng-dirty', null], [2, 'ng-valid',
                null], [2, 'ng-invalid', null], [2, 'ng-pending', null]], [[null, 'ngModelChange'], [null, 'focus'], [null,
                'keydown'], [null, 'blur'], [null, 'input'], [null,
                'compositionstart'], [null, 'compositionend']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('input' === en)) {
                var pd_0 = (nodeValue(_v, 5)._handleInput($event.target.value) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 5).onTouched() !== false);
                ad = (pd_1 && ad);
            }
            if (('compositionstart' === en)) {
                var pd_2 = (nodeValue(_v, 5)._compositionStart() !== false);
                ad = (pd_2 && ad);
            }
            if (('compositionend' === en)) {
                var pd_3 = (nodeValue(_v, 5)._compositionEnd($event.target.value) !== false);
                ad = (pd_3 && ad);
            }
            if (('ngModelChange' === en)) {
                var pd_4 = ((_co.value = $event) !== false);
                ad = (pd_4 && ad);
            }
            if (('focus' === en)) {
                var pd_5 = (_co.onFocus($event) !== false);
                ad = (pd_5 && ad);
            }
            if (('keydown' === en)) {
                var pd_6 = (_co.onKeyDown($event) !== false);
                ad = (pd_6 && ad);
            }
            if (('blur' === en)) {
                var pd_7 = (_co.onBlur($event) !== false);
                ad = (pd_7 && ad);
            }
            if (('input' === en)) {
                var pd_8 = (_co.onInput($event) !== false);
                ad = (pd_8 && ad);
            }
            return ad;
        }, null, null)), directiveDef(16384, null, 0, DefaultValueAccessor, [Renderer2, ElementRef, [2, COMPOSITION_BUFFER_MODE]], null, null), directiveDef(16384, null, 0, RequiredValidator, [], { required: [0, 'required'] }, null), directiveDef(540672, null, 0, MaxLengthValidator, [], { maxlength: [0, 'maxlength'] }, null),
        providerDef(1024, null, NG_VALIDATORS, function (p0_0, p1_0) {
            return [p0_0, p1_0];
        }, [RequiredValidator, MaxLengthValidator]), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [DefaultValueAccessor]), directiveDef(671744, null, 0, NgModel, [[8,
                null], [2, NG_VALIDATORS], [8, null], [2, NG_VALUE_ACCESSOR]], { isDisabled: [0, 'isDisabled'], model: [1, 'model'] }, { update: 'ngModelChange' }),
        providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 2, 'mdc-textfield-label', [], [[1, 'for', 0], [2, 'mdc-textfield__label',
                null]], null, null, null, null)),
        directiveDef(16384, [[3, 4]], 0, material_es5_93, [ElementRef], null, null), (_l()(), textDef(null, ['', ''])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 1, 'mdc-textfield-bottom-line', [], [[2, 'mdc-textfield__bottom-line', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_96, [ElementRef], null, null),
        (_l()(), textDef(null, ['\n  ']))], function (_ck, _v) {
        var _co = _v.component;
        var currVal_13 = _co.required;
        _ck(_v, 6, 0, currVal_13);
        var currVal_14 = _co.maxlength;
        _ck(_v, 7, 0, currVal_14);
        var currVal_15 = _co.disabled;
        var currVal_16 = _co.value;
        _ck(_v, 10, 0, currVal_15, currVal_16);
    }, function (_ck, _v) {
        var _co = _v.component;
        var currVal_0 = _co.type;
        var currVal_1 = _co.id;
        var currVal_2 = _co.name;
        var currVal_3 = _co.tabindex;
        var currVal_4 = (nodeValue(_v, 6).required ? '' : null);
        var currVal_5 = (nodeValue(_v, 7).maxlength ? nodeValue(_v, 7).maxlength : null);
        var currVal_6 = nodeValue(_v, 12).ngClassUntouched;
        var currVal_7 = nodeValue(_v, 12).ngClassTouched;
        var currVal_8 = nodeValue(_v, 12).ngClassPristine;
        var currVal_9 = nodeValue(_v, 12).ngClassDirty;
        var currVal_10 = nodeValue(_v, 12).ngClassValid;
        var currVal_11 = nodeValue(_v, 12).ngClassInvalid;
        var currVal_12 = nodeValue(_v, 12).ngClassPending;
        _ck(_v, 4, 1, [currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6,
            currVal_7, currVal_8, currVal_9, currVal_10, currVal_11, currVal_12]);
        var currVal_17 = _co.inputId;
        var currVal_18 = nodeValue(_v, 15).isHostClass;
        _ck(_v, 14, 0, currVal_17, currVal_18);
        var currVal_19 = _co.label;
        _ck(_v, 16, 0, currVal_19);
        var currVal_20 = nodeValue(_v, 19).isHostClass;
        _ck(_v, 18, 0, currVal_20);
    });
}
function View_TextfieldBoxComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 3, 'mdc-textfield-box', [], [[2, 'mdc-textfield', null], [2, 'mdc-textfield--box', null],
            [2, 'mdc-textfield--multiline', null], [2, 'mdc-textfield--fullwidth',
                null], [2, 'mdc-textfield--dense', null]], null, null, View_TextfieldBoxComponent_0, RenderType_TextfieldBoxComponent)),
        providerDef(5120, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_97]), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, null, 0, material_es5_97, [Renderer2, ElementRef, undefined, material_es5_74], null, null)], null, function (_ck, _v) {
        var currVal_0 = nodeValue(_v, 3).isHostClass;
        var currVal_1 = nodeValue(_v, 3).isHostClass;
        var currVal_2 = nodeValue(_v, 3).classMultiline;
        var currVal_3 = nodeValue(_v, 3).classFullwidth;
        var currVal_4 = nodeValue(_v, 3).classDense;
        _ck(_v, 0, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4);
    });
}
var TextfieldBoxComponentNgFactory = createComponentFactory('mdc-textfield-box', material_es5_97, View_TextfieldBoxComponent_Host_0, { id: 'id', name: 'name',
    type: 'type', value: 'value', disabled: 'disabled', dense: 'dense', required: 'required',
    label: 'label', placeholder: 'placeholder', tabindex: 'tabindex', rows: 'rows', cols: 'cols',
    maxlength: 'maxlength', fullwidth: 'fullwidth', multiline: 'multiline' }, { focus: 'focus',
    blur: 'blur', input: 'input', keydown: 'keydown' }, []);
var styles_ToolbarComponent = [];
var RenderType_ToolbarComponent = createRendererType2({ encapsulation: 2,
    styles: styles_ToolbarComponent, data: {} });
function View_ToolbarComponent_0(_l) {
    return viewDef(0, [ngContentDef(null, 0)], null, null);
}
function View_ToolbarComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 3, 'mdc-toolbar', [], [[2, 'mdc-toolbar', null], [2, 'mdc-toolbar--fixed', null],
            [2, 'mdc-toolbar--waterfall', null], [2, 'mdc-toolbar--flexible', null],
            [2, 'mdc-toolbar--fixed-lastrow-only', null], [2, 'mdc-toolbar--flexible-default-behavior',
                null]], null, null, View_ToolbarComponent_0, RenderType_ToolbarComponent)), directiveDef(4374528, null, 2, material_es5_101, [Renderer2, ElementRef, undefined], null, null), queryDef(335544320, 1, { mdcFirstRow: 0 }), queryDef(335544320, 2, { mdcTitle: 0 })], null, function (_ck, _v) {
        var currVal_0 = nodeValue(_v, 1).isHostClass;
        var currVal_1 = nodeValue(_v, 1).classFixedToolbar;
        var currVal_2 = nodeValue(_v, 1).classWaterfallToolbar;
        var currVal_3 = nodeValue(_v, 1).classFlexibleToolbar;
        var currVal_4 = nodeValue(_v, 1).classFixedLastrow;
        var currVal_5 = nodeValue(_v, 1).classFlexibleDefaultBehavior;
        _ck(_v, 0, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5);
    });
}
var ToolbarComponentNgFactory = createComponentFactory('mdc-toolbar', material_es5_101, View_ToolbarComponent_Host_0, { flexible: 'flexible', flexibleDefaultBehavior: 'flexibleDefaultBehavior',
    fixed: 'fixed', waterfall: 'waterfall', fixedLastrow: 'fixedLastrow' }, { change: 'change' }, ['*']);

/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
/* tslint:disable */
var styles_ButtonDemoComponent = [];
var RenderType_ButtonDemoComponent = createRendererType2({ encapsulation: 2,
    styles: styles_ButtonDemoComponent, data: {} });
function View_ButtonDemoComponent_0(_l) {
    return viewDef(0, [queryDef(402653184, 1, { snack: 0 }), (_l()(), elementDef(0, null, null, 536, 'div', [['class', 'mdc-padding'], ['fxLayout', 'column'], ['fxLayoutAlign',
                'start start']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor,
            ElementRef, Renderer2], { layout: [0, 'layout'] }, null), directiveDef(737280, null, 0, LayoutAlignDirective, [MediaMonitor, ElementRef, Renderer2,
            [2, LayoutDirective]], { align: [0, 'align'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers,
            ElementRef, Renderer, Renderer2], { classBase: [0, 'classBase'] }, null),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 2, 'h1', [['mdc-typography-display1', '']], [[2, 'mdc-typography--display1', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(),
            textDef(null, ['Buttons'])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 2, 'div', [['mdc-typography-subheading2',
                '']], [[2, 'mdc-typography--subheading2', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['The MDC Button component is a spec-aligned button component adhering to the Material Design button requirements.'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 5, 'div', [['class', 'info-banner'], ['mdc-typography-subheading1', '']], [[2,
                'mdc-typography--subheading1', null]], null, null, null, null)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(),
            textDef(null, ['\n    '])), (_l()(), textDef(null, ['import { ButtonModule } from \'@angular-mdc/web\';'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 128, 'div', [['class', 'docs-api']], null, null, null, null, null)),
        directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers,
            KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0,
                'classBase'] }, null), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 124, 'table', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'thead', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Component'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 13, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['button[mdc-button]'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['a[mdc-button]'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Properties'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 85, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() type: string'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Input type of button (e.g. button, submit).'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() dense: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Compresses the button text to make it slightly smaller.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() raised: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Elevates the button and creates a colored background.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() compact: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Reduces the amount of horizontal padding in the button.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() primary: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Colors the button with the primary color.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() accent: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Colors the button with the accent color.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() cardAction: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Correctly sets position of card action buttons. (Sets compact to true automatically)'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() disabled: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Disables the button.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 10, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() disableRipple: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 4, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n'])), (_l()(),
            elementDef(0, null, null, 2, 'pre', [], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 1, 'code', [], null, null, null, null, null)), (_l()(), textDef(null, ['Disable the ink ripple.\nExample: disableRipple="true" or disableRipple'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 3, 'button', [['mdc-button', '']], [[8, 'tabIndex', 0], [1, 'type',
                0], [2, 'mdc-button', null], [2, 'mdc-button--raised', null],
            [2, 'mdc-button--primary', null], [2, 'mdc-button--accent', null],
            [2, 'mdc-button--dense', null], [2, 'mdc-button--compact', null],
            [2, 'mdc-card__action', null]], [[null, 'click'], [null,
                'keypress'], [null, 'blur']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('keypress' === en)) {
                var pd_0 = (nodeValue(_v, 153).onkeypress($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 153).blur($event) !== false);
                ad = (pd_1 && ad);
            }
            if (('click' === en)) {
                var pd_2 = (_co.handleClick() !== false);
                ad = (pd_2 && ad);
            }
            return ad;
        }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], { raised: [0, 'raised'], primary: [1, 'primary'] }, null), (_l()(), textDef(0, ['Click event'])), (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 33, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)),
        (_l()(), elementDef(0, null, null, 25, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])),
        (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-button'])),
        (_l()(), textDef(null, ['\n ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['primary'])),
        (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])),
        (_l()(), textDef(null, ['\n ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['raised'])),
        (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])),
        (_l()(), textDef(null, ['\n ('])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['click'])),
        (_l()(), textDef(null, [')='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"handleClick();"'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Click event'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 4, 'button', [['mdc-button', ''], ['mdc-theme-dark', 'true']], [[8, 'tabIndex',
                0], [1, 'type', 0], [2, 'mdc-button', null], [2, 'mdc-button--raised',
                null], [2, 'mdc-button--primary', null], [2, 'mdc-button--accent',
                null], [2, 'mdc-button--dense', null], [2, 'mdc-button--compact',
                null], [2, 'mdc-card__action', null]], [[null,
                'keypress'], [null, 'blur']], function (_v, en, $event) {
            var ad = true;
            if (('keypress' === en)) {
                var pd_0 = (nodeValue(_v, 193).onkeypress($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 193).blur($event) !== false);
                ad = (pd_1 && ad);
            }
            return ad;
        }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], { raised: [0, 'raised'], primary: [1, 'primary'] }, null), directiveDef(540672, null, 0, material_es5_99, [Renderer2, ElementRef], { mdcThemeDark: [0,
                'mdcThemeDark'] }, null), (_l()(), textDef(0, ['Dark theme'])), (_l()(),
            textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 33, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 25, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-button'])), (_l()(), textDef(null, ['\n ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['primary'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['\n ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['raised'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['\n '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-theme-dark'])), (_l()(),
            textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Dark theme'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 3, 'button', [['mdc-button', '']], [[8, 'tabIndex', 0], [1, 'type', 0], [2, 'mdc-button',
                null], [2, 'mdc-button--raised', null], [2, 'mdc-button--primary',
                null], [2, 'mdc-button--accent', null], [2, 'mdc-button--dense',
                null], [2, 'mdc-button--compact', null], [2, 'mdc-card__action',
                null]], [[null, 'keypress'], [null, 'blur']], function (_v, en, $event) {
            var ad = true;
            if (('keypress' === en)) {
                var pd_0 = (nodeValue(_v, 234).onkeypress($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 234).blur($event) !== false);
                ad = (pd_1 && ad);
            }
            return ad;
        }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], { raised: [0, 'raised'], primary: [1, 'primary'], disableRipple: [2, 'disableRipple'] }, null), (_l()(), textDef(0, ['Ink ripple - Disabled'])), (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 33, 'pre', [['style',
                'background:#000;color:#f8f8f8']], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 25, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, [' '])),
        (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc-button'])), (_l()(), textDef(null, ['\n  ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['primary'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['\n  ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['raised'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['\n  ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['disableRipple'])), (_l()(),
            textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Ink ripple - Disabled'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 3, 'button', [['mdc-button', '']], [[8, 'tabIndex', 0], [1, 'type', 0], [2, 'mdc-button',
                null], [2, 'mdc-button--raised', null], [2, 'mdc-button--primary',
                null], [2, 'mdc-button--accent', null], [2, 'mdc-button--dense',
                null], [2, 'mdc-button--compact', null], [2, 'mdc-card__action',
                null]], [[null, 'keypress'], [null, 'blur']], function (_v, en, $event) {
            var ad = true;
            if (('keypress' === en)) {
                var pd_0 = (nodeValue(_v, 274).onkeypress($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 274).blur($event) !== false);
                ad = (pd_1 && ad);
            }
            return ad;
        }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], { accent: [0, 'accent'] }, null), (_l()(), textDef(0, ['Accent'])), (_l()(),
            textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 21, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 13, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-button'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['accent'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Accent'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 3, 'a', [['href',
                '#/button-demo'], ['mdc-button', '']], [[8, 'tabIndex', 0], [1, 'type', 0], [2, 'mdc-button',
                null], [2, 'mdc-button--raised', null], [2, 'mdc-button--primary',
                null], [2, 'mdc-button--accent', null], [2, 'mdc-button--dense',
                null], [2, 'mdc-button--compact', null], [2, 'mdc-card__action',
                null]], [[null, 'keypress'], [null, 'blur']], function (_v, en, $event) {
            var ad = true;
            if (('keypress' === en)) {
                var pd_0 = (nodeValue(_v, 302).onkeypress($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 302).blur($event) !== false);
                ad = (pd_1 && ad);
            }
            return ad;
        }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], { raised: [0, 'raised'],
            primary: [1, 'primary'] }, null), (_l()(), textDef(0, ['Href link'])),
        (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 33, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 25, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['a'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-button'])), (_l()(), textDef(null, ['\n ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['primary'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['\n ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['raised'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['\n '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['href'])), (_l()(), textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"/#/button-demo"'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['Href link'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['a'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(),
            textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 3, 'button', [['mdc-button', '']], [[8, 'tabIndex', 0], [1, 'type', 0], [2, 'mdc-button',
                null], [2, 'mdc-button--raised', null], [2, 'mdc-button--primary',
                null], [2, 'mdc-button--accent', null], [2, 'mdc-button--dense',
                null], [2, 'mdc-button--compact', null], [2, 'mdc-card__action',
                null]], [[null, 'keypress'], [null, 'blur']], function (_v, en, $event) {
            var ad = true;
            if (('keypress' === en)) {
                var pd_0 = (nodeValue(_v, 342).onkeypress($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 342).blur($event) !== false);
                ad = (pd_1 && ad);
            }
            return ad;
        }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], { raised: [0, 'raised'] }, null), (_l()(), textDef(0, ['Raised'])), (_l()(),
            textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 21, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 13, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-button'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['raised'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Raised'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 3, 'button', [['mdc-button',
                '']], [[8, 'tabIndex', 0], [1, 'type', 0], [2, 'mdc-button', null], [2, 'mdc-button--raised',
                null], [2, 'mdc-button--primary', null], [2, 'mdc-button--accent',
                null], [2, 'mdc-button--dense', null], [2, 'mdc-button--compact',
                null], [2, 'mdc-card__action', null]], [[null, 'keypress'],
            [null, 'blur']], function (_v, en, $event) {
            var ad = true;
            if (('keypress' === en)) {
                var pd_0 = (nodeValue(_v, 370).onkeypress($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 370).blur($event) !== false);
                ad = (pd_1 && ad);
            }
            return ad;
        }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], { raised: [0, 'raised'],
            dense: [1, 'dense'] }, null), (_l()(), textDef(0, ['Dense and Raised'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 27, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 19, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-button'])), (_l()(), textDef(null, ['\n ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['dense'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['\n ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['raised'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Dense and Raised'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 3, 'button', [['mdc-button',
                '']], [[8, 'tabIndex', 0], [1, 'type', 0], [2, 'mdc-button', null], [2, 'mdc-button--raised',
                null], [2, 'mdc-button--primary', null], [2, 'mdc-button--accent',
                null], [2, 'mdc-button--dense', null], [2, 'mdc-button--compact',
                null], [2, 'mdc-card__action', null]], [[null, 'keypress'],
            [null, 'blur']], function (_v, en, $event) {
            var ad = true;
            if (('keypress' === en)) {
                var pd_0 = (nodeValue(_v, 404).onkeypress($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 404).blur($event) !== false);
                ad = (pd_1 && ad);
            }
            return ad;
        }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], { raised: [0, 'raised'],
            compact: [1, 'compact'] }, null), (_l()(), textDef(0, ['Compact and Raised'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 27, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 19, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-button'])), (_l()(), textDef(null, ['\n ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['compact'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['\n ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['raised'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Compact and Raised'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 3, 'button', [['mdc-button',
                '']], [[8, 'tabIndex', 0], [1, 'type', 0], [2, 'mdc-button', null], [2, 'mdc-button--raised',
                null], [2, 'mdc-button--primary', null], [2, 'mdc-button--accent',
                null], [2, 'mdc-button--dense', null], [2, 'mdc-button--compact',
                null], [2, 'mdc-card__action', null]], [[null, 'keypress'],
            [null, 'blur']], function (_v, en, $event) {
            var ad = true;
            if (('keypress' === en)) {
                var pd_0 = (nodeValue(_v, 438).onkeypress($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 438).blur($event) !== false);
                ad = (pd_1 && ad);
            }
            return ad;
        }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], { raised: [0, 'raised'],
            accent: [1, 'accent'] }, null), (_l()(), textDef(0, ['Accent and Raised'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 27, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 19, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-button'])), (_l()(), textDef(null, ['\n ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['accent'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['\n ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['raised'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Accent and Raised'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 3, 'button', [['mdc-button',
                '']], [[8, 'tabIndex', 0], [1, 'type', 0], [2, 'mdc-button', null], [2, 'mdc-button--raised',
                null], [2, 'mdc-button--primary', null], [2, 'mdc-button--accent',
                null], [2, 'mdc-button--dense', null], [2, 'mdc-button--compact',
                null], [2, 'mdc-card__action', null]], [[null, 'keypress'],
            [null, 'blur']], function (_v, en, $event) {
            var ad = true;
            if (('keypress' === en)) {
                var pd_0 = (nodeValue(_v, 472).onkeypress($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 472).blur($event) !== false);
                ad = (pd_1 && ad);
            }
            return ad;
        }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], { raised: [0, 'raised'],
            primary: [1, 'primary'] }, null), (_l()(), textDef(0, ['Primary and Raised'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 27, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 19, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-button'])), (_l()(), textDef(null, ['\n ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['primary'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['\n ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['raised'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Primary and Raised'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 3, 'button', [['mdc-button',
                '']], [[8, 'tabIndex', 0], [1, 'type', 0], [2, 'mdc-button', null], [2, 'mdc-button--raised',
                null], [2, 'mdc-button--primary', null], [2, 'mdc-button--accent',
                null], [2, 'mdc-button--dense', null], [2, 'mdc-button--compact',
                null], [2, 'mdc-card__action', null]], [[null, 'keypress'],
            [null, 'blur']], function (_v, en, $event) {
            var ad = true;
            if (('keypress' === en)) {
                var pd_0 = (nodeValue(_v, 506).onkeypress($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 506).blur($event) !== false);
                ad = (pd_1 && ad);
            }
            return ad;
        }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], { raised: [0, 'raised'],
            primary: [1, 'primary'], disabled: [2, 'disabled'] }, null), (_l()(),
            textDef(0, ['Disabled'])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 27, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)),
        (_l()(), elementDef(0, null, null, 19, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])),
        (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-button'])),
        (_l()(), textDef(null, ['\n ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['primary'])),
        (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])),
        (_l()(), textDef(null, ['\n ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['disabled'])),
        (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Disabled'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])),
        (_l()(), textDef(null, [' '])), (_l()(), textDef(null, ['\n'])),
        (_l()(), elementDef(0, null, null, 1, 'mdc-snackbar', [], [[2, 'mdc-snackbar', null], [1, 'aria-live', 0], [1, 'aria-atomic', 0],
            [1, 'aria-hidden', 0], [2, 'mdc-snackbar--align-start', null]], null, null, View_SnackbarComponent_0, RenderType_SnackbarComponent)),
        directiveDef(4374528, [[1, 4], ['snack', 4]], 0, material_es5_76, [Renderer2, ElementRef,
            undefined], null, null)], function (_ck, _v) {
        var currVal_0 = 'column';
        _ck(_v, 2, 0, currVal_0);
        var currVal_1 = 'start start';
        _ck(_v, 3, 0, currVal_1);
        var currVal_2 = 'mdc-padding';
        _ck(_v, 4, 0, currVal_2);
        var currVal_6 = 'info-banner';
        _ck(_v, 15, 0, currVal_6);
        var currVal_7 = 'docs-api';
        _ck(_v, 22, 0, currVal_7);
        var currVal_17 = true;
        var currVal_18 = true;
        _ck(_v, 153, 0, currVal_17, currVal_18);
        var currVal_28 = true;
        var currVal_29 = true;
        _ck(_v, 193, 0, currVal_28, currVal_29);
        var currVal_30 = 'true';
        _ck(_v, 194, 0, currVal_30);
        var currVal_40 = true;
        var currVal_41 = true;
        var currVal_42 = true;
        _ck(_v, 234, 0, currVal_40, currVal_41, currVal_42);
        var currVal_52 = true;
        _ck(_v, 274, 0, currVal_52);
        var currVal_62 = true;
        var currVal_63 = true;
        _ck(_v, 302, 0, currVal_62, currVal_63);
        var currVal_73 = true;
        _ck(_v, 342, 0, currVal_73);
        var currVal_83 = true;
        var currVal_84 = true;
        _ck(_v, 370, 0, currVal_83, currVal_84);
        var currVal_94 = true;
        var currVal_95 = true;
        _ck(_v, 404, 0, currVal_94, currVal_95);
        var currVal_105 = true;
        var currVal_106 = true;
        _ck(_v, 438, 0, currVal_105, currVal_106);
        var currVal_116 = true;
        var currVal_117 = true;
        _ck(_v, 472, 0, currVal_116, currVal_117);
        var currVal_127 = true;
        var currVal_128 = true;
        var currVal_129 = true;
        _ck(_v, 506, 0, currVal_127, currVal_128, currVal_129);
    }, function (_ck, _v) {
        var currVal_3 = nodeValue(_v, 7).isHostClass;
        _ck(_v, 6, 0, currVal_3);
        var currVal_4 = nodeValue(_v, 11).isHostClass;
        _ck(_v, 10, 0, currVal_4);
        var currVal_5 = nodeValue(_v, 16).isHostClass;
        _ck(_v, 14, 0, currVal_5);
        var currVal_8 = nodeValue(_v, 153).tabindex;
        var currVal_9 = nodeValue(_v, 153).attrType;
        var currVal_10 = nodeValue(_v, 153).isHostClass;
        var currVal_11 = nodeValue(_v, 153).classRaised;
        var currVal_12 = nodeValue(_v, 153).classPrimary;
        var currVal_13 = nodeValue(_v, 153).classAccent;
        var currVal_14 = nodeValue(_v, 153).classDense;
        var currVal_15 = nodeValue(_v, 153).classCompact;
        var currVal_16 = nodeValue(_v, 153).classCardAction;
        _ck(_v, 151, 0, currVal_8, currVal_9, currVal_10, currVal_11, currVal_12, currVal_13, currVal_14, currVal_15, currVal_16);
        var currVal_19 = nodeValue(_v, 193).tabindex;
        var currVal_20 = nodeValue(_v, 193).attrType;
        var currVal_21 = nodeValue(_v, 193).isHostClass;
        var currVal_22 = nodeValue(_v, 193).classRaised;
        var currVal_23 = nodeValue(_v, 193).classPrimary;
        var currVal_24 = nodeValue(_v, 193).classAccent;
        var currVal_25 = nodeValue(_v, 193).classDense;
        var currVal_26 = nodeValue(_v, 193).classCompact;
        var currVal_27 = nodeValue(_v, 193).classCardAction;
        _ck(_v, 191, 0, currVal_19, currVal_20, currVal_21, currVal_22, currVal_23, currVal_24, currVal_25, currVal_26, currVal_27);
        var currVal_31 = nodeValue(_v, 234).tabindex;
        var currVal_32 = nodeValue(_v, 234).attrType;
        var currVal_33 = nodeValue(_v, 234).isHostClass;
        var currVal_34 = nodeValue(_v, 234).classRaised;
        var currVal_35 = nodeValue(_v, 234).classPrimary;
        var currVal_36 = nodeValue(_v, 234).classAccent;
        var currVal_37 = nodeValue(_v, 234).classDense;
        var currVal_38 = nodeValue(_v, 234).classCompact;
        var currVal_39 = nodeValue(_v, 234).classCardAction;
        _ck(_v, 232, 0, currVal_31, currVal_32, currVal_33, currVal_34, currVal_35, currVal_36, currVal_37, currVal_38, currVal_39);
        var currVal_43 = nodeValue(_v, 274).tabindex;
        var currVal_44 = nodeValue(_v, 274).attrType;
        var currVal_45 = nodeValue(_v, 274).isHostClass;
        var currVal_46 = nodeValue(_v, 274).classRaised;
        var currVal_47 = nodeValue(_v, 274).classPrimary;
        var currVal_48 = nodeValue(_v, 274).classAccent;
        var currVal_49 = nodeValue(_v, 274).classDense;
        var currVal_50 = nodeValue(_v, 274).classCompact;
        var currVal_51 = nodeValue(_v, 274).classCardAction;
        _ck(_v, 272, 0, currVal_43, currVal_44, currVal_45, currVal_46, currVal_47, currVal_48, currVal_49, currVal_50, currVal_51);
        var currVal_53 = nodeValue(_v, 302).tabindex;
        var currVal_54 = nodeValue(_v, 302).attrType;
        var currVal_55 = nodeValue(_v, 302).isHostClass;
        var currVal_56 = nodeValue(_v, 302).classRaised;
        var currVal_57 = nodeValue(_v, 302).classPrimary;
        var currVal_58 = nodeValue(_v, 302).classAccent;
        var currVal_59 = nodeValue(_v, 302).classDense;
        var currVal_60 = nodeValue(_v, 302).classCompact;
        var currVal_61 = nodeValue(_v, 302).classCardAction;
        _ck(_v, 300, 0, currVal_53, currVal_54, currVal_55, currVal_56, currVal_57, currVal_58, currVal_59, currVal_60, currVal_61);
        var currVal_64 = nodeValue(_v, 342).tabindex;
        var currVal_65 = nodeValue(_v, 342).attrType;
        var currVal_66 = nodeValue(_v, 342).isHostClass;
        var currVal_67 = nodeValue(_v, 342).classRaised;
        var currVal_68 = nodeValue(_v, 342).classPrimary;
        var currVal_69 = nodeValue(_v, 342).classAccent;
        var currVal_70 = nodeValue(_v, 342).classDense;
        var currVal_71 = nodeValue(_v, 342).classCompact;
        var currVal_72 = nodeValue(_v, 342).classCardAction;
        _ck(_v, 340, 0, currVal_64, currVal_65, currVal_66, currVal_67, currVal_68, currVal_69, currVal_70, currVal_71, currVal_72);
        var currVal_74 = nodeValue(_v, 370).tabindex;
        var currVal_75 = nodeValue(_v, 370).attrType;
        var currVal_76 = nodeValue(_v, 370).isHostClass;
        var currVal_77 = nodeValue(_v, 370).classRaised;
        var currVal_78 = nodeValue(_v, 370).classPrimary;
        var currVal_79 = nodeValue(_v, 370).classAccent;
        var currVal_80 = nodeValue(_v, 370).classDense;
        var currVal_81 = nodeValue(_v, 370).classCompact;
        var currVal_82 = nodeValue(_v, 370).classCardAction;
        _ck(_v, 368, 0, currVal_74, currVal_75, currVal_76, currVal_77, currVal_78, currVal_79, currVal_80, currVal_81, currVal_82);
        var currVal_85 = nodeValue(_v, 404).tabindex;
        var currVal_86 = nodeValue(_v, 404).attrType;
        var currVal_87 = nodeValue(_v, 404).isHostClass;
        var currVal_88 = nodeValue(_v, 404).classRaised;
        var currVal_89 = nodeValue(_v, 404).classPrimary;
        var currVal_90 = nodeValue(_v, 404).classAccent;
        var currVal_91 = nodeValue(_v, 404).classDense;
        var currVal_92 = nodeValue(_v, 404).classCompact;
        var currVal_93 = nodeValue(_v, 404).classCardAction;
        _ck(_v, 402, 0, currVal_85, currVal_86, currVal_87, currVal_88, currVal_89, currVal_90, currVal_91, currVal_92, currVal_93);
        var currVal_96 = nodeValue(_v, 438).tabindex;
        var currVal_97 = nodeValue(_v, 438).attrType;
        var currVal_98 = nodeValue(_v, 438).isHostClass;
        var currVal_99 = nodeValue(_v, 438).classRaised;
        var currVal_100 = nodeValue(_v, 438).classPrimary;
        var currVal_101 = nodeValue(_v, 438).classAccent;
        var currVal_102 = nodeValue(_v, 438).classDense;
        var currVal_103 = nodeValue(_v, 438).classCompact;
        var currVal_104 = nodeValue(_v, 438).classCardAction;
        _ck(_v, 436, 0, currVal_96, currVal_97, currVal_98, currVal_99, currVal_100, currVal_101, currVal_102, currVal_103, currVal_104);
        var currVal_107 = nodeValue(_v, 472).tabindex;
        var currVal_108 = nodeValue(_v, 472).attrType;
        var currVal_109 = nodeValue(_v, 472).isHostClass;
        var currVal_110 = nodeValue(_v, 472).classRaised;
        var currVal_111 = nodeValue(_v, 472).classPrimary;
        var currVal_112 = nodeValue(_v, 472).classAccent;
        var currVal_113 = nodeValue(_v, 472).classDense;
        var currVal_114 = nodeValue(_v, 472).classCompact;
        var currVal_115 = nodeValue(_v, 472).classCardAction;
        _ck(_v, 470, 0, currVal_107, currVal_108, currVal_109, currVal_110, currVal_111, currVal_112, currVal_113, currVal_114, currVal_115);
        var currVal_118 = nodeValue(_v, 506).tabindex;
        var currVal_119 = nodeValue(_v, 506).attrType;
        var currVal_120 = nodeValue(_v, 506).isHostClass;
        var currVal_121 = nodeValue(_v, 506).classRaised;
        var currVal_122 = nodeValue(_v, 506).classPrimary;
        var currVal_123 = nodeValue(_v, 506).classAccent;
        var currVal_124 = nodeValue(_v, 506).classDense;
        var currVal_125 = nodeValue(_v, 506).classCompact;
        var currVal_126 = nodeValue(_v, 506).classCardAction;
        _ck(_v, 504, 0, currVal_118, currVal_119, currVal_120, currVal_121, currVal_122, currVal_123, currVal_124, currVal_125, currVal_126);
        var currVal_130 = nodeValue(_v, 540).isHostClass;
        var currVal_131 = nodeValue(_v, 540).ariaLive;
        var currVal_132 = nodeValue(_v, 540).ariaAtomic;
        var currVal_133 = nodeValue(_v, 540).ariaHidden;
        var currVal_134 = nodeValue(_v, 540).classAlignStart;
        _ck(_v, 539, 0, currVal_130, currVal_131, currVal_132, currVal_133, currVal_134);
    });
}
function View_ButtonDemoComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1, 'button-demo', [], null, null, null, View_ButtonDemoComponent_0, RenderType_ButtonDemoComponent)), directiveDef(49152, null, 0, ButtonDemoComponent, [], null, null)], null, null);
}
var ButtonDemoComponentNgFactory = createComponentFactory('button-demo', ButtonDemoComponent, View_ButtonDemoComponent_Host_0, {}, {}, []);

/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
/* tslint:disable */
var styles_CheckboxDemoComponent = [];
var RenderType_CheckboxDemoComponent = createRendererType2({ encapsulation: 2,
    styles: styles_CheckboxDemoComponent, data: {} });
function View_CheckboxDemoComponent_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 426, 'div', [['class',
                'mdc-padding'], ['fxLayout', 'column'], ['fxLayoutAlign', 'start start']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0,
                'layout'] }, null), directiveDef(737280, null, 0, LayoutAlignDirective, [MediaMonitor, ElementRef, Renderer2, [2, LayoutDirective]], { align: [0,
                'align'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 2, 'h1', [['mdc-typography-display1',
                '']], [[2, 'mdc-typography--display1', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['Checkbox'])), (_l()(),
            textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 2, 'div', [['mdc-typography-subheading2', '']], [[2, 'mdc-typography--subheading2',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, undefined, [], null, null),
        (_l()(), textDef(null, ['The MDC Checkbox component is a spec-aligned checkbox component adhering to the Material Design checkbox requirements.'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 5, 'div', [['class', 'info-banner'], ['mdc-typography-subheading1', '']], [[2,
                'mdc-typography--subheading1', null]], null, null, null, null)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(),
            textDef(null, ['\n    '])), (_l()(), textDef(null, ['import { CheckboxModule } from \'@angular-mdc/web\';'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 146, 'div', [['class', 'docs-api']], null, null, null, null, null)),
        directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers,
            KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0,
                'classBase'] }, null), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 142, 'table', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'thead', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Component'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-checkbox'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Properties'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 85, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() id: string'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Unique Id of the checkbox (auto generated if not supplied).'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() name: string'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Name of the checkbox.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() value: any'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Value of the checkbox.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() ariaLabel: string'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Used to set the \'aria-label\' attribute on the underlying input element.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() ariaLabelledby: string'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['The \'aria-labelledby\' attribute takes precedence as the element\'s text alternative.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() checked: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Use to verify the checked value.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() indeterminate: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['To represent a checkbox with three states (e.g. a nested list of checkable items).'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() disabled: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Disables the component.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 10, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() disableRipple: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 4, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n'])), (_l()(),
            elementDef(0, null, null, 2, 'pre', [], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 1, 'code', [], null, null, null, null, null)), (_l()(), textDef(null, ['Disable the ink ripple.\nExample: disableRipple="true" or disableRipple'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Events'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Output() change'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Event dispatched on value change.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 257, 'div', [['class', 'mdc-padding'], ['fxLayout', 'column'], ['fxLayoutAlign',
                'start start']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor,
            ElementRef, Renderer2], { layout: [0, 'layout'] }, null), directiveDef(737280, null, 0, LayoutAlignDirective, [MediaMonitor, ElementRef, Renderer2,
            [2, LayoutDirective]], { align: [0, 'align'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers,
            ElementRef, Renderer, Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 16, 'mdc-form-field', [], [[8, 'className',
                0]], null, null, null, null)), directiveDef(1196032, null, 3, material_es5_54, [Renderer2, ElementRef, undefined], null, null), queryDef(335544320, 1, { inputCheckbox: 0 }), queryDef(335544320, 2, { inputRadio: 0 }), queryDef(335544320, 3, { inputSwitch: 0 }), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 6, 'mdc-checkbox', [['id', 'myCheckbox'], ['name', 'myName']], [[2, 'mdc-checkbox', null],
            [2, 'ng-untouched', null], [2, 'ng-touched', null], [2, 'ng-pristine',
                null], [2, 'ng-dirty', null], [2, 'ng-valid', null],
            [2, 'ng-invalid', null], [2, 'ng-pending', null]], [[null,
                'ngModelChange']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('ngModelChange' === en)) {
                var pd_0 = ((_co.isChecked = $event) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, View_CheckboxComponent_0, RenderType_CheckboxComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[1, 4]], 0, material_es5_17, [Renderer2, ElementRef, material_es5_74, undefined], { id: [0, 'id'], name: [1, 'name'] }, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_17]), directiveDef(671744, null, 0, NgModel, [[8,
                null], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'], model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(),
            textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 1, 'label', [], null, null, null, null, null)), (_l()(), textDef(null, ['Checkbox value is ', ''])),
        (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 49, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-form-field'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 12, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-checkbox'])), (_l()(), textDef(null, [' [('])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['ngModel'])), (_l()(), textDef(null, [')]='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"isChecked"'])), (_l()(), textDef(null, ['>'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-checkbox'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 4, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['label'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['My label'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['label'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-form-field'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(),
            textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 13, 'mdc-form-field', [], [[8, 'className', 0]], null, null, null, null)), directiveDef(1196032, null, 3, material_es5_54, [Renderer2, ElementRef, undefined], null, null), queryDef(335544320, 4, { inputCheckbox: 0 }), queryDef(335544320, 5, { inputRadio: 0 }), queryDef(335544320, 6, { inputSwitch: 0 }), (_l()(), textDef(null, ['\n      '])), (_l()(),
            elementDef(0, null, null, 3, 'mdc-checkbox', [], [[2,
                    'mdc-checkbox', null]], null, null, View_CheckboxComponent_0, RenderType_CheckboxComponent)), providerDef(5120, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_17]), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[4, 4]], 0, material_es5_17, [Renderer2, ElementRef, material_es5_74, undefined], { indeterminate: [0, 'indeterminate'] }, null), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 1, 'label', [], null, null, null, null, null)), (_l()(), textDef(null, ['Indeterminate Checkbox'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 49, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-form-field'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 12, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-checkbox'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['indeterminate'])), (_l()(),
            textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])),
        (_l()(), textDef(null, ['>'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-checkbox'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['label'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Indeterminate Checkbox'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['label'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-form-field'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 13, 'mdc-form-field', [], [[8, 'className', 0]], null, null, null, null)), directiveDef(1196032, null, 3, material_es5_54, [Renderer2,
            ElementRef, undefined], null, null), queryDef(335544320, 7, { inputCheckbox: 0 }),
        queryDef(335544320, 8, { inputRadio: 0 }), queryDef(335544320, 9, { inputSwitch: 0 }), (_l()(),
            textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 3, 'mdc-checkbox', [], [[2, 'mdc-checkbox', null]], null, null, View_CheckboxComponent_0, RenderType_CheckboxComponent)),
        providerDef(5120, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_17]), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2,
            ElementRef, undefined]), directiveDef(4374528, [[7, 4]], 0, material_es5_17, [Renderer2,
            ElementRef, material_es5_74, undefined], { disabled: [0, 'disabled'] }, null),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 1, 'label', [], null, null, null, null, null)), (_l()(), textDef(null, ['Checkbox is disabled'])),
        (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 49, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-form-field'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 12, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-checkbox'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['disabled'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-checkbox'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 4, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['label'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Checkbox is disabled'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['label'])), (_l()(), textDef(null, ['>'])),
        (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-form-field'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])),
        (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 13, 'mdc-form-field', [], [[8, 'className', 0]], null, null, null, null)), directiveDef(1196032, null, 3, material_es5_54, [Renderer2, ElementRef, undefined], null, null), queryDef(335544320, 10, { inputCheckbox: 0 }), queryDef(335544320, 11, { inputRadio: 0 }), queryDef(335544320, 12, { inputSwitch: 0 }), (_l()(), textDef(null, ['\n      '])), (_l()(),
            elementDef(0, null, null, 3, 'mdc-checkbox', [['disableRipple',
                    '']], [[2, 'mdc-checkbox', null]], null, null, View_CheckboxComponent_0, RenderType_CheckboxComponent)), providerDef(5120, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_17]), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[10, 4]], 0, material_es5_17, [Renderer2, ElementRef, material_es5_74, undefined], { disableRipple: [0, 'disableRipple'] }, null), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 1, 'label', [], null, null, null, null, null)), (_l()(), textDef(null, ['Ripple disabled'])), (_l()(), textDef(null, ['\n    '])), (_l()(),
            textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 35, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), textDef(null, ['-form-field>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), textDef(null, ['-checkbox disableRipple>'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc'])), (_l()(), textDef(null, ['-checkbox>'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['label'])), (_l()(), textDef(null, ['>'])),
        (_l()(), textDef(null, ['Ripple disabled'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['label'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), textDef(null, ['-form-field>'])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['  '])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n']))], function (_ck, _v) {
        var _co = _v.component;
        var currVal_0 = 'column';
        _ck(_v, 1, 0, currVal_0);
        var currVal_1 = 'start start';
        _ck(_v, 2, 0, currVal_1);
        var currVal_2 = 'mdc-padding';
        _ck(_v, 3, 0, currVal_2);
        var currVal_6 = 'info-banner';
        _ck(_v, 14, 0, currVal_6);
        var currVal_7 = 'docs-api';
        _ck(_v, 21, 0, currVal_7);
        var currVal_8 = 'column';
        _ck(_v, 169, 0, currVal_8);
        var currVal_9 = 'start start';
        _ck(_v, 170, 0, currVal_9);
        var currVal_10 = 'mdc-padding';
        _ck(_v, 171, 0, currVal_10);
        var currVal_20 = 'myCheckbox';
        var currVal_21 = 'myName';
        _ck(_v, 181, 0, currVal_20, currVal_21);
        var currVal_22 = 'myName';
        var currVal_23 = _co.isChecked;
        _ck(_v, 183, 0, currVal_22, currVal_23);
        var currVal_27 = true;
        _ck(_v, 251, 0, currVal_27);
        var currVal_30 = true;
        _ck(_v, 317, 0, currVal_30);
        var currVal_33 = '';
        _ck(_v, 383, 0, currVal_33);
    }, function (_ck, _v) {
        var _co = _v.component;
        var currVal_3 = nodeValue(_v, 6).isHostClass;
        _ck(_v, 5, 0, currVal_3);
        var currVal_4 = nodeValue(_v, 10).isHostClass;
        _ck(_v, 9, 0, currVal_4);
        var currVal_5 = nodeValue(_v, 15).isHostClass;
        _ck(_v, 13, 0, currVal_5);
        var currVal_11 = nodeValue(_v, 174).className;
        _ck(_v, 173, 0, currVal_11);
        var currVal_12 = nodeValue(_v, 181).isHostClass;
        var currVal_13 = nodeValue(_v, 185).ngClassUntouched;
        var currVal_14 = nodeValue(_v, 185).ngClassTouched;
        var currVal_15 = nodeValue(_v, 185).ngClassPristine;
        var currVal_16 = nodeValue(_v, 185).ngClassDirty;
        var currVal_17 = nodeValue(_v, 185).ngClassValid;
        var currVal_18 = nodeValue(_v, 185).ngClassInvalid;
        var currVal_19 = nodeValue(_v, 185).ngClassPending;
        _ck(_v, 179, 0, currVal_12, currVal_13, currVal_14, currVal_15, currVal_16, currVal_17, currVal_18, currVal_19);
        var currVal_24 = _co.isChecked;
        _ck(_v, 188, 0, currVal_24);
        var currVal_25 = nodeValue(_v, 243).className;
        _ck(_v, 242, 0, currVal_25);
        var currVal_26 = nodeValue(_v, 251).isHostClass;
        _ck(_v, 248, 0, currVal_26);
        var currVal_28 = nodeValue(_v, 309).className;
        _ck(_v, 308, 0, currVal_28);
        var currVal_29 = nodeValue(_v, 317).isHostClass;
        _ck(_v, 314, 0, currVal_29);
        var currVal_31 = nodeValue(_v, 375).className;
        _ck(_v, 374, 0, currVal_31);
        var currVal_32 = nodeValue(_v, 383).isHostClass;
        _ck(_v, 380, 0, currVal_32);
    });
}
function View_CheckboxDemoComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1, 'checkbox-demo', [], null, null, null, View_CheckboxDemoComponent_0, RenderType_CheckboxDemoComponent)), directiveDef(49152, null, 0, CheckboxDemoComponent, [], null, null)], null, null);
}
var CheckboxDemoComponentNgFactory = createComponentFactory('checkbox-demo', CheckboxDemoComponent, View_CheckboxDemoComponent_Host_0, {}, {}, []);

/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
/* tslint:disable */
var styles_FabDemoComponent = [];
var RenderType_FabDemoComponent = createRendererType2({ encapsulation: 2,
    styles: styles_FabDemoComponent, data: {} });
function View_FabDemoComponent_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 256, 'div', [['class',
                'mdc-padding'], ['fxLayout', 'column'], ['fxLayoutAlign', 'start start']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0,
                'layout'] }, null), directiveDef(737280, null, 0, LayoutAlignDirective, [MediaMonitor, ElementRef, Renderer2, [2, LayoutDirective]], { align: [0,
                'align'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 2, 'h1', [['mdc-typography-display1',
                '']], [[2, 'mdc-typography--display1', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['Floating Action Buttons'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 2, 'div', [['mdc-typography-subheading2', '']], [[2, 'mdc-typography--subheading2',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, undefined, [], null, null),
        (_l()(), textDef(null, ['The MDC FAB component is a spec-aligned button component adhering to the Material Design button requirements.'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 5, 'div', [['class', 'info-banner'], ['mdc-typography-subheading1', '']], [[2,
                'mdc-typography--subheading1', null]], null, null, null, null)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(),
            textDef(null, ['\n    '])), (_l()(), textDef(null, ['import { FabModule } from \'@angular-mdc/web\';'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 106, 'div', [['class', 'docs-api']], null, null, null, null, null)),
        directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers,
            KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0,
                'classBase'] }, null), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 102, 'table', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'thead', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Component'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 13, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['button[mdc-fab]'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['a[mdc-fab]'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Properties'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 40, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() mini: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Makes the fab smaller (40 x 40 pixels).'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() plain: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Makes the FAB have a white background.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() disabled: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Disables the button.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 10, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() disableRipple: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 4, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n            '])),
        (_l()(), elementDef(0, null, null, 2, 'pre', [], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 1, 'code', [], null, null, null, null, null)), (_l()(), textDef(null, ['Disable the ink ripple.\nExample: disableRipple="true" or disableRipple'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Child Directive'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 12, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 9, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-fab-icon'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 3, 'td', [], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 2, 'pre', [], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 1, 'code', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Add an icon or svg in the center of the button.\nNote - Add the [material-icon] directive to apply Material Icon styling.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 73, 'div', [['class', 'mdc-padding'], ['fxLayout', 'row'], ['fxLayoutAlign',
                'center center'], ['fxLayoutGap', '25px']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0,
                'layout'] }, null), directiveDef(1720320, null, 0, LayoutGapDirective, [MediaMonitor, ElementRef, Renderer2, [2, LayoutDirective]], { gap: [0,
                'gap'] }, null), directiveDef(737280, null, 0, LayoutAlignDirective, [MediaMonitor, ElementRef, Renderer2, [2, LayoutDirective]], { align: [0,
                'align'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 56, 'div', [['fxLayout',
                'column']], null, null, null, null, null)),
        directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef,
            Renderer2], { layout: [0, 'layout'] }, null), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 16, 'mdc-form-field', [], [[8, 'className', 0]], null, null, null, null)), directiveDef(1196032, null, 3, material_es5_54, [Renderer2,
            ElementRef, undefined], null, null), queryDef(335544320, 1, { inputCheckbox: 0 }),
        queryDef(335544320, 2, { inputRadio: 0 }), queryDef(335544320, 3, { inputSwitch: 0 }), (_l()(),
            textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 6, 'mdc-checkbox', [], [[2, 'mdc-checkbox', null], [2, 'ng-untouched',
                null], [2, 'ng-touched', null], [2, 'ng-pristine', null],
            [2, 'ng-dirty', null], [2, 'ng-valid', null], [2, 'ng-invalid',
                null], [2, 'ng-pending', null]], [[null, 'ngModelChange']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('ngModelChange' === en)) {
                var pd_0 = ((_co.isMini = $event) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, View_CheckboxComponent_0, RenderType_CheckboxComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[1, 4]], 0, material_es5_17, [Renderer2, ElementRef, material_es5_74, undefined], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_17]), directiveDef(671744, null, 0, NgModel, [[8,
                null], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { model: [0, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 1, 'label', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Mini'])), (_l()(), textDef(null, ['\n      '])),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 16, 'mdc-form-field', [], [[8, 'className', 0]], null, null, null, null)), directiveDef(1196032, null, 3, material_es5_54, [Renderer2, ElementRef, undefined], null, null), queryDef(335544320, 4, { inputCheckbox: 0 }), queryDef(335544320, 5, { inputRadio: 0 }), queryDef(335544320, 6, { inputSwitch: 0 }), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 6, 'mdc-checkbox', [], [[2, 'mdc-checkbox', null], [2, 'ng-untouched', null],
            [2, 'ng-touched', null], [2, 'ng-pristine', null], [2, 'ng-dirty',
                null], [2, 'ng-valid', null], [2, 'ng-invalid', null],
            [2, 'ng-pending', null]], [[null, 'ngModelChange']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('ngModelChange' === en)) {
                var pd_0 = ((_co.isPlain = $event) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, View_CheckboxComponent_0, RenderType_CheckboxComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[4, 4]], 0, material_es5_17, [Renderer2, ElementRef, material_es5_74, undefined], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_17]), directiveDef(671744, null, 0, NgModel, [[8,
                null], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { model: [0, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 1, 'label', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Plain'])), (_l()(), textDef(null, ['\n      '])),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 16, 'mdc-form-field', [], [[8, 'className', 0]], null, null, null, null)), directiveDef(1196032, null, 3, material_es5_54, [Renderer2, ElementRef, undefined], null, null), queryDef(335544320, 7, { inputCheckbox: 0 }), queryDef(335544320, 8, { inputRadio: 0 }), queryDef(335544320, 9, { inputSwitch: 0 }), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 6, 'mdc-checkbox', [], [[2, 'mdc-checkbox', null], [2, 'ng-untouched', null],
            [2, 'ng-touched', null], [2, 'ng-pristine', null], [2, 'ng-dirty',
                null], [2, 'ng-valid', null], [2, 'ng-invalid', null],
            [2, 'ng-pending', null]], [[null, 'ngModelChange']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('ngModelChange' === en)) {
                var pd_0 = ((_co.isDisabled = $event) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, View_CheckboxComponent_0, RenderType_CheckboxComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[7, 4]], 0, material_es5_17, [Renderer2, ElementRef, material_es5_74, undefined], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_17]), directiveDef(671744, null, 0, NgModel, [[8,
                null], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { model: [0, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 1, 'label', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Disable'])), (_l()(), textDef(null, ['\n      '])),
        (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 8, 'button', [['mdc-fab', '']], [[2,
                'mdc-fab', null], [8, 'tabIndex', 0], [2, 'material-icons', null],
            [2, 'mdc-fab--mini', null], [2, 'mdc-fab--plain', null]], [[null,
                'keypress'], [null, 'blur']], function (_v, en, $event) {
            var ad = true;
            if (('keypress' === en)) {
                var pd_0 = (nodeValue(_v, 194).onkeypress($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 194).blur($event) !== false);
                ad = (pd_1 && ad);
            }
            return ad;
        }, View_FabComponent_0, RenderType_FabComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_52, [Renderer2, ElementRef, material_es5_74], { mini: [0, 'mini'],
            plain: [1, 'plain'], disabled: [2, 'disabled'] }, null), (_l()(), textDef(0, ['\n      '])), (_l()(), elementDef(0, null, 0, 3, 'mdc-fab-icon', [['material-icon',
                '']], [[2, 'mdc-fab__icon', null], [2, 'material-icons', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_51, [], null, null),
        directiveDef(16384, null, 0, material_es5_65, [], null, null),
        (_l()(), textDef(null, ['edit'])), (_l()(), textDef(0, ['\n    '])), (_l()(),
            textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n'])),
        (_l()(), elementDef(0, null, null, 52, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)),
        (_l()(), elementDef(0, null, null, 25, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])),
        (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-fab'])),
        (_l()(), textDef(null, ['\n   ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mini'])), (_l()(),
            textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"isMini"'])),
        (_l()(), textDef(null, ['\n   ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['plain'])),
        (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"isPlain"'])),
        (_l()(), textDef(null, ['\n   ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['disabled'])),
        (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"isDisabled"'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 9, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-fab-icon'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['material-icon'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['edit'])), (_l()(),
            elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-fab-icon'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n']))], function (_ck, _v) {
        var _co = _v.component;
        var currVal_0 = 'column';
        _ck(_v, 1, 0, currVal_0);
        var currVal_1 = 'start start';
        _ck(_v, 2, 0, currVal_1);
        var currVal_2 = 'mdc-padding';
        _ck(_v, 3, 0, currVal_2);
        var currVal_6 = 'info-banner';
        _ck(_v, 14, 0, currVal_6);
        var currVal_7 = 'docs-api';
        _ck(_v, 21, 0, currVal_7);
        var currVal_8 = 'row';
        _ck(_v, 129, 0, currVal_8);
        var currVal_9 = '25px';
        _ck(_v, 130, 0, currVal_9);
        var currVal_10 = 'center center';
        _ck(_v, 131, 0, currVal_10);
        var currVal_11 = 'mdc-padding';
        _ck(_v, 132, 0, currVal_11);
        var currVal_12 = 'column';
        _ck(_v, 135, 0, currVal_12);
        var currVal_22 = _co.isMini;
        _ck(_v, 147, 0, currVal_22);
        var currVal_32 = _co.isPlain;
        _ck(_v, 165, 0, currVal_32);
        var currVal_42 = _co.isDisabled;
        _ck(_v, 183, 0, currVal_42);
        var currVal_48 = _co.isMini;
        var currVal_49 = _co.isPlain;
        var currVal_50 = _co.isDisabled;
        _ck(_v, 194, 0, currVal_48, currVal_49, currVal_50);
    }, function (_ck, _v) {
        var currVal_3 = nodeValue(_v, 6).isHostClass;
        _ck(_v, 5, 0, currVal_3);
        var currVal_4 = nodeValue(_v, 10).isHostClass;
        _ck(_v, 9, 0, currVal_4);
        var currVal_5 = nodeValue(_v, 15).isHostClass;
        _ck(_v, 13, 0, currVal_5);
        var currVal_13 = nodeValue(_v, 138).className;
        _ck(_v, 137, 0, currVal_13);
        var currVal_14 = nodeValue(_v, 145).isHostClass;
        var currVal_15 = nodeValue(_v, 149).ngClassUntouched;
        var currVal_16 = nodeValue(_v, 149).ngClassTouched;
        var currVal_17 = nodeValue(_v, 149).ngClassPristine;
        var currVal_18 = nodeValue(_v, 149).ngClassDirty;
        var currVal_19 = nodeValue(_v, 149).ngClassValid;
        var currVal_20 = nodeValue(_v, 149).ngClassInvalid;
        var currVal_21 = nodeValue(_v, 149).ngClassPending;
        _ck(_v, 143, 0, currVal_14, currVal_15, currVal_16, currVal_17, currVal_18, currVal_19, currVal_20, currVal_21);
        var currVal_23 = nodeValue(_v, 156).className;
        _ck(_v, 155, 0, currVal_23);
        var currVal_24 = nodeValue(_v, 163).isHostClass;
        var currVal_25 = nodeValue(_v, 167).ngClassUntouched;
        var currVal_26 = nodeValue(_v, 167).ngClassTouched;
        var currVal_27 = nodeValue(_v, 167).ngClassPristine;
        var currVal_28 = nodeValue(_v, 167).ngClassDirty;
        var currVal_29 = nodeValue(_v, 167).ngClassValid;
        var currVal_30 = nodeValue(_v, 167).ngClassInvalid;
        var currVal_31 = nodeValue(_v, 167).ngClassPending;
        _ck(_v, 161, 0, currVal_24, currVal_25, currVal_26, currVal_27, currVal_28, currVal_29, currVal_30, currVal_31);
        var currVal_33 = nodeValue(_v, 174).className;
        _ck(_v, 173, 0, currVal_33);
        var currVal_34 = nodeValue(_v, 181).isHostClass;
        var currVal_35 = nodeValue(_v, 185).ngClassUntouched;
        var currVal_36 = nodeValue(_v, 185).ngClassTouched;
        var currVal_37 = nodeValue(_v, 185).ngClassPristine;
        var currVal_38 = nodeValue(_v, 185).ngClassDirty;
        var currVal_39 = nodeValue(_v, 185).ngClassValid;
        var currVal_40 = nodeValue(_v, 185).ngClassInvalid;
        var currVal_41 = nodeValue(_v, 185).ngClassPending;
        _ck(_v, 179, 0, currVal_34, currVal_35, currVal_36, currVal_37, currVal_38, currVal_39, currVal_40, currVal_41);
        var currVal_43 = nodeValue(_v, 194).isHostClass;
        var currVal_44 = nodeValue(_v, 194).tabindex;
        var currVal_45 = nodeValue(_v, 194).classMaterialIcons;
        var currVal_46 = nodeValue(_v, 194).classMini;
        var currVal_47 = nodeValue(_v, 194).classPlain;
        _ck(_v, 192, 0, currVal_43, currVal_44, currVal_45, currVal_46, currVal_47);
        var currVal_51 = nodeValue(_v, 197).isHostClass;
        var currVal_52 = nodeValue(_v, 198).isHostClass;
        _ck(_v, 196, 0, currVal_51, currVal_52);
    });
}
function View_FabDemoComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1, 'fab-demo', [], null, null, null, View_FabDemoComponent_0, RenderType_FabDemoComponent)),
        directiveDef(49152, null, 0, FabDemoComponent, [], null, null)], null, null);
}
var FabDemoComponentNgFactory = createComponentFactory('fab-demo', FabDemoComponent, View_FabDemoComponent_Host_0, {}, {}, []);

/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
/* tslint:disable */
var styles_SwitchDemoComponent = [];
var RenderType_SwitchDemoComponent = createRendererType2({ encapsulation: 2,
    styles: styles_SwitchDemoComponent, data: {} });
function View_SwitchDemoComponent_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 329, 'div', [['class',
                'mdc-padding'], ['fxLayout', 'column'], ['fxLayoutAlign', 'start start']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0,
                'layout'] }, null), directiveDef(737280, null, 0, LayoutAlignDirective, [MediaMonitor, ElementRef, Renderer2, [2, LayoutDirective]], { align: [0,
                'align'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 2, 'h1', [['mdc-typography-display1',
                '']], [[2, 'mdc-typography--display1', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['Switch'])), (_l()(),
            textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 2, 'div', [['mdc-typography-subheading2', '']], [[2, 'mdc-typography--subheading2',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, undefined, [], null, null),
        (_l()(), textDef(null, ['The MDC Switch component is a spec-aligned switch component adhering to the Material Design switch requirements.'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 5, 'div', [['class', 'info-banner'], ['mdc-typography-subheading1', '']], [[2,
                'mdc-typography--subheading1', null]], null, null, null, null)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(),
            textDef(null, ['\n    '])), (_l()(), textDef(null, ['import { SwitchModule } from \'@angular-mdc/web\';'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 119, 'div', [['class', 'docs-api']], null, null, null, null, null)),
        directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers,
            KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0,
                'classBase'] }, null), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 115, 'table', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'thead', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Component'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-switch'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Properties'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 58, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() id: string'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Unique Id of the switch button (auto generated if not supplied).'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() ariaLabel: string'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Used to set the \'aria-label\' attribute on the underlying input element.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() ariaLabelledby: string'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['The \'aria-labelledby\' attribute takes precedence as the element\'s text alternative.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() checked: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Use to verify the checked value.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() disabled: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Disables the component.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 10, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() disableRipple: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 4, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n            '])),
        (_l()(), elementDef(0, null, null, 2, 'pre', [], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 1, 'code', [], null, null, null, null, null)), (_l()(), textDef(null, ['Disable the ink ripple.\nExample: disableRipple="true" or disableRipple'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Event'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Output() change'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Event dispatched on value change.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 187, 'div', [['class', 'mdc-padding'], ['fxLayout', 'column']], null, null, null, null, null)),
        directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef,
            Renderer2], { layout: [0, 'layout'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers,
            ElementRef, Renderer, Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 25, 'div', [['class', 'mdc-padding'], ['fxFlexAlign',
                'start']], null, null, null, null, null)),
        directiveDef(737280, null, 0, FlexAlignDirective, [MediaMonitor, ElementRef,
            Renderer2], { align: [0, 'align'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers,
            ElementRef, Renderer, Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 3, 'mdc-switch', [], [[2, 'mdc-switch',
                null], [2, 'mdc-switch--disabled', null]], null, null, View_SwitchComponent_0, RenderType_SwitchComponent)),
        providerDef(5120, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_79]), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2,
            ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_79, [Renderer2, ElementRef, material_es5_74], null, null), (_l()(),
            textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 15, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-switch'])), (_l()(), textDef(null, ['>'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-switch'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 2, 'span', [['mdc-typography-headline',
                '']], [[2, 'mdc-typography--headline', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['Switch w/Label'])),
        (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 72, 'div', [['class', 'mdc-padding'], ['fxFlexAlign', 'start']], null, null, null, null, null)), directiveDef(737280, null, 0, FlexAlignDirective, [MediaMonitor, ElementRef, Renderer2], { align: [0, 'align'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 16, 'mdc-form-field', [], [[8, 'className', 0]], null, null, null, null)), directiveDef(1196032, null, 3, material_es5_54, [Renderer2,
            ElementRef, undefined], null, null), queryDef(335544320, 1, { inputCheckbox: 0 }),
        queryDef(335544320, 2, { inputRadio: 0 }), queryDef(335544320, 3, { inputSwitch: 0 }), (_l()(),
            textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 6, 'mdc-switch', [], [[2, 'mdc-switch', null], [2, 'mdc-switch--disabled',
                null], [2, 'ng-untouched', null], [2, 'ng-touched', null],
            [2, 'ng-pristine', null], [2, 'ng-dirty', null], [2, 'ng-valid',
                null], [2, 'ng-invalid', null], [2, 'ng-pending', null]], [[null, 'ngModelChange']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('ngModelChange' === en)) {
                var pd_0 = ((_co.isSwitchOn = $event) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, View_SwitchComponent_0, RenderType_SwitchComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, [[3, 4]], 0, material_es5_79, [Renderer2, ElementRef, material_es5_74], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_79]), directiveDef(671744, null, 0, NgModel, [[8, null],
            [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { model: [0,
                'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 1, 'label', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['off/on'])), (_l()(), textDef(null, ['\n      '])),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 49, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-form-field'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 12, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-switch'])), (_l()(), textDef(null, [' [('])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['ngModel'])), (_l()(), textDef(null, [')]='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"isSwitchOn"'])), (_l()(),
            textDef(null, ['>'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-switch'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['label'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['off/on'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['label'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-form-field'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 2, 'span', [['mdc-typography-headline', '']], [[2,
                'mdc-typography--headline', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['Disabled'])),
        (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 73, 'div', [['class', 'mdc-padding'], ['fxLayout', 'column']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0,
                'layout'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 68, 'div', [['fxFlexAlign',
                'start']], null, null, null, null, null)),
        directiveDef(737280, null, 0, FlexAlignDirective, [MediaMonitor, ElementRef,
            Renderer2], { align: [0, 'align'] }, null), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 13, 'mdc-form-field', [], [[8, 'className', 0]], null, null, null, null)), directiveDef(1196032, null, 3, material_es5_54, [Renderer2,
            ElementRef, undefined], null, null), queryDef(335544320, 4, { inputCheckbox: 0 }),
        queryDef(335544320, 5, { inputRadio: 0 }), queryDef(335544320, 6, { inputSwitch: 0 }), (_l()(),
            textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 3, 'mdc-switch', [], [[2, 'mdc-switch', null],
            [2, 'mdc-switch--disabled', null]], null, null, View_SwitchComponent_0, RenderType_SwitchComponent)), providerDef(5120, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_79]), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, [[6, 4]], 0, material_es5_79, [Renderer2, ElementRef, material_es5_74], { disabled: [0, 'disabled'] }, null),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'label', [], null, null, null, null, null)), (_l()(), textDef(null, ['off/on'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 49, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-form-field'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 12, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-switch'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['disabled'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-switch'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['label'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['off/on'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['label'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-form-field'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n']))], function (_ck, _v) {
        var _co = _v.component;
        var currVal_0 = 'column';
        _ck(_v, 1, 0, currVal_0);
        var currVal_1 = 'start start';
        _ck(_v, 2, 0, currVal_1);
        var currVal_2 = 'mdc-padding';
        _ck(_v, 3, 0, currVal_2);
        var currVal_6 = 'info-banner';
        _ck(_v, 14, 0, currVal_6);
        var currVal_7 = 'docs-api';
        _ck(_v, 21, 0, currVal_7);
        var currVal_8 = 'column';
        _ck(_v, 142, 0, currVal_8);
        var currVal_9 = 'mdc-padding';
        _ck(_v, 143, 0, currVal_9);
        var currVal_10 = 'start';
        _ck(_v, 146, 0, currVal_10);
        var currVal_11 = 'mdc-padding';
        _ck(_v, 147, 0, currVal_11);
        var currVal_15 = 'start';
        _ck(_v, 177, 0, currVal_15);
        var currVal_16 = 'mdc-padding';
        _ck(_v, 178, 0, currVal_16);
        var currVal_27 = _co.isSwitchOn;
        _ck(_v, 190, 0, currVal_27);
        var currVal_29 = 'column';
        _ck(_v, 255, 0, currVal_29);
        var currVal_30 = 'mdc-padding';
        _ck(_v, 256, 0, currVal_30);
        var currVal_31 = 'start';
        _ck(_v, 259, 0, currVal_31);
        var currVal_35 = true;
        _ck(_v, 270, 0, currVal_35);
    }, function (_ck, _v) {
        var currVal_3 = nodeValue(_v, 6).isHostClass;
        _ck(_v, 5, 0, currVal_3);
        var currVal_4 = nodeValue(_v, 10).isHostClass;
        _ck(_v, 9, 0, currVal_4);
        var currVal_5 = nodeValue(_v, 15).isHostClass;
        _ck(_v, 13, 0, currVal_5);
        var currVal_12 = nodeValue(_v, 152).isHostClass;
        var currVal_13 = nodeValue(_v, 152).classDisabled;
        _ck(_v, 149, 0, currVal_12, currVal_13);
        var currVal_14 = nodeValue(_v, 173).isHostClass;
        _ck(_v, 172, 0, currVal_14);
        var currVal_17 = nodeValue(_v, 181).className;
        _ck(_v, 180, 0, currVal_17);
        var currVal_18 = nodeValue(_v, 188).isHostClass;
        var currVal_19 = nodeValue(_v, 188).classDisabled;
        var currVal_20 = nodeValue(_v, 192).ngClassUntouched;
        var currVal_21 = nodeValue(_v, 192).ngClassTouched;
        var currVal_22 = nodeValue(_v, 192).ngClassPristine;
        var currVal_23 = nodeValue(_v, 192).ngClassDirty;
        var currVal_24 = nodeValue(_v, 192).ngClassValid;
        var currVal_25 = nodeValue(_v, 192).ngClassInvalid;
        var currVal_26 = nodeValue(_v, 192).ngClassPending;
        _ck(_v, 186, 0, currVal_18, currVal_19, currVal_20, currVal_21, currVal_22, currVal_23, currVal_24, currVal_25, currVal_26);
        var currVal_28 = nodeValue(_v, 251).isHostClass;
        _ck(_v, 250, 0, currVal_28);
        var currVal_32 = nodeValue(_v, 262).className;
        _ck(_v, 261, 0, currVal_32);
        var currVal_33 = nodeValue(_v, 270).isHostClass;
        var currVal_34 = nodeValue(_v, 270).classDisabled;
        _ck(_v, 267, 0, currVal_33, currVal_34);
    });
}
function View_SwitchDemoComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1, 'switch-demo', [], null, null, null, View_SwitchDemoComponent_0, RenderType_SwitchDemoComponent)), directiveDef(49152, null, 0, SwitchDemoComponent, [], null, null)], null, null);
}
var SwitchDemoComponentNgFactory = createComponentFactory('switch-demo', SwitchDemoComponent, View_SwitchDemoComponent_Host_0, {}, {}, []);

/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
/* tslint:disable */
var styles_SnackbarDemoComponent = [];
var RenderType_SnackbarDemoComponent = createRendererType2({ encapsulation: 2,
    styles: styles_SnackbarDemoComponent, data: {} });
function View_SnackbarDemoComponent_0(_l) {
    return viewDef(0, [queryDef(402653184, 1, { snack: 0 }), queryDef(402653184, 2, { snackStart: 0 }),
        (_l()(), elementDef(0, null, null, 205, 'div', [['class', 'mdc-padding'],
            ['fxLayout', 'column'], ['fxLayoutAlign', 'start start']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0,
                'layout'] }, null), directiveDef(737280, null, 0, LayoutAlignDirective, [MediaMonitor, ElementRef, Renderer2, [2, LayoutDirective]], { align: [0,
                'align'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 2, 'h1', [['mdc-typography-display1',
                '']], [[2, 'mdc-typography--display1', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['Snackbar'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 2, 'div', [['mdc-typography-subheading2', '']], [[2, 'mdc-typography--subheading2',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, undefined, [], null, null),
        (_l()(), textDef(null, ['The MDC Snackbar component is a spec-aligned snackbar component adhering to the Material Design snackbars requirements.'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 3, 'div', [['class', 'info-banner'], ['mdc-typography-subheading1', '']], [[2,
                'mdc-typography--subheading1', null]], null, null, null, null)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(),
            textDef(null, ['import { SnackbarModule } from \'@angular-mdc/web\';'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 84, 'div', [['class', 'docs-api']], null, null, null, null, null)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 80, 'table', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])),
        (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Component'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'tbody', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-snackbar'])), (_l()(), textDef(null, ['\n        '])), (_l()(),
            textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])),
        (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Properties'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 19, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() alignStart: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Set snackbar message as start-aligned.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() dismissOnAction: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['If you want the snackbar to remain visible until the timeout is reached (regardless of whether the user pressed the action button or not) you can set the dismissesOnAction property to false.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Methods'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Parameters'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 14, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 11, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['show(data: SnackbarMessage)'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 5, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n'])), (_l()(),
            elementDef(0, null, null, 2, 'pre', [], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 1, 'code', [], null, null, null, null, null)), (_l()(), textDef(null, ['interface SnackbarMessage {\n  message: string;\n  timeout?: number; - Amount of time in milliseconds to show the snackbar (default 2750).\n  actionHandler?: Function; - Function to execute when the action is clicked.\n  actionText?: string; - Text to display for the action button.\n  multiline?: boolean; - Whether to show the snackbar with space for multiple lines of text.\n  actionOnBottom?: boolean; - Whether to show the action below the multiple lines of text.\n}'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 57, 'div', [['class',
                'mdc-padding'], ['fxLayout', 'column']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0, 'layout'] }, null),
        directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers,
            KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0,
                'classBase'] }, null), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 16, 'mdc-form-field', [], [[8, 'className', 0]], null, null, null, null)),
        directiveDef(1196032, null, 3, material_es5_54, [Renderer2, ElementRef,
            undefined], null, null), queryDef(335544320, 3, { inputCheckbox: 0 }),
        queryDef(335544320, 4, { inputRadio: 0 }), queryDef(335544320, 5, { inputSwitch: 0 }), (_l()(),
            textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 6, 'mdc-checkbox', [], [[2, 'mdc-checkbox', null], [2, 'ng-untouched',
                null], [2, 'ng-touched', null], [2, 'ng-pristine', null],
            [2, 'ng-dirty', null], [2, 'ng-valid', null], [2, 'ng-invalid',
                null], [2, 'ng-pending', null]], [[null, 'ngModelChange']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('ngModelChange' === en)) {
                var pd_0 = ((_co.message.multiline = $event) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, View_CheckboxComponent_0, RenderType_CheckboxComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[3, 4]], 0, material_es5_17, [Renderer2, ElementRef, material_es5_74, undefined], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_17]), directiveDef(671744, null, 0, NgModel, [[8,
                null], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { model: [0, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 1, 'label', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Multiline'])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 16, 'mdc-form-field', [], [[8, 'className',
                0]], null, null, null, null)), directiveDef(1196032, null, 3, material_es5_54, [Renderer2, ElementRef, undefined], null, null), queryDef(335544320, 6, { inputCheckbox: 0 }), queryDef(335544320, 7, { inputRadio: 0 }), queryDef(335544320, 8, { inputSwitch: 0 }), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 6, 'mdc-checkbox', [], [[2, 'mdc-checkbox', null], [2, 'ng-untouched', null],
            [2, 'ng-touched', null], [2, 'ng-pristine', null], [2, 'ng-dirty',
                null], [2, 'ng-valid', null], [2, 'ng-invalid', null],
            [2, 'ng-pending', null]], [[null, 'ngModelChange']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('ngModelChange' === en)) {
                var pd_0 = ((_co.message.actionOnBottom = $event) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, View_CheckboxComponent_0, RenderType_CheckboxComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[6, 4]], 0, material_es5_17, [Renderer2, ElementRef, material_es5_74, undefined], { disabled: [0, 'disabled'] }, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_17]), directiveDef(671744, null, 0, NgModel, [[8,
                null], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { isDisabled: [0, 'isDisabled'], model: [1, 'model'] }, { update: 'ngModelChange' }),
        providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 1, 'label', [], null, null, null, null, null)), (_l()(), textDef(null, ['Action on Bottom (requires multiline)'])),
        (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 16, 'mdc-form-field', [], [[8, 'className', 0]], null, null, null, null)),
        directiveDef(1196032, null, 3, material_es5_54, [Renderer2, ElementRef,
            undefined], null, null), queryDef(335544320, 9, { inputCheckbox: 0 }),
        queryDef(335544320, 10, { inputRadio: 0 }), queryDef(335544320, 11, { inputSwitch: 0 }), (_l()(),
            textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 6, 'mdc-checkbox', [], [[2, 'mdc-checkbox', null], [2, 'ng-untouched',
                null], [2, 'ng-touched', null], [2, 'ng-pristine', null],
            [2, 'ng-dirty', null], [2, 'ng-valid', null], [2, 'ng-invalid',
                null], [2, 'ng-pending', null]], [[null, 'ngModelChange']], function (_v, en, $event) {
            var ad = true;
            if (('ngModelChange' === en)) {
                var pd_0 = ((nodeValue(_v, 210).dismissOnAction = $event) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, View_CheckboxComponent_0, RenderType_CheckboxComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[9, 4]], 0, material_es5_17, [Renderer2, ElementRef, material_es5_74, undefined], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_17]), directiveDef(671744, null, 0, NgModel, [[8,
                null], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { model: [0, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 1, 'label', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Dismiss on Action Click'])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 19, 'div', [['fxFlexOffset',
                '1'], ['fxLayout', 'column']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor,
            ElementRef, Renderer2], { layout: [0, 'layout'] }, null), directiveDef(737280, null, 0, FlexOffsetDirective, [MediaMonitor, ElementRef, Renderer2], { offset: [0, 'offset'] }, null), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 7, 'mdc-textfield', [['label', 'Message text']], [[1, 'required', 0], [2, 'mdc-textfield', null], [2, 'mdc-textfield--multiline',
                null], [2, 'mdc-textfield--fullwidth', null], [2, 'mdc-textfield--dense',
                null], [2, 'ng-untouched', null], [2, 'ng-touched', null],
            [2, 'ng-pristine', null], [2, 'ng-dirty', null], [2, 'ng-valid',
                null], [2, 'ng-invalid', null], [2, 'ng-pending', null]], [[null, 'ngModelChange']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('ngModelChange' === en)) {
                var pd_0 = ((_co.message.message = $event) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, View_TextfieldComponent_0, RenderType_TextfieldComponent)), directiveDef(16384, null, 0, RequiredValidator, [], { required: [0, 'required'] }, null), providerDef(1024, null, NG_VALIDATORS, function (p0_0) {
            return [p0_0];
        }, [RequiredValidator]), directiveDef(4374528, null, 0, material_es5_94, [Renderer2, ElementRef, undefined], { required: [0, 'required'], label: [1, 'label'] }, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_94]), directiveDef(671744, null, 0, NgModel, [[8, null],
            [2, NG_VALIDATORS], [8, null], [2, NG_VALUE_ACCESSOR]], { model: [0,
                'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 5, 'mdc-textfield', [['label', 'Action button text']], [[2, 'mdc-textfield', null], [2, 'mdc-textfield--multiline',
                null], [2, 'mdc-textfield--fullwidth', null], [2, 'mdc-textfield--dense',
                null], [2, 'ng-untouched', null], [2, 'ng-touched', null],
            [2, 'ng-pristine', null], [2, 'ng-dirty', null], [2, 'ng-valid',
                null], [2, 'ng-invalid', null], [2, 'ng-pending', null]], [[null, 'ngModelChange']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('ngModelChange' === en)) {
                var pd_0 = ((_co.message.actionText = $event) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, View_TextfieldComponent_0, RenderType_TextfieldComponent)), directiveDef(4374528, null, 0, material_es5_94, [Renderer2, ElementRef, undefined], { label: [0, 'label'] }, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_94]), directiveDef(671744, null, 0, NgModel, [[8,
                null], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { model: [0, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 9, 'div', [['class', 'mdc-padding'], ['fxFlexOffset', '2'], ['fxLayout',
                'column']], null, null, null, null, null)),
        directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef,
            Renderer2], { layout: [0, 'layout'] }, null), directiveDef(737280, null, 0, FlexOffsetDirective, [MediaMonitor, ElementRef, Renderer2], { offset: [0,
                'offset'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 3, 'button', [['mdc-button',
                '']], [[8, 'tabIndex', 0], [1, 'type', 0], [2, 'mdc-button', null], [2, 'mdc-button--raised',
                null], [2, 'mdc-button--primary', null], [2, 'mdc-button--accent',
                null], [2, 'mdc-button--dense', null], [2, 'mdc-button--compact',
                null], [2, 'mdc-card__action', null]], [[null, 'click'],
            [null, 'keypress'], [null, 'blur']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('keypress' === en)) {
                var pd_0 = (nodeValue(_v, 193).onkeypress($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 193).blur($event) !== false);
                ad = (pd_1 && ad);
            }
            if (('click' === en)) {
                var pd_2 = (_co.show() !== false);
                ad = (pd_2 && ad);
            }
            return ad;
        }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], { raised: [0, 'raised'],
            primary: [1, 'primary'] }, null), (_l()(), textDef(0, ['Show Snackbar'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 9, 'div', [['class', 'mdc-padding'],
            ['fxFlexOffset', '2'], ['fxLayout', 'column']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0,
                'layout'] }, null), directiveDef(737280, null, 0, FlexOffsetDirective, [MediaMonitor, ElementRef, Renderer2], { offset: [0, 'offset'] }, null),
        directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers,
            KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0,
                'classBase'] }, null), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 3, 'button', [['mdc-button', '']], [[8, 'tabIndex', 0], [1, 'type', 0], [2, 'mdc-button', null], [2, 'mdc-button--raised',
                null], [2, 'mdc-button--primary', null], [2, 'mdc-button--accent',
                null], [2, 'mdc-button--dense', null], [2, 'mdc-button--compact',
                null], [2, 'mdc-card__action', null]], [[null,
                'click'], [null, 'keypress'], [null, 'blur']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('keypress' === en)) {
                var pd_0 = (nodeValue(_v, 204).onkeypress($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 204).blur($event) !== false);
                ad = (pd_1 && ad);
            }
            if (('click' === en)) {
                var pd_2 = (_co.showStartAligned() !== false);
                ad = (pd_2 && ad);
            }
            return ad;
        }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], { raised: [0, 'raised'], primary: [1, 'primary'] }, null), (_l()(), textDef(0, ['Show Start Aligned'])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            textDef(null, ['\n'])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 1, 'mdc-snackbar', [], [[2, 'mdc-snackbar', null], [1, 'aria-live', 0], [1, 'aria-atomic', 0],
            [1, 'aria-hidden', 0], [2, 'mdc-snackbar--align-start', null]], null, null, View_SnackbarComponent_0, RenderType_SnackbarComponent)),
        directiveDef(4374528, [[1, 4], ['snack', 4]], 0, material_es5_76, [Renderer2, ElementRef,
            undefined], null, null), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 1, 'mdc-snackbar', [], [[2, 'mdc-snackbar', null], [1, 'aria-live', 0], [1, 'aria-atomic', 0],
            [1, 'aria-hidden', 0], [2, 'mdc-snackbar--align-start', null]], null, null, View_SnackbarComponent_0, RenderType_SnackbarComponent)),
        directiveDef(4374528, [[2, 4], ['snackStart', 4]], 0, material_es5_76, [Renderer2,
            ElementRef, undefined], { alignStart: [0, 'alignStart'] }, null), (_l()(),
            textDef(null, ['\n']))], function (_ck, _v) {
        var _co = _v.component;
        var currVal_0 = 'column';
        _ck(_v, 3, 0, currVal_0);
        var currVal_1 = 'start start';
        _ck(_v, 4, 0, currVal_1);
        var currVal_2 = 'mdc-padding';
        _ck(_v, 5, 0, currVal_2);
        var currVal_6 = 'info-banner';
        _ck(_v, 16, 0, currVal_6);
        var currVal_7 = 'docs-api';
        _ck(_v, 21, 0, currVal_7);
        var currVal_8 = 'column';
        _ck(_v, 107, 0, currVal_8);
        var currVal_9 = 'mdc-padding';
        _ck(_v, 108, 0, currVal_9);
        var currVal_19 = _co.message.multiline;
        _ck(_v, 120, 0, currVal_19);
        var currVal_29 = !_co.message.multiline;
        _ck(_v, 136, 0, currVal_29);
        var currVal_30 = !_co.message.multiline;
        var currVal_31 = _co.message.actionOnBottom;
        _ck(_v, 138, 0, currVal_30, currVal_31);
        var currVal_41 = nodeValue(_v, 210).dismissOnAction;
        _ck(_v, 156, 0, currVal_41);
        var currVal_42 = 'column';
        _ck(_v, 166, 0, currVal_42);
        var currVal_43 = '1';
        _ck(_v, 167, 0, currVal_43);
        var currVal_56 = true;
        _ck(_v, 170, 0, currVal_56);
        var currVal_57 = true;
        var currVal_58 = 'Message text';
        _ck(_v, 172, 0, currVal_57, currVal_58);
        var currVal_59 = _co.message.message;
        _ck(_v, 174, 0, currVal_59);
        var currVal_71 = 'Action button text';
        _ck(_v, 179, 0, currVal_71);
        var currVal_72 = _co.message.actionText;
        _ck(_v, 181, 0, currVal_72);
        var currVal_73 = 'column';
        _ck(_v, 187, 0, currVal_73);
        var currVal_74 = '2';
        _ck(_v, 188, 0, currVal_74);
        var currVal_75 = 'mdc-padding';
        _ck(_v, 189, 0, currVal_75);
        var currVal_85 = true;
        var currVal_86 = true;
        _ck(_v, 193, 0, currVal_85, currVal_86);
        var currVal_87 = 'column';
        _ck(_v, 198, 0, currVal_87);
        var currVal_88 = '2';
        _ck(_v, 199, 0, currVal_88);
        var currVal_89 = 'mdc-padding';
        _ck(_v, 200, 0, currVal_89);
        var currVal_99 = true;
        var currVal_100 = true;
        _ck(_v, 204, 0, currVal_99, currVal_100);
        var currVal_111 = true;
        _ck(_v, 213, 0, currVal_111);
    }, function (_ck, _v) {
        var currVal_3 = nodeValue(_v, 8).isHostClass;
        _ck(_v, 7, 0, currVal_3);
        var currVal_4 = nodeValue(_v, 12).isHostClass;
        _ck(_v, 11, 0, currVal_4);
        var currVal_5 = nodeValue(_v, 17).isHostClass;
        _ck(_v, 15, 0, currVal_5);
        var currVal_10 = nodeValue(_v, 111).className;
        _ck(_v, 110, 0, currVal_10);
        var currVal_11 = nodeValue(_v, 118).isHostClass;
        var currVal_12 = nodeValue(_v, 122).ngClassUntouched;
        var currVal_13 = nodeValue(_v, 122).ngClassTouched;
        var currVal_14 = nodeValue(_v, 122).ngClassPristine;
        var currVal_15 = nodeValue(_v, 122).ngClassDirty;
        var currVal_16 = nodeValue(_v, 122).ngClassValid;
        var currVal_17 = nodeValue(_v, 122).ngClassInvalid;
        var currVal_18 = nodeValue(_v, 122).ngClassPending;
        _ck(_v, 116, 0, currVal_11, currVal_12, currVal_13, currVal_14, currVal_15, currVal_16, currVal_17, currVal_18);
        var currVal_20 = nodeValue(_v, 129).className;
        _ck(_v, 128, 0, currVal_20);
        var currVal_21 = nodeValue(_v, 136).isHostClass;
        var currVal_22 = nodeValue(_v, 140).ngClassUntouched;
        var currVal_23 = nodeValue(_v, 140).ngClassTouched;
        var currVal_24 = nodeValue(_v, 140).ngClassPristine;
        var currVal_25 = nodeValue(_v, 140).ngClassDirty;
        var currVal_26 = nodeValue(_v, 140).ngClassValid;
        var currVal_27 = nodeValue(_v, 140).ngClassInvalid;
        var currVal_28 = nodeValue(_v, 140).ngClassPending;
        _ck(_v, 134, 0, currVal_21, currVal_22, currVal_23, currVal_24, currVal_25, currVal_26, currVal_27, currVal_28);
        var currVal_32 = nodeValue(_v, 147).className;
        _ck(_v, 146, 0, currVal_32);
        var currVal_33 = nodeValue(_v, 154).isHostClass;
        var currVal_34 = nodeValue(_v, 158).ngClassUntouched;
        var currVal_35 = nodeValue(_v, 158).ngClassTouched;
        var currVal_36 = nodeValue(_v, 158).ngClassPristine;
        var currVal_37 = nodeValue(_v, 158).ngClassDirty;
        var currVal_38 = nodeValue(_v, 158).ngClassValid;
        var currVal_39 = nodeValue(_v, 158).ngClassInvalid;
        var currVal_40 = nodeValue(_v, 158).ngClassPending;
        _ck(_v, 152, 0, currVal_33, currVal_34, currVal_35, currVal_36, currVal_37, currVal_38, currVal_39, currVal_40);
        var currVal_44 = (nodeValue(_v, 170).required ? '' : null);
        var currVal_45 = nodeValue(_v, 172).isHostClass;
        var currVal_46 = nodeValue(_v, 172).classMultiline;
        var currVal_47 = nodeValue(_v, 172).classFullwidth;
        var currVal_48 = nodeValue(_v, 172).classDense;
        var currVal_49 = nodeValue(_v, 176).ngClassUntouched;
        var currVal_50 = nodeValue(_v, 176).ngClassTouched;
        var currVal_51 = nodeValue(_v, 176).ngClassPristine;
        var currVal_52 = nodeValue(_v, 176).ngClassDirty;
        var currVal_53 = nodeValue(_v, 176).ngClassValid;
        var currVal_54 = nodeValue(_v, 176).ngClassInvalid;
        var currVal_55 = nodeValue(_v, 176).ngClassPending;
        _ck(_v, 169, 1, [currVal_44, currVal_45, currVal_46, currVal_47, currVal_48, currVal_49,
            currVal_50, currVal_51, currVal_52, currVal_53, currVal_54, currVal_55]);
        var currVal_60 = nodeValue(_v, 179).isHostClass;
        var currVal_61 = nodeValue(_v, 179).classMultiline;
        var currVal_62 = nodeValue(_v, 179).classFullwidth;
        var currVal_63 = nodeValue(_v, 179).classDense;
        var currVal_64 = nodeValue(_v, 183).ngClassUntouched;
        var currVal_65 = nodeValue(_v, 183).ngClassTouched;
        var currVal_66 = nodeValue(_v, 183).ngClassPristine;
        var currVal_67 = nodeValue(_v, 183).ngClassDirty;
        var currVal_68 = nodeValue(_v, 183).ngClassValid;
        var currVal_69 = nodeValue(_v, 183).ngClassInvalid;
        var currVal_70 = nodeValue(_v, 183).ngClassPending;
        _ck(_v, 178, 1, [currVal_60, currVal_61, currVal_62, currVal_63, currVal_64, currVal_65,
            currVal_66, currVal_67, currVal_68, currVal_69, currVal_70]);
        var currVal_76 = nodeValue(_v, 193).tabindex;
        var currVal_77 = nodeValue(_v, 193).attrType;
        var currVal_78 = nodeValue(_v, 193).isHostClass;
        var currVal_79 = nodeValue(_v, 193).classRaised;
        var currVal_80 = nodeValue(_v, 193).classPrimary;
        var currVal_81 = nodeValue(_v, 193).classAccent;
        var currVal_82 = nodeValue(_v, 193).classDense;
        var currVal_83 = nodeValue(_v, 193).classCompact;
        var currVal_84 = nodeValue(_v, 193).classCardAction;
        _ck(_v, 191, 0, currVal_76, currVal_77, currVal_78, currVal_79, currVal_80, currVal_81, currVal_82, currVal_83, currVal_84);
        var currVal_90 = nodeValue(_v, 204).tabindex;
        var currVal_91 = nodeValue(_v, 204).attrType;
        var currVal_92 = nodeValue(_v, 204).isHostClass;
        var currVal_93 = nodeValue(_v, 204).classRaised;
        var currVal_94 = nodeValue(_v, 204).classPrimary;
        var currVal_95 = nodeValue(_v, 204).classAccent;
        var currVal_96 = nodeValue(_v, 204).classDense;
        var currVal_97 = nodeValue(_v, 204).classCompact;
        var currVal_98 = nodeValue(_v, 204).classCardAction;
        _ck(_v, 202, 0, currVal_90, currVal_91, currVal_92, currVal_93, currVal_94, currVal_95, currVal_96, currVal_97, currVal_98);
        var currVal_101 = nodeValue(_v, 210).isHostClass;
        var currVal_102 = nodeValue(_v, 210).ariaLive;
        var currVal_103 = nodeValue(_v, 210).ariaAtomic;
        var currVal_104 = nodeValue(_v, 210).ariaHidden;
        var currVal_105 = nodeValue(_v, 210).classAlignStart;
        _ck(_v, 209, 0, currVal_101, currVal_102, currVal_103, currVal_104, currVal_105);
        var currVal_106 = nodeValue(_v, 213).isHostClass;
        var currVal_107 = nodeValue(_v, 213).ariaLive;
        var currVal_108 = nodeValue(_v, 213).ariaAtomic;
        var currVal_109 = nodeValue(_v, 213).ariaHidden;
        var currVal_110 = nodeValue(_v, 213).classAlignStart;
        _ck(_v, 212, 0, currVal_106, currVal_107, currVal_108, currVal_109, currVal_110);
    });
}
function View_SnackbarDemoComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1, 'snackbar-demo', [], null, null, null, View_SnackbarDemoComponent_0, RenderType_SnackbarDemoComponent)), directiveDef(49152, null, 0, SnackbarDemoComponent, [], null, null)], null, null);
}
var SnackbarDemoComponentNgFactory = createComponentFactory('snackbar-demo', SnackbarDemoComponent, View_SnackbarDemoComponent_Host_0, {}, {}, []);

/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
/* tslint:disable */
var styles_MenuDemoComponent = [];
var RenderType_MenuDemoComponent = createRendererType2({ encapsulation: 2,
    styles: styles_MenuDemoComponent, data: {} });
function View_MenuDemoComponent_0(_l) {
    return viewDef(0, [queryDef(402653184, 1, { menu: 0 }), (_l()(), elementDef(0, null, null, 500, 'div', [['class', 'mdc-padding'], ['fxLayout', 'column'], ['fxLayoutAlign',
                'start start']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor,
            ElementRef, Renderer2], { layout: [0, 'layout'] }, null), directiveDef(737280, null, 0, LayoutAlignDirective, [MediaMonitor, ElementRef, Renderer2,
            [2, LayoutDirective]], { align: [0, 'align'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers,
            ElementRef, Renderer, Renderer2], { classBase: [0, 'classBase'] }, null),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 2, 'h1', [['mdc-typography-display1', '']], [[2, 'mdc-typography--display1', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(),
            textDef(null, ['Menu'])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 2, 'div', [['mdc-typography-subheading2',
                '']], [[2, 'mdc-typography--subheading2', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['The MDC Menu component is a spec-aligned menu component adhering to the Material Design menu requirements.'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 2, 'h1', [['mdc-typography-headline', '']], [[2, 'mdc-typography--headline', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(),
            textDef(null, ['API reference'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 5, 'div', [['class',
                'info-banner'], ['mdc-typography-subheading1', '']], [[2, 'mdc-typography--subheading1',
                null]], null, null, null, null)),
        directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers,
            KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0,
                'classBase'] }, null), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['\n    '])),
        (_l()(), textDef(null, ['import { MenuModule } from \'@angular-mdc/web\';'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 169, 'div', [['class', 'docs-api']], null, null, null, null, null)),
        directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers,
            KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0,
                'classBase'] }, null), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 123, 'table', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'thead', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Component'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-menu'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Properties'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 14, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 11, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() openFrom: MenuOpenFrom'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 5, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Override the opening point of the menu. (default: topLeft)\n            '])),
        (_l()(), elementDef(0, null, null, 2, 'pre', [], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 1, 'code', [], null, null, null, null, null)), (_l()(), textDef(null, ['enum MenuOpenFrom {\n  topLeft,\n  topRight,\n  bottomLeft,\n  bottomRight\n}'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Methods'])), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Parameters'])), (_l()(), textDef(null, ['\n        '])), (_l()(),
            textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])),
        (_l()(), elementDef(0, null, null, 29, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 8, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['open(focusIndex: number)'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 2, 'td', [], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 1, 'pre', [], null, null, null, null, null)), (_l()(), textDef(null, ['Opens the menu.\nThe focusIndex property specifies the index of the menu item to be focused.\nIf the focusIndex is omitted, no menu item will be focused.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['isOpen(): boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Returns whether or not the menu is open.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['close()'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Closes the menu.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Event'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 19, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Output() cancel'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Dispatches an event that the menu closed with no selection made.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Output() select'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Dispatches an event that a menu item has been selected.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 40, 'table', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])),
        (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Directives'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 28, 'tbody', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-menu-anchor'])), (_l()(), textDef(null, ['\n          '])), (_l()(),
            elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Use to anchor a menu to an element.'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(),
            elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc-menu-item'])), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Single list item inside of a menu.'])), (_l()(),
            textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])),
        (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc-menu-divider'])), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Draws a line at the bottom of the menu item.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 116, 'div', [['class', 'mdc-padding'], ['fxLayout', 'row'], ['fxLayoutAlign',
                'center center']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor,
            ElementRef, Renderer2], { layout: [0, 'layout'] }, null), directiveDef(737280, null, 0, LayoutAlignDirective, [MediaMonitor, ElementRef, Renderer2,
            [2, LayoutDirective]], { align: [0, 'align'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers,
            ElementRef, Renderer, Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 77, 'div', [['fxLayout', 'column']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0, 'layout'] }, null), (_l()(), textDef(null, ['\n      '])),
        (_l()(), elementDef(0, null, null, 1, 'p', [], null, null, null, null, null)), (_l()(), textDef(null, ['Open from:'])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 16, 'mdc-form-field', [], [[8, 'className',
                0]], null, null, null, null)), directiveDef(1196032, null, 3, material_es5_54, [Renderer2, ElementRef, undefined], null, null), queryDef(335544320, 2, { inputCheckbox: 0 }), queryDef(335544320, 3, { inputRadio: 0 }), queryDef(335544320, 4, { inputSwitch: 0 }), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 6, 'mdc-radio', [['name', 'radioGroup'], ['value', 'topLeft']], [[2, 'mdc-radio', null],
            [2, 'ng-untouched', null], [2, 'ng-touched', null], [2, 'ng-pristine',
                null], [2, 'ng-dirty', null], [2, 'ng-valid', null],
            [2, 'ng-invalid', null], [2, 'ng-pending', null]], [[null,
                'change'], [null, 'ngModelChange']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('change' === en)) {
                var pd_0 = (_co.handleChange() !== false);
                ad = (pd_0 && ad);
            }
            if (('ngModelChange' === en)) {
                var pd_1 = ((_co.openingPoint = $event) !== false);
                ad = (pd_1 && ad);
            }
            return ad;
        }, View_RadioComponent_0, RenderType_RadioComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[3, 4]], 0, material_es5_72, [Renderer2, ElementRef, material_es5_74], { name: [0,
                'name'], value: [1, 'value'] }, { change: 'change' }), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_72]), directiveDef(671744, null, 0, NgModel, [[8, null],
            [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'],
            model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 1, 'label', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Top Left'])), (_l()(), textDef(null, ['\n      '])),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 16, 'mdc-form-field', [], [[8, 'className', 0]], null, null, null, null)), directiveDef(1196032, null, 3, material_es5_54, [Renderer2, ElementRef, undefined], null, null), queryDef(335544320, 5, { inputCheckbox: 0 }), queryDef(335544320, 6, { inputRadio: 0 }), queryDef(335544320, 7, { inputSwitch: 0 }), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 6, 'mdc-radio', [['name', 'radioGroup'], ['value', 'topRight']], [[2, 'mdc-radio', null],
            [2, 'ng-untouched', null], [2, 'ng-touched', null], [2, 'ng-pristine',
                null], [2, 'ng-dirty', null], [2, 'ng-valid', null],
            [2, 'ng-invalid', null], [2, 'ng-pending', null]], [[null,
                'change'], [null, 'ngModelChange']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('change' === en)) {
                var pd_0 = (_co.handleChange() !== false);
                ad = (pd_0 && ad);
            }
            if (('ngModelChange' === en)) {
                var pd_1 = ((_co.openingPoint = $event) !== false);
                ad = (pd_1 && ad);
            }
            return ad;
        }, View_RadioComponent_0, RenderType_RadioComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[6, 4]], 0, material_es5_72, [Renderer2, ElementRef, material_es5_74], { name: [0,
                'name'], value: [1, 'value'] }, { change: 'change' }), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_72]), directiveDef(671744, null, 0, NgModel, [[8, null],
            [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'],
            model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 1, 'label', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Top Right'])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 16, 'mdc-form-field', [], [[8, 'className',
                0]], null, null, null, null)), directiveDef(1196032, null, 3, material_es5_54, [Renderer2, ElementRef, undefined], null, null), queryDef(335544320, 8, { inputCheckbox: 0 }), queryDef(335544320, 9, { inputRadio: 0 }), queryDef(335544320, 10, { inputSwitch: 0 }), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 6, 'mdc-radio', [['name', 'radioGroup'], ['value', 'bottomLeft']], [[2, 'mdc-radio', null],
            [2, 'ng-untouched', null], [2, 'ng-touched', null], [2, 'ng-pristine',
                null], [2, 'ng-dirty', null], [2, 'ng-valid', null],
            [2, 'ng-invalid', null], [2, 'ng-pending', null]], [[null,
                'change'], [null, 'ngModelChange']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('change' === en)) {
                var pd_0 = (_co.handleChange() !== false);
                ad = (pd_0 && ad);
            }
            if (('ngModelChange' === en)) {
                var pd_1 = ((_co.openingPoint = $event) !== false);
                ad = (pd_1 && ad);
            }
            return ad;
        }, View_RadioComponent_0, RenderType_RadioComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[9, 4]], 0, material_es5_72, [Renderer2, ElementRef, material_es5_74], { name: [0,
                'name'], value: [1, 'value'] }, { change: 'change' }), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_72]), directiveDef(671744, null, 0, NgModel, [[8, null],
            [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'],
            model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 1, 'label', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Bottom Left'])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 16, 'mdc-form-field', [], [[8, 'className',
                0]], null, null, null, null)), directiveDef(1196032, null, 3, material_es5_54, [Renderer2, ElementRef, undefined], null, null), queryDef(335544320, 11, { inputCheckbox: 0 }), queryDef(335544320, 12, { inputRadio: 0 }), queryDef(335544320, 13, { inputSwitch: 0 }), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 6, 'mdc-radio', [['name', 'radioGroup'], ['value', 'bottomRight']], [[2, 'mdc-radio', null],
            [2, 'ng-untouched', null], [2, 'ng-touched', null], [2, 'ng-pristine',
                null], [2, 'ng-dirty', null], [2, 'ng-valid', null],
            [2, 'ng-invalid', null], [2, 'ng-pending', null]], [[null,
                'change'], [null, 'ngModelChange']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('change' === en)) {
                var pd_0 = (_co.handleChange() !== false);
                ad = (pd_0 && ad);
            }
            if (('ngModelChange' === en)) {
                var pd_1 = ((_co.openingPoint = $event) !== false);
                ad = (pd_1 && ad);
            }
            return ad;
        }, View_RadioComponent_0, RenderType_RadioComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[12, 4]], 0, material_es5_72, [Renderer2, ElementRef, material_es5_74], { name: [0,
                'name'], value: [1, 'value'] }, { change: 'change' }), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_72]), directiveDef(671744, null, 0, NgModel, [[8, null],
            [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'],
            model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 1, 'label', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Bottom Right'])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 31, 'div', [['mdc-menu-anchor',
                ''], ['style', 'margin-left: 25px;']], [[2, 'mdc-menu-anchor', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_67, [], null, null),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 3, 'button', [['mdc-button', '']], [[8, 'tabIndex', 0], [1, 'type',
                0], [2, 'mdc-button', null], [2, 'mdc-button--raised', null],
            [2, 'mdc-button--primary', null], [2, 'mdc-button--accent', null],
            [2, 'mdc-button--dense', null], [2, 'mdc-button--compact', null],
            [2, 'mdc-card__action', null]], [[null, 'click'], [null,
                'keypress'], [null, 'blur']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('keypress' === en)) {
                var pd_0 = (nodeValue(_v, 285).onkeypress($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 285).blur($event) !== false);
                ad = (pd_1 && ad);
            }
            if (('click' === en)) {
                var pd_2 = (_co.showMenu() !== false);
                ad = (pd_2 && ad);
            }
            return ad;
        }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], { raised: [0, 'raised'], primary: [1, 'primary'] }, null), (_l()(), textDef(0, ['\n        Open Menu\n      '])), (_l()(), textDef(null, ['\n      '])),
        (_l()(), elementDef(0, null, null, 22, 'mdc-menu', [], [[8,
                'className', 0], [8, 'tabIndex', 0]], [[null, 'select']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('select' === en)) {
                var pd_0 = (_co.handleMenuSelect($event) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, View_MenuComponent_0, RenderType_MenuComponent)), directiveDef(4374528, [[1,
                4], ['menu', 4]], 1, material_es5_69, [Renderer2, ElementRef, undefined], null, { select: 'select' }), queryDef(603979776, 14, { menuItems: 1 }), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, 0, 2, 'mdc-menu-item', [], [[2, 'mdc-list-item', null], [1, 'role', 0], [8, 'tabIndex', 0]], null, null, null, null)), directiveDef(16384, [[14, 4]], 0, undefined, [Renderer2, ElementRef], { id: [0, 'id'] }, null), (_l()(), textDef(null, ['Item 1'])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, 0, 2, 'mdc-menu-item', [], [[2, 'mdc-list-item', null],
            [1, 'role', 0], [8, 'tabIndex', 0]], null, null, null, null)), directiveDef(16384, [[14, 4]], 0, undefined, [Renderer2, ElementRef], { id: [0, 'id'], disabled: [1, 'disabled'] }, null), (_l()(), textDef(null, ['Item 2'])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, 0, 2, 'mdc-menu-item', [], [[2, 'mdc-list-item', null],
            [1, 'role', 0], [8, 'tabIndex', 0]], null, null, null, null)), directiveDef(16384, [[14, 4]], 0, undefined, [Renderer2, ElementRef], { id: [0, 'id'] }, null), (_l()(), textDef(null, ['Item 3'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, 0, 1, 'mdc-menu-divider', [], null, null, null, View_MenuDividerComponent_0, RenderType_MenuDividerComponent)), directiveDef(49152, null, 0, material_es5_68, [], null, null),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, 0, 2, 'mdc-menu-item', [], [[2, 'mdc-list-item', null], [1,
                'role', 0], [8, 'tabIndex', 0]], null, null, null, null)), directiveDef(16384, [[14, 4]], 0, undefined, [Renderer2, ElementRef], { id: [0, 'id'] }, null), (_l()(), textDef(null, ['Item 4'])),
        (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 2, 'p', [['mdc-typography-body1',
                '']], [[2, 'mdc-typography--body1', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['Selected index: ',
            ''])), (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 182, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 7, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['div'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-menu-anchor'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 25, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])),
        (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-button'])),
        (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['primary'])),
        (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])),
        (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['raised'])),
        (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])),
        (_l()(), textDef(null, [' ('])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['click'])),
        (_l()(), textDef(null, [')='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"showMenu();"'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Open Menu'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 15, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-menu'])), (_l()(), textDef(null, [' #'])),
        (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['menu'])), (_l()(), textDef(null, [' ('])),
        (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['select'])), (_l()(), textDef(null, [')='])),
        (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)),
        (_l()(), textDef(null, ['"handleMenuSelect($event);"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 12, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-menu-item'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['id'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"0"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Item 1'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-menu-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 18, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-menu-item'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['id'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"1"'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['disabled'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Item 2'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-menu-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 12, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-menu-item'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['id'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"2"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Item 3'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-menu-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-menu-divider'])), (_l()(), textDef(null, ['>'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-menu-divider'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 12, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-menu-item'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['id'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"3"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Item 4'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-menu-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-menu'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['div'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n']))], function (_ck, _v) {
        var _co = _v.component;
        var currVal_0 = 'column';
        _ck(_v, 2, 0, currVal_0);
        var currVal_1 = 'start start';
        _ck(_v, 3, 0, currVal_1);
        var currVal_2 = 'mdc-padding';
        _ck(_v, 4, 0, currVal_2);
        var currVal_7 = 'info-banner';
        _ck(_v, 19, 0, currVal_7);
        var currVal_8 = 'docs-api';
        _ck(_v, 26, 0, currVal_8);
        var currVal_9 = 'row';
        _ck(_v, 197, 0, currVal_9);
        var currVal_10 = 'center center';
        _ck(_v, 198, 0, currVal_10);
        var currVal_11 = 'mdc-padding';
        _ck(_v, 199, 0, currVal_11);
        var currVal_12 = 'column';
        _ck(_v, 202, 0, currVal_12);
        var currVal_22 = 'radioGroup';
        var currVal_23 = 'topLeft';
        _ck(_v, 215, 0, currVal_22, currVal_23);
        var currVal_24 = 'radioGroup';
        var currVal_25 = _co.openingPoint;
        _ck(_v, 217, 0, currVal_24, currVal_25);
        var currVal_35 = 'radioGroup';
        var currVal_36 = 'topRight';
        _ck(_v, 233, 0, currVal_35, currVal_36);
        var currVal_37 = 'radioGroup';
        var currVal_38 = _co.openingPoint;
        _ck(_v, 235, 0, currVal_37, currVal_38);
        var currVal_48 = 'radioGroup';
        var currVal_49 = 'bottomLeft';
        _ck(_v, 251, 0, currVal_48, currVal_49);
        var currVal_50 = 'radioGroup';
        var currVal_51 = _co.openingPoint;
        _ck(_v, 253, 0, currVal_50, currVal_51);
        var currVal_61 = 'radioGroup';
        var currVal_62 = 'bottomRight';
        _ck(_v, 269, 0, currVal_61, currVal_62);
        var currVal_63 = 'radioGroup';
        var currVal_64 = _co.openingPoint;
        _ck(_v, 271, 0, currVal_63, currVal_64);
        var currVal_75 = true;
        var currVal_76 = true;
        _ck(_v, 285, 0, currVal_75, currVal_76);
        var currVal_82 = 0;
        _ck(_v, 293, 0, currVal_82);
        var currVal_86 = 1;
        var currVal_87 = true;
        _ck(_v, 297, 0, currVal_86, currVal_87);
        var currVal_91 = 2;
        _ck(_v, 301, 0, currVal_91);
        var currVal_95 = 3;
        _ck(_v, 308, 0, currVal_95);
    }, function (_ck, _v) {
        var _co = _v.component;
        var currVal_3 = nodeValue(_v, 7).isHostClass;
        _ck(_v, 6, 0, currVal_3);
        var currVal_4 = nodeValue(_v, 11).isHostClass;
        _ck(_v, 10, 0, currVal_4);
        var currVal_5 = nodeValue(_v, 15).isHostClass;
        _ck(_v, 14, 0, currVal_5);
        var currVal_6 = nodeValue(_v, 20).isHostClass;
        _ck(_v, 18, 0, currVal_6);
        var currVal_13 = nodeValue(_v, 208).className;
        _ck(_v, 207, 0, currVal_13);
        var currVal_14 = nodeValue(_v, 215).isHostClass;
        var currVal_15 = nodeValue(_v, 219).ngClassUntouched;
        var currVal_16 = nodeValue(_v, 219).ngClassTouched;
        var currVal_17 = nodeValue(_v, 219).ngClassPristine;
        var currVal_18 = nodeValue(_v, 219).ngClassDirty;
        var currVal_19 = nodeValue(_v, 219).ngClassValid;
        var currVal_20 = nodeValue(_v, 219).ngClassInvalid;
        var currVal_21 = nodeValue(_v, 219).ngClassPending;
        _ck(_v, 213, 0, currVal_14, currVal_15, currVal_16, currVal_17, currVal_18, currVal_19, currVal_20, currVal_21);
        var currVal_26 = nodeValue(_v, 226).className;
        _ck(_v, 225, 0, currVal_26);
        var currVal_27 = nodeValue(_v, 233).isHostClass;
        var currVal_28 = nodeValue(_v, 237).ngClassUntouched;
        var currVal_29 = nodeValue(_v, 237).ngClassTouched;
        var currVal_30 = nodeValue(_v, 237).ngClassPristine;
        var currVal_31 = nodeValue(_v, 237).ngClassDirty;
        var currVal_32 = nodeValue(_v, 237).ngClassValid;
        var currVal_33 = nodeValue(_v, 237).ngClassInvalid;
        var currVal_34 = nodeValue(_v, 237).ngClassPending;
        _ck(_v, 231, 0, currVal_27, currVal_28, currVal_29, currVal_30, currVal_31, currVal_32, currVal_33, currVal_34);
        var currVal_39 = nodeValue(_v, 244).className;
        _ck(_v, 243, 0, currVal_39);
        var currVal_40 = nodeValue(_v, 251).isHostClass;
        var currVal_41 = nodeValue(_v, 255).ngClassUntouched;
        var currVal_42 = nodeValue(_v, 255).ngClassTouched;
        var currVal_43 = nodeValue(_v, 255).ngClassPristine;
        var currVal_44 = nodeValue(_v, 255).ngClassDirty;
        var currVal_45 = nodeValue(_v, 255).ngClassValid;
        var currVal_46 = nodeValue(_v, 255).ngClassInvalid;
        var currVal_47 = nodeValue(_v, 255).ngClassPending;
        _ck(_v, 249, 0, currVal_40, currVal_41, currVal_42, currVal_43, currVal_44, currVal_45, currVal_46, currVal_47);
        var currVal_52 = nodeValue(_v, 262).className;
        _ck(_v, 261, 0, currVal_52);
        var currVal_53 = nodeValue(_v, 269).isHostClass;
        var currVal_54 = nodeValue(_v, 273).ngClassUntouched;
        var currVal_55 = nodeValue(_v, 273).ngClassTouched;
        var currVal_56 = nodeValue(_v, 273).ngClassPristine;
        var currVal_57 = nodeValue(_v, 273).ngClassDirty;
        var currVal_58 = nodeValue(_v, 273).ngClassValid;
        var currVal_59 = nodeValue(_v, 273).ngClassInvalid;
        var currVal_60 = nodeValue(_v, 273).ngClassPending;
        _ck(_v, 267, 0, currVal_53, currVal_54, currVal_55, currVal_56, currVal_57, currVal_58, currVal_59, currVal_60);
        var currVal_65 = nodeValue(_v, 281).isHostClass;
        _ck(_v, 280, 0, currVal_65);
        var currVal_66 = nodeValue(_v, 285).tabindex;
        var currVal_67 = nodeValue(_v, 285).attrType;
        var currVal_68 = nodeValue(_v, 285).isHostClass;
        var currVal_69 = nodeValue(_v, 285).classRaised;
        var currVal_70 = nodeValue(_v, 285).classPrimary;
        var currVal_71 = nodeValue(_v, 285).classAccent;
        var currVal_72 = nodeValue(_v, 285).classDense;
        var currVal_73 = nodeValue(_v, 285).classCompact;
        var currVal_74 = nodeValue(_v, 285).classCardAction;
        _ck(_v, 283, 0, currVal_66, currVal_67, currVal_68, currVal_69, currVal_70, currVal_71, currVal_72, currVal_73, currVal_74);
        var currVal_77 = nodeValue(_v, 289).className;
        var currVal_78 = nodeValue(_v, 289).tabindex;
        _ck(_v, 288, 0, currVal_77, currVal_78);
        var currVal_79 = nodeValue(_v, 293).isHostClass;
        var currVal_80 = nodeValue(_v, 293).role;
        var currVal_81 = nodeValue(_v, 293).tabindex;
        _ck(_v, 292, 0, currVal_79, currVal_80, currVal_81);
        var currVal_83 = nodeValue(_v, 297).isHostClass;
        var currVal_84 = nodeValue(_v, 297).role;
        var currVal_85 = nodeValue(_v, 297).tabindex;
        _ck(_v, 296, 0, currVal_83, currVal_84, currVal_85);
        var currVal_88 = nodeValue(_v, 301).isHostClass;
        var currVal_89 = nodeValue(_v, 301).role;
        var currVal_90 = nodeValue(_v, 301).tabindex;
        _ck(_v, 300, 0, currVal_88, currVal_89, currVal_90);
        var currVal_92 = nodeValue(_v, 308).isHostClass;
        var currVal_93 = nodeValue(_v, 308).role;
        var currVal_94 = nodeValue(_v, 308).tabindex;
        _ck(_v, 307, 0, currVal_92, currVal_93, currVal_94);
        var currVal_96 = nodeValue(_v, 315).isHostClass;
        _ck(_v, 314, 0, currVal_96);
        var currVal_97 = _co.selectedIndex;
        _ck(_v, 316, 0, currVal_97);
    });
}
function View_MenuDemoComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1, 'menu-demo', [], null, null, null, View_MenuDemoComponent_0, RenderType_MenuDemoComponent)),
        directiveDef(49152, null, 0, MenuDemoComponent, [], null, null)], null, null);
}
var MenuDemoComponentNgFactory = createComponentFactory('menu-demo', MenuDemoComponent, View_MenuDemoComponent_Host_0, {}, {}, []);

/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
/* tslint:disable */
var styles_TextfieldDemoComponent = [];
var RenderType_TextfieldDemoComponent = createRendererType2({ encapsulation: 2,
    styles: styles_TextfieldDemoComponent, data: {} });
function View_TextfieldDemoComponent_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 863, 'div', [['class',
                'mdc-padding'], ['fxLayout', 'column'], ['fxLayoutAlign', 'start start']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0,
                'layout'] }, null), directiveDef(737280, null, 0, LayoutAlignDirective, [MediaMonitor, ElementRef, Renderer2, [2, LayoutDirective]], { align: [0,
                'align'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 2, 'h1', [['mdc-typography-display1',
                '']], [[2, 'mdc-typography--display1', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['Text Field'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 2, 'div', [['mdc-typography-subheading2', '']], [[2, 'mdc-typography--subheading2',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, undefined, [], null, null),
        (_l()(), textDef(null, ['The MDC Text Field component provides a textual input field adhering the Material Design specification.'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 5, 'div', [['class', 'info-banner'], ['mdc-typography-subheading1', '']], [[2,
                'mdc-typography--subheading1', null]], null, null, null, null)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(),
            textDef(null, ['\n    '])), (_l()(), textDef(null, ['import { TextfieldModule } from \'@angular-mdc/web\';'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 287, 'div', [['class', 'docs-api']], null, null, null, null, null)),
        directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers,
            KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0,
                'classBase'] }, null), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 226, 'table', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'thead', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Component'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 13, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-textfield'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-textfield-box'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Properties'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 136, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() id: string'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Unique id of the element.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() type: string = \'text\''])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Input type of textfield (e.g. email, password, url).'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() name: string'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Name of the textfield.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() value: string'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['The input element\'s value.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() dense: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Shrinks the font size and height of the input.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() fullwidth: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Use to change element to fullwidth textfield. Not usable with mdc-textfield-box.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() multiline: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Use to allow multiple lines inside the textfield. Not usable with mdc-textfield-box.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() disabled: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Disables the component.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() required: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Whether the element is required.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() label: string'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Shown to the user when there\'s no focus or values.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() placeholder: string'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Placeholder attribute of the element.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() tabindex: number'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Tab index of the text element.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() rows: number'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Number of rows for this textarea. Not usable with mdc-textfield-box.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() cols: number'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Number of columns for this textarea. Not usable with mdc-textfield-box.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() maxlength: number'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Maxlength of characters allowed to be entered.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Event'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 37, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['focus'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Native input element for a "focus" event.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['blur'])), (_l()(),
            textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Native input element for a "blur" event.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['input'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Native input element for a "input" event.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['keydown'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Native input element for a "keydown" event.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 55, 'table', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])),
        (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Directive'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'tbody', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-textfield-helptext'])), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Useful for providing supplemental information to users, as well for validation messages.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Properties'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 19, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() validation: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Help text can be used to provide additional validation messages.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() persistent: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Help text will always be visible.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 172, 'div', [['class', 'mdc-padding'], ['fxLayout', 'column']], null, null, null, null, null)),
        directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef,
            Renderer2], { layout: [0, 'layout'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers,
            ElementRef, Renderer, Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 69, 'div', [['fxFlexAlign', 'start']], null, null, null, null, null)), directiveDef(737280, null, 0, FlexAlignDirective, [MediaMonitor, ElementRef, Renderer2], { align: [0, 'align'] }, null), (_l()(), textDef(null, ['\n      '])),
        (_l()(), elementDef(0, null, null, 7, 'mdc-textfield', [['id', 'username'],
            ['label', 'Username']], [[1, 'required', 0], [2, 'mdc-textfield', null],
            [2, 'mdc-textfield--multiline', null], [2, 'mdc-textfield--fullwidth',
                null], [2, 'mdc-textfield--dense', null], [2, 'ng-untouched',
                null], [2, 'ng-touched', null], [2, 'ng-pristine', null],
            [2, 'ng-dirty', null], [2, 'ng-valid', null], [2, 'ng-invalid',
                null], [2, 'ng-pending', null]], [[null, 'ngModelChange']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('ngModelChange' === en)) {
                var pd_0 = ((_co.username = $event) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, View_TextfieldComponent_0, RenderType_TextfieldComponent)), directiveDef(16384, null, 0, RequiredValidator, [], { required: [0, 'required'] }, null), providerDef(1024, null, NG_VALIDATORS, function (p0_0) {
            return [p0_0];
        }, [RequiredValidator]), directiveDef(4374528, null, 0, material_es5_94, [Renderer2, ElementRef, undefined], { id: [0, 'id'], disabled: [1, 'disabled'],
            dense: [2, 'dense'], required: [3, 'required'], label: [4, 'label'] }, null),
        providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_94]), directiveDef(671744, null, 0, NgModel, [[8, null],
            [2, NG_VALIDATORS], [8, null], [2, NG_VALUE_ACCESSOR]], { isDisabled: [0,
                'isDisabled'], model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(),
            textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 2, 'p', [['mdc-textfield-helptext', '']], [[2, 'mdc-textfield-helptext', null],
            [1, 'aria-hidden', 0], [2, 'mdc-textfield-helptext--persistent', null],
            [2, 'mdc-textfield-helptext--validation-msg', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_92, [ElementRef], { persistent: [0, 'persistent'],
            validation: [1, 'validation'] }, null), (_l()(), textDef(null, ['Username is required'])), (_l()(), textDef(null, ['\n    '])), (_l()(),
            elementDef(0, null, null, 16, 'mdc-form-field', [], [[8, 'className', 0]], null, null, null, null)),
        directiveDef(1196032, null, 3, material_es5_54, [Renderer2, ElementRef,
            undefined], null, null), queryDef(335544320, 1, { inputCheckbox: 0 }),
        queryDef(335544320, 2, { inputRadio: 0 }), queryDef(335544320, 3, { inputSwitch: 0 }), (_l()(),
            textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 6, 'mdc-checkbox', [], [[2, 'mdc-checkbox', null], [2, 'ng-untouched',
                null], [2, 'ng-touched', null], [2, 'ng-pristine', null],
            [2, 'ng-dirty', null], [2, 'ng-valid', null], [2, 'ng-invalid',
                null], [2, 'ng-pending', null]], [[null, 'ngModelChange']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('ngModelChange' === en)) {
                var pd_0 = ((_co.isRequired = $event) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, View_CheckboxComponent_0, RenderType_CheckboxComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[1, 4]], 0, material_es5_17, [Renderer2, ElementRef, material_es5_74, undefined], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_17]), directiveDef(671744, null, 0, NgModel, [[8,
                null], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { model: [0, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 1, 'label', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Required'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 16, 'mdc-form-field', [], [[8, 'className', 0]], null, null, null, null)), directiveDef(1196032, null, 3, material_es5_54, [Renderer2, ElementRef, undefined], null, null), queryDef(335544320, 4, { inputCheckbox: 0 }), queryDef(335544320, 5, { inputRadio: 0 }), queryDef(335544320, 6, { inputSwitch: 0 }), (_l()(), textDef(null, ['\n      '])), (_l()(),
            elementDef(0, null, null, 6, 'mdc-checkbox', [], [[2,
                    'mdc-checkbox', null], [2, 'ng-untouched', null], [2, 'ng-touched',
                    null], [2, 'ng-pristine', null], [2, 'ng-dirty', null],
                [2, 'ng-valid', null], [2, 'ng-invalid', null], [2, 'ng-pending',
                    null]], [[null, 'ngModelChange']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('ngModelChange' === en)) {
                    var pd_0 = ((_co.isDisabled = $event) !== false);
                    ad = (pd_0 && ad);
                }
                return ad;
            }, View_CheckboxComponent_0, RenderType_CheckboxComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[4, 4]], 0, material_es5_17, [Renderer2, ElementRef, material_es5_74, undefined], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_17]), directiveDef(671744, null, 0, NgModel, [[8,
                null], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { model: [0, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 1, 'label', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Disable'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 16, 'mdc-form-field', [], [[8, 'className', 0]], null, null, null, null)), directiveDef(1196032, null, 3, material_es5_54, [Renderer2, ElementRef, undefined], null, null), queryDef(335544320, 7, { inputCheckbox: 0 }), queryDef(335544320, 8, { inputRadio: 0 }), queryDef(335544320, 9, { inputSwitch: 0 }), (_l()(), textDef(null, ['\n      '])), (_l()(),
            elementDef(0, null, null, 6, 'mdc-checkbox', [], [[2,
                    'mdc-checkbox', null], [2, 'ng-untouched', null], [2, 'ng-touched',
                    null], [2, 'ng-pristine', null], [2, 'ng-dirty', null],
                [2, 'ng-valid', null], [2, 'ng-invalid', null], [2, 'ng-pending',
                    null]], [[null, 'ngModelChange']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('ngModelChange' === en)) {
                    var pd_0 = ((_co.isDense = $event) !== false);
                    ad = (pd_0 && ad);
                }
                return ad;
            }, View_CheckboxComponent_0, RenderType_CheckboxComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[7, 4]], 0, material_es5_17, [Renderer2, ElementRef, material_es5_74, undefined], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_17]), directiveDef(671744, null, 0, NgModel, [[8,
                null], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { model: [0, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 1, 'label', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Dense'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 96, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)),
        (_l()(), elementDef(0, null, null, 60, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-textfield'])), (_l()(), textDef(null, ['\n  [('])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['ngModel'])), (_l()(), textDef(null, [')]='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"username"'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['label'])), (_l()(), textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"Username"'])), (_l()(), textDef(null, ['\n  ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['required'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['\n  ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['disabled'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"false"'])), (_l()(), textDef(null, ['\n  ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['dense'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"false"'])), (_l()(), textDef(null, ['\n  ('])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['focus'])), (_l()(), textDef(null, [')='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"handleFocus($event);"'])),
        (_l()(), textDef(null, ['\n  ('])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['blur'])), (_l()(),
            textDef(null, [')='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"handleBlur($event);"'])),
        (_l()(), textDef(null, ['\n  ('])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['input'])),
        (_l()(), textDef(null, [')='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"handleInput($event);"'])),
        (_l()(), textDef(null, ['\n  ('])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['keydown'])),
        (_l()(), textDef(null, [')='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"handleKeyDown($event);"'])),
        (_l()(), textDef(null, ['>'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-textfield'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])),
        (_l()(), elementDef(0, null, null, 19, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['p'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-textfield-helptext'])),
        (_l()(), textDef(null, ['\n  ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['validation'])),
        (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])),
        (_l()(), textDef(null, ['\n  ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['persistent'])),
        (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"false"'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Username is required'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['p'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(),
            textDef(null, [' '])), (_l()(), textDef(null, ['\n\n    '])),
        (_l()(), elementDef(0, null, null, 18, 'div', [['class', 'mdc-padding'],
            ['fxLayout', 'column']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor,
            ElementRef, Renderer2], { layout: [0, 'layout'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers,
            ElementRef, Renderer, Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 2, 'span', [['mdc-typography-headline', '']], [[2,
                'mdc-typography--headline', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['Prefilled value'])),
        (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 9, 'div', [['fxFlexAlign', 'start']], null, null, null, null, null)), directiveDef(737280, null, 0, FlexAlignDirective, [MediaMonitor, ElementRef, Renderer2], { align: [0, 'align'] }, null),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 5, 'mdc-textfield', [['label', 'Username']], [[2, 'mdc-textfield', null],
            [2, 'mdc-textfield--multiline', null], [2, 'mdc-textfield--fullwidth',
                null], [2, 'mdc-textfield--dense', null], [2, 'ng-untouched',
                null], [2, 'ng-touched', null], [2, 'ng-pristine', null],
            [2, 'ng-dirty', null], [2, 'ng-valid', null], [2, 'ng-invalid',
                null], [2, 'ng-pending', null]], [[null, 'ngModelChange']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('ngModelChange' === en)) {
                var pd_0 = ((_co.prefill = $event) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, View_TextfieldComponent_0, RenderType_TextfieldComponent)), directiveDef(4374528, null, 0, material_es5_94, [Renderer2, ElementRef, undefined], { label: [0, 'label'] }, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_94]), directiveDef(671744, null, 0, NgModel, [[8,
                null], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { model: [0, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n\n    '])), (_l()(), elementDef(0, null, null, 45, 'div', [['class',
                'mdc-padding'], ['fxLayout', 'column']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0, 'layout'] }, null),
        directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers,
            KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0,
                'classBase'] }, null), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 40, 'div', [['fxFlexAlign', 'start']], null, null, null, null, null)),
        directiveDef(737280, null, 0, FlexAlignDirective, [MediaMonitor, ElementRef,
            Renderer2], { align: [0, 'align'] }, null), (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 2, 'mdc-textfield', [['label', 'Password'], ['type', 'password']], [[2, 'mdc-textfield', null],
            [2, 'mdc-textfield--multiline', null], [2, 'mdc-textfield--fullwidth',
                null], [2, 'mdc-textfield--dense', null]], null, null, View_TextfieldComponent_0, RenderType_TextfieldComponent)),
        providerDef(5120, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_94]), directiveDef(4374528, null, 0, material_es5_94, [Renderer2, ElementRef, undefined], { type: [0, 'type'], required: [1, 'required'],
            label: [2, 'label'] }, null), (_l()(), textDef(null, ['\n'])),
        (_l()(), elementDef(0, null, null, 33, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)),
        (_l()(), elementDef(0, null, null, 24, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-textfield'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['type'])), (_l()(), textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"password"'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['label'])), (_l()(), textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"Password"'])), (_l()(), textDef(null, ['\n  ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['required'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-textfield'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 2, 'span', [['mdc-typography-headline', '']], [[2, 'mdc-typography--headline',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, undefined, [], null, null),
        (_l()(), textDef(null, ['Text Field box'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 2, 'span', [['mdc-typography-caption',
                '']], [[2, 'mdc-typography--caption', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['Use mdc-textfield-box'])),
        (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 62, 'div', [['class', 'mdc-padding'], ['fxFlexAlign', 'start']], null, null, null, null, null)), directiveDef(737280, null, 0, FlexAlignDirective, [MediaMonitor, ElementRef, Renderer2], { align: [0, 'align'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 3, 'mdc-textfield-box', [['label', 'Your name']], [[2, 'mdc-textfield', null], [2, 'mdc-textfield--box',
                null], [2, 'mdc-textfield--multiline', null], [2, 'mdc-textfield--fullwidth',
                null], [2, 'mdc-textfield--dense', null]], null, null, View_TextfieldBoxComponent_0, RenderType_TextfieldBoxComponent)),
        providerDef(5120, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_97]), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, null, 0, material_es5_97, [Renderer2, ElementRef, undefined, material_es5_74], { required: [0, 'required'], label: [1,
                'label'] }, null), (_l()(), textDef(null, ['\n      '])),
        (_l()(), elementDef(0, null, null, 2, 'p', [['mdc-textfield-helptext',
                '']], [[2, 'mdc-textfield-helptext', null], [1, 'aria-hidden', 0], [2,
                'mdc-textfield-helptext--persistent', null], [2, 'mdc-textfield-helptext--validation-msg',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_92, [ElementRef], { validation: [0, 'validation'] }, null), (_l()(), textDef(null, ['Name is required'])), (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 48, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)),
        (_l()(), elementDef(0, null, null, 18, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-textfield-box'])), (_l()(), textDef(null, ['\n  ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['required'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['label'])), (_l()(), textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"Your name"'])), (_l()(),
            textDef(null, ['>'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-textfield-box'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])),
        (_l()(), elementDef(0, null, null, 13, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['p'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-textfield-helptext'])),
        (_l()(), textDef(null, ['\n  ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['validation'])),
        (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Name is required'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['p'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(),
            textDef(null, ['    '])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 51, 'div', [['class', 'mdc-padding'],
            ['fxLayout', 'column']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor,
            ElementRef, Renderer2], { layout: [0, 'layout'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers,
            ElementRef, Renderer, Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 8, 'div', [['class', 'mdc-padding'], ['fxFlexAlign',
                'start'], ['mdc-theme-dark', '']], null, null, null, null, null)), directiveDef(737280, null, 0, FlexAlignDirective, [MediaMonitor, ElementRef, Renderer2], { align: [0, 'align'] }, null),
        directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers,
            KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0,
                'classBase'] }, null), directiveDef(540672, null, 0, material_es5_99, [Renderer2, ElementRef], { mdcThemeDark: [0, 'mdcThemeDark'] }, null),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 2, 'mdc-textfield', [['label', 'Dark theme']], [[2, 'mdc-textfield',
                null], [2, 'mdc-textfield--multiline', null], [2, 'mdc-textfield--fullwidth',
                null], [2, 'mdc-textfield--dense', null]], null, null, View_TextfieldComponent_0, RenderType_TextfieldComponent)),
        providerDef(5120, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_94]), directiveDef(4374528, null, 0, material_es5_94, [Renderer2, ElementRef, undefined], { label: [0, 'label'] }, null), (_l()(),
            textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 36, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)),
        (_l()(), elementDef(0, null, null, 7, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['div'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-theme-dark'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 12, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-textfield'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['label'])), (_l()(), textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"Dark theme"'])), (_l()(),
            textDef(null, ['>'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-textfield'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['div'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(),
            textDef(null, [' '])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 65, 'div', [['class', 'mdc-padding'],
                ['fxLayout', 'column']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor,
            ElementRef, Renderer2], { layout: [0, 'layout'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers,
            ElementRef, Renderer, Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 2, 'span', [['mdc-typography-headline', '']], [[2,
                'mdc-typography--headline', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['Multi-line'])),
        (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 9, 'div', [['fxFlexAlign', 'start']], null, null, null, null, null)), directiveDef(737280, null, 0, FlexAlignDirective, [MediaMonitor, ElementRef, Renderer2], { align: [0, 'align'] }, null),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 5, 'mdc-textfield', [['cols', '40'], ['id', 'comments'], ['label',
                'Comments'], ['rows', '8']], [[2, 'mdc-textfield', null], [2, 'mdc-textfield--multiline',
                null], [2, 'mdc-textfield--fullwidth', null], [2, 'mdc-textfield--dense',
                null], [2, 'ng-untouched', null], [2, 'ng-touched', null],
            [2, 'ng-pristine', null], [2, 'ng-dirty', null], [2, 'ng-valid',
                null], [2, 'ng-invalid', null], [2, 'ng-pending', null]], [[null, 'ngModelChange']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('ngModelChange' === en)) {
                var pd_0 = ((_co.comments = $event) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, View_TextfieldComponent_0, RenderType_TextfieldComponent)), directiveDef(4374528, null, 0, material_es5_94, [Renderer2, ElementRef, undefined], { id: [0, 'id'], label: [1, 'label'], rows: [2, 'rows'], cols: [3, 'cols'], multiline: [4,
                'multiline'] }, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_94]), directiveDef(671744, null, 0, NgModel, [[8,
                null], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { model: [0, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 45, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)),
        (_l()(), elementDef(0, null, null, 36, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-textfield'])), (_l()(), textDef(null, ['\n [('])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['ngModel'])), (_l()(), textDef(null, [')]='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"comments"'])), (_l()(), textDef(null, ['\n '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['label'])), (_l()(), textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"Comments"'])), (_l()(), textDef(null, ['\n '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['rows'])), (_l()(), textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"8"'])), (_l()(), textDef(null, ['\n '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['cols'])), (_l()(), textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"40"'])), (_l()(), textDef(null, ['\n ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['multiline'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-textfield'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, [' '])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 53, 'div', [['class', 'mdc-padding'], ['fxLayout', 'column']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0, 'layout'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 2, 'span', [['mdc-typography-headline',
                '']], [[2, 'mdc-typography--headline', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['Full-width single line'])),
        (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 8, 'div', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 5, 'mdc-textfield', [['id', 'subject'], ['placeholder',
                'Subject']], [[2, 'mdc-textfield', null], [2, 'mdc-textfield--multiline',
                null], [2, 'mdc-textfield--fullwidth', null], [2, 'mdc-textfield--dense',
                null], [2, 'ng-untouched', null], [2, 'ng-touched', null],
            [2, 'ng-pristine', null], [2, 'ng-dirty', null], [2, 'ng-valid',
                null], [2, 'ng-invalid', null], [2, 'ng-pending', null]], [[null, 'ngModelChange']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('ngModelChange' === en)) {
                var pd_0 = ((_co.subject = $event) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, View_TextfieldComponent_0, RenderType_TextfieldComponent)), directiveDef(4374528, null, 0, material_es5_94, [Renderer2, ElementRef, undefined], { id: [0, 'id'], placeholder: [1, 'placeholder'], fullwidth: [2, 'fullwidth'] }, null),
        providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_94]), directiveDef(671744, null, 0, NgModel, [[8, null],
            [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { model: [0,
                'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 34, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)),
        (_l()(), elementDef(0, null, null, 24, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-textfield'])), (_l()(), textDef(null, [' [('])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['ngModel'])), (_l()(), textDef(null, [')]='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"subject"'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['placeholder'])), (_l()(),
            textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"Subject"'])),
        (_l()(), textDef(null, ['\n  ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['fullwidth'])),
        (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-textfield'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 65, 'div', [['class', 'mdc-padding'], ['fxLayout', 'column']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0, 'layout'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 2, 'span', [['mdc-typography-headline',
                '']], [[2, 'mdc-typography--headline', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['Full-width multi-line'])),
        (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 8, 'div', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 5, 'mdc-textfield', [['id', 'message'], ['placeholder',
                'Type your message here'], ['rows', '8']], [[2, 'mdc-textfield', null],
            [2, 'mdc-textfield--multiline', null], [2, 'mdc-textfield--fullwidth',
                null], [2, 'mdc-textfield--dense', null], [2, 'ng-untouched',
                null], [2, 'ng-touched', null], [2, 'ng-pristine', null],
            [2, 'ng-dirty', null], [2, 'ng-valid', null], [2, 'ng-invalid',
                null], [2, 'ng-pending', null]], [[null, 'ngModelChange']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('ngModelChange' === en)) {
                var pd_0 = ((_co.message = $event) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, View_TextfieldComponent_0, RenderType_TextfieldComponent)), directiveDef(4374528, null, 0, material_es5_94, [Renderer2, ElementRef, undefined], { id: [0, 'id'], placeholder: [1, 'placeholder'], rows: [2, 'rows'], fullwidth: [3,
                'fullwidth'], multiline: [4, 'multiline'] }, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_94]), directiveDef(671744, null, 0, NgModel, [[8,
                null], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { model: [0, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 46, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)),
        (_l()(), elementDef(0, null, null, 36, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-textfield'])), (_l()(), textDef(null, [' [('])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['ngModel'])), (_l()(), textDef(null, [')]='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"message"'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['placeholder'])), (_l()(),
            textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"Type your message here"'])),
        (_l()(), textDef(null, ['\n  ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['fullwidth'])),
        (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])),
        (_l()(), textDef(null, ['\n  ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['multiline'])),
        (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['rows'])), (_l()(),
            textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"8"'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(),
            elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-textfield'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n']))], function (_ck, _v) {
        var _co = _v.component;
        var currVal_0 = 'column';
        _ck(_v, 1, 0, currVal_0);
        var currVal_1 = 'start start';
        _ck(_v, 2, 0, currVal_1);
        var currVal_2 = 'mdc-padding';
        _ck(_v, 3, 0, currVal_2);
        var currVal_6 = 'info-banner';
        _ck(_v, 14, 0, currVal_6);
        var currVal_7 = 'docs-api';
        _ck(_v, 21, 0, currVal_7);
        var currVal_8 = 'column';
        _ck(_v, 310, 0, currVal_8);
        var currVal_9 = 'mdc-padding';
        _ck(_v, 311, 0, currVal_9);
        var currVal_10 = 'start';
        _ck(_v, 314, 0, currVal_10);
        var currVal_23 = _co.isRequired;
        _ck(_v, 317, 0, currVal_23);
        var currVal_24 = 'username';
        var currVal_25 = _co.isDisabled;
        var currVal_26 = _co.isDense;
        var currVal_27 = _co.isRequired;
        var currVal_28 = 'Username';
        _ck(_v, 319, 0, currVal_24, currVal_25, currVal_26, currVal_27, currVal_28);
        var currVal_29 = _co.isDisabled;
        var currVal_30 = _co.username;
        _ck(_v, 321, 0, currVal_29, currVal_30);
        var currVal_35 = false;
        var currVal_36 = true;
        _ck(_v, 326, 0, currVal_35, currVal_36);
        var currVal_46 = _co.isRequired;
        _ck(_v, 339, 0, currVal_46);
        var currVal_56 = _co.isDisabled;
        _ck(_v, 357, 0, currVal_56);
        var currVal_66 = _co.isDense;
        _ck(_v, 375, 0, currVal_66);
        var currVal_67 = 'column';
        _ck(_v, 484, 0, currVal_67);
        var currVal_68 = 'mdc-padding';
        _ck(_v, 485, 0, currVal_68);
        var currVal_70 = 'start';
        _ck(_v, 492, 0, currVal_70);
        var currVal_82 = 'Username';
        _ck(_v, 495, 0, currVal_82);
        var currVal_83 = _co.prefill;
        _ck(_v, 497, 0, currVal_83);
        var currVal_84 = 'column';
        _ck(_v, 504, 0, currVal_84);
        var currVal_85 = 'mdc-padding';
        _ck(_v, 505, 0, currVal_85);
        var currVal_86 = 'start';
        _ck(_v, 508, 0, currVal_86);
        var currVal_91 = 'password';
        var currVal_92 = true;
        var currVal_93 = 'Password';
        _ck(_v, 512, 0, currVal_91, currVal_92, currVal_93);
        var currVal_96 = 'start';
        _ck(_v, 559, 0, currVal_96);
        var currVal_97 = 'mdc-padding';
        _ck(_v, 560, 0, currVal_97);
        var currVal_103 = true;
        var currVal_104 = 'Your name';
        _ck(_v, 565, 0, currVal_103, currVal_104);
        var currVal_109 = true;
        _ck(_v, 568, 0, currVal_109);
        var currVal_110 = 'column';
        _ck(_v, 623, 0, currVal_110);
        var currVal_111 = 'mdc-padding';
        _ck(_v, 624, 0, currVal_111);
        var currVal_112 = 'start';
        _ck(_v, 627, 0, currVal_112);
        var currVal_113 = 'mdc-padding';
        _ck(_v, 628, 0, currVal_113);
        var currVal_114 = '';
        _ck(_v, 629, 0, currVal_114);
        var currVal_119 = 'Dark theme';
        _ck(_v, 633, 0, currVal_119);
        var currVal_120 = 'column';
        _ck(_v, 676, 0, currVal_120);
        var currVal_121 = 'mdc-padding';
        _ck(_v, 677, 0, currVal_121);
        var currVal_123 = 'start';
        _ck(_v, 684, 0, currVal_123);
        var currVal_135 = 'comments';
        var currVal_136 = 'Comments';
        var currVal_137 = '8';
        var currVal_138 = '40';
        var currVal_139 = true;
        _ck(_v, 687, 0, currVal_135, currVal_136, currVal_137, currVal_138, currVal_139);
        var currVal_140 = _co.comments;
        _ck(_v, 689, 0, currVal_140);
        var currVal_141 = 'column';
        _ck(_v, 743, 0, currVal_141);
        var currVal_142 = 'mdc-padding';
        _ck(_v, 744, 0, currVal_142);
        var currVal_155 = 'subject';
        var currVal_156 = 'Subject';
        var currVal_157 = true;
        _ck(_v, 753, 0, currVal_155, currVal_156, currVal_157);
        var currVal_158 = _co.subject;
        _ck(_v, 755, 0, currVal_158);
        var currVal_159 = 'column';
        _ck(_v, 798, 0, currVal_159);
        var currVal_160 = 'mdc-padding';
        _ck(_v, 799, 0, currVal_160);
        var currVal_173 = 'message';
        var currVal_174 = 'Type your message here';
        var currVal_175 = '8';
        var currVal_176 = true;
        var currVal_177 = true;
        _ck(_v, 808, 0, currVal_173, currVal_174, currVal_175, currVal_176, currVal_177);
        var currVal_178 = _co.message;
        _ck(_v, 810, 0, currVal_178);
    }, function (_ck, _v) {
        var currVal_3 = nodeValue(_v, 6).isHostClass;
        _ck(_v, 5, 0, currVal_3);
        var currVal_4 = nodeValue(_v, 10).isHostClass;
        _ck(_v, 9, 0, currVal_4);
        var currVal_5 = nodeValue(_v, 15).isHostClass;
        _ck(_v, 13, 0, currVal_5);
        var currVal_11 = (nodeValue(_v, 317).required ? '' : null);
        var currVal_12 = nodeValue(_v, 319).isHostClass;
        var currVal_13 = nodeValue(_v, 319).classMultiline;
        var currVal_14 = nodeValue(_v, 319).classFullwidth;
        var currVal_15 = nodeValue(_v, 319).classDense;
        var currVal_16 = nodeValue(_v, 323).ngClassUntouched;
        var currVal_17 = nodeValue(_v, 323).ngClassTouched;
        var currVal_18 = nodeValue(_v, 323).ngClassPristine;
        var currVal_19 = nodeValue(_v, 323).ngClassDirty;
        var currVal_20 = nodeValue(_v, 323).ngClassValid;
        var currVal_21 = nodeValue(_v, 323).ngClassInvalid;
        var currVal_22 = nodeValue(_v, 323).ngClassPending;
        _ck(_v, 316, 1, [currVal_11, currVal_12, currVal_13, currVal_14, currVal_15, currVal_16,
            currVal_17, currVal_18, currVal_19, currVal_20, currVal_21, currVal_22]);
        var currVal_31 = nodeValue(_v, 326).isHostClass;
        var currVal_32 = nodeValue(_v, 326).ariaHidden;
        var currVal_33 = nodeValue(_v, 326).classPersistent;
        var currVal_34 = nodeValue(_v, 326).classValidation;
        _ck(_v, 325, 0, currVal_31, currVal_32, currVal_33, currVal_34);
        var currVal_37 = nodeValue(_v, 330).className;
        _ck(_v, 329, 0, currVal_37);
        var currVal_38 = nodeValue(_v, 337).isHostClass;
        var currVal_39 = nodeValue(_v, 341).ngClassUntouched;
        var currVal_40 = nodeValue(_v, 341).ngClassTouched;
        var currVal_41 = nodeValue(_v, 341).ngClassPristine;
        var currVal_42 = nodeValue(_v, 341).ngClassDirty;
        var currVal_43 = nodeValue(_v, 341).ngClassValid;
        var currVal_44 = nodeValue(_v, 341).ngClassInvalid;
        var currVal_45 = nodeValue(_v, 341).ngClassPending;
        _ck(_v, 335, 0, currVal_38, currVal_39, currVal_40, currVal_41, currVal_42, currVal_43, currVal_44, currVal_45);
        var currVal_47 = nodeValue(_v, 348).className;
        _ck(_v, 347, 0, currVal_47);
        var currVal_48 = nodeValue(_v, 355).isHostClass;
        var currVal_49 = nodeValue(_v, 359).ngClassUntouched;
        var currVal_50 = nodeValue(_v, 359).ngClassTouched;
        var currVal_51 = nodeValue(_v, 359).ngClassPristine;
        var currVal_52 = nodeValue(_v, 359).ngClassDirty;
        var currVal_53 = nodeValue(_v, 359).ngClassValid;
        var currVal_54 = nodeValue(_v, 359).ngClassInvalid;
        var currVal_55 = nodeValue(_v, 359).ngClassPending;
        _ck(_v, 353, 0, currVal_48, currVal_49, currVal_50, currVal_51, currVal_52, currVal_53, currVal_54, currVal_55);
        var currVal_57 = nodeValue(_v, 366).className;
        _ck(_v, 365, 0, currVal_57);
        var currVal_58 = nodeValue(_v, 373).isHostClass;
        var currVal_59 = nodeValue(_v, 377).ngClassUntouched;
        var currVal_60 = nodeValue(_v, 377).ngClassTouched;
        var currVal_61 = nodeValue(_v, 377).ngClassPristine;
        var currVal_62 = nodeValue(_v, 377).ngClassDirty;
        var currVal_63 = nodeValue(_v, 377).ngClassValid;
        var currVal_64 = nodeValue(_v, 377).ngClassInvalid;
        var currVal_65 = nodeValue(_v, 377).ngClassPending;
        _ck(_v, 371, 0, currVal_58, currVal_59, currVal_60, currVal_61, currVal_62, currVal_63, currVal_64, currVal_65);
        var currVal_69 = nodeValue(_v, 488).isHostClass;
        _ck(_v, 487, 0, currVal_69);
        var currVal_71 = nodeValue(_v, 495).isHostClass;
        var currVal_72 = nodeValue(_v, 495).classMultiline;
        var currVal_73 = nodeValue(_v, 495).classFullwidth;
        var currVal_74 = nodeValue(_v, 495).classDense;
        var currVal_75 = nodeValue(_v, 499).ngClassUntouched;
        var currVal_76 = nodeValue(_v, 499).ngClassTouched;
        var currVal_77 = nodeValue(_v, 499).ngClassPristine;
        var currVal_78 = nodeValue(_v, 499).ngClassDirty;
        var currVal_79 = nodeValue(_v, 499).ngClassValid;
        var currVal_80 = nodeValue(_v, 499).ngClassInvalid;
        var currVal_81 = nodeValue(_v, 499).ngClassPending;
        _ck(_v, 494, 1, [currVal_71, currVal_72, currVal_73, currVal_74, currVal_75, currVal_76,
            currVal_77, currVal_78, currVal_79, currVal_80, currVal_81]);
        var currVal_87 = nodeValue(_v, 512).isHostClass;
        var currVal_88 = nodeValue(_v, 512).classMultiline;
        var currVal_89 = nodeValue(_v, 512).classFullwidth;
        var currVal_90 = nodeValue(_v, 512).classDense;
        _ck(_v, 510, 0, currVal_87, currVal_88, currVal_89, currVal_90);
        var currVal_94 = nodeValue(_v, 551).isHostClass;
        _ck(_v, 550, 0, currVal_94);
        var currVal_95 = nodeValue(_v, 555).isHostClass;
        _ck(_v, 554, 0, currVal_95);
        var currVal_98 = nodeValue(_v, 565).isHostClass;
        var currVal_99 = nodeValue(_v, 565).isHostClass;
        var currVal_100 = nodeValue(_v, 565).classMultiline;
        var currVal_101 = nodeValue(_v, 565).classFullwidth;
        var currVal_102 = nodeValue(_v, 565).classDense;
        _ck(_v, 562, 0, currVal_98, currVal_99, currVal_100, currVal_101, currVal_102);
        var currVal_105 = nodeValue(_v, 568).isHostClass;
        var currVal_106 = nodeValue(_v, 568).ariaHidden;
        var currVal_107 = nodeValue(_v, 568).classPersistent;
        var currVal_108 = nodeValue(_v, 568).classValidation;
        _ck(_v, 567, 0, currVal_105, currVal_106, currVal_107, currVal_108);
        var currVal_115 = nodeValue(_v, 633).isHostClass;
        var currVal_116 = nodeValue(_v, 633).classMultiline;
        var currVal_117 = nodeValue(_v, 633).classFullwidth;
        var currVal_118 = nodeValue(_v, 633).classDense;
        _ck(_v, 631, 0, currVal_115, currVal_116, currVal_117, currVal_118);
        var currVal_122 = nodeValue(_v, 680).isHostClass;
        _ck(_v, 679, 0, currVal_122);
        var currVal_124 = nodeValue(_v, 687).isHostClass;
        var currVal_125 = nodeValue(_v, 687).classMultiline;
        var currVal_126 = nodeValue(_v, 687).classFullwidth;
        var currVal_127 = nodeValue(_v, 687).classDense;
        var currVal_128 = nodeValue(_v, 691).ngClassUntouched;
        var currVal_129 = nodeValue(_v, 691).ngClassTouched;
        var currVal_130 = nodeValue(_v, 691).ngClassPristine;
        var currVal_131 = nodeValue(_v, 691).ngClassDirty;
        var currVal_132 = nodeValue(_v, 691).ngClassValid;
        var currVal_133 = nodeValue(_v, 691).ngClassInvalid;
        var currVal_134 = nodeValue(_v, 691).ngClassPending;
        _ck(_v, 686, 1, [currVal_124, currVal_125, currVal_126, currVal_127, currVal_128, currVal_129,
            currVal_130, currVal_131, currVal_132, currVal_133, currVal_134]);
        var currVal_143 = nodeValue(_v, 747).isHostClass;
        _ck(_v, 746, 0, currVal_143);
        var currVal_144 = nodeValue(_v, 753).isHostClass;
        var currVal_145 = nodeValue(_v, 753).classMultiline;
        var currVal_146 = nodeValue(_v, 753).classFullwidth;
        var currVal_147 = nodeValue(_v, 753).classDense;
        var currVal_148 = nodeValue(_v, 757).ngClassUntouched;
        var currVal_149 = nodeValue(_v, 757).ngClassTouched;
        var currVal_150 = nodeValue(_v, 757).ngClassPristine;
        var currVal_151 = nodeValue(_v, 757).ngClassDirty;
        var currVal_152 = nodeValue(_v, 757).ngClassValid;
        var currVal_153 = nodeValue(_v, 757).ngClassInvalid;
        var currVal_154 = nodeValue(_v, 757).ngClassPending;
        _ck(_v, 752, 1, [currVal_144, currVal_145, currVal_146, currVal_147, currVal_148, currVal_149,
            currVal_150, currVal_151, currVal_152, currVal_153, currVal_154]);
        var currVal_161 = nodeValue(_v, 802).isHostClass;
        _ck(_v, 801, 0, currVal_161);
        var currVal_162 = nodeValue(_v, 808).isHostClass;
        var currVal_163 = nodeValue(_v, 808).classMultiline;
        var currVal_164 = nodeValue(_v, 808).classFullwidth;
        var currVal_165 = nodeValue(_v, 808).classDense;
        var currVal_166 = nodeValue(_v, 812).ngClassUntouched;
        var currVal_167 = nodeValue(_v, 812).ngClassTouched;
        var currVal_168 = nodeValue(_v, 812).ngClassPristine;
        var currVal_169 = nodeValue(_v, 812).ngClassDirty;
        var currVal_170 = nodeValue(_v, 812).ngClassValid;
        var currVal_171 = nodeValue(_v, 812).ngClassInvalid;
        var currVal_172 = nodeValue(_v, 812).ngClassPending;
        _ck(_v, 807, 1, [currVal_162, currVal_163, currVal_164, currVal_165, currVal_166, currVal_167,
            currVal_168, currVal_169, currVal_170, currVal_171, currVal_172]);
    });
}
function View_TextfieldDemoComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1, 'textfield-demo', [], null, null, null, View_TextfieldDemoComponent_0, RenderType_TextfieldDemoComponent)), directiveDef(49152, null, 0, TextfieldDemoComponent, [], null, null)], null, null);
}
var TextfieldDemoComponentNgFactory = createComponentFactory('textfield-demo', TextfieldDemoComponent, View_TextfieldDemoComponent_Host_0, {}, {}, []);

/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
/* tslint:disable */
var styles_ToolbarDemoComponent = [];
var RenderType_ToolbarDemoComponent = createRendererType2({ encapsulation: 2,
    styles: styles_ToolbarDemoComponent, data: {} });
function View_ToolbarDemoComponent_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 624, 'div', [['class',
                'mdc-padding'], ['fxLayout', 'column'], ['fxLayoutAlign', 'start start']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0,
                'layout'] }, null), directiveDef(737280, null, 0, LayoutAlignDirective, [MediaMonitor, ElementRef, Renderer2, [2, LayoutDirective]], { align: [0,
                'align'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 2, 'h1', [['mdc-typography-display1',
                '']], [[2, 'mdc-typography--display1', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['Toolbars'])), (_l()(),
            textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 2, 'div', [['mdc-typography-subheading2', '']], [[2, 'mdc-typography--subheading2',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, undefined, [], null, null),
        (_l()(), textDef(null, ['MDC Toolbar acts as a container for multiple rows containing items such as application title, navigation menu, and tabs, among other things. Toolbars scroll with content by default, but supports fixed behavior as well.'])),
        (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 5, 'div', [['class', 'info-banner'], ['mdc-typography-subheading1', '']], [[2,
                'mdc-typography--subheading1', null]], null, null, null, null)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(),
            textDef(null, ['\n        '])), (_l()(), textDef(null, ['import { ToolbarModule } from \'@angular-mdc/web\';'])),
        (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 241, 'div', [['class', 'docs-api']], null, null, null, null, null)),
        directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers,
            KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0,
                'classBase'] }, null), (_l()(), textDef(null, ['\n        '])),
        (_l()(), elementDef(0, null, null, 104, 'table', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n            '])), (_l()(), elementDef(0, null, null, 7, 'thead', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n                    '])),
        (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Component'])), (_l()(), textDef(null, ['\n                '])), (_l()(),
            textDef(null, ['\n            '])), (_l()(), textDef(null, ['\n            '])), (_l()(), elementDef(0, null, null, 7, 'tbody', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n                    '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-toolbar'])), (_l()(), textDef(null, ['\n                '])),
        (_l()(), textDef(null, ['\n            '])), (_l()(), textDef(null, ['\n            '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n                    '])),
        (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Properties'])), (_l()(), textDef(null, ['\n                    '])),
        (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])), (_l()(), textDef(null, ['\n                '])),
        (_l()(), textDef(null, ['\n            '])), (_l()(), textDef(null, ['\n            '])), (_l()(), elementDef(0, null, null, 46, 'tbody', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n                    '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() fixed: boolean'])), (_l()(), textDef(null, ['\n                    '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Makes toolbar fixed on top and have persistent elevation.'])), (_l()(),
            textDef(null, ['\n                '])), (_l()(), textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n                    '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() waterfall: boolean'])), (_l()(), textDef(null, ['\n                    '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Removes fixed toolbar persistent elevation while gaining elevation scrolling down the page.'])),
        (_l()(), textDef(null, ['\n                '])), (_l()(), textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n                    '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() flexible: boolean'])), (_l()(), textDef(null, ['\n                    '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Apply flexible space to toolbar\'s first row.'])), (_l()(), textDef(null, ['\n                '])), (_l()(), textDef(null, ['\n                '])),
        (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n                    '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() flexibleDefaultBehavior: boolean'])),
        (_l()(), textDef(null, ['\n                    '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Toolbar text has flexible movement.'])), (_l()(), textDef(null, ['\n                '])), (_l()(), textDef(null, ['\n                '])),
        (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n                    '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() fixedLastrow: boolean'])),
        (_l()(), textDef(null, ['\n                    '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Makes only last row of fixed toolbar anchored on top.'])), (_l()(), textDef(null, ['\n                '])), (_l()(), textDef(null, ['\n            '])),
        (_l()(), textDef(null, ['\n            '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n                '])),
        (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n                    '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Event'])), (_l()(), textDef(null, ['\n                    '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])), (_l()(),
            textDef(null, ['\n                '])), (_l()(), textDef(null, ['\n            '])), (_l()(), textDef(null, ['\n            '])),
        (_l()(), elementDef(0, null, null, 11, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 8, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n                    '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Output() change'])), (_l()(), textDef(null, ['\n                    '])),
        (_l()(), elementDef(0, null, null, 2, 'td', [], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 1, 'pre', [], null, null, null, null, null)), (_l()(), textDef(null, ['{flexibleExpansionRatio: number}\nEmits the ratio of current flexible space to total flexible space height.\nSo when it is minimized, ratio equals to 0 and when it is maximized, ratio equals to 1.'])),
        (_l()(), textDef(null, ['\n                '])), (_l()(), textDef(null, ['\n            '])), (_l()(), textDef(null, ['\n        '])), (_l()(),
            textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 63, 'table', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n            '])), (_l()(),
            elementDef(0, null, null, 7, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n                    '])),
        (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Directive'])), (_l()(), textDef(null, ['\n                '])), (_l()(),
            textDef(null, ['\n            '])), (_l()(), textDef(null, ['\n            '])), (_l()(), elementDef(0, null, null, 10, 'tbody', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n                    '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-toolbar-section'])), (_l()(), textDef(null, ['\n                    '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Toolbar sections are aligned to the toolbar\'s center'])), (_l()(), textDef(null, ['\n                '])), (_l()(), textDef(null, ['\n            '])),
        (_l()(), textDef(null, ['\n            '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n                '])),
        (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n                    '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Properties'])), (_l()(), textDef(null, ['\n                    '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])), (_l()(),
            textDef(null, ['\n                '])), (_l()(), textDef(null, ['\n            '])), (_l()(), textDef(null, ['\n            '])),
        (_l()(), elementDef(0, null, null, 27, 'tbody', [], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() alignStart: boolean'])),
        (_l()(), textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Makes section aligns to the start.'])),
        (_l()(), textDef(null, ['\n            '])), (_l()(), textDef(null, ['\n            '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() alignEnd: boolean'])),
        (_l()(), textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Makes section aligns to the end.'])),
        (_l()(), textDef(null, ['\n            '])), (_l()(), textDef(null, ['\n            '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() shrinkToFit: boolean'])),
        (_l()(), textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Makes section takes the width of its content.'])),
        (_l()(), textDef(null, ['\n            '])), (_l()(), textDef(null, ['\n            '])), (_l()(), textDef(null, ['\n        '])), (_l()(),
            textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 66, 'table', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n            '])), (_l()(),
            elementDef(0, null, null, 7, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n                    '])),
        (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Directive'])), (_l()(), textDef(null, ['\n                '])), (_l()(),
            textDef(null, ['\n            '])), (_l()(), textDef(null, ['\n            '])), (_l()(), elementDef(0, null, null, 54, 'tbody', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n                    '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-toolbar-row'])), (_l()(), textDef(null, ['\n                    '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['MDC Toolbars can accommodate multiple rows.'])), (_l()(), textDef(null, ['\n                '])), (_l()(), textDef(null, ['\n                '])),
        (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n                    '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-toolbar-title'])), (_l()(),
            textDef(null, ['\n                    '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Styles toolbar text representing a page\'s title, or an application name.'])),
        (_l()(), textDef(null, ['\n                '])), (_l()(), textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n                    '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-toolbar-fixed-adjust'])), (_l()(), textDef(null, ['\n                    '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Optional directive to add a default margin-top to mdc-toolbar\'s adjacent sibling element.'])),
        (_l()(), textDef(null, ['\n                '])), (_l()(), textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 11, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n                    '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-toolbar-icon-menu'])), (_l()(), textDef(null, ['\n                    '])),
        (_l()(), elementDef(0, null, null, 5, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Left most icon of a mdc-toolbar.\n                        '])), (_l()(),
            elementDef(0, null, null, 2, 'pre', [], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 1, 'code', [], null, null, null, null, null)), (_l()(), textDef(null, ['a[mdc-toolbar-icon-menu]\nbutton[mdc-toolbar-icon-menu]\nspan[mdc-toolbar-icon-menu]\n'])),
        (_l()(), textDef(null, ['\n                    '])), (_l()(), textDef(null, ['\n                '])), (_l()(), textDef(null, ['\n                '])),
        (_l()(), elementDef(0, null, null, 11, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n                    '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-toolbar-icon'])), (_l()(),
            textDef(null, ['\n                    '])), (_l()(), elementDef(0, null, null, 5, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Icons placed on the right side of a mdc-toolbar.\n                        '])),
        (_l()(), elementDef(0, null, null, 2, 'pre', [], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 1, 'code', [], null, null, null, null, null)), (_l()(), textDef(null, ['a[mdc-toolbar-icon]\nbutton[mdc-toolbar-icon]\nspan[mdc-toolbar-icon]\n'])),
        (_l()(), textDef(null, ['\n                    '])), (_l()(), textDef(null, ['\n                '])), (_l()(), textDef(null, ['\n            '])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 360, 'div', [['fxLayout', 'column']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0, 'layout'] }, null), (_l()(), textDef(null, ['\n        '])),
        (_l()(), elementDef(0, null, null, 75, 'div', [['class', 'mdc-padding'],
            ['fxLayout', 'row']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor,
            ElementRef, Renderer2], { layout: [0, 'layout'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers,
            ElementRef, Renderer, Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n            '])), (_l()(),
            elementDef(0, null, null, 16, 'mdc-form-field', [], [[8, 'className', 0]], null, null, null, null)),
        directiveDef(1196032, null, 3, material_es5_54, [Renderer2, ElementRef,
            undefined], null, null), queryDef(335544320, 1, { inputCheckbox: 0 }),
        queryDef(335544320, 2, { inputRadio: 0 }), queryDef(335544320, 3, { inputSwitch: 0 }), (_l()(),
            textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 6, 'mdc-checkbox', [], [[2, 'mdc-checkbox', null],
            [2, 'ng-untouched', null], [2, 'ng-touched', null], [2, 'ng-pristine',
                null], [2, 'ng-dirty', null], [2, 'ng-valid', null],
            [2, 'ng-invalid', null], [2, 'ng-pending', null]], [[null,
                'ngModelChange']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('ngModelChange' === en)) {
                var pd_0 = ((_co.isFixed = $event) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, View_CheckboxComponent_0, RenderType_CheckboxComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[1, 4]], 0, material_es5_17, [Renderer2, ElementRef, material_es5_74, undefined], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_17]), directiveDef(671744, null, 0, NgModel, [[8,
                null], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { model: [0, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 1, 'label', [], null, null, null, null, null)), (_l()(), textDef(null, ['Fixed toolbar'])), (_l()(),
            textDef(null, ['\n            '])), (_l()(), textDef(null, ['\n            '])), (_l()(), elementDef(0, null, null, 16, 'mdc-form-field', [], [[8, 'className', 0]], null, null, null, null)), directiveDef(1196032, null, 3, material_es5_54, [Renderer2,
            ElementRef, undefined], null, null), queryDef(335544320, 4, { inputCheckbox: 0 }),
        queryDef(335544320, 5, { inputRadio: 0 }), queryDef(335544320, 6, { inputSwitch: 0 }), (_l()(),
            textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 6, 'mdc-checkbox', [], [[2, 'mdc-checkbox', null],
            [2, 'ng-untouched', null], [2, 'ng-touched', null], [2, 'ng-pristine',
                null], [2, 'ng-dirty', null], [2, 'ng-valid', null],
            [2, 'ng-invalid', null], [2, 'ng-pending', null]], [[null,
                'ngModelChange']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('ngModelChange' === en)) {
                var pd_0 = ((_co.isFlexible = $event) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, View_CheckboxComponent_0, RenderType_CheckboxComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[4, 4]], 0, material_es5_17, [Renderer2, ElementRef, material_es5_74, undefined], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_17]), directiveDef(671744, null, 0, NgModel, [[8,
                null], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { model: [0, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 1, 'label', [], null, null, null, null, null)), (_l()(), textDef(null, ['Flexible toolbar'])), (_l()(),
            textDef(null, ['\n            '])), (_l()(), textDef(null, ['\n            '])), (_l()(), elementDef(0, null, null, 16, 'mdc-form-field', [], [[8, 'className', 0]], null, null, null, null)), directiveDef(1196032, null, 3, material_es5_54, [Renderer2,
            ElementRef, undefined], null, null), queryDef(335544320, 7, { inputCheckbox: 0 }),
        queryDef(335544320, 8, { inputRadio: 0 }), queryDef(335544320, 9, { inputSwitch: 0 }), (_l()(),
            textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 6, 'mdc-checkbox', [], [[2, 'mdc-checkbox', null],
            [2, 'ng-untouched', null], [2, 'ng-touched', null], [2, 'ng-pristine',
                null], [2, 'ng-dirty', null], [2, 'ng-valid', null],
            [2, 'ng-invalid', null], [2, 'ng-pending', null]], [[null,
                'ngModelChange']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('ngModelChange' === en)) {
                var pd_0 = ((_co.isWaterfall = $event) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, View_CheckboxComponent_0, RenderType_CheckboxComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[7, 4]], 0, material_es5_17, [Renderer2, ElementRef, material_es5_74, undefined], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_17]), directiveDef(671744, null, 0, NgModel, [[8,
                null], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { model: [0, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 1, 'label', [], null, null, null, null, null)), (_l()(), textDef(null, ['Waterfall toolbar'])), (_l()(),
            textDef(null, ['\n            '])), (_l()(), textDef(null, ['\n            '])), (_l()(), elementDef(0, null, null, 16, 'mdc-form-field', [], [[8, 'className', 0]], null, null, null, null)), directiveDef(1196032, null, 3, material_es5_54, [Renderer2,
            ElementRef, undefined], null, null), queryDef(335544320, 10, { inputCheckbox: 0 }),
        queryDef(335544320, 11, { inputRadio: 0 }), queryDef(335544320, 12, { inputSwitch: 0 }), (_l()(),
            textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 6, 'mdc-checkbox', [], [[2, 'mdc-checkbox', null],
            [2, 'ng-untouched', null], [2, 'ng-touched', null], [2, 'ng-pristine',
                null], [2, 'ng-dirty', null], [2, 'ng-valid', null],
            [2, 'ng-invalid', null], [2, 'ng-pending', null]], [[null,
                'ngModelChange']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('ngModelChange' === en)) {
                var pd_0 = ((_co.isFixedLastRow = $event) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, View_CheckboxComponent_0, RenderType_CheckboxComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[10, 4]], 0, material_es5_17, [Renderer2, ElementRef, material_es5_74, undefined], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_17]), directiveDef(671744, null, 0, NgModel, [[8,
                null], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { model: [0, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 1, 'label', [], null, null, null, null, null)), (_l()(), textDef(null, ['Fixed Lastrow'])), (_l()(),
            textDef(null, ['\n            '])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(),
            elementDef(0, null, null, 44, 'mdc-toolbar', [], [[2,
                    'mdc-toolbar', null], [2, 'mdc-toolbar--fixed', null],
                [2, 'mdc-toolbar--waterfall', null], [2, 'mdc-toolbar--flexible',
                    null], [2, 'mdc-toolbar--fixed-lastrow-only', null],
                [2, 'mdc-toolbar--flexible-default-behavior', null]], [[null,
                    'change']], function (_v, en, $event) {
                var ad = true;
                var _co = _v.component;
                if (('change' === en)) {
                    var pd_0 = (_co.handleToolbarChange($event) !== false);
                    ad = (pd_0 && ad);
                }
                return ad;
            }, View_ToolbarComponent_0, RenderType_ToolbarComponent)), directiveDef(4374528, null, 2, material_es5_101, [Renderer2, ElementRef, undefined], { flexible: [0,
                'flexible'], fixed: [1, 'fixed'], waterfall: [2, 'waterfall'], fixedLastrow: [3,
                'fixedLastrow'] }, { change: 'change' }), queryDef(335544320, 13, { mdcFirstRow: 0 }),
        queryDef(335544320, 14, { mdcTitle: 0 }), (_l()(), textDef(0, ['\n            '])), (_l()(),
            elementDef(0, null, 0, 15, 'mdc-toolbar-row', [], [[2, 'mdc-toolbar__row',
                    null]], null, null, null, null)),
        directiveDef(16384, [[13, 4]], 0, material_es5_102, [ElementRef], null, null), (_l()(), textDef(null, ['\n                '])), (_l()(),
            elementDef(0, null, null, 11, 'mdc-toolbar-section', [], [[2, 'mdc-toolbar__section', null], [2, 'mdc-toolbar__section--align-start',
                    null], [2, 'mdc-toolbar__section--align-end', null],
                [2, 'mdc-toolbar__section--shrink-to-fit', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_103, [], { alignStart: [0, 'alignStart'] }, null), (_l()(), textDef(null, ['\n                    '])),
        (_l()(), elementDef(0, null, null, 3, 'a', [['href', '#/toolbar-demo'],
            ['material-icon', ''], ['mdc-toolbar-icon-menu', '']], [[2, 'material-icons',
                null], [2, 'mdc-toolbar__icon--menu', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_65, [], null, null), directiveDef(16384, null, 0, material_es5_107, [ElementRef], null, null), (_l()(), textDef(null, ['menu'])), (_l()(), textDef(null, ['\n                    '])), (_l()(), elementDef(0, null, null, 2, 'mdc-toolbar-title', [], [[2, 'mdc-toolbar__title', null]], null, null, null, null)), directiveDef(16384, [[14, 4]], 0, material_es5_104, [ElementRef], null, null),
        (_l()(), textDef(null, ['App Title'])), (_l()(), textDef(null, ['\n                '])), (_l()(), textDef(null, ['\n            '])),
        (_l()(), textDef(0, ['\n            '])), (_l()(), elementDef(0, null, 0, 21, 'mdc-toolbar-row', [], [[2, 'mdc-toolbar__row', null]], null, null, null, null)), directiveDef(16384, [[13, 4]], 0, material_es5_102, [ElementRef], null, null), (_l()(), textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 17, 'mdc-toolbar-section', [], [[2, 'mdc-toolbar__section', null],
            [2, 'mdc-toolbar__section--align-start', null], [2, 'mdc-toolbar__section--align-end',
                null], [2, 'mdc-toolbar__section--shrink-to-fit', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_103, [], { alignEnd: [0, 'alignEnd'] }, null), (_l()(), textDef(null, ['\n                    '])),
        (_l()(), elementDef(0, null, null, 3, 'a', [['href', '#/toolbar-demo'],
            ['material-icon', ''], ['mdc-toolbar-icon', '']], [[2, 'material-icons', null],
            [2, 'mdc-toolbar__icon', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_65, [], null, null), directiveDef(16384, null, 0, material_es5_106, [ElementRef], null, null), (_l()(), textDef(null, ['file_download'])), (_l()(), textDef(null, ['\n                    '])),
        (_l()(), elementDef(0, null, null, 3, 'a', [['href', '#/toolbar-demo'],
            ['material-icon', ''], ['mdc-toolbar-icon', '']], [[2, 'material-icons', null],
            [2, 'mdc-toolbar__icon', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_65, [], null, null), directiveDef(16384, null, 0, material_es5_106, [ElementRef], null, null), (_l()(), textDef(null, ['print'])), (_l()(), textDef(null, ['\n                    '])), (_l()(),
            elementDef(0, null, null, 3, 'a', [['href', '#/toolbar-demo'], ['material-icon',
                    ''], ['mdc-toolbar-icon', '']], [[2, 'material-icons', null], [2,
                    'mdc-toolbar__icon', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_65, [], null, null), directiveDef(16384, null, 0, material_es5_106, [ElementRef], null, null), (_l()(), textDef(null, ['bookmark'])), (_l()(), textDef(null, ['\n                '])), (_l()(),
            textDef(null, ['\n            '])), (_l()(), textDef(0, ['\n        '])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 1, 'p', [['style', 'padding-right: 12px;']], null, null, null, null, null)), (_l()(), textDef(null, ['Flexible Expansion Ratio: ', ''])), (_l()(), textDef(null, ['\n        '])),
        (_l()(), elementDef(0, null, null, 230, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)),
        (_l()(), elementDef(0, null, null, 36, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-toolbar'])), (_l()(), textDef(null, ['\n  ['])),
        (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['flexible'])), (_l()(), textDef(null, [']='])),
        (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)),
        (_l()(), textDef(null, ['"isFlexible"'])), (_l()(), textDef(null, ['\n  ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['fixed'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"isFixed"'])), (_l()(), textDef(null, ['\n  ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['waterfall'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"isWaterfall"'])), (_l()(),
            textDef(null, ['\n  ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['fixedLastrow'])),
        (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"isFixedLastRow"'])),
        (_l()(), textDef(null, ['\n  ('])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['change'])),
        (_l()(), textDef(null, [')='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"handleToolbarChange($event);"'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-toolbar-row'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 12, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-toolbar-section'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['alignStart'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 16, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['a'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['href'])), (_l()(), textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"#"'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-toolbar-icon-menu'])), (_l()(), textDef(null, [' '])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['material-icon'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['menu'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['a'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-toolbar-title'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['App Title'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-toolbar-title'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-toolbar-section'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-toolbar-row'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-toolbar-row'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 12, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-toolbar-section'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['alignEnd'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 16, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['a'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['href'])), (_l()(), textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"#/toolbar-demo"'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-toolbar-icon'])),
        (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['material-icon'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['file_download'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['a'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n      '])),
        (_l()(), elementDef(0, null, null, 16, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['a'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['href'])), (_l()(),
            textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"#/toolbar-demo"'])),
        (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-toolbar-icon'])),
        (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['material-icon'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['print'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['a'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n      '])),
        (_l()(), elementDef(0, null, null, 16, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['a'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['href'])), (_l()(),
            textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"#/toolbar-demo"'])),
        (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-toolbar-icon'])),
        (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['material-icon'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['bookmark'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['a'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-toolbar-section'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-toolbar-row'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-toolbar'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n']))], function (_ck, _v) {
        var _co = _v.component;
        var currVal_0 = 'column';
        _ck(_v, 1, 0, currVal_0);
        var currVal_1 = 'start start';
        _ck(_v, 2, 0, currVal_1);
        var currVal_2 = 'mdc-padding';
        _ck(_v, 3, 0, currVal_2);
        var currVal_6 = 'info-banner';
        _ck(_v, 14, 0, currVal_6);
        var currVal_7 = 'docs-api';
        _ck(_v, 21, 0, currVal_7);
        var currVal_8 = 'column';
        _ck(_v, 264, 0, currVal_8);
        var currVal_9 = 'row';
        _ck(_v, 267, 0, currVal_9);
        var currVal_10 = 'mdc-padding';
        _ck(_v, 268, 0, currVal_10);
        var currVal_20 = _co.isFixed;
        _ck(_v, 280, 0, currVal_20);
        var currVal_30 = _co.isFlexible;
        _ck(_v, 298, 0, currVal_30);
        var currVal_40 = _co.isWaterfall;
        _ck(_v, 316, 0, currVal_40);
        var currVal_50 = _co.isFixedLastRow;
        _ck(_v, 334, 0, currVal_50);
        var currVal_57 = _co.isFlexible;
        var currVal_58 = _co.isFixed;
        var currVal_59 = _co.isWaterfall;
        var currVal_60 = _co.isFixedLastRow;
        _ck(_v, 344, 0, currVal_57, currVal_58, currVal_59, currVal_60);
        var currVal_66 = true;
        _ck(_v, 352, 0, currVal_66);
        var currVal_75 = true;
        _ck(_v, 369, 0, currVal_75);
    }, function (_ck, _v) {
        var _co = _v.component;
        var currVal_3 = nodeValue(_v, 6).isHostClass;
        _ck(_v, 5, 0, currVal_3);
        var currVal_4 = nodeValue(_v, 10).isHostClass;
        _ck(_v, 9, 0, currVal_4);
        var currVal_5 = nodeValue(_v, 15).isHostClass;
        _ck(_v, 13, 0, currVal_5);
        var currVal_11 = nodeValue(_v, 271).className;
        _ck(_v, 270, 0, currVal_11);
        var currVal_12 = nodeValue(_v, 278).isHostClass;
        var currVal_13 = nodeValue(_v, 282).ngClassUntouched;
        var currVal_14 = nodeValue(_v, 282).ngClassTouched;
        var currVal_15 = nodeValue(_v, 282).ngClassPristine;
        var currVal_16 = nodeValue(_v, 282).ngClassDirty;
        var currVal_17 = nodeValue(_v, 282).ngClassValid;
        var currVal_18 = nodeValue(_v, 282).ngClassInvalid;
        var currVal_19 = nodeValue(_v, 282).ngClassPending;
        _ck(_v, 276, 0, currVal_12, currVal_13, currVal_14, currVal_15, currVal_16, currVal_17, currVal_18, currVal_19);
        var currVal_21 = nodeValue(_v, 289).className;
        _ck(_v, 288, 0, currVal_21);
        var currVal_22 = nodeValue(_v, 296).isHostClass;
        var currVal_23 = nodeValue(_v, 300).ngClassUntouched;
        var currVal_24 = nodeValue(_v, 300).ngClassTouched;
        var currVal_25 = nodeValue(_v, 300).ngClassPristine;
        var currVal_26 = nodeValue(_v, 300).ngClassDirty;
        var currVal_27 = nodeValue(_v, 300).ngClassValid;
        var currVal_28 = nodeValue(_v, 300).ngClassInvalid;
        var currVal_29 = nodeValue(_v, 300).ngClassPending;
        _ck(_v, 294, 0, currVal_22, currVal_23, currVal_24, currVal_25, currVal_26, currVal_27, currVal_28, currVal_29);
        var currVal_31 = nodeValue(_v, 307).className;
        _ck(_v, 306, 0, currVal_31);
        var currVal_32 = nodeValue(_v, 314).isHostClass;
        var currVal_33 = nodeValue(_v, 318).ngClassUntouched;
        var currVal_34 = nodeValue(_v, 318).ngClassTouched;
        var currVal_35 = nodeValue(_v, 318).ngClassPristine;
        var currVal_36 = nodeValue(_v, 318).ngClassDirty;
        var currVal_37 = nodeValue(_v, 318).ngClassValid;
        var currVal_38 = nodeValue(_v, 318).ngClassInvalid;
        var currVal_39 = nodeValue(_v, 318).ngClassPending;
        _ck(_v, 312, 0, currVal_32, currVal_33, currVal_34, currVal_35, currVal_36, currVal_37, currVal_38, currVal_39);
        var currVal_41 = nodeValue(_v, 325).className;
        _ck(_v, 324, 0, currVal_41);
        var currVal_42 = nodeValue(_v, 332).isHostClass;
        var currVal_43 = nodeValue(_v, 336).ngClassUntouched;
        var currVal_44 = nodeValue(_v, 336).ngClassTouched;
        var currVal_45 = nodeValue(_v, 336).ngClassPristine;
        var currVal_46 = nodeValue(_v, 336).ngClassDirty;
        var currVal_47 = nodeValue(_v, 336).ngClassValid;
        var currVal_48 = nodeValue(_v, 336).ngClassInvalid;
        var currVal_49 = nodeValue(_v, 336).ngClassPending;
        _ck(_v, 330, 0, currVal_42, currVal_43, currVal_44, currVal_45, currVal_46, currVal_47, currVal_48, currVal_49);
        var currVal_51 = nodeValue(_v, 344).isHostClass;
        var currVal_52 = nodeValue(_v, 344).classFixedToolbar;
        var currVal_53 = nodeValue(_v, 344).classWaterfallToolbar;
        var currVal_54 = nodeValue(_v, 344).classFlexibleToolbar;
        var currVal_55 = nodeValue(_v, 344).classFixedLastrow;
        var currVal_56 = nodeValue(_v, 344).classFlexibleDefaultBehavior;
        _ck(_v, 343, 0, currVal_51, currVal_52, currVal_53, currVal_54, currVal_55, currVal_56);
        var currVal_61 = nodeValue(_v, 349).isHostClass;
        _ck(_v, 348, 0, currVal_61);
        var currVal_62 = nodeValue(_v, 352).isHostClass;
        var currVal_63 = nodeValue(_v, 352).classAlignStart;
        var currVal_64 = nodeValue(_v, 352).classAlignEnd;
        var currVal_65 = nodeValue(_v, 352).classShrinkToFit;
        _ck(_v, 351, 0, currVal_62, currVal_63, currVal_64, currVal_65);
        var currVal_67 = nodeValue(_v, 355).isHostClass;
        var currVal_68 = nodeValue(_v, 356).isHostClass;
        _ck(_v, 354, 0, currVal_67, currVal_68);
        var currVal_69 = nodeValue(_v, 360).isHostClass;
        _ck(_v, 359, 0, currVal_69);
        var currVal_70 = nodeValue(_v, 366).isHostClass;
        _ck(_v, 365, 0, currVal_70);
        var currVal_71 = nodeValue(_v, 369).isHostClass;
        var currVal_72 = nodeValue(_v, 369).classAlignStart;
        var currVal_73 = nodeValue(_v, 369).classAlignEnd;
        var currVal_74 = nodeValue(_v, 369).classShrinkToFit;
        _ck(_v, 368, 0, currVal_71, currVal_72, currVal_73, currVal_74);
        var currVal_76 = nodeValue(_v, 372).isHostClass;
        var currVal_77 = nodeValue(_v, 373).isHostClass;
        _ck(_v, 371, 0, currVal_76, currVal_77);
        var currVal_78 = nodeValue(_v, 377).isHostClass;
        var currVal_79 = nodeValue(_v, 378).isHostClass;
        _ck(_v, 376, 0, currVal_78, currVal_79);
        var currVal_80 = nodeValue(_v, 382).isHostClass;
        var currVal_81 = nodeValue(_v, 383).isHostClass;
        _ck(_v, 381, 0, currVal_80, currVal_81);
        var currVal_82 = _co.flexibleExpansionRatio;
        _ck(_v, 390, 0, currVal_82);
    });
}
function View_ToolbarDemoComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1, 'toolbar-demo', [], null, null, null, View_ToolbarDemoComponent_0, RenderType_ToolbarDemoComponent)), directiveDef(49152, null, 0, ToolbarDemoComponent, [], null, null)], null, null);
}
var ToolbarDemoComponentNgFactory = createComponentFactory('toolbar-demo', ToolbarDemoComponent, View_ToolbarDemoComponent_Host_0, {}, {}, []);

/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
/* tslint:disable */
var styles_LinearProgressDemoComponent = [];
var RenderType_LinearProgressDemoComponent = createRendererType2({ encapsulation: 2,
    styles: styles_LinearProgressDemoComponent, data: {} });
function View_LinearProgressDemoComponent_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 285, 'div', [['class',
                'mdc-padding'], ['fxLayout', 'column'], ['fxLayoutAlign', 'start start']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0,
                'layout'] }, null), directiveDef(737280, null, 0, LayoutAlignDirective, [MediaMonitor, ElementRef, Renderer2, [2, LayoutDirective]], { align: [0,
                'align'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 2, 'h1', [['mdc-typography-display1',
                '']], [[2, 'mdc-typography--display1', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['Linear Progress'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 2, 'div', [['mdc-typography-subheading2', '']], [[2, 'mdc-typography--subheading2',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, undefined, [], null, null),
        (_l()(), textDef(null, ['The MDC Linear Progress component is a spec-aligned linear progress indicator component adhering to the Material Design progress & activity requirements.'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 5, 'div', [['class', 'info-banner'], ['mdc-typography-subheading1', '']], [[2,
                'mdc-typography--subheading1', null]], null, null, null, null)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(),
            textDef(null, ['\n    '])), (_l()(), textDef(null, ['import { LinearProgressModule } from \'@angular-mdc/web\';'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 116, 'div', [['class', 'docs-api']], null, null, null, null, null)),
        directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers,
            KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0,
                'classBase'] }, null), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 112, 'table', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'thead', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Component'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-linear-progress'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Properties'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 28, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() indeterminate: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Puts the linear progress indicator in an indeterminate state.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() reversed: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Reverses the direction of the linear progress indicator.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() accent: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Colors the button with the accent color.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Methods'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Parameters'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 37, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['open()'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Puts the component in the open state.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['close()'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Puts the component in the closed state.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['setProgress(value: number)'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Sets the progress bar to this value. Value should be between [0, 1].'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['setBuffer(value: number)'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Sets the buffer bar to this value. Value should be between [0, 1].'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 32, 'div', [['class', 'mdc-padding'], ['fxLayout', 'column']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0, 'layout'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 1, 'mdc-linear-progress', [], [[1, 'role', 0], [2, 'mdc-linear-progress', null], [2, 'mdc-linear-progress--accent',
                null]], null, null, View_LinearProgressComponent_0, RenderType_LinearProgressComponent)), directiveDef(4243456, null, 0, material_es5_56, [Renderer2, ElementRef], { indeterminate: [0,
                'indeterminate'] }, null), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 1, 'p', [], null, null, null, null, null)), (_l()(), textDef(null, ['Indeterminate'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 21, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)),
        (_l()(), elementDef(0, null, null, 12, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-linear-progress'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['indeterminate'])), (_l()(),
            textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])),
        (_l()(), textDef(null, ['>'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-linear-progress'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 32, 'div', [['class', 'mdc-padding'],
            ['fxLayout', 'column']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor,
            ElementRef, Renderer2], { layout: [0, 'layout'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers,
            ElementRef, Renderer, Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 1, 'mdc-linear-progress', [], [[1, 'role',
                0], [2, 'mdc-linear-progress', null], [2, 'mdc-linear-progress--accent',
                null]], null, null, View_LinearProgressComponent_0, RenderType_LinearProgressComponent)), directiveDef(4243456, null, 0, material_es5_56, [Renderer2, ElementRef], { indeterminate: [0,
                'indeterminate'] }, null), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 1, 'p', [], null, null, null, null, null)), (_l()(), textDef(null, ['Determinate'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 21, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)),
        (_l()(), elementDef(0, null, null, 12, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-linear-progress'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['indeterminate'])), (_l()(),
            textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"false"'])),
        (_l()(), textDef(null, ['>'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-linear-progress'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])),
        (_l()(), textDef(null, [' '])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 38, 'div', [['class', 'mdc-padding'],
            ['fxLayout', 'column']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor,
            ElementRef, Renderer2], { layout: [0, 'layout'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers,
            ElementRef, Renderer, Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 1, 'mdc-linear-progress', [], [[1, 'role',
                0], [2, 'mdc-linear-progress', null], [2, 'mdc-linear-progress--accent',
                null]], null, null, View_LinearProgressComponent_0, RenderType_LinearProgressComponent)), directiveDef(4243456, null, 0, material_es5_56, [Renderer2, ElementRef], { indeterminate: [0,
                'indeterminate'], reversed: [1, 'reversed'] }, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 1, 'p', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Reversed'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 27, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)),
        (_l()(), elementDef(0, null, null, 18, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-linear-progress'])), (_l()(), textDef(null, ['\n  ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['reversed'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['\n  ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['indeterminate'])), (_l()(),
            textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])),
        (_l()(), textDef(null, ['>'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-linear-progress'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])),
        (_l()(), textDef(null, [' '])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 38, 'div', [['class', 'mdc-padding'],
            ['fxLayout', 'column']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor,
            ElementRef, Renderer2], { layout: [0, 'layout'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers,
            ElementRef, Renderer, Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 1, 'mdc-linear-progress', [], [[1, 'role',
                0], [2, 'mdc-linear-progress', null], [2, 'mdc-linear-progress--accent',
                null]], null, null, View_LinearProgressComponent_0, RenderType_LinearProgressComponent)), directiveDef(4243456, null, 0, material_es5_56, [Renderer2, ElementRef], { indeterminate: [0,
                'indeterminate'], accent: [1, 'accent'] }, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 1, 'p', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Accent'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 27, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)),
        (_l()(), elementDef(0, null, null, 18, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-linear-progress'])), (_l()(), textDef(null, ['\n  ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['indeterminate'])), (_l()(),
            textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])),
        (_l()(), textDef(null, ['\n  ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['accent'])),
        (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])),
        (_l()(), textDef(null, ['>'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-linear-progress'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])),
        (_l()(), textDef(null, [' '])), (_l()(), textDef(null, ['\n'])),
        (_l()(), textDef(null, ['\n']))], function (_ck, _v) {
        var currVal_0 = 'column';
        _ck(_v, 1, 0, currVal_0);
        var currVal_1 = 'start start';
        _ck(_v, 2, 0, currVal_1);
        var currVal_2 = 'mdc-padding';
        _ck(_v, 3, 0, currVal_2);
        var currVal_6 = 'info-banner';
        _ck(_v, 14, 0, currVal_6);
        var currVal_7 = 'docs-api';
        _ck(_v, 21, 0, currVal_7);
        var currVal_8 = 'column';
        _ck(_v, 139, 0, currVal_8);
        var currVal_9 = 'mdc-padding';
        _ck(_v, 140, 0, currVal_9);
        var currVal_13 = true;
        _ck(_v, 143, 0, currVal_13);
        var currVal_14 = 'column';
        _ck(_v, 173, 0, currVal_14);
        var currVal_15 = 'mdc-padding';
        _ck(_v, 174, 0, currVal_15);
        var currVal_19 = false;
        _ck(_v, 177, 0, currVal_19);
        var currVal_20 = 'column';
        _ck(_v, 207, 0, currVal_20);
        var currVal_21 = 'mdc-padding';
        _ck(_v, 208, 0, currVal_21);
        var currVal_25 = true;
        var currVal_26 = true;
        _ck(_v, 211, 0, currVal_25, currVal_26);
        var currVal_27 = 'column';
        _ck(_v, 247, 0, currVal_27);
        var currVal_28 = 'mdc-padding';
        _ck(_v, 248, 0, currVal_28);
        var currVal_32 = true;
        var currVal_33 = true;
        _ck(_v, 251, 0, currVal_32, currVal_33);
    }, function (_ck, _v) {
        var currVal_3 = nodeValue(_v, 6).isHostClass;
        _ck(_v, 5, 0, currVal_3);
        var currVal_4 = nodeValue(_v, 10).isHostClass;
        _ck(_v, 9, 0, currVal_4);
        var currVal_5 = nodeValue(_v, 15).isHostClass;
        _ck(_v, 13, 0, currVal_5);
        var currVal_10 = nodeValue(_v, 143).role;
        var currVal_11 = nodeValue(_v, 143).isHostClass;
        var currVal_12 = nodeValue(_v, 143).classAccent;
        _ck(_v, 142, 0, currVal_10, currVal_11, currVal_12);
        var currVal_16 = nodeValue(_v, 177).role;
        var currVal_17 = nodeValue(_v, 177).isHostClass;
        var currVal_18 = nodeValue(_v, 177).classAccent;
        _ck(_v, 176, 0, currVal_16, currVal_17, currVal_18);
        var currVal_22 = nodeValue(_v, 211).role;
        var currVal_23 = nodeValue(_v, 211).isHostClass;
        var currVal_24 = nodeValue(_v, 211).classAccent;
        _ck(_v, 210, 0, currVal_22, currVal_23, currVal_24);
        var currVal_29 = nodeValue(_v, 251).role;
        var currVal_30 = nodeValue(_v, 251).isHostClass;
        var currVal_31 = nodeValue(_v, 251).classAccent;
        _ck(_v, 250, 0, currVal_29, currVal_30, currVal_31);
    });
}
function View_LinearProgressDemoComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1, 'linear-progress-demo', [], null, null, null, View_LinearProgressDemoComponent_0, RenderType_LinearProgressDemoComponent)), directiveDef(49152, null, 0, LinearProgressDemoComponent, [], null, null)], null, null);
}
var LinearProgressDemoComponentNgFactory = createComponentFactory('linear-progress-demo', LinearProgressDemoComponent, View_LinearProgressDemoComponent_Host_0, {}, {}, []);

/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
/* tslint:disable */
var styles_TypographyDemoComponent = [];
var RenderType_TypographyDemoComponent = createRendererType2({ encapsulation: 2,
    styles: styles_TypographyDemoComponent, data: {} });
function View_TypographyDemoComponent_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 283, 'div', [['class',
                'mdc-padding'], ['fxLayout', 'column'], ['fxLayoutAlign', 'start start']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0,
                'layout'] }, null), directiveDef(737280, null, 0, LayoutAlignDirective, [MediaMonitor, ElementRef, Renderer2, [2, LayoutDirective]], { align: [0,
                'align'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 2, 'h1', [['mdc-typography-display1',
                '']], [[2, 'mdc-typography--display1', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['Typography'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 2, 'div', [['mdc-typography-subheading2', '']], [[2, 'mdc-typography--subheading2',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, undefined, [], null, null),
        (_l()(), textDef(null, ['The MDC Typography directives implement the Material Design typography guidelines.'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 5, 'div', [['class', 'info-banner'], ['mdc-typography-subheading1', '']], [[2,
                'mdc-typography--subheading1', null]], null, null, null, null)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(),
            textDef(null, ['\n    '])), (_l()(), textDef(null, ['import { TypographyModule } from \'@angular-mdc/web\';'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 262, 'div', [['class', 'docs-api']], null, null, null, null, null)),
        directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers,
            KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0,
                'classBase'] }, null), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 159, 'table', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Directive'])), (_l()(), textDef(null, ['\n          '])), (_l()(),
            elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Format'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 144, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 11, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-typography-body1'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 5, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n            '])),
        (_l()(), elementDef(0, null, null, 2, 'div', [['mdc-typography-body1',
                '']], [[2, 'mdc-typography--body1', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['Body 1'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(),
            elementDef(0, null, null, 11, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc-typography-body2'])), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 5, 'td', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n            '])), (_l()(), elementDef(0, null, null, 2, 'div', [['mdc-typography-body2', '']], [[2, 'mdc-typography--body2',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, undefined, [], null, null),
        (_l()(), textDef(null, ['Body 2'])), (_l()(), textDef(null, ['\n          '])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 11, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-typography-subheading1'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 5, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n            '])),
        (_l()(), elementDef(0, null, null, 2, 'div', [['mdc-typography-subheading1',
                '']], [[2, 'mdc-typography--subheading1', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['Subheading 1'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(),
            elementDef(0, null, null, 11, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc-typography-subheading2'])), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 5, 'td', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n            '])), (_l()(), elementDef(0, null, null, 2, 'div', [['mdc-typography-subheading2', '']], [[2, 'mdc-typography--subheading2',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, undefined, [], null, null),
        (_l()(), textDef(null, ['Subheading 2'])), (_l()(), textDef(null, ['\n          '])), (_l()(), textDef(null, ['\n        '])), (_l()(),
            textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 11, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])), (_l()(),
            elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-typography-caption'])), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 5, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n            '])), (_l()(), elementDef(0, null, null, 2, 'div', [['mdc-typography-caption', '']], [[2, 'mdc-typography--caption', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(),
            textDef(null, ['Caption'])), (_l()(), textDef(null, ['\n          '])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 11, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-typography-title'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 5, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n            '])),
        (_l()(), elementDef(0, null, null, 2, 'div', [['mdc-typography-title',
                '']], [[2, 'mdc-typography--title', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['Title'])), (_l()(),
            textDef(null, ['\n          '])), (_l()(), textDef(null, ['\n        '])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 11, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-typography-headline'])), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 5, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n            '])), (_l()(), elementDef(0, null, null, 2, 'div', [['mdc-typography-headline', '']], [[2, 'mdc-typography--headline', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(),
            textDef(null, ['Headline'])), (_l()(), textDef(null, ['\n          '])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 11, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-typography-display1'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 5, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n            '])),
        (_l()(), elementDef(0, null, null, 2, 'div', [['mdc-typography-display1',
                '']], [[2, 'mdc-typography--display1', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['Display 1'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(),
            elementDef(0, null, null, 11, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc-typography-display2'])), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 5, 'td', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n            '])), (_l()(), elementDef(0, null, null, 2, 'div', [['mdc-typography-display2', '']], [[2, 'mdc-typography--display2',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, undefined, [], null, null),
        (_l()(), textDef(null, ['Display 2'])), (_l()(), textDef(null, ['\n          '])), (_l()(), textDef(null, ['\n        '])), (_l()(),
            textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 11, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])), (_l()(),
            elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-typography-display3'])), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 5, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n            '])), (_l()(), elementDef(0, null, null, 2, 'div', [['mdc-typography-display3', '']], [[2, 'mdc-typography--display3', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(),
            textDef(null, ['Display 3'])), (_l()(), textDef(null, ['\n          '])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 11, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-typography-display4'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 5, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n            '])),
        (_l()(), elementDef(0, null, null, 2, 'div', [['mdc-typography-display4',
                '']], [[2, 'mdc-typography--display4', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['Display 4'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 97, 'table', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 9, 'thead', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 6, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-typography-adjust-margin'])), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 0, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 83, 'tbody', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 80, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 75, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n            '])), (_l()(), elementDef(0, null, null, 69, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 7, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['body'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-typography'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 10, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['h1'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-typography-display'])),
        (_l()(), textDef(null, ['4 '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-typography-adjust-margin'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    Big header\n  '])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['h1'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 10, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['p'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-typography-body'])),
        (_l()(), textDef(null, ['1 '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-typography-adjust-margin'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    A paragraph with\n    '])),
        (_l()(), elementDef(0, null, null, 10, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['span'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-typography-body'])),
        (_l()(), textDef(null, ['2 '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-typography-adjust-margin'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n      emphasis.\n    '])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['span'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 4, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['p'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(),
            elementDef(0, null, null, 4, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['body'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(),
            textDef(null, ['\n            '])), (_l()(), elementDef(0, null, null, 1, 'p', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n              In order to minimize unexpected behavior, the style classes only specify font properties, such as size, weight and line height. This means that while text will be correctly styled, it may not be correctly positioned. If you include the mdc-typography--adjust-margin class, though, positioning will be adjusted according to the style'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 0, 'td', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n']))], function (_ck, _v) {
        var currVal_0 = 'column';
        _ck(_v, 1, 0, currVal_0);
        var currVal_1 = 'start start';
        _ck(_v, 2, 0, currVal_1);
        var currVal_2 = 'mdc-padding';
        _ck(_v, 3, 0, currVal_2);
        var currVal_6 = 'info-banner';
        _ck(_v, 14, 0, currVal_6);
        var currVal_7 = 'docs-api';
        _ck(_v, 21, 0, currVal_7);
    }, function (_ck, _v) {
        var currVal_3 = nodeValue(_v, 6).isHostClass;
        _ck(_v, 5, 0, currVal_3);
        var currVal_4 = nodeValue(_v, 10).isHostClass;
        _ck(_v, 9, 0, currVal_4);
        var currVal_5 = nodeValue(_v, 15).isHostClass;
        _ck(_v, 13, 0, currVal_5);
        var currVal_8 = nodeValue(_v, 47).isHostClass;
        _ck(_v, 46, 0, currVal_8);
        var currVal_9 = nodeValue(_v, 60).isHostClass;
        _ck(_v, 59, 0, currVal_9);
        var currVal_10 = nodeValue(_v, 73).isHostClass;
        _ck(_v, 72, 0, currVal_10);
        var currVal_11 = nodeValue(_v, 86).isHostClass;
        _ck(_v, 85, 0, currVal_11);
        var currVal_12 = nodeValue(_v, 99).isHostClass;
        _ck(_v, 98, 0, currVal_12);
        var currVal_13 = nodeValue(_v, 112).isHostClass;
        _ck(_v, 111, 0, currVal_13);
        var currVal_14 = nodeValue(_v, 125).isHostClass;
        _ck(_v, 124, 0, currVal_14);
        var currVal_15 = nodeValue(_v, 138).isHostClass;
        _ck(_v, 137, 0, currVal_15);
        var currVal_16 = nodeValue(_v, 151).isHostClass;
        _ck(_v, 150, 0, currVal_16);
        var currVal_17 = nodeValue(_v, 164).isHostClass;
        _ck(_v, 163, 0, currVal_17);
        var currVal_18 = nodeValue(_v, 177).isHostClass;
        _ck(_v, 176, 0, currVal_18);
    });
}
function View_TypographyDemoComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1, 'typography-progress-demo', [], null, null, null, View_TypographyDemoComponent_0, RenderType_TypographyDemoComponent)), directiveDef(49152, null, 0, TypographyDemoComponent, [], null, null)], null, null);
}
var TypographyDemoComponentNgFactory = createComponentFactory('typography-progress-demo', TypographyDemoComponent, View_TypographyDemoComponent_Host_0, {}, {}, []);

/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
/* tslint:disable */
var styles_RadioDemoComponent = [];
var RenderType_RadioDemoComponent = createRendererType2({ encapsulation: 2,
    styles: styles_RadioDemoComponent, data: {} });
function View_RadioDemoComponent_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 488, 'div', [['class',
                'mdc-padding'], ['fxLayout', 'column'], ['fxLayoutAlign', 'start start']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0,
                'layout'] }, null), directiveDef(737280, null, 0, LayoutAlignDirective, [MediaMonitor, ElementRef, Renderer2, [2, LayoutDirective]], { align: [0,
                'align'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 2, 'h1', [['mdc-typography-display1',
                '']], [[2, 'mdc-typography--display1', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['Radio Button'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 2, 'div', [['mdc-typography-subheading2', '']], [[2, 'mdc-typography--subheading2',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, undefined, [], null, null),
        (_l()(), textDef(null, ['The MDC Radio Button component provides a radio button adhering to the Material Design Specification.'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 5, 'div', [['class', 'info-banner'], ['mdc-typography-subheading1', '']], [[2,
                'mdc-typography--subheading1', null]], null, null, null, null)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(),
            textDef(null, ['\n    '])), (_l()(), textDef(null, ['import { RadioModule } from \'@angular-mdc/web\';'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 137, 'div', [['class', 'docs-api']], null, null, null, null, null)),
        directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers,
            KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0,
                'classBase'] }, null), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 133, 'table', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'thead', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Component'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-radio'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Properties'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 76, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() id: string'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Unique Id of the radio button (auto generated if not supplied).'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() name: string'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Name of the radio button group.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() value: any'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Value of the radio button.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() ariaLabel: string'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Used to set the \'aria-label\' attribute on the underlying input element.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() ariaLabelledby: string'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['The \'aria-labelledby\' attribute takes precedence as the element\'s text alternative.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() checked: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Use to verify the checked value.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() disabled: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Disables the component.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 10, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() disableRipple: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 4, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n'])), (_l()(),
            elementDef(0, null, null, 2, 'pre', [], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 1, 'code', [], null, null, null, null, null)), (_l()(), textDef(null, ['Disable the ink ripple.\nExample: disableRipple="true" or disableRipple'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Event'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Output() change'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Event dispatched on value change.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 328, 'div', [['class', 'mdc-padding'], ['fxLayout', 'column']], null, null, null, null, null)),
        directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef,
            Renderer2], { layout: [0, 'layout'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers,
            ElementRef, Renderer, Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 248, 'div', [['fxFlexAlign', 'start']], null, null, null, null, null)), directiveDef(737280, null, 0, FlexAlignDirective, [MediaMonitor, ElementRef, Renderer2], { align: [0, 'align'] }, null), (_l()(), textDef(null, ['\n      '])),
        (_l()(), elementDef(0, null, null, 16, 'mdc-form-field', [], [[8, 'className', 0]], null, null, null, null)),
        directiveDef(1196032, null, 3, material_es5_54, [Renderer2, ElementRef,
            undefined], null, null), queryDef(335544320, 1, { inputCheckbox: 0 }),
        queryDef(335544320, 2, { inputRadio: 0 }), queryDef(335544320, 3, { inputSwitch: 0 }), (_l()(),
            textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 6, 'mdc-radio', [['name', 'radioGroup'], ['value', 'apple']], [[2, 'mdc-radio',
                null], [2, 'ng-untouched', null], [2, 'ng-touched', null],
            [2, 'ng-pristine', null], [2, 'ng-dirty', null], [2, 'ng-valid',
                null], [2, 'ng-invalid', null], [2, 'ng-pending', null]], [[null, 'ngModelChange']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('ngModelChange' === en)) {
                var pd_0 = ((_co.radioOption = $event) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, View_RadioComponent_0, RenderType_RadioComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[2, 4]], 0, material_es5_72, [Renderer2, ElementRef, material_es5_74], { name: [0,
                'name'], value: [1, 'value'] }, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_72]), directiveDef(671744, null, 0, NgModel, [[8, null],
            [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'],
            model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 1, 'label', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Apple'])), (_l()(), textDef(null, ['\n      '])),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 16, 'mdc-form-field', [], [[8, 'className', 0]], null, null, null, null)), directiveDef(1196032, null, 3, material_es5_54, [Renderer2, ElementRef, undefined], null, null), queryDef(335544320, 4, { inputCheckbox: 0 }), queryDef(335544320, 5, { inputRadio: 0 }), queryDef(335544320, 6, { inputSwitch: 0 }), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 6, 'mdc-radio', [['name', 'radioGroup'], ['value', 'banana']], [[2, 'mdc-radio', null],
            [2, 'ng-untouched', null], [2, 'ng-touched', null], [2, 'ng-pristine',
                null], [2, 'ng-dirty', null], [2, 'ng-valid', null],
            [2, 'ng-invalid', null], [2, 'ng-pending', null]], [[null,
                'ngModelChange']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('ngModelChange' === en)) {
                var pd_0 = ((_co.radioOption = $event) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, View_RadioComponent_0, RenderType_RadioComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[5, 4]], 0, material_es5_72, [Renderer2, ElementRef, material_es5_74], { name: [0,
                'name'], value: [1, 'value'] }, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_72]), directiveDef(671744, null, 0, NgModel, [[8, null],
            [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'],
            model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 1, 'label', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Banana'])), (_l()(), textDef(null, ['\n      '])),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 16, 'mdc-form-field', [], [[8, 'className', 0]], null, null, null, null)), directiveDef(1196032, null, 3, material_es5_54, [Renderer2, ElementRef, undefined], null, null), queryDef(335544320, 7, { inputCheckbox: 0 }), queryDef(335544320, 8, { inputRadio: 0 }), queryDef(335544320, 9, { inputSwitch: 0 }), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 6, 'mdc-radio', [['name', 'radioGroup'], ['value', 'mango']], [[2, 'mdc-radio', null],
            [2, 'ng-untouched', null], [2, 'ng-touched', null], [2, 'ng-pristine',
                null], [2, 'ng-dirty', null], [2, 'ng-valid', null],
            [2, 'ng-invalid', null], [2, 'ng-pending', null]], [[null,
                'ngModelChange']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('ngModelChange' === en)) {
                var pd_0 = ((_co.radioOption = $event) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, View_RadioComponent_0, RenderType_RadioComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[8, 4]], 0, material_es5_72, [Renderer2, ElementRef, material_es5_74], { name: [0,
                'name'], value: [1, 'value'] }, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_72]), directiveDef(671744, null, 0, NgModel, [[8, null],
            [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { name: [0, 'name'],
            model: [1, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 1, 'label', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Mango'])), (_l()(), textDef(null, ['\n      '])),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 5, 'p', [], null, null, null, null, null)), (_l()(), textDef(null, ['Selected value:\n        '])),
        (_l()(), elementDef(0, null, null, 2, 'label', [['mdc-typography-body2',
                '']], [[2, 'mdc-typography--body2', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['', ''])), (_l()(),
            textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])),
        (_l()(), elementDef(0, null, null, 183, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-form-field'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 24, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-radio'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['value'])), (_l()(), textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"apple"'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['name'])), (_l()(), textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"radioGroup"'])), (_l()(), textDef(null, [' [('])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['ngModel'])), (_l()(), textDef(null, [')]='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"radioOption"'])), (_l()(), textDef(null, ['>'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-radio'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 4, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['label'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Apple'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['label'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-form-field'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(),
            elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-form-field'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 24, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-radio'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['value'])), (_l()(), textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"banana"'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['name'])), (_l()(), textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"radioGroup"'])), (_l()(), textDef(null, [' [('])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['ngModel'])), (_l()(), textDef(null, [')]='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"radioOption"'])), (_l()(), textDef(null, ['>'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-radio'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 4, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['label'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Banana'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['label'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-form-field'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(),
            elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-form-field'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 24, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-radio'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['value'])), (_l()(), textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"mango"'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['name'])), (_l()(), textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"radioGroup"'])), (_l()(), textDef(null, [' [('])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['ngModel'])), (_l()(), textDef(null, [')]='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"radioOption"'])), (_l()(), textDef(null, ['>'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-radio'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 4, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['label'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Mango'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['label'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-form-field'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(),
            textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 73, 'div', [['class', 'mdc-padding'],
            ['fxLayout', 'column']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor,
            ElementRef, Renderer2], { layout: [0, 'layout'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers,
            ElementRef, Renderer, Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 68, 'div', [['fxFlexAlign', 'start']], null, null, null, null, null)), directiveDef(737280, null, 0, FlexAlignDirective, [MediaMonitor, ElementRef, Renderer2], { align: [0, 'align'] }, null), (_l()(), textDef(null, ['\n        '])),
        (_l()(), elementDef(0, null, null, 13, 'mdc-form-field', [], [[8, 'className', 0]], null, null, null, null)),
        directiveDef(1196032, null, 3, material_es5_54, [Renderer2, ElementRef,
            undefined], null, null), queryDef(335544320, 10, { inputCheckbox: 0 }),
        queryDef(335544320, 11, { inputRadio: 0 }), queryDef(335544320, 12, { inputSwitch: 0 }), (_l()(),
            textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 3, 'mdc-radio', [], [[2, 'mdc-radio', null]], null, null, View_RadioComponent_0, RenderType_RadioComponent)),
        providerDef(5120, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_72]), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2,
            ElementRef, undefined]), directiveDef(4374528, [[11, 4]], 0, material_es5_72, [Renderer2,
            ElementRef, material_es5_74], { disabled: [0, 'disabled'] }, null), (_l()(),
            textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'label', [], null, null, null, null, null)), (_l()(), textDef(null, ['Radio disabled'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 49, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-form-field'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 12, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-radio'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['disabled'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-radio'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['label'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Radio disabled'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['label'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-form-field'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n']))], function (_ck, _v) {
        var _co = _v.component;
        var currVal_0 = 'column';
        _ck(_v, 1, 0, currVal_0);
        var currVal_1 = 'start start';
        _ck(_v, 2, 0, currVal_1);
        var currVal_2 = 'mdc-padding';
        _ck(_v, 3, 0, currVal_2);
        var currVal_6 = 'info-banner';
        _ck(_v, 14, 0, currVal_6);
        var currVal_7 = 'docs-api';
        _ck(_v, 21, 0, currVal_7);
        var currVal_8 = 'column';
        _ck(_v, 160, 0, currVal_8);
        var currVal_9 = 'mdc-padding';
        _ck(_v, 161, 0, currVal_9);
        var currVal_10 = 'start';
        _ck(_v, 164, 0, currVal_10);
        var currVal_20 = 'radioGroup';
        var currVal_21 = 'apple';
        _ck(_v, 174, 0, currVal_20, currVal_21);
        var currVal_22 = 'radioGroup';
        var currVal_23 = _co.radioOption;
        _ck(_v, 176, 0, currVal_22, currVal_23);
        var currVal_33 = 'radioGroup';
        var currVal_34 = 'banana';
        _ck(_v, 192, 0, currVal_33, currVal_34);
        var currVal_35 = 'radioGroup';
        var currVal_36 = _co.radioOption;
        _ck(_v, 194, 0, currVal_35, currVal_36);
        var currVal_46 = 'radioGroup';
        var currVal_47 = 'mango';
        _ck(_v, 210, 0, currVal_46, currVal_47);
        var currVal_48 = 'radioGroup';
        var currVal_49 = _co.radioOption;
        _ck(_v, 212, 0, currVal_48, currVal_49);
        var currVal_52 = 'column';
        _ck(_v, 414, 0, currVal_52);
        var currVal_53 = 'mdc-padding';
        _ck(_v, 415, 0, currVal_53);
        var currVal_54 = 'start';
        _ck(_v, 418, 0, currVal_54);
        var currVal_57 = true;
        _ck(_v, 429, 0, currVal_57);
    }, function (_ck, _v) {
        var _co = _v.component;
        var currVal_3 = nodeValue(_v, 6).isHostClass;
        _ck(_v, 5, 0, currVal_3);
        var currVal_4 = nodeValue(_v, 10).isHostClass;
        _ck(_v, 9, 0, currVal_4);
        var currVal_5 = nodeValue(_v, 15).isHostClass;
        _ck(_v, 13, 0, currVal_5);
        var currVal_11 = nodeValue(_v, 167).className;
        _ck(_v, 166, 0, currVal_11);
        var currVal_12 = nodeValue(_v, 174).isHostClass;
        var currVal_13 = nodeValue(_v, 178).ngClassUntouched;
        var currVal_14 = nodeValue(_v, 178).ngClassTouched;
        var currVal_15 = nodeValue(_v, 178).ngClassPristine;
        var currVal_16 = nodeValue(_v, 178).ngClassDirty;
        var currVal_17 = nodeValue(_v, 178).ngClassValid;
        var currVal_18 = nodeValue(_v, 178).ngClassInvalid;
        var currVal_19 = nodeValue(_v, 178).ngClassPending;
        _ck(_v, 172, 0, currVal_12, currVal_13, currVal_14, currVal_15, currVal_16, currVal_17, currVal_18, currVal_19);
        var currVal_24 = nodeValue(_v, 185).className;
        _ck(_v, 184, 0, currVal_24);
        var currVal_25 = nodeValue(_v, 192).isHostClass;
        var currVal_26 = nodeValue(_v, 196).ngClassUntouched;
        var currVal_27 = nodeValue(_v, 196).ngClassTouched;
        var currVal_28 = nodeValue(_v, 196).ngClassPristine;
        var currVal_29 = nodeValue(_v, 196).ngClassDirty;
        var currVal_30 = nodeValue(_v, 196).ngClassValid;
        var currVal_31 = nodeValue(_v, 196).ngClassInvalid;
        var currVal_32 = nodeValue(_v, 196).ngClassPending;
        _ck(_v, 190, 0, currVal_25, currVal_26, currVal_27, currVal_28, currVal_29, currVal_30, currVal_31, currVal_32);
        var currVal_37 = nodeValue(_v, 203).className;
        _ck(_v, 202, 0, currVal_37);
        var currVal_38 = nodeValue(_v, 210).isHostClass;
        var currVal_39 = nodeValue(_v, 214).ngClassUntouched;
        var currVal_40 = nodeValue(_v, 214).ngClassTouched;
        var currVal_41 = nodeValue(_v, 214).ngClassPristine;
        var currVal_42 = nodeValue(_v, 214).ngClassDirty;
        var currVal_43 = nodeValue(_v, 214).ngClassValid;
        var currVal_44 = nodeValue(_v, 214).ngClassInvalid;
        var currVal_45 = nodeValue(_v, 214).ngClassPending;
        _ck(_v, 208, 0, currVal_38, currVal_39, currVal_40, currVal_41, currVal_42, currVal_43, currVal_44, currVal_45);
        var currVal_50 = nodeValue(_v, 223).isHostClass;
        _ck(_v, 222, 0, currVal_50);
        var currVal_51 = _co.radioOption;
        _ck(_v, 224, 0, currVal_51);
        var currVal_55 = nodeValue(_v, 421).className;
        _ck(_v, 420, 0, currVal_55);
        var currVal_56 = nodeValue(_v, 429).isHostClass;
        _ck(_v, 426, 0, currVal_56);
    });
}
function View_RadioDemoComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1, 'radio-demo', [], null, null, null, View_RadioDemoComponent_0, RenderType_RadioDemoComponent)),
        directiveDef(49152, null, 0, RadioDemoComponent, [], null, null)], null, null);
}
var RadioDemoComponentNgFactory = createComponentFactory('radio-demo', RadioDemoComponent, View_RadioDemoComponent_Host_0, {}, {}, []);

/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
/* tslint:disable */
var styles_CardDemoComponent = [];
var RenderType_CardDemoComponent = createRendererType2({ encapsulation: 2,
    styles: styles_CardDemoComponent, data: {} });
function View_CardDemoComponent_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1666, 'div', [['class',
                'mdc-padding'], ['fxLayout', 'column'], ['fxLayoutAlign', 'start start']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0,
                'layout'] }, null), directiveDef(737280, null, 0, LayoutAlignDirective, [MediaMonitor, ElementRef, Renderer2, [2, LayoutDirective]], { align: [0,
                'align'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 2, 'h1', [['mdc-typography-display1',
                '']], [[2, 'mdc-typography--display1', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['Cards'])), (_l()(),
            textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 2, 'div', [['mdc-typography-subheading2', '']], [[2, 'mdc-typography--subheading2',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, undefined, [], null, null),
        (_l()(), textDef(null, ['The MDC Card component is a sheet of material that serves as an entry point to more detailed information.'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 5, 'div', [['class', 'info-banner'], ['mdc-typography-subheading1', '']], [[2,
                'mdc-typography--subheading1', null]], null, null, null, null)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(),
            textDef(null, ['\n    '])), (_l()(), textDef(null, ['import { CardModule } from \'@angular-mdc/web\';'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 251, 'div', [['class', 'docs-api']], null, null, null, null, null)),
        directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers,
            KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0,
                'classBase'] }, null), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 43, 'table', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'thead', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Component'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-card'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Properties'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() darkTheme: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Apply dark theme directly to the card.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 58, 'table', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])),
        (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Directive'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 46, 'tbody', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-card-primary'])), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Defines the primary text / title content block.'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(),
            elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc-card-subtitle'])), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['A subtitle block.'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(),
            elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc-card-horizontal'])), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Stack multiple card blocks horizontally instead of vertically, by placing them inside of a horizontal block.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-card-supporting-text'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Used for displaying the bulk of the textual content of the card.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-card-media'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Used for showing rich media in cards, and optionally as a container.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 46, 'table', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])),
        (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Directive'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'tbody', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-card-title'])), (_l()(), textDef(null, ['\n          '])), (_l()(),
            elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['A title block.'])), (_l()(), textDef(null, ['\n        '])), (_l()(),
            textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])),
        (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Properties'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() large: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['An option to make the title text larger. (default is true)'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 46, 'table', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])),
        (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Directive'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'tbody', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-card-actions'])), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Area used for showing different actions the user can take.'])), (_l()(),
            textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])),
        (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Properties'])), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Description'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'tbody', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() vertical: boolean'])), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Option to lay actions out vertically instead of horizontally.'])), (_l()(),
            textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])),
        (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 46, 'table', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'thead', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Directive'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-card-media-item'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Media items are designed to be used in horizontal blocks, taking up a fixed height, rather than stretching to the width of the card.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Properties'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() size: number'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Some predefined media item sizes. Valid values are [1, 1.5, 2, and 3]'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 1392, 'div', [['fxLayout', 'column'], ['fxLayoutAlign', 'start start'],
            ['fxLayoutGap', '40px']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor,
            ElementRef, Renderer2], { layout: [0, 'layout'] }, null), directiveDef(1720320, null, 0, LayoutGapDirective, [MediaMonitor, ElementRef, Renderer2,
            [2, LayoutDirective]], { gap: [0, 'gap'] }, null), directiveDef(737280, null, 0, LayoutAlignDirective, [MediaMonitor, ElementRef, Renderer2,
            [2, LayoutDirective]], { align: [0, 'align'] }, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 155, 'div', [['fxLayout',
                'column']], null, null, null, null, null)),
        directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef,
            Renderer2], { layout: [0, 'layout'] }, null), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 29, 'mdc-card', [['class', 'demo-card']], [[2, 'mdc-card', null], [2, 'mdc-card--theme-dark',
                null]], null, null, View_CardComponent_0, RenderType_CardComponent)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(49152, null, 0, material_es5_6, [], null, null),
        (_l()(), textDef(0, ['\n        '])), (_l()(), elementDef(0, null, 0, 10, 'mdc-card-primary', [], [[2, 'mdc-card__primary', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_7, [], null, null), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 2, 'h1', [['mdc-card-title', '']], [[2, 'mdc-card__title', null], [2, 'mdc-card__title--large',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_9, [], null, null), (_l()(), textDef(null, ['Title'])), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 2, 'h2', [['mdc-card-subtitle', '']], [[2, 'mdc-card__subtitle', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_10, [], null, null), (_l()(),
            textDef(null, ['Subtitle'])), (_l()(), textDef(null, ['\n        '])),
        (_l()(), textDef(0, ['\n        '])), (_l()(), elementDef(0, null, 0, 12, 'mdc-card-actions', [], [[2, 'mdc-card__actions', null], [2, 'mdc-card__actions--vertical',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_11, [], null, null), (_l()(), textDef(null, ['\n          '])), (_l()(),
            elementDef(0, null, null, 3, 'button', [['mdc-button', '']], [[8,
                    'tabIndex', 0], [1, 'type', 0], [2, 'mdc-button', null], [2, 'mdc-button--raised',
                    null], [2, 'mdc-button--primary', null], [2, 'mdc-button--accent',
                    null], [2, 'mdc-button--dense', null], [2, 'mdc-button--compact',
                    null], [2, 'mdc-card__action', null]], [[null,
                    'keypress'], [null, 'blur']], function (_v, en, $event) {
                var ad = true;
                if (('keypress' === en)) {
                    var pd_0 = (nodeValue(_v, 302).onkeypress($event) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 302).blur($event) !== false);
                    ad = (pd_1 && ad);
                }
                return ad;
            }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], { cardAction: [0, 'cardAction'] }, null), (_l()(), textDef(0, ['Action 1'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 3, 'button', [['mdc-button', '']], [[8, 'tabIndex', 0], [1, 'type',
                0], [2, 'mdc-button', null], [2, 'mdc-button--raised', null],
            [2, 'mdc-button--primary', null], [2, 'mdc-button--accent', null],
            [2, 'mdc-button--dense', null], [2, 'mdc-button--compact', null],
            [2, 'mdc-card__action', null]], [[null, 'keypress'], [null,
                'blur']], function (_v, en, $event) {
            var ad = true;
            if (('keypress' === en)) {
                var pd_0 = (nodeValue(_v, 307).onkeypress($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 307).blur($event) !== false);
                ad = (pd_1 && ad);
            }
            return ad;
        }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], { cardAction: [0, 'cardAction'] }, null), (_l()(), textDef(0, ['Action 2'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(0, ['\n      '])),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 120, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-card'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-card-primary'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 7, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['h1'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-card-title'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Title'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['h1'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 7, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['h2'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-card-subtitle'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Subtitle'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['h2'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-card-primary'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-card-actions'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 13, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-button'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['cardAction'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Action 1'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 13, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-button'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['cardAction'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Action 2'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-card-actions'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(),
            elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-card'])), (_l()(), textDef(null, ['>'])),
        (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 161, 'div', [['fxLayout', 'column']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0, 'layout'] }, null),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 29, 'mdc-card', [['class', 'demo-card']], [[2, 'mdc-card', null],
            [2, 'mdc-card--theme-dark', null]], null, null, View_CardComponent_0, RenderType_CardComponent)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers,
            ElementRef, Renderer, Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(49152, null, 0, material_es5_6, [], null, null), (_l()(), textDef(0, ['\n        '])), (_l()(),
            elementDef(0, null, 0, 10, 'mdc-card-primary', [], [[2, 'mdc-card__primary',
                    null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_7, [], null, null), (_l()(), textDef(null, ['\n          '])), (_l()(),
            elementDef(0, null, null, 2, 'h1', [['mdc-card-title', '']], [[2,
                    'mdc-card__title', null], [2, 'mdc-card__title--large', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_9, [], { large: [0, 'large'] }, null), (_l()(), textDef(null, ['Small Title'])), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 2, 'h2', [['mdc-card-subtitle', '']], [[2, 'mdc-card__subtitle', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_10, [], null, null), (_l()(),
            textDef(null, ['Subtitle'])), (_l()(), textDef(null, ['\n        '])),
        (_l()(), textDef(0, ['\n        '])), (_l()(), elementDef(0, null, 0, 12, 'mdc-card-actions', [], [[2, 'mdc-card__actions', null], [2, 'mdc-card__actions--vertical',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_11, [], null, null), (_l()(), textDef(null, ['\n          '])), (_l()(),
            elementDef(0, null, null, 3, 'button', [['mdc-button', '']], [[8,
                    'tabIndex', 0], [1, 'type', 0], [2, 'mdc-button', null], [2, 'mdc-button--raised',
                    null], [2, 'mdc-button--primary', null], [2, 'mdc-button--accent',
                    null], [2, 'mdc-button--dense', null], [2, 'mdc-button--compact',
                    null], [2, 'mdc-card__action', null]], [[null,
                    'keypress'], [null, 'blur']], function (_v, en, $event) {
                var ad = true;
                if (('keypress' === en)) {
                    var pd_0 = (nodeValue(_v, 459).onkeypress($event) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 459).blur($event) !== false);
                    ad = (pd_1 && ad);
                }
                return ad;
            }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], { cardAction: [0, 'cardAction'] }, null), (_l()(), textDef(0, ['Action 1'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 3, 'button', [['mdc-button', '']], [[8, 'tabIndex', 0], [1, 'type',
                0], [2, 'mdc-button', null], [2, 'mdc-button--raised', null],
            [2, 'mdc-button--primary', null], [2, 'mdc-button--accent', null],
            [2, 'mdc-button--dense', null], [2, 'mdc-button--compact', null],
            [2, 'mdc-card__action', null]], [[null, 'keypress'], [null,
                'blur']], function (_v, en, $event) {
            var ad = true;
            if (('keypress' === en)) {
                var pd_0 = (nodeValue(_v, 464).onkeypress($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 464).blur($event) !== false);
                ad = (pd_1 && ad);
            }
            return ad;
        }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], { cardAction: [0, 'cardAction'] }, null), (_l()(), textDef(0, ['Action 2'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(0, ['\n      '])),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 126, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-card'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-card-primary'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 13, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['h1'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-card-title'])),
        (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['large'])),
        (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"false"'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Title'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['h1'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 7, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['h2'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-card-subtitle'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Subtitle'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['h2'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-card-primary'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-card-actions'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 13, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-button'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['cardAction'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Action 1'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 13, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-button'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['cardAction'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Action 2'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-card-actions'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(),
            elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-card'])), (_l()(), textDef(null, ['>'])),
        (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 164, 'div', [['fxLayout', 'column']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0, 'layout'] }, null),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 32, 'mdc-card', [], [[2, 'mdc-card', null],
            [2, 'mdc-card--theme-dark', null]], null, null, View_CardComponent_0, RenderType_CardComponent)), directiveDef(278528, null, 0, NgClass, [IterableDiffers, KeyValueDiffers, ElementRef, Renderer], { ngClass: [0, 'ngClass'] }, null), pureObjectDef({ 'mdc-theme--dark demo-card': 0 }),
        directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers,
            KeyValueDiffers, ElementRef, Renderer, Renderer2], { ngClassBase: [0,
                'ngClassBase'] }, null), pureObjectDef({ 'mdc-theme--dark demo-card': 0 }),
        directiveDef(49152, null, 0, material_es5_6, [], { darkTheme: [0, 'darkTheme'] }, null), (_l()(), textDef(0, ['\n        '])), (_l()(), elementDef(0, null, 0, 10, 'mdc-card-primary', [], [[2, 'mdc-card__primary', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_7, [], null, null),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 2, 'h1', [['mdc-card-title', '']], [[2, 'mdc-card__title', null],
            [2, 'mdc-card__title--large', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_9, [], null, null), (_l()(), textDef(null, ['Dark Theme'])), (_l()(), textDef(null, ['\n          '])), (_l()(),
            elementDef(0, null, null, 2, 'h2', [['mdc-card-subtitle', '']], [[2, 'mdc-card__subtitle', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_10, [], null, null), (_l()(), textDef(null, ['Subtitle'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(0, ['\n        '])), (_l()(), elementDef(0, null, 0, 12, 'mdc-card-actions', [], [[2, 'mdc-card__actions', null], [2, 'mdc-card__actions--vertical',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_11, [], null, null), (_l()(), textDef(null, ['\n          '])), (_l()(),
            elementDef(0, null, null, 3, 'button', [['mdc-button', '']], [[8,
                    'tabIndex', 0], [1, 'type', 0], [2, 'mdc-button', null], [2, 'mdc-button--raised',
                    null], [2, 'mdc-button--primary', null], [2, 'mdc-button--accent',
                    null], [2, 'mdc-button--dense', null], [2, 'mdc-button--compact',
                    null], [2, 'mdc-card__action', null]], [[null,
                    'keypress'], [null, 'blur']], function (_v, en, $event) {
                var ad = true;
                if (('keypress' === en)) {
                    var pd_0 = (nodeValue(_v, 625).onkeypress($event) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 625).blur($event) !== false);
                    ad = (pd_1 && ad);
                }
                return ad;
            }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], { cardAction: [0, 'cardAction'] }, null), (_l()(), textDef(0, ['Action 1'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 3, 'button', [['mdc-button', '']], [[8, 'tabIndex', 0], [1, 'type',
                0], [2, 'mdc-button', null], [2, 'mdc-button--raised', null],
            [2, 'mdc-button--primary', null], [2, 'mdc-button--accent', null],
            [2, 'mdc-button--dense', null], [2, 'mdc-button--compact', null],
            [2, 'mdc-card__action', null]], [[null, 'keypress'], [null,
                'blur']], function (_v, en, $event) {
            var ad = true;
            if (('keypress' === en)) {
                var pd_0 = (nodeValue(_v, 630).onkeypress($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 630).blur($event) !== false);
                ad = (pd_1 && ad);
            }
            return ad;
        }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], { cardAction: [0, 'cardAction'] }, null), (_l()(), textDef(0, ['Action 2'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(0, ['\n      '])),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 126, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 12, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-card'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['darkTheme'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-card-primary'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 7, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['h1'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-card-title'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Title'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['h1'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 7, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['h2'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-card-subtitle'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Subtitle'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['h2'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-card-primary'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-card-actions'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 13, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-button'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['cardAction'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Action 1'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 13, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-button'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['cardAction'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Action 2'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-card-actions'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(),
            elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-card'])), (_l()(), textDef(null, ['>'])),
        (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 175, 'div', [['fxLayout', 'column']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0, 'layout'] }, null),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 33, 'mdc-card', [['class', 'demo-card']], [[2, 'mdc-card', null],
            [2, 'mdc-card--theme-dark', null]], null, null, View_CardComponent_0, RenderType_CardComponent)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers,
            ElementRef, Renderer, Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(49152, null, 0, material_es5_6, [], null, null), (_l()(), textDef(0, ['\n        '])), (_l()(),
            elementDef(0, null, 0, 10, 'mdc-card-primary', [], [[2, 'mdc-card__primary',
                    null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_7, [], null, null), (_l()(), textDef(null, ['\n          '])), (_l()(),
            elementDef(0, null, null, 2, 'h1', [['mdc-card-title', '']], [[2,
                    'mdc-card__title', null], [2, 'mdc-card__title--large', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_9, [], null, null),
        (_l()(), textDef(null, ['Title'])), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 2, 'h2', [['mdc-card-subtitle', '']], [[2, 'mdc-card__subtitle', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_10, [], null, null), (_l()(), textDef(null, ['Subtitle'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(0, ['\n        '])),
        (_l()(), elementDef(0, null, 0, 2, 'mdc-card-supporting-text', [], [[2, 'mdc-card__supporting-text', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_8, [], null, null), (_l()(), textDef(null, ['\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n        '])),
        (_l()(), textDef(0, ['\n        '])), (_l()(), elementDef(0, null, 0, 12, 'mdc-card-actions', [], [[2, 'mdc-card__actions', null], [2, 'mdc-card__actions--vertical',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_11, [], null, null), (_l()(), textDef(null, ['\n          '])), (_l()(),
            elementDef(0, null, null, 3, 'button', [['mdc-button', '']], [[8,
                    'tabIndex', 0], [1, 'type', 0], [2, 'mdc-button', null], [2, 'mdc-button--raised',
                    null], [2, 'mdc-button--primary', null], [2, 'mdc-button--accent',
                    null], [2, 'mdc-button--dense', null], [2, 'mdc-button--compact',
                    null], [2, 'mdc-card__action', null]], [[null,
                    'keypress'], [null, 'blur']], function (_v, en, $event) {
                var ad = true;
                if (('keypress' === en)) {
                    var pd_0 = (nodeValue(_v, 792).onkeypress($event) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 792).blur($event) !== false);
                    ad = (pd_1 && ad);
                }
                return ad;
            }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], { cardAction: [0, 'cardAction'] }, null), (_l()(), textDef(0, ['Action 1'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 3, 'button', [['mdc-button', '']], [[8, 'tabIndex', 0], [1, 'type',
                0], [2, 'mdc-button', null], [2, 'mdc-button--raised', null],
            [2, 'mdc-button--primary', null], [2, 'mdc-button--accent', null],
            [2, 'mdc-button--dense', null], [2, 'mdc-button--compact', null],
            [2, 'mdc-card__action', null]], [[null, 'keypress'], [null,
                'blur']], function (_v, en, $event) {
            var ad = true;
            if (('keypress' === en)) {
                var pd_0 = (nodeValue(_v, 797).onkeypress($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 797).blur($event) !== false);
                ad = (pd_1 && ad);
            }
            return ad;
        }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], { cardAction: [0, 'cardAction'] }, null), (_l()(), textDef(0, ['Action 2'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(0, ['\n      '])),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 136, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-card'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-card-primary'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 7, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['h1'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-card-title'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Title'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['h1'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 7, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['h2'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-card-subtitle'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Subtitle'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['h2'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-card-primary'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-card-supporting-text'])), (_l()(), textDef(null, ['>'])), (_l()(),
            textDef(null, ['\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit,\n    sed do eiusmod tempor incididunt ut labore et dolore magna\n    aliqua. Ut enim ad minim veniam, quis nostrud exercitation\n    ullamco laboris nisi ut aliquip ex ea commodo consequat.\n  '])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-card-supporting-text'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-card-actions'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 13, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-button'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['cardAction'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Action 1'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 13, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-button'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['cardAction'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Action 2'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-card-actions'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(),
            elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-card'])), (_l()(), textDef(null, ['>'])),
        (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, [' '])),
        (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 199, 'div', [['fxLayout', 'column']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0, 'layout'] }, null),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 36, 'mdc-card', [['class', 'demo-card']], [[2, 'mdc-card', null],
            [2, 'mdc-card--theme-dark', null]], null, null, View_CardComponent_0, RenderType_CardComponent)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers,
            ElementRef, Renderer, Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(49152, null, 0, material_es5_6, [], null, null), (_l()(), textDef(0, ['\n        '])), (_l()(),
            elementDef(0, null, 0, 17, 'mdc-card-horizontal', [], [[2, 'mdc-card__horizontal-block',
                    null]], null, null, View_CardHorizontalComponent_0, RenderType_CardHorizontalComponent)), directiveDef(49152, null, 0, material_es5_14, [], null, null),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, 0, 10, 'mdc-card-primary', [], [[2, 'mdc-card__primary', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_7, [], null, null),
        (_l()(), textDef(null, ['\n            '])), (_l()(), elementDef(0, null, null, 2, 'h1', [['mdc-card-title', '']], [[2, 'mdc-card__title', null],
            [2, 'mdc-card__title--large', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_9, [], null, null), (_l()(), textDef(null, ['Title'])), (_l()(), textDef(null, ['\n            '])), (_l()(), elementDef(0, null, null, 2, 'h2', [['mdc-card-subtitle', '']], [[2, 'mdc-card__subtitle',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_10, [], null, null), (_l()(), textDef(null, ['Subtitle'])), (_l()(), textDef(null, ['\n          '])), (_l()(), textDef(null, ['\n          '])), (_l()(),
            elementDef(0, null, 0, 1, 'img', [['mdc-card-media-item', ''], ['src', 'https://material-components-web.appspot.com/images/1-1.jpg']], [[2, 'mdc-card__media-item', null], [2, 'mdc-card__media-item--1dot5x',
                    null], [2, 'mdc-card__media-item--2x', null], [2, 'mdc-card__media-item--3x',
                    null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_12, [], { size: [0,
                'size'] }, null), (_l()(), textDef(null, ['\n        '])), (_l()(),
            textDef(0, ['\n        '])), (_l()(), elementDef(0, null, 0, 12, 'mdc-card-actions', [], [[2, 'mdc-card__actions', null], [2, 'mdc-card__actions--vertical',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_11, [], null, null), (_l()(), textDef(null, ['\n          '])), (_l()(),
            elementDef(0, null, null, 3, 'button', [['mdc-button', '']], [[8,
                    'tabIndex', 0], [1, 'type', 0], [2, 'mdc-button', null], [2, 'mdc-button--raised',
                    null], [2, 'mdc-button--primary', null], [2, 'mdc-button--accent',
                    null], [2, 'mdc-button--dense', null], [2, 'mdc-button--compact',
                    null], [2, 'mdc-card__action', null]], [[null,
                    'keypress'], [null, 'blur']], function (_v, en, $event) {
                var ad = true;
                if (('keypress' === en)) {
                    var pd_0 = (nodeValue(_v, 972).onkeypress($event) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 972).blur($event) !== false);
                    ad = (pd_1 && ad);
                }
                return ad;
            }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], { cardAction: [0, 'cardAction'] }, null), (_l()(), textDef(0, ['Action 1'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 3, 'button', [['mdc-button', '']], [[8, 'tabIndex', 0], [1, 'type',
                0], [2, 'mdc-button', null], [2, 'mdc-button--raised', null],
            [2, 'mdc-button--primary', null], [2, 'mdc-button--accent', null],
            [2, 'mdc-button--dense', null], [2, 'mdc-button--compact', null],
            [2, 'mdc-card__action', null]], [[null, 'keypress'], [null,
                'blur']], function (_v, en, $event) {
            var ad = true;
            if (('keypress' === en)) {
                var pd_0 = (nodeValue(_v, 977).onkeypress($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 977).blur($event) !== false);
                ad = (pd_1 && ad);
            }
            return ad;
        }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], { cardAction: [0, 'cardAction'] }, null), (_l()(), textDef(0, ['Action 2'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(0, ['\n      '])),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 157, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-card'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-card-horizontal'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-card-primary'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['h1'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-card-title'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['Title'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['h1'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n      '])),
        (_l()(), elementDef(0, null, null, 7, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['h2'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-card-subtitle'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Subtitle'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['h2'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-card-primary'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 19, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['img'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-card-media-item'])),
        (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['size'])), (_l()(),
            textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"2"'])), (_l()(),
            textDef(null, ['\n     '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['src'])), (_l()(),
            textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"https://material-components-web.appspot.com/images/1-1.jpg"'])),
        (_l()(), textDef(null, [' />'])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-card-horizontal'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-card-actions'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 13, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-button'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['cardAction'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Action 1'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 13, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-button'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['cardAction'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Action 2'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-card-actions'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(),
            elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-card'])), (_l()(), textDef(null, ['>'])),
        (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, [' '])),
        (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 147, 'div', [['fxLayout', 'column']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0, 'layout'] }, null),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 24, 'mdc-card', [['class', 'demo-card']], [[2, 'mdc-card', null],
            [2, 'mdc-card--theme-dark', null]], null, null, View_CardComponent_0, RenderType_CardComponent)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers,
            ElementRef, Renderer, Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(49152, null, 0, material_es5_6, [], null, null), (_l()(), textDef(0, ['\n        '])), (_l()(),
            elementDef(0, null, 0, 19, 'mdc-card-horizontal', [], [[2, 'mdc-card__horizontal-block',
                    null]], null, null, View_CardHorizontalComponent_0, RenderType_CardHorizontalComponent)), directiveDef(49152, null, 0, material_es5_14, [], null, null),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, 0, 1, 'img', [['mdc-card-media-item', ''], ['src', 'https://material-components-web.appspot.com/images/1-1.jpg']], [[2, 'mdc-card__media-item', null], [2, 'mdc-card__media-item--1dot5x',
                null], [2, 'mdc-card__media-item--2x', null], [2, 'mdc-card__media-item--3x',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_12, [], { size: [0,
                'size'] }, null), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, 0, 12, 'mdc-card-actions', [], [[2, 'mdc-card__actions',
                null], [2, 'mdc-card__actions--vertical', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_11, [], { vertical: [0, 'vertical'] }, null),
        (_l()(), textDef(null, ['\n            '])), (_l()(), elementDef(0, null, null, 3, 'button', [['mdc-button', '']], [[8, 'tabIndex', 0], [1, 'type',
                0], [2, 'mdc-button', null], [2, 'mdc-button--raised', null],
            [2, 'mdc-button--primary', null], [2, 'mdc-button--accent', null],
            [2, 'mdc-button--dense', null], [2, 'mdc-button--compact', null],
            [2, 'mdc-card__action', null]], [[null, 'keypress'], [null,
                'blur']], function (_v, en, $event) {
            var ad = true;
            if (('keypress' === en)) {
                var pd_0 = (nodeValue(_v, 1160).onkeypress($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 1160).blur($event) !== false);
                ad = (pd_1 && ad);
            }
            return ad;
        }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], { cardAction: [0, 'cardAction'] }, null), (_l()(), textDef(0, ['Action 1'])),
        (_l()(), textDef(null, ['\n            '])), (_l()(), elementDef(0, null, null, 3, 'button', [['mdc-button', '']], [[8, 'tabIndex', 0], [1, 'type',
                0], [2, 'mdc-button', null], [2, 'mdc-button--raised', null],
            [2, 'mdc-button--primary', null], [2, 'mdc-button--accent', null],
            [2, 'mdc-button--dense', null], [2, 'mdc-button--compact', null],
            [2, 'mdc-card__action', null]], [[null, 'keypress'], [null,
                'blur']], function (_v, en, $event) {
            var ad = true;
            if (('keypress' === en)) {
                var pd_0 = (nodeValue(_v, 1165).onkeypress($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 1165).blur($event) !== false);
                ad = (pd_1 && ad);
            }
            return ad;
        }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], { cardAction: [0, 'cardAction'] }, null), (_l()(), textDef(0, ['Action 2'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(0, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 117, 'pre', [['style',
                'background:#000;color:#f8f8f8']], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-card'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-card-horizontal'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 19, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['img'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-card-media-item'])),
        (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['size'])), (_l()(),
            textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"3"'])), (_l()(),
            textDef(null, ['\n     '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['src'])), (_l()(),
            textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"https://material-components-web.appspot.com/images/1-1.jpg"'])),
        (_l()(), textDef(null, [' />'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 12, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-card-actions'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['vertical'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 13, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-button'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['cardAction'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Action 1'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 13, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-button'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['cardAction'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Action 2'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-card-actions'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-card-horizontal'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(),
            elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-card'])), (_l()(), textDef(null, ['>'])),
        (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, [' '])),
        (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 185, 'div', [['fxLayout', 'column']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0, 'layout'] }, null),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 36, 'mdc-card', [['class', 'demo-card']], [[2, 'mdc-card', null],
            [2, 'mdc-card--theme-dark', null]], null, null, View_CardComponent_0, RenderType_CardComponent)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers,
            ElementRef, Renderer, Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(49152, null, 0, material_es5_6, [], null, null), (_l()(), textDef(0, ['\n        '])), (_l()(),
            elementDef(0, null, 0, 5, 'mdc-card-media', [], [[2, 'mdc-card__media',
                    null]], null, null, View_CardMediaComponent_0, RenderType_CardMediaComponent)), directiveDef(278528, null, 0, NgClass, [IterableDiffers, KeyValueDiffers, ElementRef, Renderer], { ngClass: [0,
                'ngClass'] }, null), pureObjectDef({ 'demo-card__16-9-media': 0 }), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers,
            ElementRef, Renderer, Renderer2], { ngClassBase: [0, 'ngClassBase'] }, null), pureObjectDef({ 'demo-card__16-9-media': 0 }), directiveDef(49152, null, 0, material_es5_13, [], null, null), (_l()(),
            textDef(0, ['\n        '])), (_l()(), elementDef(0, null, 0, 10, 'mdc-card-primary', [], [[2, 'mdc-card__primary', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_7, [], null, null), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 2, 'h1', [['mdc-card-title', '']], [[2, 'mdc-card__title', null], [2, 'mdc-card__title--large',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_9, [], null, null), (_l()(), textDef(null, ['Title'])), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 2, 'h2', [['mdc-card-subtitle', '']], [[2, 'mdc-card__subtitle', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_10, [], null, null), (_l()(),
            textDef(null, ['Subtitle'])), (_l()(), textDef(null, ['\n        '])),
        (_l()(), textDef(0, ['\n        '])), (_l()(), elementDef(0, null, 0, 12, 'mdc-card-actions', [], [[2, 'mdc-card__actions', null], [2, 'mdc-card__actions--vertical',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_11, [], null, null), (_l()(), textDef(null, ['\n          '])), (_l()(),
            elementDef(0, null, null, 3, 'button', [['mdc-button', '']], [[8,
                    'tabIndex', 0], [1, 'type', 0], [2, 'mdc-button', null], [2, 'mdc-button--raised',
                    null], [2, 'mdc-button--primary', null], [2, 'mdc-button--accent',
                    null], [2, 'mdc-button--dense', null], [2, 'mdc-button--compact',
                    null], [2, 'mdc-card__action', null]], [[null,
                    'keypress'], [null, 'blur']], function (_v, en, $event) {
                var ad = true;
                if (('keypress' === en)) {
                    var pd_0 = (nodeValue(_v, 1322).onkeypress($event) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 1322).blur($event) !== false);
                    ad = (pd_1 && ad);
                }
                return ad;
            }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], { cardAction: [0, 'cardAction'] }, null), (_l()(), textDef(0, ['Action 1'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 3, 'button', [['mdc-button', '']], [[8, 'tabIndex', 0], [1, 'type',
                0], [2, 'mdc-button', null], [2, 'mdc-button--raised', null],
            [2, 'mdc-button--primary', null], [2, 'mdc-button--accent', null],
            [2, 'mdc-button--dense', null], [2, 'mdc-button--compact', null],
            [2, 'mdc-card__action', null]], [[null, 'keypress'], [null,
                'blur']], function (_v, en, $event) {
            var ad = true;
            if (('keypress' === en)) {
                var pd_0 = (nodeValue(_v, 1327).onkeypress($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 1327).blur($event) !== false);
                ad = (pd_1 && ad);
            }
            return ad;
        }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], { cardAction: [0, 'cardAction'] }, null), (_l()(), textDef(0, ['Action 2'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(0, ['\n      '])),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 144, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#aeaeae;font-style:italic']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<!--Sample 16x9 media header style-->'])), (_l()(),
            textDef(null, ['\n.demo-card__16-9-media\n  height: 12.313rem;\n  background-image: \n    url(https://material-components-web.appspot.com/images/16-9.jpg);\n  background-repeat: no-repeat;\n  background-size: cover;\n\n'])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-card'])), (_l()(), textDef(null, ['>'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 12, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-card-media'])),
        (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['class'])),
        (_l()(), textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"demo-card__16-9-media"'])),
        (_l()(), textDef(null, ['>'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-card-media'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-card-primary'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 7, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['h1'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-card-title'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['Title'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['h1'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 7, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['h2'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-card-subtitle'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Subtitle'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['h2'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-card-primary'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-card-actions'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 13, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-button'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['cardAction'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Action 1'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 13, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-button'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['cardAction'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Action 2'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-card-actions'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(),
            elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-card'])), (_l()(), textDef(null, ['>'])),
        (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 186, 'div', [['fxLayout', 'column']], null, null, null, null, null)),
        directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef,
            Renderer2], { layout: [0, 'layout'] }, null), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 36, 'mdc-card', [['class', 'demo-card']], [[2, 'mdc-card', null], [2, 'mdc-card--theme-dark',
                null]], null, null, View_CardComponent_0, RenderType_CardComponent)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(49152, null, 0, material_es5_6, [], null, null),
        (_l()(), textDef(0, ['\n        '])), (_l()(), elementDef(0, null, 0, 10, 'mdc-card-primary', [], [[2, 'mdc-card__primary', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_7, [], null, null), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 2, 'h1', [['mdc-card-title', '']], [[2, 'mdc-card__title', null], [2, 'mdc-card__title--large',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_9, [], null, null), (_l()(), textDef(null, ['Title'])), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 2, 'h2', [['mdc-card-subtitle', '']], [[2, 'mdc-card__subtitle', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_10, [], null, null), (_l()(),
            textDef(null, ['Subtitle'])), (_l()(), textDef(null, ['\n        '])),
        (_l()(), textDef(0, ['\n        '])), (_l()(), elementDef(0, null, 0, 5, 'mdc-card-media', [], [[2, 'mdc-card__media', null]], null, null, View_CardMediaComponent_0, RenderType_CardMediaComponent)), directiveDef(278528, null, 0, NgClass, [IterableDiffers, KeyValueDiffers, ElementRef,
            Renderer], { ngClass: [0, 'ngClass'] }, null), pureObjectDef({ 'demo-card__16-9-media': 0 }),
        directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers,
            KeyValueDiffers, ElementRef, Renderer, Renderer2], { ngClassBase: [0,
                'ngClassBase'] }, null), pureObjectDef({ 'demo-card__16-9-media': 0 }), directiveDef(49152, null, 0, material_es5_13, [], null, null),
        (_l()(), textDef(0, ['\n        '])), (_l()(), elementDef(0, null, 0, 12, 'mdc-card-actions', [], [[2, 'mdc-card__actions', null], [2, 'mdc-card__actions--vertical',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_11, [], null, null), (_l()(), textDef(null, ['\n          '])), (_l()(),
            elementDef(0, null, null, 3, 'button', [['mdc-button', '']], [[8,
                    'tabIndex', 0], [1, 'type', 0], [2, 'mdc-button', null], [2, 'mdc-button--raised',
                    null], [2, 'mdc-button--primary', null], [2, 'mdc-button--accent',
                    null], [2, 'mdc-button--dense', null], [2, 'mdc-button--compact',
                    null], [2, 'mdc-card__action', null]], [[null,
                    'keypress'], [null, 'blur']], function (_v, en, $event) {
                var ad = true;
                if (('keypress' === en)) {
                    var pd_0 = (nodeValue(_v, 1509).onkeypress($event) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(_v, 1509).blur($event) !== false);
                    ad = (pd_1 && ad);
                }
                return ad;
            }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], { cardAction: [0, 'cardAction'] }, null), (_l()(), textDef(0, ['Action 1'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 3, 'button', [['mdc-button', '']], [[8, 'tabIndex', 0], [1, 'type',
                0], [2, 'mdc-button', null], [2, 'mdc-button--raised', null],
            [2, 'mdc-button--primary', null], [2, 'mdc-button--accent', null],
            [2, 'mdc-button--dense', null], [2, 'mdc-button--compact', null],
            [2, 'mdc-card__action', null]], [[null, 'keypress'], [null,
                'blur']], function (_v, en, $event) {
            var ad = true;
            if (('keypress' === en)) {
                var pd_0 = (nodeValue(_v, 1514).onkeypress($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 1514).blur($event) !== false);
                ad = (pd_1 && ad);
            }
            return ad;
        }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], { cardAction: [0, 'cardAction'] }, null), (_l()(), textDef(0, ['Action 2'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(0, ['\n      '])),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 144, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#aeaeae;font-style:italic']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<!--Sample 16x9 media header style-->'])), (_l()(),
            textDef(null, ['\n.demo-card__16-9-media\n  height: 12.313rem;\n  background-image: \n    url(https://material-components-web.appspot.com/images/16-9.jpg);\n  background-repeat: no-repeat;\n  background-size: cover;\n\n'])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-card'])), (_l()(), textDef(null, ['>'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-card-primary'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 7, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['h1'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-card-title'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Title'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['h1'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 7, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['h2'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-card-subtitle'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Subtitle'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['h2'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-card-primary'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 12, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-card-media'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['class'])), (_l()(), textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"demo-card__16-9-media"'])), (_l()(), textDef(null, ['>'])), (_l()(),
            elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-card-media'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-card-actions'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 13, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-button'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['cardAction'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Action 1'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 13, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-button'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['cardAction'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Action 2'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-card-actions'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(),
            elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-card'])), (_l()(), textDef(null, ['>'])),
        (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n'])),
        (_l()(), textDef(null, ['\n']))], function (_ck, _v) {
        var currVal_0 = 'column';
        _ck(_v, 1, 0, currVal_0);
        var currVal_1 = 'start start';
        _ck(_v, 2, 0, currVal_1);
        var currVal_2 = 'mdc-padding';
        _ck(_v, 3, 0, currVal_2);
        var currVal_6 = 'info-banner';
        _ck(_v, 14, 0, currVal_6);
        var currVal_7 = 'docs-api';
        _ck(_v, 21, 0, currVal_7);
        var currVal_8 = 'column';
        _ck(_v, 274, 0, currVal_8);
        var currVal_9 = '40px';
        _ck(_v, 275, 0, currVal_9);
        var currVal_10 = 'start start';
        _ck(_v, 276, 0, currVal_10);
        var currVal_11 = 'column';
        _ck(_v, 279, 0, currVal_11);
        var currVal_14 = 'demo-card';
        _ck(_v, 282, 0, currVal_14);
        var currVal_30 = true;
        _ck(_v, 302, 0, currVal_30);
        var currVal_40 = true;
        _ck(_v, 307, 0, currVal_40);
        var currVal_41 = 'column';
        _ck(_v, 436, 0, currVal_41);
        var currVal_44 = 'demo-card';
        _ck(_v, 439, 0, currVal_44);
        var currVal_48 = false;
        _ck(_v, 446, 0, currVal_48);
        var currVal_61 = true;
        _ck(_v, 459, 0, currVal_61);
        var currVal_71 = true;
        _ck(_v, 464, 0, currVal_71);
        var currVal_72 = 'column';
        _ck(_v, 599, 0, currVal_72);
        var currVal_75 = _ck(_v, 603, 0, true);
        _ck(_v, 602, 0, currVal_75);
        var currVal_76 = _ck(_v, 605, 0, true);
        _ck(_v, 604, 0, currVal_76);
        var currVal_77 = true;
        _ck(_v, 606, 0, currVal_77);
        var currVal_93 = true;
        _ck(_v, 625, 0, currVal_93);
        var currVal_103 = true;
        _ck(_v, 630, 0, currVal_103);
        var currVal_104 = 'column';
        _ck(_v, 765, 0, currVal_104);
        var currVal_107 = 'demo-card';
        _ck(_v, 768, 0, currVal_107);
        var currVal_124 = true;
        _ck(_v, 792, 0, currVal_124);
        var currVal_134 = true;
        _ck(_v, 797, 0, currVal_134);
        var currVal_135 = 'column';
        _ck(_v, 942, 0, currVal_135);
        var currVal_138 = 'demo-card';
        _ck(_v, 945, 0, currVal_138);
        var currVal_148 = 2;
        _ck(_v, 964, 0, currVal_148);
        var currVal_160 = true;
        _ck(_v, 972, 0, currVal_160);
        var currVal_170 = true;
        _ck(_v, 977, 0, currVal_170);
        var currVal_171 = 'column';
        _ck(_v, 1143, 0, currVal_171);
        var currVal_174 = 'demo-card';
        _ck(_v, 1146, 0, currVal_174);
        var currVal_180 = 3;
        _ck(_v, 1153, 0, currVal_180);
        var currVal_183 = true;
        _ck(_v, 1156, 0, currVal_183);
        var currVal_193 = true;
        _ck(_v, 1160, 0, currVal_193);
        var currVal_203 = true;
        _ck(_v, 1165, 0, currVal_203);
        var currVal_204 = 'column';
        _ck(_v, 1292, 0, currVal_204);
        var currVal_207 = 'demo-card';
        _ck(_v, 1295, 0, currVal_207);
        var currVal_209 = _ck(_v, 1300, 0, true);
        _ck(_v, 1299, 0, currVal_209);
        var currVal_210 = _ck(_v, 1302, 0, true);
        _ck(_v, 1301, 0, currVal_210);
        var currVal_226 = true;
        _ck(_v, 1322, 0, currVal_226);
        var currVal_236 = true;
        _ck(_v, 1327, 0, currVal_236);
        var currVal_237 = 'column';
        _ck(_v, 1479, 0, currVal_237);
        var currVal_240 = 'demo-card';
        _ck(_v, 1482, 0, currVal_240);
        var currVal_246 = _ck(_v, 1499, 0, true);
        _ck(_v, 1498, 0, currVal_246);
        var currVal_247 = _ck(_v, 1501, 0, true);
        _ck(_v, 1500, 0, currVal_247);
        var currVal_259 = true;
        _ck(_v, 1509, 0, currVal_259);
        var currVal_269 = true;
        _ck(_v, 1514, 0, currVal_269);
    }, function (_ck, _v) {
        var currVal_3 = nodeValue(_v, 6).isHostClass;
        _ck(_v, 5, 0, currVal_3);
        var currVal_4 = nodeValue(_v, 10).isHostClass;
        _ck(_v, 9, 0, currVal_4);
        var currVal_5 = nodeValue(_v, 15).isHostClass;
        _ck(_v, 13, 0, currVal_5);
        var currVal_12 = nodeValue(_v, 283).isHostClass;
        var currVal_13 = nodeValue(_v, 283).classDarkTheme;
        _ck(_v, 281, 0, currVal_12, currVal_13);
        var currVal_15 = nodeValue(_v, 286).isHostClass;
        _ck(_v, 285, 0, currVal_15);
        var currVal_16 = nodeValue(_v, 289).isHostClass;
        var currVal_17 = nodeValue(_v, 289).classTitleLarge;
        _ck(_v, 288, 0, currVal_16, currVal_17);
        var currVal_18 = nodeValue(_v, 293).isHostClass;
        _ck(_v, 292, 0, currVal_18);
        var currVal_19 = nodeValue(_v, 298).isHostClass;
        var currVal_20 = nodeValue(_v, 298).classCardActionVertical;
        _ck(_v, 297, 0, currVal_19, currVal_20);
        var currVal_21 = nodeValue(_v, 302).tabindex;
        var currVal_22 = nodeValue(_v, 302).attrType;
        var currVal_23 = nodeValue(_v, 302).isHostClass;
        var currVal_24 = nodeValue(_v, 302).classRaised;
        var currVal_25 = nodeValue(_v, 302).classPrimary;
        var currVal_26 = nodeValue(_v, 302).classAccent;
        var currVal_27 = nodeValue(_v, 302).classDense;
        var currVal_28 = nodeValue(_v, 302).classCompact;
        var currVal_29 = nodeValue(_v, 302).classCardAction;
        _ck(_v, 300, 0, currVal_21, currVal_22, currVal_23, currVal_24, currVal_25, currVal_26, currVal_27, currVal_28, currVal_29);
        var currVal_31 = nodeValue(_v, 307).tabindex;
        var currVal_32 = nodeValue(_v, 307).attrType;
        var currVal_33 = nodeValue(_v, 307).isHostClass;
        var currVal_34 = nodeValue(_v, 307).classRaised;
        var currVal_35 = nodeValue(_v, 307).classPrimary;
        var currVal_36 = nodeValue(_v, 307).classAccent;
        var currVal_37 = nodeValue(_v, 307).classDense;
        var currVal_38 = nodeValue(_v, 307).classCompact;
        var currVal_39 = nodeValue(_v, 307).classCardAction;
        _ck(_v, 305, 0, currVal_31, currVal_32, currVal_33, currVal_34, currVal_35, currVal_36, currVal_37, currVal_38, currVal_39);
        var currVal_42 = nodeValue(_v, 440).isHostClass;
        var currVal_43 = nodeValue(_v, 440).classDarkTheme;
        _ck(_v, 438, 0, currVal_42, currVal_43);
        var currVal_45 = nodeValue(_v, 443).isHostClass;
        _ck(_v, 442, 0, currVal_45);
        var currVal_46 = nodeValue(_v, 446).isHostClass;
        var currVal_47 = nodeValue(_v, 446).classTitleLarge;
        _ck(_v, 445, 0, currVal_46, currVal_47);
        var currVal_49 = nodeValue(_v, 450).isHostClass;
        _ck(_v, 449, 0, currVal_49);
        var currVal_50 = nodeValue(_v, 455).isHostClass;
        var currVal_51 = nodeValue(_v, 455).classCardActionVertical;
        _ck(_v, 454, 0, currVal_50, currVal_51);
        var currVal_52 = nodeValue(_v, 459).tabindex;
        var currVal_53 = nodeValue(_v, 459).attrType;
        var currVal_54 = nodeValue(_v, 459).isHostClass;
        var currVal_55 = nodeValue(_v, 459).classRaised;
        var currVal_56 = nodeValue(_v, 459).classPrimary;
        var currVal_57 = nodeValue(_v, 459).classAccent;
        var currVal_58 = nodeValue(_v, 459).classDense;
        var currVal_59 = nodeValue(_v, 459).classCompact;
        var currVal_60 = nodeValue(_v, 459).classCardAction;
        _ck(_v, 457, 0, currVal_52, currVal_53, currVal_54, currVal_55, currVal_56, currVal_57, currVal_58, currVal_59, currVal_60);
        var currVal_62 = nodeValue(_v, 464).tabindex;
        var currVal_63 = nodeValue(_v, 464).attrType;
        var currVal_64 = nodeValue(_v, 464).isHostClass;
        var currVal_65 = nodeValue(_v, 464).classRaised;
        var currVal_66 = nodeValue(_v, 464).classPrimary;
        var currVal_67 = nodeValue(_v, 464).classAccent;
        var currVal_68 = nodeValue(_v, 464).classDense;
        var currVal_69 = nodeValue(_v, 464).classCompact;
        var currVal_70 = nodeValue(_v, 464).classCardAction;
        _ck(_v, 462, 0, currVal_62, currVal_63, currVal_64, currVal_65, currVal_66, currVal_67, currVal_68, currVal_69, currVal_70);
        var currVal_73 = nodeValue(_v, 606).isHostClass;
        var currVal_74 = nodeValue(_v, 606).classDarkTheme;
        _ck(_v, 601, 0, currVal_73, currVal_74);
        var currVal_78 = nodeValue(_v, 609).isHostClass;
        _ck(_v, 608, 0, currVal_78);
        var currVal_79 = nodeValue(_v, 612).isHostClass;
        var currVal_80 = nodeValue(_v, 612).classTitleLarge;
        _ck(_v, 611, 0, currVal_79, currVal_80);
        var currVal_81 = nodeValue(_v, 616).isHostClass;
        _ck(_v, 615, 0, currVal_81);
        var currVal_82 = nodeValue(_v, 621).isHostClass;
        var currVal_83 = nodeValue(_v, 621).classCardActionVertical;
        _ck(_v, 620, 0, currVal_82, currVal_83);
        var currVal_84 = nodeValue(_v, 625).tabindex;
        var currVal_85 = nodeValue(_v, 625).attrType;
        var currVal_86 = nodeValue(_v, 625).isHostClass;
        var currVal_87 = nodeValue(_v, 625).classRaised;
        var currVal_88 = nodeValue(_v, 625).classPrimary;
        var currVal_89 = nodeValue(_v, 625).classAccent;
        var currVal_90 = nodeValue(_v, 625).classDense;
        var currVal_91 = nodeValue(_v, 625).classCompact;
        var currVal_92 = nodeValue(_v, 625).classCardAction;
        _ck(_v, 623, 0, currVal_84, currVal_85, currVal_86, currVal_87, currVal_88, currVal_89, currVal_90, currVal_91, currVal_92);
        var currVal_94 = nodeValue(_v, 630).tabindex;
        var currVal_95 = nodeValue(_v, 630).attrType;
        var currVal_96 = nodeValue(_v, 630).isHostClass;
        var currVal_97 = nodeValue(_v, 630).classRaised;
        var currVal_98 = nodeValue(_v, 630).classPrimary;
        var currVal_99 = nodeValue(_v, 630).classAccent;
        var currVal_100 = nodeValue(_v, 630).classDense;
        var currVal_101 = nodeValue(_v, 630).classCompact;
        var currVal_102 = nodeValue(_v, 630).classCardAction;
        _ck(_v, 628, 0, currVal_94, currVal_95, currVal_96, currVal_97, currVal_98, currVal_99, currVal_100, currVal_101, currVal_102);
        var currVal_105 = nodeValue(_v, 769).isHostClass;
        var currVal_106 = nodeValue(_v, 769).classDarkTheme;
        _ck(_v, 767, 0, currVal_105, currVal_106);
        var currVal_108 = nodeValue(_v, 772).isHostClass;
        _ck(_v, 771, 0, currVal_108);
        var currVal_109 = nodeValue(_v, 775).isHostClass;
        var currVal_110 = nodeValue(_v, 775).classTitleLarge;
        _ck(_v, 774, 0, currVal_109, currVal_110);
        var currVal_111 = nodeValue(_v, 779).isHostClass;
        _ck(_v, 778, 0, currVal_111);
        var currVal_112 = nodeValue(_v, 784).isHostClass;
        _ck(_v, 783, 0, currVal_112);
        var currVal_113 = nodeValue(_v, 788).isHostClass;
        var currVal_114 = nodeValue(_v, 788).classCardActionVertical;
        _ck(_v, 787, 0, currVal_113, currVal_114);
        var currVal_115 = nodeValue(_v, 792).tabindex;
        var currVal_116 = nodeValue(_v, 792).attrType;
        var currVal_117 = nodeValue(_v, 792).isHostClass;
        var currVal_118 = nodeValue(_v, 792).classRaised;
        var currVal_119 = nodeValue(_v, 792).classPrimary;
        var currVal_120 = nodeValue(_v, 792).classAccent;
        var currVal_121 = nodeValue(_v, 792).classDense;
        var currVal_122 = nodeValue(_v, 792).classCompact;
        var currVal_123 = nodeValue(_v, 792).classCardAction;
        _ck(_v, 790, 0, currVal_115, currVal_116, currVal_117, currVal_118, currVal_119, currVal_120, currVal_121, currVal_122, currVal_123);
        var currVal_125 = nodeValue(_v, 797).tabindex;
        var currVal_126 = nodeValue(_v, 797).attrType;
        var currVal_127 = nodeValue(_v, 797).isHostClass;
        var currVal_128 = nodeValue(_v, 797).classRaised;
        var currVal_129 = nodeValue(_v, 797).classPrimary;
        var currVal_130 = nodeValue(_v, 797).classAccent;
        var currVal_131 = nodeValue(_v, 797).classDense;
        var currVal_132 = nodeValue(_v, 797).classCompact;
        var currVal_133 = nodeValue(_v, 797).classCardAction;
        _ck(_v, 795, 0, currVal_125, currVal_126, currVal_127, currVal_128, currVal_129, currVal_130, currVal_131, currVal_132, currVal_133);
        var currVal_136 = nodeValue(_v, 946).isHostClass;
        var currVal_137 = nodeValue(_v, 946).classDarkTheme;
        _ck(_v, 944, 0, currVal_136, currVal_137);
        var currVal_139 = nodeValue(_v, 949).isHostClass;
        _ck(_v, 948, 0, currVal_139);
        var currVal_140 = nodeValue(_v, 952).isHostClass;
        _ck(_v, 951, 0, currVal_140);
        var currVal_141 = nodeValue(_v, 955).isHostClass;
        var currVal_142 = nodeValue(_v, 955).classTitleLarge;
        _ck(_v, 954, 0, currVal_141, currVal_142);
        var currVal_143 = nodeValue(_v, 959).isHostClass;
        _ck(_v, 958, 0, currVal_143);
        var currVal_144 = nodeValue(_v, 964).isHostClass;
        var currVal_145 = nodeValue(_v, 964).classMediaItemOneDotFive;
        var currVal_146 = nodeValue(_v, 964).classMediaItemTwo;
        var currVal_147 = nodeValue(_v, 964).classMediaItemThree;
        _ck(_v, 963, 0, currVal_144, currVal_145, currVal_146, currVal_147);
        var currVal_149 = nodeValue(_v, 968).isHostClass;
        var currVal_150 = nodeValue(_v, 968).classCardActionVertical;
        _ck(_v, 967, 0, currVal_149, currVal_150);
        var currVal_151 = nodeValue(_v, 972).tabindex;
        var currVal_152 = nodeValue(_v, 972).attrType;
        var currVal_153 = nodeValue(_v, 972).isHostClass;
        var currVal_154 = nodeValue(_v, 972).classRaised;
        var currVal_155 = nodeValue(_v, 972).classPrimary;
        var currVal_156 = nodeValue(_v, 972).classAccent;
        var currVal_157 = nodeValue(_v, 972).classDense;
        var currVal_158 = nodeValue(_v, 972).classCompact;
        var currVal_159 = nodeValue(_v, 972).classCardAction;
        _ck(_v, 970, 0, currVal_151, currVal_152, currVal_153, currVal_154, currVal_155, currVal_156, currVal_157, currVal_158, currVal_159);
        var currVal_161 = nodeValue(_v, 977).tabindex;
        var currVal_162 = nodeValue(_v, 977).attrType;
        var currVal_163 = nodeValue(_v, 977).isHostClass;
        var currVal_164 = nodeValue(_v, 977).classRaised;
        var currVal_165 = nodeValue(_v, 977).classPrimary;
        var currVal_166 = nodeValue(_v, 977).classAccent;
        var currVal_167 = nodeValue(_v, 977).classDense;
        var currVal_168 = nodeValue(_v, 977).classCompact;
        var currVal_169 = nodeValue(_v, 977).classCardAction;
        _ck(_v, 975, 0, currVal_161, currVal_162, currVal_163, currVal_164, currVal_165, currVal_166, currVal_167, currVal_168, currVal_169);
        var currVal_172 = nodeValue(_v, 1147).isHostClass;
        var currVal_173 = nodeValue(_v, 1147).classDarkTheme;
        _ck(_v, 1145, 0, currVal_172, currVal_173);
        var currVal_175 = nodeValue(_v, 1150).isHostClass;
        _ck(_v, 1149, 0, currVal_175);
        var currVal_176 = nodeValue(_v, 1153).isHostClass;
        var currVal_177 = nodeValue(_v, 1153).classMediaItemOneDotFive;
        var currVal_178 = nodeValue(_v, 1153).classMediaItemTwo;
        var currVal_179 = nodeValue(_v, 1153).classMediaItemThree;
        _ck(_v, 1152, 0, currVal_176, currVal_177, currVal_178, currVal_179);
        var currVal_181 = nodeValue(_v, 1156).isHostClass;
        var currVal_182 = nodeValue(_v, 1156).classCardActionVertical;
        _ck(_v, 1155, 0, currVal_181, currVal_182);
        var currVal_184 = nodeValue(_v, 1160).tabindex;
        var currVal_185 = nodeValue(_v, 1160).attrType;
        var currVal_186 = nodeValue(_v, 1160).isHostClass;
        var currVal_187 = nodeValue(_v, 1160).classRaised;
        var currVal_188 = nodeValue(_v, 1160).classPrimary;
        var currVal_189 = nodeValue(_v, 1160).classAccent;
        var currVal_190 = nodeValue(_v, 1160).classDense;
        var currVal_191 = nodeValue(_v, 1160).classCompact;
        var currVal_192 = nodeValue(_v, 1160).classCardAction;
        _ck(_v, 1158, 0, currVal_184, currVal_185, currVal_186, currVal_187, currVal_188, currVal_189, currVal_190, currVal_191, currVal_192);
        var currVal_194 = nodeValue(_v, 1165).tabindex;
        var currVal_195 = nodeValue(_v, 1165).attrType;
        var currVal_196 = nodeValue(_v, 1165).isHostClass;
        var currVal_197 = nodeValue(_v, 1165).classRaised;
        var currVal_198 = nodeValue(_v, 1165).classPrimary;
        var currVal_199 = nodeValue(_v, 1165).classAccent;
        var currVal_200 = nodeValue(_v, 1165).classDense;
        var currVal_201 = nodeValue(_v, 1165).classCompact;
        var currVal_202 = nodeValue(_v, 1165).classCardAction;
        _ck(_v, 1163, 0, currVal_194, currVal_195, currVal_196, currVal_197, currVal_198, currVal_199, currVal_200, currVal_201, currVal_202);
        var currVal_205 = nodeValue(_v, 1296).isHostClass;
        var currVal_206 = nodeValue(_v, 1296).classDarkTheme;
        _ck(_v, 1294, 0, currVal_205, currVal_206);
        var currVal_208 = nodeValue(_v, 1303).isHostClass;
        _ck(_v, 1298, 0, currVal_208);
        var currVal_211 = nodeValue(_v, 1306).isHostClass;
        _ck(_v, 1305, 0, currVal_211);
        var currVal_212 = nodeValue(_v, 1309).isHostClass;
        var currVal_213 = nodeValue(_v, 1309).classTitleLarge;
        _ck(_v, 1308, 0, currVal_212, currVal_213);
        var currVal_214 = nodeValue(_v, 1313).isHostClass;
        _ck(_v, 1312, 0, currVal_214);
        var currVal_215 = nodeValue(_v, 1318).isHostClass;
        var currVal_216 = nodeValue(_v, 1318).classCardActionVertical;
        _ck(_v, 1317, 0, currVal_215, currVal_216);
        var currVal_217 = nodeValue(_v, 1322).tabindex;
        var currVal_218 = nodeValue(_v, 1322).attrType;
        var currVal_219 = nodeValue(_v, 1322).isHostClass;
        var currVal_220 = nodeValue(_v, 1322).classRaised;
        var currVal_221 = nodeValue(_v, 1322).classPrimary;
        var currVal_222 = nodeValue(_v, 1322).classAccent;
        var currVal_223 = nodeValue(_v, 1322).classDense;
        var currVal_224 = nodeValue(_v, 1322).classCompact;
        var currVal_225 = nodeValue(_v, 1322).classCardAction;
        _ck(_v, 1320, 0, currVal_217, currVal_218, currVal_219, currVal_220, currVal_221, currVal_222, currVal_223, currVal_224, currVal_225);
        var currVal_227 = nodeValue(_v, 1327).tabindex;
        var currVal_228 = nodeValue(_v, 1327).attrType;
        var currVal_229 = nodeValue(_v, 1327).isHostClass;
        var currVal_230 = nodeValue(_v, 1327).classRaised;
        var currVal_231 = nodeValue(_v, 1327).classPrimary;
        var currVal_232 = nodeValue(_v, 1327).classAccent;
        var currVal_233 = nodeValue(_v, 1327).classDense;
        var currVal_234 = nodeValue(_v, 1327).classCompact;
        var currVal_235 = nodeValue(_v, 1327).classCardAction;
        _ck(_v, 1325, 0, currVal_227, currVal_228, currVal_229, currVal_230, currVal_231, currVal_232, currVal_233, currVal_234, currVal_235);
        var currVal_238 = nodeValue(_v, 1483).isHostClass;
        var currVal_239 = nodeValue(_v, 1483).classDarkTheme;
        _ck(_v, 1481, 0, currVal_238, currVal_239);
        var currVal_241 = nodeValue(_v, 1486).isHostClass;
        _ck(_v, 1485, 0, currVal_241);
        var currVal_242 = nodeValue(_v, 1489).isHostClass;
        var currVal_243 = nodeValue(_v, 1489).classTitleLarge;
        _ck(_v, 1488, 0, currVal_242, currVal_243);
        var currVal_244 = nodeValue(_v, 1493).isHostClass;
        _ck(_v, 1492, 0, currVal_244);
        var currVal_245 = nodeValue(_v, 1502).isHostClass;
        _ck(_v, 1497, 0, currVal_245);
        var currVal_248 = nodeValue(_v, 1505).isHostClass;
        var currVal_249 = nodeValue(_v, 1505).classCardActionVertical;
        _ck(_v, 1504, 0, currVal_248, currVal_249);
        var currVal_250 = nodeValue(_v, 1509).tabindex;
        var currVal_251 = nodeValue(_v, 1509).attrType;
        var currVal_252 = nodeValue(_v, 1509).isHostClass;
        var currVal_253 = nodeValue(_v, 1509).classRaised;
        var currVal_254 = nodeValue(_v, 1509).classPrimary;
        var currVal_255 = nodeValue(_v, 1509).classAccent;
        var currVal_256 = nodeValue(_v, 1509).classDense;
        var currVal_257 = nodeValue(_v, 1509).classCompact;
        var currVal_258 = nodeValue(_v, 1509).classCardAction;
        _ck(_v, 1507, 0, currVal_250, currVal_251, currVal_252, currVal_253, currVal_254, currVal_255, currVal_256, currVal_257, currVal_258);
        var currVal_260 = nodeValue(_v, 1514).tabindex;
        var currVal_261 = nodeValue(_v, 1514).attrType;
        var currVal_262 = nodeValue(_v, 1514).isHostClass;
        var currVal_263 = nodeValue(_v, 1514).classRaised;
        var currVal_264 = nodeValue(_v, 1514).classPrimary;
        var currVal_265 = nodeValue(_v, 1514).classAccent;
        var currVal_266 = nodeValue(_v, 1514).classDense;
        var currVal_267 = nodeValue(_v, 1514).classCompact;
        var currVal_268 = nodeValue(_v, 1514).classCardAction;
        _ck(_v, 1512, 0, currVal_260, currVal_261, currVal_262, currVal_263, currVal_264, currVal_265, currVal_266, currVal_267, currVal_268);
    });
}
function View_CardDemoComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1, 'card-demo', [], null, null, null, View_CardDemoComponent_0, RenderType_CardDemoComponent)),
        directiveDef(49152, null, 0, CardDemoComponent, [], null, null)], null, null);
}
var CardDemoComponentNgFactory = createComponentFactory('card-demo', CardDemoComponent, View_CardDemoComponent_Host_0, {}, {}, []);

/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
/* tslint:disable */
var styles_ElevationDemoComponent = [];
var RenderType_ElevationDemoComponent = createRendererType2({ encapsulation: 2,
    styles: styles_ElevationDemoComponent, data: {} });
function View_ElevationDemoComponent_1(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 6, 'figure', [['class',
                'demo-surface']], null, null, null, null, null)),
        directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers,
            KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0,
                'classBase'] }, null), directiveDef(540672, null, 0, material_es5_20, [Renderer2, ElementRef], { mdcElevation: [0, 'mdcElevation'] }, null),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 1, 'figcaption', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-elevation="',
            '"'])), (_l()(), textDef(null, ['\n      ']))], function (_ck, _v) {
        var currVal_0 = 'demo-surface';
        _ck(_v, 1, 0, currVal_0);
        var currVal_1 = _v.context.$implicit;
        _ck(_v, 2, 0, currVal_1);
    }, function (_ck, _v) {
        var currVal_2 = _v.context.$implicit;
        _ck(_v, 5, 0, currVal_2);
    });
}
function View_ElevationDemoComponent_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 58, 'div', [['class',
                'mdc-padding'], ['fxLayout', 'column'], ['fxLayoutAlign', 'start start']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0,
                'layout'] }, null), directiveDef(737280, null, 0, LayoutAlignDirective, [MediaMonitor, ElementRef, Renderer2, [2, LayoutDirective]], { align: [0,
                'align'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 2, 'h1', [['mdc-typography-display1',
                '']], [[2, 'mdc-typography--display1', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['Elevation'])), (_l()(),
            textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 2, 'div', [['mdc-typography-subheading2', '']], [[2, 'mdc-typography--subheading2',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, undefined, [], null, null),
        (_l()(), textDef(null, ['Shadows provide important visual cues about objects’ depth and directional movement. They are the only visual cue indicating the amount of separation between surfaces. An object’s elevation determines the appearance of its shadow.'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 5, 'div', [['class', 'info-banner'], ['mdc-typography-subheading1', '']], [[2,
                'mdc-typography--subheading1', null]], null, null, null, null)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(),
            textDef(null, ['\n    '])), (_l()(), textDef(null, ['import { ElevationModule } from \'@angular-mdc/web\';'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 37, 'div', [['class', 'docs-api']], null, null, null, null, null)),
        directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers,
            KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0,
                'classBase'] }, null), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 25, 'table', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Directive'])), (_l()(), textDef(null, ['\n          '])), (_l()(),
            elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])), (_l()(), textDef(null, ['\n        '])), (_l()(),
            textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])),
        (_l()(), elementDef(0, null, null, 10, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-elevation="#"'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Elevation values are mapped out in a "z-space" and range from 0 to 24.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 6, 'div', [['fxLayout',
                'row'], ['fxLayoutWrap', '']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor,
            ElementRef, Renderer2], { layout: [0, 'layout'] }, null), directiveDef(737280, null, 0, LayoutWrapDirective, [MediaMonitor, ElementRef, Renderer2,
            [2, LayoutDirective]], { wrap: [0, 'wrap'] }, null), (_l()(), textDef(null, ['\n      '])), (_l()(), anchorDef(16777216, null, null, 1, null, View_ElevationDemoComponent_1)), directiveDef(802816, null, 0, NgForOf, [ViewContainerRef, TemplateRef, IterableDiffers], { ngForOf: [0, 'ngForOf'] }, null), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n']))], function (_ck, _v) {
        var _co = _v.component;
        var currVal_0 = 'column';
        _ck(_v, 1, 0, currVal_0);
        var currVal_1 = 'start start';
        _ck(_v, 2, 0, currVal_1);
        var currVal_2 = 'mdc-padding';
        _ck(_v, 3, 0, currVal_2);
        var currVal_6 = 'info-banner';
        _ck(_v, 14, 0, currVal_6);
        var currVal_7 = 'docs-api';
        _ck(_v, 21, 0, currVal_7);
        var currVal_8 = 'row';
        _ck(_v, 51, 0, currVal_8);
        var currVal_9 = '';
        _ck(_v, 52, 0, currVal_9);
        var currVal_10 = _co.items;
        _ck(_v, 55, 0, currVal_10);
    }, function (_ck, _v) {
        var currVal_3 = nodeValue(_v, 6).isHostClass;
        _ck(_v, 5, 0, currVal_3);
        var currVal_4 = nodeValue(_v, 10).isHostClass;
        _ck(_v, 9, 0, currVal_4);
        var currVal_5 = nodeValue(_v, 15).isHostClass;
        _ck(_v, 13, 0, currVal_5);
    });
}
function View_ElevationDemoComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1, 'elevation-demo', [], null, null, null, View_ElevationDemoComponent_0, RenderType_ElevationDemoComponent)), directiveDef(49152, null, 0, ElevationDemoComponent, [], null, null)], null, null);
}
var ElevationDemoComponentNgFactory = createComponentFactory('elevation-demo', ElevationDemoComponent, View_ElevationDemoComponent_Host_0, {}, {}, []);

/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
/* tslint:disable */
var styles_ListDemoComponent = [];
var RenderType_ListDemoComponent = createRendererType2({ encapsulation: 2,
    styles: styles_ListDemoComponent, data: {} });
function View_ListDemoComponent_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1809, 'div', [['class',
                'mdc-padding'], ['fxLayout', 'column']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0, 'layout'] }, null),
        directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers,
            KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0,
                'classBase'] }, null), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 2, 'h1', [['mdc-typography-display1',
                    '']], [[2, 'mdc-typography--display1', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['Lists'])), (_l()(),
            textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 2, 'div', [['mdc-typography-subheading2', '']], [[2, 'mdc-typography--subheading2',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, undefined, [], null, null),
        (_l()(), textDef(null, ['MDC List provides styles which implement Material Design Lists - "A single continuous column of tessellated subdivisions of equal width." Both single-line and two-line lists are supported.'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 5, 'div', [['class', 'info-banner'], ['mdc-typography-subheading1', '']], [[2,
                'mdc-typography--subheading1', null]], null, null, null, null)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(),
            textDef(null, ['\n    '])), (_l()(), textDef(null, ['import { ListModule } from \'@angular-mdc/web\';'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 250, 'div', [['class', 'docs-api']], null, null, null, null, null)),
        directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers,
            KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0,
                'classBase'] }, null), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 70, 'table', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'thead', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Component'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-list'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Properties'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 37, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() dense: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Shrinks the font size and height of each list item.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() twoLine: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Sets a class modifier for using two lines inside of list items.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() avatar: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Style the start detail elements as "avatars" - large, circular details that lend themselves well to contact images, profile pictures, etc.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() disableRipple: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Disables ink ripple. Applied at the parent mdc-list level; overrides mdc-list-item\'s [disableRipple].'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 93, 'table', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])),
        (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Directive'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 13, 'tbody', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-list-item'])), (_l()(), textDef(null, ['\n        '])), (_l()(),
            textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])), (_l()(),
            elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['a[mdc-list-item]'])), (_l()(), textDef(null, ['\n        '])), (_l()(),
            textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])),
        (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Properties'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 13, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 10, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() disableRipple: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 4, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n'])), (_l()(),
            elementDef(0, null, null, 2, 'pre', [], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 1, 'code', [], null, null, null, null, null)), (_l()(), textDef(null, ['Disables ink ripple on an individual list item.\nNote: Overridden by mdc-list\'s [disableRipple]'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Child Directive'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 30, 'tbody', [], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-list-item-start'])), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Position element at the start of the row.'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(),
            elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc-list-item-end'])), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Position element at the end of the row.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-list-item-text'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-list-item-secondary'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 46, 'table', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])),
        (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Directive'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'tbody', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-list-divider'])), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Use as full-width or inset subdivisions either within lists themselves, or event standalone.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Properties'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() inset: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Inset dividers are useful when working with lists which have start details.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 31, 'table', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])),
        (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Directive'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 19, 'tbody', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-list-group'])), (_l()(), textDef(null, ['\n          '])), (_l()(),
            elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Multiple related lists can be grouped together using the mdc-list-group.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-list-group-subheader'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Use to add a subheader to the top of your grouped list.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 151, 'div', [['class', 'mdc-padding'], ['fxLayout', 'column']], null, null, null, null, null)),
        directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef,
            Renderer2], { layout: [0, 'layout'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers,
            ElementRef, Renderer, Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 1, 'h3', [], null, null, null, null, null)), (_l()(), textDef(null, ['Single-Line'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 38, 'div', [['fxLayout', 'row']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0, 'layout'] }, null), (_l()(), textDef(null, ['\n      '])),
        (_l()(), elementDef(0, null, null, 16, 'mdc-form-field', [], [[8, 'className', 0]], null, null, null, null)),
        directiveDef(1196032, null, 3, material_es5_54, [Renderer2, ElementRef,
            undefined], null, null), queryDef(335544320, 1, { inputCheckbox: 0 }),
        queryDef(335544320, 2, { inputRadio: 0 }), queryDef(335544320, 3, { inputSwitch: 0 }), (_l()(),
            textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 6, 'mdc-checkbox', [], [[2, 'mdc-checkbox', null], [2, 'ng-untouched',
                null], [2, 'ng-touched', null], [2, 'ng-pristine', null],
            [2, 'ng-dirty', null], [2, 'ng-valid', null], [2, 'ng-invalid',
                null], [2, 'ng-pending', null]], [[null, 'ngModelChange']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('ngModelChange' === en)) {
                var pd_0 = ((_co.isSinglelineDense = $event) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, View_CheckboxComponent_0, RenderType_CheckboxComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[1, 4]], 0, material_es5_17, [Renderer2, ElementRef, material_es5_74, undefined], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_17]), directiveDef(671744, null, 0, NgModel, [[8,
                null], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { model: [0, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 1, 'label', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Dense'])), (_l()(), textDef(null, ['\n      '])),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 16, 'mdc-form-field', [], [[8, 'className', 0]], null, null, null, null)), directiveDef(1196032, null, 3, material_es5_54, [Renderer2, ElementRef, undefined], null, null), queryDef(335544320, 4, { inputCheckbox: 0 }), queryDef(335544320, 5, { inputRadio: 0 }), queryDef(335544320, 6, { inputSwitch: 0 }), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 6, 'mdc-checkbox', [], [[2, 'mdc-checkbox', null], [2, 'ng-untouched', null],
            [2, 'ng-touched', null], [2, 'ng-pristine', null], [2, 'ng-dirty',
                null], [2, 'ng-valid', null], [2, 'ng-invalid', null],
            [2, 'ng-pending', null]], [[null, 'ngModelChange']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('ngModelChange' === en)) {
                var pd_0 = ((_co.isSingleDarkTheme = $event) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, View_CheckboxComponent_0, RenderType_CheckboxComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[4, 4]], 0, material_es5_17, [Renderer2, ElementRef, material_es5_74, undefined], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_17]), directiveDef(671744, null, 0, NgModel, [[8,
                null], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { model: [0, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 1, 'label', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Dark Theme'])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 20, 'mdc-list', [['class', 'demo-wrapper']], [[2, 'mdc-list', null], [1, 'role', 0], [2,
                'mdc-list--dense', null], [2, 'mdc-list--two-line', null],
            [2, 'mdc-list--avatar-list', null]], null, null, View_ListComponent_0, RenderType_ListComponent)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers,
            ElementRef, Renderer, Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(573440, null, 1, material_es5_58, [ElementRef], { dense: [0, 'dense'] }, null), queryDef(603979776, 7, { listItems: 1 }), directiveDef(540672, null, 0, material_es5_99, [Renderer2, ElementRef], { mdcThemeDark: [0,
                'mdcThemeDark'] }, null), (_l()(), textDef(0, ['\n      '])), (_l()(),
            elementDef(0, null, 0, 3, 'mdc-list-item', [], [[2, 'mdc-list-item',
                    null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2,
            ElementRef, undefined]), directiveDef(4734976, [[7, 4]], 0, material_es5_59, [ElementRef,
            material_es5_74, material_es5_58], null, null), (_l()(), textDef(null, ['Single-line item'])), (_l()(), textDef(0, ['\n      '])), (_l()(), elementDef(0, null, 0, 3, 'mdc-list-item', [], [[2, 'mdc-list-item', null],
            [1, 'role', 0]], null, null, null, null)),
        providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef,
            undefined]), directiveDef(4734976, [[7, 4]], 0, material_es5_59, [ElementRef, material_es5_74,
            material_es5_58], null, null), (_l()(), textDef(null, ['Single-line item'])), (_l()(), textDef(0, ['\n      '])), (_l()(), elementDef(0, null, 0, 3, 'mdc-list-item', [], [[2, 'mdc-list-item', null],
            [1, 'role', 0]], null, null, null, null)),
        providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef,
            undefined]), directiveDef(4734976, [[7, 4]], 0, material_es5_59, [ElementRef, material_es5_74,
            material_es5_58], null, null), (_l()(), textDef(null, ['Single-line item'])), (_l()(), textDef(0, ['\n    '])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 81, 'div', [['fxLayout',
                'column'], ['fxLayoutAlign', 'start start']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0, 'layout'] }, null),
        directiveDef(737280, null, 0, LayoutAlignDirective, [MediaMonitor, ElementRef,
            Renderer2, [2, LayoutDirective]], { align: [0, 'align'] }, null),
        (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 76, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 18, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list'])), (_l()(), textDef(null, ['\n ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['dense'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"false"'])), (_l()(), textDef(null, ['\n ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-theme-dark'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"false"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Single-line item'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Single-line item'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Single-line item'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, [' \n'])), (_l()(), textDef(null, ['\n '])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 275, 'div', [['class',
                'mdc-padding'], ['fxLayout', 'column']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0, 'layout'] }, null),
        directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers,
            KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0,
                'classBase'] }, null), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 1, 'h3', [], null, null, null, null, null)), (_l()(), textDef(null, ['Two-line List'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 38, 'div', [['fxLayout', 'row']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0, 'layout'] }, null), (_l()(), textDef(null, ['\n      '])),
        (_l()(), elementDef(0, null, null, 16, 'mdc-form-field', [], [[8, 'className', 0]], null, null, null, null)),
        directiveDef(1196032, null, 3, material_es5_54, [Renderer2, ElementRef,
            undefined], null, null), queryDef(335544320, 8, { inputCheckbox: 0 }),
        queryDef(335544320, 9, { inputRadio: 0 }), queryDef(335544320, 10, { inputSwitch: 0 }), (_l()(),
            textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 6, 'mdc-checkbox', [], [[2, 'mdc-checkbox', null], [2, 'ng-untouched',
                null], [2, 'ng-touched', null], [2, 'ng-pristine', null],
            [2, 'ng-dirty', null], [2, 'ng-valid', null], [2, 'ng-invalid',
                null], [2, 'ng-pending', null]], [[null, 'ngModelChange']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('ngModelChange' === en)) {
                var pd_0 = ((_co.isTwolineDense = $event) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, View_CheckboxComponent_0, RenderType_CheckboxComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[8, 4]], 0, material_es5_17, [Renderer2, ElementRef, material_es5_74, undefined], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_17]), directiveDef(671744, null, 0, NgModel, [[8,
                null], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { model: [0, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 1, 'label', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Dense'])), (_l()(), textDef(null, ['\n      '])),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 16, 'mdc-form-field', [], [[8, 'className', 0]], null, null, null, null)), directiveDef(1196032, null, 3, material_es5_54, [Renderer2, ElementRef, undefined], null, null), queryDef(335544320, 11, { inputCheckbox: 0 }), queryDef(335544320, 12, { inputRadio: 0 }), queryDef(335544320, 13, { inputSwitch: 0 }), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 6, 'mdc-checkbox', [], [[2, 'mdc-checkbox', null], [2, 'ng-untouched', null],
            [2, 'ng-touched', null], [2, 'ng-pristine', null], [2, 'ng-dirty',
                null], [2, 'ng-valid', null], [2, 'ng-invalid', null],
            [2, 'ng-pending', null]], [[null, 'ngModelChange']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('ngModelChange' === en)) {
                var pd_0 = ((_co.isTwoDarkTheme = $event) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, View_CheckboxComponent_0, RenderType_CheckboxComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[11, 4]], 0, material_es5_17, [Renderer2, ElementRef, material_es5_74, undefined], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_17]), directiveDef(671744, null, 0, NgModel, [[8,
                null], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { model: [0, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 1, 'label', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Dark Theme'])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 44, 'mdc-list', [['class', 'demo-wrapper']], [[2, 'mdc-list', null], [1, 'role', 0], [2,
                'mdc-list--dense', null], [2, 'mdc-list--two-line', null],
            [2, 'mdc-list--avatar-list', null]], null, null, View_ListComponent_0, RenderType_ListComponent)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers,
            ElementRef, Renderer, Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(573440, null, 1, material_es5_58, [ElementRef], { dense: [0, 'dense'], twoLine: [1, 'twoLine'] }, null), queryDef(603979776, 14, { listItems: 1 }), directiveDef(540672, null, 0, material_es5_99, [Renderer2,
            ElementRef], { mdcThemeDark: [0, 'mdcThemeDark'] }, null), (_l()(),
            textDef(0, ['\n      '])), (_l()(), elementDef(0, null, 0, 11, 'mdc-list-item', [], [[2, 'mdc-list-item', null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4734976, [[14, 4]], 0, material_es5_59, [ElementRef, material_es5_74, material_es5_58], null, null), (_l()(), textDef(null, ['\n        '])),
        (_l()(), elementDef(0, null, null, 6, 'mdc-list-item-text', [], [[2, 'mdc-list-item__text', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_62, [ElementRef], null, null), (_l()(), textDef(null, ['\n          Single-line item\n          '])),
        (_l()(), elementDef(0, null, null, 2, 'mdc-list-item-secondary', [], [[2, 'mdc-list-item__text__secondary', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_63, [ElementRef], null, null), (_l()(), textDef(null, ['Secondary text'])), (_l()(), textDef(null, ['\n        '])), (_l()(),
            textDef(null, ['\n      '])), (_l()(), textDef(0, ['\n      '])), (_l()(),
            elementDef(0, null, 0, 11, 'mdc-list-item', [], [[2, 'mdc-list-item',
                    null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2,
            ElementRef, undefined]), directiveDef(4734976, [[14, 4]], 0, material_es5_59, [ElementRef,
            material_es5_74, material_es5_58], null, null), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 6, 'mdc-list-item-text', [], [[2, 'mdc-list-item__text', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_62, [ElementRef], null, null), (_l()(), textDef(null, ['\n          Single-line item\n          '])), (_l()(), elementDef(0, null, null, 2, 'mdc-list-item-secondary', [], [[2, 'mdc-list-item__text__secondary',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_63, [ElementRef], null, null), (_l()(), textDef(null, ['Secondary text'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(0, ['\n      '])), (_l()(), elementDef(0, null, 0, 11, 'mdc-list-item', [], [[2, 'mdc-list-item', null], [1,
                'role', 0]], null, null, null, null)),
        providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef,
            undefined]), directiveDef(4734976, [[14, 4]], 0, material_es5_59, [ElementRef, material_es5_74,
            material_es5_58], null, null), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 6, 'mdc-list-item-text', [], [[2, 'mdc-list-item__text', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_62, [ElementRef], null, null), (_l()(), textDef(null, ['\n          Single-line item\n          '])), (_l()(), elementDef(0, null, null, 2, 'mdc-list-item-secondary', [], [[2, 'mdc-list-item__text__secondary',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_63, [ElementRef], null, null), (_l()(), textDef(null, ['Secondary text'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(0, ['\n    '])), (_l()(), textDef(null, ['\n\n   '])), (_l()(), elementDef(0, null, null, 182, 'div', [['fxLayout',
                'column'], ['fxLayoutAlign', 'start start']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0, 'layout'] }, null),
        directiveDef(737280, null, 0, LayoutAlignDirective, [MediaMonitor, ElementRef,
            Renderer2, [2, LayoutDirective]], { align: [0, 'align'] }, null),
        (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 178, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 24, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list'])), (_l()(), textDef(null, [' \n  ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['twoLine'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['\n  ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['dense'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"false"'])), (_l()(), textDef(null, ['\n  ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-theme-dark'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"false"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item-text'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n      Single-line item\n      '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item-secondary'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Secondary text'])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-list-item-secondary'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item-text'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item-text'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n      Single-line item\n      '])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-list-item-secondary'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Secondary text'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item-secondary'])), (_l()(), textDef(null, ['>'])), (_l()(),
            textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item-text'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item-text'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n      Single-line item\n      '])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-list-item-secondary'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Secondary text'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item-secondary'])), (_l()(), textDef(null, ['>'])), (_l()(),
            textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item-text'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n\n  '])), (_l()(), elementDef(0, null, null, 65, 'div', [['class', 'mdc-padding'], ['fxLayout', 'column']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0, 'layout'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 1, 'h3', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Start Detail'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 20, 'div', [['fxLayout',
                'row']], null, null, null, null, null)),
        directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef,
            Renderer2], { layout: [0, 'layout'] }, null), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 16, 'mdc-form-field', [], [[8, 'className', 0]], null, null, null, null)), directiveDef(1196032, null, 3, material_es5_54, [Renderer2,
            ElementRef, undefined], null, null), queryDef(335544320, 15, { inputCheckbox: 0 }),
        queryDef(335544320, 16, { inputRadio: 0 }), queryDef(335544320, 17, { inputSwitch: 0 }), (_l()(),
            textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 6, 'mdc-checkbox', [], [[2, 'mdc-checkbox', null], [2, 'ng-untouched',
                null], [2, 'ng-touched', null], [2, 'ng-pristine', null],
            [2, 'ng-dirty', null], [2, 'ng-valid', null], [2, 'ng-invalid',
                null], [2, 'ng-pending', null]], [[null, 'ngModelChange']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('ngModelChange' === en)) {
                var pd_0 = ((_co.isStartDetailDarkTheme = $event) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, View_CheckboxComponent_0, RenderType_CheckboxComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[15, 4]], 0, material_es5_17, [Renderer2, ElementRef, material_es5_74, undefined], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_17]), directiveDef(671744, null, 0, NgModel, [[8,
                null], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { model: [0, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 1, 'label', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Dark Theme'])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 35, 'mdc-list', [['class', 'demo-wrapper']], [[2, 'mdc-list', null], [1, 'role', 0], [2,
                'mdc-list--dense', null], [2, 'mdc-list--two-line', null],
            [2, 'mdc-list--avatar-list', null]], null, null, View_ListComponent_0, RenderType_ListComponent)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers,
            ElementRef, Renderer, Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(573440, null, 1, material_es5_58, [ElementRef], null, null), queryDef(603979776, 18, { listItems: 1 }), directiveDef(540672, null, 0, material_es5_99, [Renderer2, ElementRef], { mdcThemeDark: [0,
                'mdcThemeDark'] }, null), (_l()(), textDef(0, ['\n      '])), (_l()(),
            elementDef(0, null, 0, 8, 'mdc-list-item', [], [[2, 'mdc-list-item',
                    null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2,
            ElementRef, undefined]), directiveDef(4734976, [[18, 4]], 0, material_es5_59, [ElementRef,
            material_es5_74, material_es5_58], null, null), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon',
                ''], ['mdc-list-item-start', '']], [[2, 'mdc-list-item__start-detail', null],
            [2, 'material-icons', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['network_wifi'])), (_l()(), textDef(null, ['Wi-Fi\n      '])), (_l()(),
            textDef(0, ['\n      '])), (_l()(), elementDef(0, null, 0, 8, 'mdc-list-item', [], [[2, 'mdc-list-item', null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4734976, [[18, 4]], 0, material_es5_59, [ElementRef, material_es5_74, material_es5_58], null, null), (_l()(), textDef(null, ['\n        '])),
        (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon', ''], ['mdc-list-item-start',
                '']], [[2, 'mdc-list-item__start-detail', null], [2, 'material-icons',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['bluetooth'])),
        (_l()(), textDef(null, ['Bluetooth\n      '])), (_l()(), textDef(0, ['\n      '])),
        (_l()(), elementDef(0, null, 0, 8, 'mdc-list-item', [], [[2, 'mdc-list-item',
                null], [1, 'role', 0]], null, null, null, null)),
        providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef,
            undefined]), directiveDef(4734976, [[18, 4]], 0, material_es5_59, [ElementRef, material_es5_74,
            material_es5_58], null, null), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon',
                ''], ['mdc-list-item-start', '']], [[2, 'mdc-list-item__start-detail', null],
            [2, 'material-icons', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['data_usage'])), (_l()(), textDef(null, ['Data Usage\n      '])),
        (_l()(), textDef(0, ['\n    '])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 42, 'div', [['class', 'mdc-padding'], ['fxLayout', 'column']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0,
                'layout'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 1, 'h3', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['End Detail'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 34, 'mdc-list', [['class', 'demo-wrapper']], [[2, 'mdc-list', null], [1, 'role', 0], [2,
                'mdc-list--dense', null], [2, 'mdc-list--two-line', null],
            [2, 'mdc-list--avatar-list', null]], null, null, View_ListComponent_0, RenderType_ListComponent)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers,
            ElementRef, Renderer, Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(573440, null, 1, material_es5_58, [ElementRef], null, null), queryDef(603979776, 19, { listItems: 1 }), (_l()(),
            textDef(0, ['\n      '])), (_l()(), elementDef(0, null, 0, 8, 'mdc-list-item', [], [[2, 'mdc-list-item', null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4734976, [[19, 4]], 0, material_es5_59, [ElementRef, material_es5_74, material_es5_58], null, null), (_l()(), textDef(null, ['\n        Wi-Fi'])),
        (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon', ''], ['mdc-list-item-end',
                '']], [[2, 'mdc-list-item__end-detail', null], [2, 'material-icons',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_61, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['info'])), (_l()(),
            textDef(null, ['\n      '])), (_l()(), textDef(0, ['\n      '])), (_l()(),
            elementDef(0, null, 0, 8, 'mdc-list-item', [], [[2, 'mdc-list-item',
                    null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2,
            ElementRef, undefined]), directiveDef(4734976, [[19, 4]], 0, material_es5_59, [ElementRef,
            material_es5_74, material_es5_58], null, null), (_l()(), textDef(null, ['\n        Bluetooth'])), (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon', ''], ['mdc-list-item-end', '']], [[2, 'mdc-list-item__end-detail',
                null], [2, 'material-icons', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_61, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['info'])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(0, ['\n      '])), (_l()(), elementDef(0, null, 0, 8, 'mdc-list-item', [], [[2, 'mdc-list-item', null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4734976, [[19, 4]], 0, material_es5_59, [ElementRef, material_es5_74, material_es5_58], null, null),
        (_l()(), textDef(null, ['\n        Data Usage'])), (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon', ''], ['mdc-list-item-end', '']], [[2,
                'mdc-list-item__end-detail', null], [2, 'material-icons', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_61, [ElementRef], null, null),
        directiveDef(16384, null, 0, material_es5_65, [], null, null),
        (_l()(), textDef(null, ['info'])), (_l()(), textDef(null, ['\n      '])),
        (_l()(), textDef(0, ['\n    '])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 264, 'div', [['class', 'mdc-padding'], ['fxLayout', 'column']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0, 'layout'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 1, 'h3', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Start + End Detail'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 20, 'div', [['fxLayout',
                'row']], null, null, null, null, null)),
        directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef,
            Renderer2], { layout: [0, 'layout'] }, null), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 16, 'mdc-form-field', [], [[8, 'className', 0]], null, null, null, null)), directiveDef(1196032, null, 3, material_es5_54, [Renderer2,
            ElementRef, undefined], null, null), queryDef(335544320, 20, { inputCheckbox: 0 }),
        queryDef(335544320, 21, { inputRadio: 0 }), queryDef(335544320, 22, { inputSwitch: 0 }), (_l()(),
            textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 6, 'mdc-checkbox', [], [[2, 'mdc-checkbox', null], [2, 'ng-untouched',
                null], [2, 'ng-touched', null], [2, 'ng-pristine', null],
            [2, 'ng-dirty', null], [2, 'ng-valid', null], [2, 'ng-invalid',
                null], [2, 'ng-pending', null]], [[null, 'ngModelChange']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('ngModelChange' === en)) {
                var pd_0 = ((_co.isStartEndDetailDarkTheme = $event) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, View_CheckboxComponent_0, RenderType_CheckboxComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[20, 4]], 0, material_es5_17, [Renderer2, ElementRef, material_es5_74, undefined], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_17]), directiveDef(671744, null, 0, NgModel, [[8,
                null], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { model: [0, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 1, 'label', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Dark Theme'])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 50, 'mdc-list', [['class', 'demo-wrapper']], [[2, 'mdc-list', null], [1, 'role', 0], [2,
                'mdc-list--dense', null], [2, 'mdc-list--two-line', null],
            [2, 'mdc-list--avatar-list', null]], null, null, View_ListComponent_0, RenderType_ListComponent)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers,
            ElementRef, Renderer, Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(573440, null, 1, material_es5_58, [ElementRef], null, null), queryDef(603979776, 23, { listItems: 1 }), directiveDef(540672, null, 0, material_es5_99, [Renderer2, ElementRef], { mdcThemeDark: [0,
                'mdcThemeDark'] }, null), (_l()(), textDef(0, ['\n      '])), (_l()(),
            elementDef(0, null, 0, 13, 'mdc-list-item', [], [[2, 'mdc-list-item',
                    null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2,
            ElementRef, undefined]), directiveDef(4734976, [[23, 4]], 0, material_es5_59, [ElementRef,
            material_es5_74, material_es5_58], null, null), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon',
                ''], ['mdc-list-item-start', '']], [[2, 'mdc-list-item__start-detail', null],
            [2, 'material-icons', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['network_wifi'])), (_l()(), textDef(null, ['Wi-Fi'])), (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon', ''], ['mdc-list-item-end',
                '']], [[2, 'mdc-list-item__end-detail', null], [2, 'material-icons',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_61, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['info'])), (_l()(),
            textDef(null, ['\n      '])), (_l()(), textDef(0, ['\n      '])), (_l()(),
            elementDef(0, null, 0, 13, 'mdc-list-item', [], [[2, 'mdc-list-item',
                    null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2,
            ElementRef, undefined]), directiveDef(4734976, [[23, 4]], 0, material_es5_59, [ElementRef,
            material_es5_74, material_es5_58], null, null), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon',
                ''], ['mdc-list-item-start', '']], [[2, 'mdc-list-item__start-detail', null],
            [2, 'material-icons', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['bluetooth'])), (_l()(), textDef(null, ['Bluetooth'])), (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon', ''], ['mdc-list-item-end',
                '']], [[2, 'mdc-list-item__end-detail', null], [2, 'material-icons',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_61, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['info'])), (_l()(),
            textDef(null, ['\n      '])), (_l()(), textDef(0, ['\n      '])), (_l()(),
            elementDef(0, null, 0, 13, 'mdc-list-item', [], [[2, 'mdc-list-item',
                    null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2,
            ElementRef, undefined]), directiveDef(4734976, [[23, 4]], 0, material_es5_59, [ElementRef,
            material_es5_74, material_es5_58], null, null), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon',
                ''], ['mdc-list-item-start', '']], [[2, 'mdc-list-item__start-detail', null],
            [2, 'material-icons', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['data_usage'])), (_l()(), textDef(null, ['Data Usage'])), (_l()(),
            elementDef(0, null, null, 3, 'i', [['material-icon', ''], ['mdc-list-item-end',
                    '']], [[2, 'mdc-list-item__end-detail', null], [2, 'material-icons',
                    null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_61, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['info'])), (_l()(),
            textDef(null, ['\n      '])), (_l()(), textDef(0, ['\n    '])), (_l()(),
            textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 182, 'div', [['fxLayout', 'column'], ['fxLayoutAlign', 'start start']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0, 'layout'] }, null), directiveDef(737280, null, 0, LayoutAlignDirective, [MediaMonitor, ElementRef, Renderer2, [2, LayoutDirective]], { align: [0,
                'align'] }, null), (_l()(), textDef(null, ['\n'])), (_l()(),
            elementDef(0, null, null, 178, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)),
        (_l()(), elementDef(0, null, null, 12, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-list'])), (_l()(), textDef(null, [' ['])),
        (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc-theme-dark'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"false"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 10, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['i'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-list-item-start'])), (_l()(), textDef(null, [' '])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['material-icon'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['network_wifi'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['i'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    Wi-Fi\n    '])), (_l()(), elementDef(0, null, null, 10, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['i'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-list-item-end'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['material-icon'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['info'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['i'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 10, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['i'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-list-item-start'])), (_l()(), textDef(null, [' '])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['material-icon'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['bluetooth'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['i'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    Bluetooth\n    '])), (_l()(),
            elementDef(0, null, null, 10, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['i'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-list-item-end'])),
        (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['material-icon'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['info'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['i'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 10, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['i'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-list-item-start'])), (_l()(), textDef(null, [' '])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['material-icon'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['data_usage'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['i'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    Data Usage\n    '])), (_l()(),
            elementDef(0, null, null, 10, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['i'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-list-item-end'])),
        (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['material-icon'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['info'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['i'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['  '])), (_l()(), textDef(null, ['\n\n  '])), (_l()(), elementDef(0, null, null, 86, 'div', [['class',
                'mdc-padding'], ['fxLayout', 'column']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0, 'layout'] }, null),
        directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers,
            KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0,
                'classBase'] }, null), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 1, 'h3', [], null, null, null, null, null)), (_l()(), textDef(null, ['Avatar List'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 38, 'div', [['fxLayout', 'row']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0, 'layout'] }, null), (_l()(), textDef(null, ['\n      '])),
        (_l()(), elementDef(0, null, null, 16, 'mdc-form-field', [], [[8, 'className', 0]], null, null, null, null)),
        directiveDef(1196032, null, 3, material_es5_54, [Renderer2, ElementRef,
            undefined], null, null), queryDef(335544320, 24, { inputCheckbox: 0 }),
        queryDef(335544320, 25, { inputRadio: 0 }), queryDef(335544320, 26, { inputSwitch: 0 }), (_l()(),
            textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 6, 'mdc-checkbox', [], [[2, 'mdc-checkbox', null], [2, 'ng-untouched',
                null], [2, 'ng-touched', null], [2, 'ng-pristine', null],
            [2, 'ng-dirty', null], [2, 'ng-valid', null], [2, 'ng-invalid',
                null], [2, 'ng-pending', null]], [[null, 'ngModelChange']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('ngModelChange' === en)) {
                var pd_0 = ((_co.isAvatarDense = $event) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, View_CheckboxComponent_0, RenderType_CheckboxComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[24, 4]], 0, material_es5_17, [Renderer2, ElementRef, material_es5_74, undefined], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_17]), directiveDef(671744, null, 0, NgModel, [[8,
                null], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { model: [0, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 1, 'label', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Dense'])), (_l()(), textDef(null, ['\n      '])),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 16, 'mdc-form-field', [], [[8, 'className', 0]], null, null, null, null)), directiveDef(1196032, null, 3, material_es5_54, [Renderer2, ElementRef, undefined], null, null), queryDef(335544320, 27, { inputCheckbox: 0 }), queryDef(335544320, 28, { inputRadio: 0 }), queryDef(335544320, 29, { inputSwitch: 0 }), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 6, 'mdc-checkbox', [], [[2, 'mdc-checkbox', null], [2, 'ng-untouched', null],
            [2, 'ng-touched', null], [2, 'ng-pristine', null], [2, 'ng-dirty',
                null], [2, 'ng-valid', null], [2, 'ng-invalid', null],
            [2, 'ng-pending', null]], [[null, 'ngModelChange']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('ngModelChange' === en)) {
                var pd_0 = ((_co.isAvatarDarkTheme = $event) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, View_CheckboxComponent_0, RenderType_CheckboxComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[27, 4]], 0, material_es5_17, [Renderer2, ElementRef, material_es5_74, undefined], null, null), providerDef(1024, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_17]), directiveDef(671744, null, 0, NgModel, [[8,
                null], [8, null], [8, null], [2, NG_VALUE_ACCESSOR]], { model: [0, 'model'] }, { update: 'ngModelChange' }), providerDef(2048, null, NgControl, null, [NgModel]), directiveDef(16384, null, 0, NgControlStatus, [NgControl], null, null), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 1, 'label', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Dark Theme'])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 38, 'mdc-list', [['avatar', 'true'], ['class', 'demo-wrapper']], [[2, 'mdc-list', null],
            [1, 'role', 0], [2, 'mdc-list--dense', null], [2, 'mdc-list--two-line',
                null], [2, 'mdc-list--avatar-list', null]], null, null, View_ListComponent_0, RenderType_ListComponent)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers,
            ElementRef, Renderer, Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(573440, null, 1, material_es5_58, [ElementRef], { dense: [0, 'dense'], avatar: [1, 'avatar'] }, null), queryDef(603979776, 30, { listItems: 1 }), directiveDef(540672, null, 0, material_es5_99, [Renderer2,
            ElementRef], { mdcThemeDark: [0, 'mdcThemeDark'] }, null), (_l()(),
            textDef(0, ['\n      '])), (_l()(), elementDef(0, null, 0, 9, 'mdc-list-item', [], [[2, 'mdc-list-item', null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4734976, [[30, 4]], 0, material_es5_59, [ElementRef, material_es5_74, material_es5_58], null, null), (_l()(), textDef(null, ['\n        '])),
        (_l()(), elementDef(0, null, null, 4, 'i', [['class', 'grey-avatar'],
            ['material-icon', ''], ['mdc-list-item-start', '']], [[2, 'mdc-list-item__start-detail',
                null], [2, 'material-icons', null]], null, null, null, null)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['person'])),
        (_l()(), textDef(null, ['Single-line item\n      '])), (_l()(), textDef(0, ['\n      '])), (_l()(), elementDef(0, null, 0, 9, 'mdc-list-item', [], [[2, 'mdc-list-item', null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4734976, [[30, 4]], 0, material_es5_59, [ElementRef, material_es5_74, material_es5_58], null, null),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'i', [['class', 'grey-avatar'], ['material-icon', ''], ['mdc-list-item-start',
                '']], [[2, 'mdc-list-item__start-detail', null], [2, 'material-icons',
                null]], null, null, null, null)),
        directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers,
            KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0,
                'classBase'] }, null), directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['person'])), (_l()(), textDef(null, ['Single-line item\n      '])),
        (_l()(), textDef(0, ['\n      '])), (_l()(), elementDef(0, null, 0, 9, 'mdc-list-item', [], [[2, 'mdc-list-item', null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4734976, [[30, 4]], 0, material_es5_59, [ElementRef, material_es5_74, material_es5_58], null, null), (_l()(), textDef(null, ['\n        '])),
        (_l()(), elementDef(0, null, null, 4, 'i', [['class', 'grey-avatar'],
            ['material-icon', ''], ['mdc-list-item-start', '']], [[2, 'mdc-list-item__start-detail',
                null], [2, 'material-icons', null]], null, null, null, null)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['person'])),
        (_l()(), textDef(null, ['Single-line item\n      '])), (_l()(), textDef(0, ['\n    '])), (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 278, 'div', [['class',
                'mdc-padding'], ['fxLayout', 'column']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0, 'layout'] }, null),
        directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers,
            KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0,
                'classBase'] }, null), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 1, 'h3', [], null, null, null, null, null)), (_l()(), textDef(null, ['Avatar List + Checkbox'])), (_l()(), textDef(null, ['\n'])), (_l()(),
            elementDef(0, null, null, 56, 'mdc-list', [['class', 'demo-wrapper']], [[2, 'mdc-list', null], [1, 'role', 0], [2, 'mdc-list--dense', null],
                [2, 'mdc-list--two-line', null], [2, 'mdc-list--avatar-list',
                    null]], null, null, View_ListComponent_0, RenderType_ListComponent)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(573440, null, 1, material_es5_58, [ElementRef], { dense: [0, 'dense'], avatar: [1,
                'avatar'] }, null), queryDef(603979776, 31, { listItems: 1 }), directiveDef(540672, null, 0, material_es5_99, [Renderer2, ElementRef], { mdcThemeDark: [0,
                'mdcThemeDark'] }, null), (_l()(), textDef(0, ['\n  '])), (_l()(),
            elementDef(0, null, 0, 15, 'mdc-list-item', [], [[2, 'mdc-list-item',
                    null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2,
            ElementRef, undefined]), directiveDef(4734976, [[31, 4]], 0, material_es5_59, [ElementRef,
            material_es5_74, material_es5_58], null, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 4, 'i', [['class',
                'grey-avatar'], ['material-icon', ''], ['mdc-list-item-start', '']], [[2, 'mdc-list-item__start-detail',
                null], [2, 'material-icons', null]], null, null, null, null)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['person'])),
        (_l()(), textDef(null, ['Single-line item\n      '])), (_l()(), elementDef(0, null, null, 4, 'mdc-checkbox', [['mdc-list-item-end', '']], [[2, 'mdc-checkbox', null], [2, 'mdc-list-item__end-detail', null]], null, null, View_CheckboxComponent_0, RenderType_CheckboxComponent)),
        providerDef(5120, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_17]), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2,
            ElementRef, undefined]), directiveDef(4374528, null, 0, material_es5_17, [Renderer2, ElementRef, material_es5_74, undefined], null, null),
        directiveDef(16384, null, 0, material_es5_61, [ElementRef], null, null), (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(0, ['\n  '])), (_l()(), elementDef(0, null, 0, 15, 'mdc-list-item', [], [[2, 'mdc-list-item', null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4734976, [[31, 4]], 0, material_es5_59, [ElementRef, material_es5_74, material_es5_58], null, null),
        (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 4, 'i', [['class', 'grey-avatar'], ['material-icon', ''], ['mdc-list-item-start',
                '']], [[2, 'mdc-list-item__start-detail', null], [2, 'material-icons',
                null]], null, null, null, null)),
        directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers,
            KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0,
                'classBase'] }, null), directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['person'])), (_l()(), textDef(null, ['Single-line item\n      '])),
        (_l()(), elementDef(0, null, null, 4, 'mdc-checkbox', [['mdc-list-item-end',
                '']], [[2, 'mdc-checkbox', null], [2, 'mdc-list-item__end-detail', null]], null, null, View_CheckboxComponent_0, RenderType_CheckboxComponent)),
        providerDef(5120, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_17]), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2,
            ElementRef, undefined]), directiveDef(4374528, null, 0, material_es5_17, [Renderer2, ElementRef, material_es5_74, undefined], null, null),
        directiveDef(16384, null, 0, material_es5_61, [ElementRef], null, null), (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(0, ['\n  '])), (_l()(), elementDef(0, null, 0, 15, 'mdc-list-item', [], [[2, 'mdc-list-item', null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4734976, [[31, 4]], 0, material_es5_59, [ElementRef, material_es5_74, material_es5_58], null, null),
        (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 4, 'i', [['class', 'grey-avatar'], ['material-icon', ''], ['mdc-list-item-start',
                '']], [[2, 'mdc-list-item__start-detail', null], [2, 'material-icons',
                null]], null, null, null, null)),
        directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers,
            KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0,
                'classBase'] }, null), directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['person'])), (_l()(), textDef(null, ['Single-line item\n      '])),
        (_l()(), elementDef(0, null, null, 4, 'mdc-checkbox', [['mdc-list-item-end',
                '']], [[2, 'mdc-checkbox', null], [2, 'mdc-list-item__end-detail', null]], null, null, View_CheckboxComponent_0, RenderType_CheckboxComponent)),
        providerDef(5120, null, NG_VALUE_ACCESSOR, function (p0_0) {
            return [p0_0];
        }, [material_es5_17]), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2,
            ElementRef, undefined]), directiveDef(4374528, null, 0, material_es5_17, [Renderer2, ElementRef, material_es5_74, undefined], null, null),
        directiveDef(16384, null, 0, material_es5_61, [ElementRef], null, null), (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(0, ['\n'])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 212, 'div', [['fxLayout', 'column'], ['fxLayoutAlign',
                'start start']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor,
            ElementRef, Renderer2], { layout: [0, 'layout'] }, null), directiveDef(737280, null, 0, LayoutAlignDirective, [MediaMonitor, ElementRef, Renderer2,
            [2, LayoutDirective]], { align: [0, 'align'] }, null), (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 208, 'pre', [['style',
                'background:#000;color:#f8f8f8']], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 24, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list'])),
        (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['avatar'])),
        (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])),
        (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['dense'])),
        (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"false"'])),
        (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-theme-dark'])),
        (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"false"'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 16, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['i'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-list-item-start'])),
        (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['material-icon'])),
        (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['class'])),
        (_l()(), textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"grey-avatar"'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['person'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['i'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['Single-line item\n      '])),
        (_l()(), elementDef(0, null, null, 9, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-checkbox'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-list-item-end'])), (_l()(),
            textDef(null, ['>'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-checkbox'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 16, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['i'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-list-item-start'])), (_l()(), textDef(null, [' '])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['material-icon'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['class'])), (_l()(), textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"grey-avatar"'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['person'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['i'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['Single-line item\n      '])),
        (_l()(), elementDef(0, null, null, 9, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-checkbox'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-list-item-end'])), (_l()(),
            textDef(null, ['>'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-checkbox'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 16, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['i'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-list-item-start'])), (_l()(), textDef(null, [' '])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['material-icon'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['class'])), (_l()(), textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"grey-avatar"'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['person'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['i'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['Single-line item\n      '])),
        (_l()(), elementDef(0, null, null, 9, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-checkbox'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-list-item-end'])), (_l()(),
            textDef(null, ['>'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-checkbox'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 250, 'div', [['class',
                'mdc-padding'], ['fxLayout', 'column']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0, 'layout'] }, null),
        directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers,
            KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0,
                'classBase'] }, null), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 1, 'h3', [], null, null, null, null, null)), (_l()(), textDef(null, ['Interactive Lists (using ink ripple)'])), (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 49, 'mdc-list', [['class',
                'demo-wrapper']], [[2, 'mdc-list', null], [1, 'role', 0], [2, 'mdc-list--dense',
                null], [2, 'mdc-list--two-line', null], [2, 'mdc-list--avatar-list',
                null]], null, null, View_ListComponent_0, RenderType_ListComponent)),
        directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers,
            KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0,
                'classBase'] }, null), directiveDef(573440, null, 1, material_es5_58, [ElementRef], null, null), queryDef(603979776, 32, { listItems: 1 }),
        (_l()(), textDef(0, ['\n  '])), (_l()(), elementDef(0, null, 0, 13, 'a', [['href',
                '#/list-demo'], ['mdc-list-item', '']], [[2, 'mdc-list-item', null],
            [1, 'role', 0]], null, null, null, null)),
        providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef,
            undefined]), directiveDef(4734976, [[32, 4]], 0, material_es5_59, [ElementRef, material_es5_74,
            material_es5_58], null, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon',
                ''], ['mdc-list-item-start', '']], [[2, 'mdc-list-item__start-detail', null],
            [2, 'material-icons', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['network_wifi'])), (_l()(), textDef(null, ['Wi-Fi'])), (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon', ''], ['mdc-list-item-end',
                '']], [[2, 'mdc-list-item__end-detail', null], [2, 'material-icons',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_61, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['info'])), (_l()(),
            textDef(null, ['\n  '])), (_l()(), textDef(0, ['\n  '])), (_l()(), elementDef(0, null, 0, 13, 'a', [['href', '#/list-demo'], ['mdc-list-item', '']], [[2,
                'mdc-list-item', null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4734976, [[32, 4]], 0, material_es5_59, [ElementRef, material_es5_74, material_es5_58], null, null),
        (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon', ''], ['mdc-list-item-start', '']], [[2, 'mdc-list-item__start-detail',
                null], [2, 'material-icons', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['bluetooth'])), (_l()(), textDef(null, ['Bluetooth'])), (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon', ''], ['mdc-list-item-end',
                '']], [[2, 'mdc-list-item__end-detail', null], [2, 'material-icons',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_61, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['info'])), (_l()(),
            textDef(null, ['\n  '])), (_l()(), textDef(0, ['\n  '])), (_l()(), elementDef(0, null, 0, 13, 'a', [['href', '#/list-demo'], ['mdc-list-item', '']], [[2,
                'mdc-list-item', null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4734976, [[32, 4]], 0, material_es5_59, [ElementRef, material_es5_74, material_es5_58], null, null),
        (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon', ''], ['mdc-list-item-start', '']], [[2, 'mdc-list-item__start-detail',
                null], [2, 'material-icons', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['data_usage'])), (_l()(), textDef(null, ['Data Usage'])), (_l()(),
            elementDef(0, null, null, 3, 'i', [['material-icon', ''], ['mdc-list-item-end',
                    '']], [[2, 'mdc-list-item__end-detail', null], [2, 'material-icons',
                    null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_61, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['info'])), (_l()(),
            textDef(null, ['\n  '])), (_l()(), textDef(0, ['\n'])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 191, 'div', [['fxLayout', 'column'], ['fxLayoutAlign', 'start start']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0,
                'layout'] }, null), directiveDef(737280, null, 0, LayoutAlignDirective, [MediaMonitor, ElementRef, Renderer2, [2, LayoutDirective]], { align: [0,
                'align'] }, null), (_l()(), textDef(null, ['\n'])), (_l()(),
            elementDef(0, null, null, 187, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-list'])), (_l()(), textDef(null, ['>'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 13, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['a'])), (_l()(), textDef(null, [' '])),
        (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc-list-item'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['href'])), (_l()(), textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"#/list-demo"'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 10, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['i'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-list-item-start'])),
        (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['material-icon'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['network_wifi'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['i'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['Wi-Fi'])),
        (_l()(), elementDef(0, null, null, 10, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['i'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-list-item-end'])),
        (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['material-icon'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['info'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['i'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['a'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 13, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['a'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-list-item'])),
        (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['href'])), (_l()(),
            textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"#/list-demo"'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 10, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['i'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-list-item-start'])),
        (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['material-icon'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['bluetooth'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['i'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['Bluetooth'])),
        (_l()(), elementDef(0, null, null, 10, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['i'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-list-item-end'])),
        (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['material-icon'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['info'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['i'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['a'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 13, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['a'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-list-item'])),
        (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['href'])), (_l()(),
            textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"#/list-demo"'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 10, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['i'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-list-item-start'])),
        (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['material-icon'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['data_usage'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['i'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['Data Usage'])),
        (_l()(), elementDef(0, null, null, 10, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['i'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-list-item-end'])),
        (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['material-icon'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['info'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['i'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['a'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(),
            elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-list'])), (_l()(), textDef(null, ['>'])),
        (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['  '])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 110, 'div', [['class', 'mdc-padding'], ['fxLayout', 'column']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0, 'layout'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 1, 'h3', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Grouped Lists'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 102, 'mdc-list-group', [['class', 'demo-wrapper']], [[2, 'mdc-list-group', null]], null, null, null, null)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers,
            ElementRef, Renderer, Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(16384, null, 0, undefined, [ElementRef], null, null), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 2, 'mdc-list-group-subheader', [], [[2,
                'mdc-list-group__subheader', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [ElementRef], null, null), (_l()(), textDef(null, ['Grouped Lists'])),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 48, 'mdc-list', [], [[2, 'mdc-list', null],
            [1, 'role', 0], [2, 'mdc-list--dense', null], [2, 'mdc-list--two-line',
                null], [2, 'mdc-list--avatar-list', null]], null, null, View_ListComponent_0, RenderType_ListComponent)), directiveDef(573440, null, 1, material_es5_58, [ElementRef], null, null),
        queryDef(603979776, 33, { listItems: 1 }), (_l()(), textDef(0, ['\n        '])), (_l()(),
            elementDef(0, null, 0, 13, 'a', [['href', '#/list-demo'], ['mdc-list-item',
                    '']], [[2, 'mdc-list-item', null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4734976, [[33, 4]], 0, material_es5_59, [ElementRef, material_es5_74, material_es5_58], null, null), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon', ''], ['mdc-list-item-start',
                '']], [[2, 'mdc-list-item__start-detail', null], [2, 'material-icons',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['network_wifi'])),
        (_l()(), textDef(null, ['Wi-Fi'])), (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon', ''], ['mdc-list-item-end', '']], [[2, 'mdc-list-item__end-detail',
                null], [2, 'material-icons', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_61, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['info'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(0, ['\n        '])), (_l()(), elementDef(0, null, 0, 13, 'a', [['href', '#/list-demo'],
            ['mdc-list-item', '']], [[2, 'mdc-list-item', null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4734976, [[33, 4]], 0, material_es5_59, [ElementRef, material_es5_74, material_es5_58], null, null), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon', ''], ['mdc-list-item-start',
                '']], [[2, 'mdc-list-item__start-detail', null], [2, 'material-icons',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['bluetooth'])),
        (_l()(), textDef(null, ['Bluetooth'])), (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon', ''], ['mdc-list-item-end', '']], [[2,
                'mdc-list-item__end-detail', null], [2, 'material-icons', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_61, [ElementRef], null, null),
        directiveDef(16384, null, 0, material_es5_65, [], null, null),
        (_l()(), textDef(null, ['info'])), (_l()(), textDef(null, ['\n        '])),
        (_l()(), textDef(0, ['\n        '])), (_l()(), elementDef(0, null, 0, 13, 'a', [['href', '#/list-demo'], ['mdc-list-item', '']], [[2, 'mdc-list-item', null],
            [1, 'role', 0]], null, null, null, null)),
        providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef,
            undefined]), directiveDef(4734976, [[33, 4]], 0, material_es5_59, [ElementRef, material_es5_74,
            material_es5_58], null, null), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon',
                ''], ['mdc-list-item-start', '']], [[2, 'mdc-list-item__start-detail', null],
            [2, 'material-icons', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['data_usage'])), (_l()(), textDef(null, ['Data Usage'])), (_l()(),
            elementDef(0, null, null, 3, 'i', [['material-icon', ''], ['mdc-list-item-end',
                    '']], [[2, 'mdc-list-item__end-detail', null], [2, 'material-icons',
                    null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_61, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['info'])), (_l()(),
            textDef(null, ['\n        '])), (_l()(), textDef(0, ['\n      '])),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 1, 'mdc-list-divider', [], null, null, null, View_ɵd_0, RenderType_ɵd)), directiveDef(49152, null, 0, undefined, [ElementRef, Renderer2], null, null), (_l()(),
            textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 2, 'mdc-list-group-subheader', [], [[2, 'mdc-list-group__subheader',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, undefined, [ElementRef], null, null),
        (_l()(), textDef(null, ['2nd Group'])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 36, 'mdc-list', [['avatar', 'true']], [[2, 'mdc-list', null], [1, 'role', 0], [2, 'mdc-list--dense',
                null], [2, 'mdc-list--two-line', null], [2, 'mdc-list--avatar-list',
                null]], null, null, View_ListComponent_0, RenderType_ListComponent)), directiveDef(573440, null, 1, material_es5_58, [ElementRef], { avatar: [0, 'avatar'] }, null), queryDef(603979776, 34, { listItems: 1 }), (_l()(), textDef(0, ['\n        '])), (_l()(), elementDef(0, null, 0, 9, 'a', [['href', '#/list-demo'], ['mdc-list-item', '']], [[2, 'mdc-list-item',
                null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2,
            ElementRef, undefined]), directiveDef(4734976, [[34, 4]], 0, material_es5_59, [ElementRef,
            material_es5_74, material_es5_58], null, null), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 4, 'i', [['class',
                'grey-avatar'], ['material-icon', ''], ['mdc-list-item-start', '']], [[2, 'mdc-list-item__start-detail',
                null], [2, 'material-icons', null]], null, null, null, null)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['person'])),
        (_l()(), textDef(null, ['Single-line item\n        '])), (_l()(), textDef(0, ['\n        '])), (_l()(), elementDef(0, null, 0, 9, 'a', [['href', '#/list-demo'],
            ['mdc-list-item', '']], [[2, 'mdc-list-item', null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4734976, [[34, 4]], 0, material_es5_59, [ElementRef, material_es5_74, material_es5_58], null, null), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 4, 'i', [['class', 'grey-avatar'],
            ['material-icon', ''], ['mdc-list-item-start', '']], [[2, 'mdc-list-item__start-detail',
                null], [2, 'material-icons', null]], null, null, null, null)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['person'])),
        (_l()(), textDef(null, ['Single-line item\n        '])), (_l()(), textDef(0, ['\n        '])), (_l()(), elementDef(0, null, 0, 9, 'a', [['href', '#/list-demo'],
            ['mdc-list-item', '']], [[2, 'mdc-list-item', null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4734976, [[34, 4]], 0, material_es5_59, [ElementRef, material_es5_74, material_es5_58], null, null), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 4, 'i', [['class', 'grey-avatar'],
            ['material-icon', ''], ['mdc-list-item-start', '']], [[2, 'mdc-list-item__start-detail',
                null], [2, 'material-icons', null]], null, null, null, null)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['person'])),
        (_l()(), textDef(null, ['Single-line item\n        '])), (_l()(), textDef(0, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n']))], function (_ck, _v) {
        var _co = _v.component;
        var currVal_0 = 'column';
        _ck(_v, 1, 0, currVal_0);
        var currVal_1 = 'mdc-padding';
        _ck(_v, 2, 0, currVal_1);
        var currVal_5 = 'info-banner';
        _ck(_v, 13, 0, currVal_5);
        var currVal_6 = 'docs-api';
        _ck(_v, 20, 0, currVal_6);
        var currVal_7 = 'column';
        _ck(_v, 272, 0, currVal_7);
        var currVal_8 = 'mdc-padding';
        _ck(_v, 273, 0, currVal_8);
        var currVal_9 = 'row';
        _ck(_v, 279, 0, currVal_9);
        var currVal_19 = _co.isSinglelineDense;
        _ck(_v, 291, 0, currVal_19);
        var currVal_29 = _co.isSingleDarkTheme;
        _ck(_v, 309, 0, currVal_29);
        var currVal_35 = 'demo-wrapper';
        _ck(_v, 319, 0, currVal_35);
        var currVal_36 = _co.isSinglelineDense;
        _ck(_v, 320, 0, currVal_36);
        var currVal_37 = _co.isSingleDarkTheme;
        _ck(_v, 322, 0, currVal_37);
        var currVal_44 = 'column';
        _ck(_v, 341, 0, currVal_44);
        var currVal_45 = 'start start';
        _ck(_v, 342, 0, currVal_45);
        var currVal_46 = 'column';
        _ck(_v, 425, 0, currVal_46);
        var currVal_47 = 'mdc-padding';
        _ck(_v, 426, 0, currVal_47);
        var currVal_48 = 'row';
        _ck(_v, 432, 0, currVal_48);
        var currVal_58 = _co.isTwolineDense;
        _ck(_v, 444, 0, currVal_58);
        var currVal_68 = _co.isTwoDarkTheme;
        _ck(_v, 462, 0, currVal_68);
        var currVal_74 = 'demo-wrapper';
        _ck(_v, 472, 0, currVal_74);
        var currVal_75 = _co.isTwolineDense;
        var currVal_76 = true;
        _ck(_v, 473, 0, currVal_75, currVal_76);
        var currVal_77 = _co.isTwoDarkTheme;
        _ck(_v, 475, 0, currVal_77);
        var currVal_90 = 'column';
        _ck(_v, 518, 0, currVal_90);
        var currVal_91 = 'start start';
        _ck(_v, 519, 0, currVal_91);
        var currVal_92 = 'column';
        _ck(_v, 702, 0, currVal_92);
        var currVal_93 = 'mdc-padding';
        _ck(_v, 703, 0, currVal_93);
        var currVal_94 = 'row';
        _ck(_v, 709, 0, currVal_94);
        var currVal_104 = _co.isStartDetailDarkTheme;
        _ck(_v, 721, 0, currVal_104);
        var currVal_110 = 'demo-wrapper';
        _ck(_v, 731, 0, currVal_110);
        var currVal_111 = _co.isStartDetailDarkTheme;
        _ck(_v, 734, 0, currVal_111);
        var currVal_124 = 'column';
        _ck(_v, 769, 0, currVal_124);
        var currVal_125 = 'mdc-padding';
        _ck(_v, 770, 0, currVal_125);
        var currVal_131 = 'demo-wrapper';
        _ck(_v, 776, 0, currVal_131);
        var currVal_144 = 'column';
        _ck(_v, 813, 0, currVal_144);
        var currVal_145 = 'mdc-padding';
        _ck(_v, 814, 0, currVal_145);
        var currVal_146 = 'row';
        _ck(_v, 820, 0, currVal_146);
        var currVal_156 = _co.isStartEndDetailDarkTheme;
        _ck(_v, 832, 0, currVal_156);
        var currVal_162 = 'demo-wrapper';
        _ck(_v, 842, 0, currVal_162);
        var currVal_163 = _co.isStartEndDetailDarkTheme;
        _ck(_v, 845, 0, currVal_163);
        var currVal_182 = 'column';
        _ck(_v, 894, 0, currVal_182);
        var currVal_183 = 'start start';
        _ck(_v, 895, 0, currVal_183);
        var currVal_184 = 'column';
        _ck(_v, 1079, 0, currVal_184);
        var currVal_185 = 'mdc-padding';
        _ck(_v, 1080, 0, currVal_185);
        var currVal_186 = 'row';
        _ck(_v, 1086, 0, currVal_186);
        var currVal_196 = _co.isAvatarDense;
        _ck(_v, 1098, 0, currVal_196);
        var currVal_206 = _co.isAvatarDarkTheme;
        _ck(_v, 1116, 0, currVal_206);
        var currVal_212 = 'demo-wrapper';
        _ck(_v, 1126, 0, currVal_212);
        var currVal_213 = _co.isAvatarDense;
        var currVal_214 = 'true';
        _ck(_v, 1127, 0, currVal_213, currVal_214);
        var currVal_215 = _co.isAvatarDarkTheme;
        _ck(_v, 1129, 0, currVal_215);
        var currVal_220 = 'grey-avatar';
        _ck(_v, 1136, 0, currVal_220);
        var currVal_225 = 'grey-avatar';
        _ck(_v, 1147, 0, currVal_225);
        var currVal_230 = 'grey-avatar';
        _ck(_v, 1158, 0, currVal_230);
        var currVal_231 = 'column';
        _ck(_v, 1167, 0, currVal_231);
        var currVal_232 = 'mdc-padding';
        _ck(_v, 1168, 0, currVal_232);
        var currVal_238 = 'demo-wrapper';
        _ck(_v, 1174, 0, currVal_238);
        var currVal_239 = _co.isAvatarDense;
        var currVal_240 = true;
        _ck(_v, 1175, 0, currVal_239, currVal_240);
        var currVal_241 = _co.isAvatarDarkTheme;
        _ck(_v, 1177, 0, currVal_241);
        var currVal_246 = 'grey-avatar';
        _ck(_v, 1184, 0, currVal_246);
        var currVal_253 = 'grey-avatar';
        _ck(_v, 1201, 0, currVal_253);
        var currVal_260 = 'grey-avatar';
        _ck(_v, 1218, 0, currVal_260);
        var currVal_263 = 'column';
        _ck(_v, 1232, 0, currVal_263);
        var currVal_264 = 'start start';
        _ck(_v, 1233, 0, currVal_264);
        var currVal_265 = 'column';
        _ck(_v, 1447, 0, currVal_265);
        var currVal_266 = 'mdc-padding';
        _ck(_v, 1448, 0, currVal_266);
        var currVal_272 = 'demo-wrapper';
        _ck(_v, 1454, 0, currVal_272);
        var currVal_291 = 'column';
        _ck(_v, 1505, 0, currVal_291);
        var currVal_292 = 'start start';
        _ck(_v, 1506, 0, currVal_292);
        var currVal_293 = 'column';
        _ck(_v, 1699, 0, currVal_293);
        var currVal_294 = 'mdc-padding';
        _ck(_v, 1700, 0, currVal_294);
        var currVal_296 = 'demo-wrapper';
        _ck(_v, 1706, 0, currVal_296);
        var currVal_327 = 'true';
        _ck(_v, 1771, 0, currVal_327);
        var currVal_332 = 'grey-avatar';
        _ck(_v, 1779, 0, currVal_332);
        var currVal_337 = 'grey-avatar';
        _ck(_v, 1790, 0, currVal_337);
        var currVal_342 = 'grey-avatar';
        _ck(_v, 1801, 0, currVal_342);
    }, function (_ck, _v) {
        var currVal_2 = nodeValue(_v, 5).isHostClass;
        _ck(_v, 4, 0, currVal_2);
        var currVal_3 = nodeValue(_v, 9).isHostClass;
        _ck(_v, 8, 0, currVal_3);
        var currVal_4 = nodeValue(_v, 14).isHostClass;
        _ck(_v, 12, 0, currVal_4);
        var currVal_10 = nodeValue(_v, 282).className;
        _ck(_v, 281, 0, currVal_10);
        var currVal_11 = nodeValue(_v, 289).isHostClass;
        var currVal_12 = nodeValue(_v, 293).ngClassUntouched;
        var currVal_13 = nodeValue(_v, 293).ngClassTouched;
        var currVal_14 = nodeValue(_v, 293).ngClassPristine;
        var currVal_15 = nodeValue(_v, 293).ngClassDirty;
        var currVal_16 = nodeValue(_v, 293).ngClassValid;
        var currVal_17 = nodeValue(_v, 293).ngClassInvalid;
        var currVal_18 = nodeValue(_v, 293).ngClassPending;
        _ck(_v, 287, 0, currVal_11, currVal_12, currVal_13, currVal_14, currVal_15, currVal_16, currVal_17, currVal_18);
        var currVal_20 = nodeValue(_v, 300).className;
        _ck(_v, 299, 0, currVal_20);
        var currVal_21 = nodeValue(_v, 307).isHostClass;
        var currVal_22 = nodeValue(_v, 311).ngClassUntouched;
        var currVal_23 = nodeValue(_v, 311).ngClassTouched;
        var currVal_24 = nodeValue(_v, 311).ngClassPristine;
        var currVal_25 = nodeValue(_v, 311).ngClassDirty;
        var currVal_26 = nodeValue(_v, 311).ngClassValid;
        var currVal_27 = nodeValue(_v, 311).ngClassInvalid;
        var currVal_28 = nodeValue(_v, 311).ngClassPending;
        _ck(_v, 305, 0, currVal_21, currVal_22, currVal_23, currVal_24, currVal_25, currVal_26, currVal_27, currVal_28);
        var currVal_30 = nodeValue(_v, 320).isHostClass;
        var currVal_31 = nodeValue(_v, 320).role;
        var currVal_32 = nodeValue(_v, 320).classDenseList;
        var currVal_33 = nodeValue(_v, 320).classTwoline;
        var currVal_34 = nodeValue(_v, 320).classAvatarList;
        _ck(_v, 318, 0, currVal_30, currVal_31, currVal_32, currVal_33, currVal_34);
        var currVal_38 = nodeValue(_v, 326).isHostClass;
        var currVal_39 = nodeValue(_v, 326).role;
        _ck(_v, 324, 0, currVal_38, currVal_39);
        var currVal_40 = nodeValue(_v, 331).isHostClass;
        var currVal_41 = nodeValue(_v, 331).role;
        _ck(_v, 329, 0, currVal_40, currVal_41);
        var currVal_42 = nodeValue(_v, 336).isHostClass;
        var currVal_43 = nodeValue(_v, 336).role;
        _ck(_v, 334, 0, currVal_42, currVal_43);
        var currVal_49 = nodeValue(_v, 435).className;
        _ck(_v, 434, 0, currVal_49);
        var currVal_50 = nodeValue(_v, 442).isHostClass;
        var currVal_51 = nodeValue(_v, 446).ngClassUntouched;
        var currVal_52 = nodeValue(_v, 446).ngClassTouched;
        var currVal_53 = nodeValue(_v, 446).ngClassPristine;
        var currVal_54 = nodeValue(_v, 446).ngClassDirty;
        var currVal_55 = nodeValue(_v, 446).ngClassValid;
        var currVal_56 = nodeValue(_v, 446).ngClassInvalid;
        var currVal_57 = nodeValue(_v, 446).ngClassPending;
        _ck(_v, 440, 0, currVal_50, currVal_51, currVal_52, currVal_53, currVal_54, currVal_55, currVal_56, currVal_57);
        var currVal_59 = nodeValue(_v, 453).className;
        _ck(_v, 452, 0, currVal_59);
        var currVal_60 = nodeValue(_v, 460).isHostClass;
        var currVal_61 = nodeValue(_v, 464).ngClassUntouched;
        var currVal_62 = nodeValue(_v, 464).ngClassTouched;
        var currVal_63 = nodeValue(_v, 464).ngClassPristine;
        var currVal_64 = nodeValue(_v, 464).ngClassDirty;
        var currVal_65 = nodeValue(_v, 464).ngClassValid;
        var currVal_66 = nodeValue(_v, 464).ngClassInvalid;
        var currVal_67 = nodeValue(_v, 464).ngClassPending;
        _ck(_v, 458, 0, currVal_60, currVal_61, currVal_62, currVal_63, currVal_64, currVal_65, currVal_66, currVal_67);
        var currVal_69 = nodeValue(_v, 473).isHostClass;
        var currVal_70 = nodeValue(_v, 473).role;
        var currVal_71 = nodeValue(_v, 473).classDenseList;
        var currVal_72 = nodeValue(_v, 473).classTwoline;
        var currVal_73 = nodeValue(_v, 473).classAvatarList;
        _ck(_v, 471, 0, currVal_69, currVal_70, currVal_71, currVal_72, currVal_73);
        var currVal_78 = nodeValue(_v, 479).isHostClass;
        var currVal_79 = nodeValue(_v, 479).role;
        _ck(_v, 477, 0, currVal_78, currVal_79);
        var currVal_80 = nodeValue(_v, 482).isHostClass;
        _ck(_v, 481, 0, currVal_80);
        var currVal_81 = nodeValue(_v, 485).isHostClass;
        _ck(_v, 484, 0, currVal_81);
        var currVal_82 = nodeValue(_v, 492).isHostClass;
        var currVal_83 = nodeValue(_v, 492).role;
        _ck(_v, 490, 0, currVal_82, currVal_83);
        var currVal_84 = nodeValue(_v, 495).isHostClass;
        _ck(_v, 494, 0, currVal_84);
        var currVal_85 = nodeValue(_v, 498).isHostClass;
        _ck(_v, 497, 0, currVal_85);
        var currVal_86 = nodeValue(_v, 505).isHostClass;
        var currVal_87 = nodeValue(_v, 505).role;
        _ck(_v, 503, 0, currVal_86, currVal_87);
        var currVal_88 = nodeValue(_v, 508).isHostClass;
        _ck(_v, 507, 0, currVal_88);
        var currVal_89 = nodeValue(_v, 511).isHostClass;
        _ck(_v, 510, 0, currVal_89);
        var currVal_95 = nodeValue(_v, 712).className;
        _ck(_v, 711, 0, currVal_95);
        var currVal_96 = nodeValue(_v, 719).isHostClass;
        var currVal_97 = nodeValue(_v, 723).ngClassUntouched;
        var currVal_98 = nodeValue(_v, 723).ngClassTouched;
        var currVal_99 = nodeValue(_v, 723).ngClassPristine;
        var currVal_100 = nodeValue(_v, 723).ngClassDirty;
        var currVal_101 = nodeValue(_v, 723).ngClassValid;
        var currVal_102 = nodeValue(_v, 723).ngClassInvalid;
        var currVal_103 = nodeValue(_v, 723).ngClassPending;
        _ck(_v, 717, 0, currVal_96, currVal_97, currVal_98, currVal_99, currVal_100, currVal_101, currVal_102, currVal_103);
        var currVal_105 = nodeValue(_v, 732).isHostClass;
        var currVal_106 = nodeValue(_v, 732).role;
        var currVal_107 = nodeValue(_v, 732).classDenseList;
        var currVal_108 = nodeValue(_v, 732).classTwoline;
        var currVal_109 = nodeValue(_v, 732).classAvatarList;
        _ck(_v, 730, 0, currVal_105, currVal_106, currVal_107, currVal_108, currVal_109);
        var currVal_112 = nodeValue(_v, 738).isHostClass;
        var currVal_113 = nodeValue(_v, 738).role;
        _ck(_v, 736, 0, currVal_112, currVal_113);
        var currVal_114 = nodeValue(_v, 741).isHostClass;
        var currVal_115 = nodeValue(_v, 742).isHostClass;
        _ck(_v, 740, 0, currVal_114, currVal_115);
        var currVal_116 = nodeValue(_v, 748).isHostClass;
        var currVal_117 = nodeValue(_v, 748).role;
        _ck(_v, 746, 0, currVal_116, currVal_117);
        var currVal_118 = nodeValue(_v, 751).isHostClass;
        var currVal_119 = nodeValue(_v, 752).isHostClass;
        _ck(_v, 750, 0, currVal_118, currVal_119);
        var currVal_120 = nodeValue(_v, 758).isHostClass;
        var currVal_121 = nodeValue(_v, 758).role;
        _ck(_v, 756, 0, currVal_120, currVal_121);
        var currVal_122 = nodeValue(_v, 761).isHostClass;
        var currVal_123 = nodeValue(_v, 762).isHostClass;
        _ck(_v, 760, 0, currVal_122, currVal_123);
        var currVal_126 = nodeValue(_v, 777).isHostClass;
        var currVal_127 = nodeValue(_v, 777).role;
        var currVal_128 = nodeValue(_v, 777).classDenseList;
        var currVal_129 = nodeValue(_v, 777).classTwoline;
        var currVal_130 = nodeValue(_v, 777).classAvatarList;
        _ck(_v, 775, 0, currVal_126, currVal_127, currVal_128, currVal_129, currVal_130);
        var currVal_132 = nodeValue(_v, 782).isHostClass;
        var currVal_133 = nodeValue(_v, 782).role;
        _ck(_v, 780, 0, currVal_132, currVal_133);
        var currVal_134 = nodeValue(_v, 785).isHostClass;
        var currVal_135 = nodeValue(_v, 786).isHostClass;
        _ck(_v, 784, 0, currVal_134, currVal_135);
        var currVal_136 = nodeValue(_v, 792).isHostClass;
        var currVal_137 = nodeValue(_v, 792).role;
        _ck(_v, 790, 0, currVal_136, currVal_137);
        var currVal_138 = nodeValue(_v, 795).isHostClass;
        var currVal_139 = nodeValue(_v, 796).isHostClass;
        _ck(_v, 794, 0, currVal_138, currVal_139);
        var currVal_140 = nodeValue(_v, 802).isHostClass;
        var currVal_141 = nodeValue(_v, 802).role;
        _ck(_v, 800, 0, currVal_140, currVal_141);
        var currVal_142 = nodeValue(_v, 805).isHostClass;
        var currVal_143 = nodeValue(_v, 806).isHostClass;
        _ck(_v, 804, 0, currVal_142, currVal_143);
        var currVal_147 = nodeValue(_v, 823).className;
        _ck(_v, 822, 0, currVal_147);
        var currVal_148 = nodeValue(_v, 830).isHostClass;
        var currVal_149 = nodeValue(_v, 834).ngClassUntouched;
        var currVal_150 = nodeValue(_v, 834).ngClassTouched;
        var currVal_151 = nodeValue(_v, 834).ngClassPristine;
        var currVal_152 = nodeValue(_v, 834).ngClassDirty;
        var currVal_153 = nodeValue(_v, 834).ngClassValid;
        var currVal_154 = nodeValue(_v, 834).ngClassInvalid;
        var currVal_155 = nodeValue(_v, 834).ngClassPending;
        _ck(_v, 828, 0, currVal_148, currVal_149, currVal_150, currVal_151, currVal_152, currVal_153, currVal_154, currVal_155);
        var currVal_157 = nodeValue(_v, 843).isHostClass;
        var currVal_158 = nodeValue(_v, 843).role;
        var currVal_159 = nodeValue(_v, 843).classDenseList;
        var currVal_160 = nodeValue(_v, 843).classTwoline;
        var currVal_161 = nodeValue(_v, 843).classAvatarList;
        _ck(_v, 841, 0, currVal_157, currVal_158, currVal_159, currVal_160, currVal_161);
        var currVal_164 = nodeValue(_v, 849).isHostClass;
        var currVal_165 = nodeValue(_v, 849).role;
        _ck(_v, 847, 0, currVal_164, currVal_165);
        var currVal_166 = nodeValue(_v, 852).isHostClass;
        var currVal_167 = nodeValue(_v, 853).isHostClass;
        _ck(_v, 851, 0, currVal_166, currVal_167);
        var currVal_168 = nodeValue(_v, 857).isHostClass;
        var currVal_169 = nodeValue(_v, 858).isHostClass;
        _ck(_v, 856, 0, currVal_168, currVal_169);
        var currVal_170 = nodeValue(_v, 864).isHostClass;
        var currVal_171 = nodeValue(_v, 864).role;
        _ck(_v, 862, 0, currVal_170, currVal_171);
        var currVal_172 = nodeValue(_v, 867).isHostClass;
        var currVal_173 = nodeValue(_v, 868).isHostClass;
        _ck(_v, 866, 0, currVal_172, currVal_173);
        var currVal_174 = nodeValue(_v, 872).isHostClass;
        var currVal_175 = nodeValue(_v, 873).isHostClass;
        _ck(_v, 871, 0, currVal_174, currVal_175);
        var currVal_176 = nodeValue(_v, 879).isHostClass;
        var currVal_177 = nodeValue(_v, 879).role;
        _ck(_v, 877, 0, currVal_176, currVal_177);
        var currVal_178 = nodeValue(_v, 882).isHostClass;
        var currVal_179 = nodeValue(_v, 883).isHostClass;
        _ck(_v, 881, 0, currVal_178, currVal_179);
        var currVal_180 = nodeValue(_v, 887).isHostClass;
        var currVal_181 = nodeValue(_v, 888).isHostClass;
        _ck(_v, 886, 0, currVal_180, currVal_181);
        var currVal_187 = nodeValue(_v, 1089).className;
        _ck(_v, 1088, 0, currVal_187);
        var currVal_188 = nodeValue(_v, 1096).isHostClass;
        var currVal_189 = nodeValue(_v, 1100).ngClassUntouched;
        var currVal_190 = nodeValue(_v, 1100).ngClassTouched;
        var currVal_191 = nodeValue(_v, 1100).ngClassPristine;
        var currVal_192 = nodeValue(_v, 1100).ngClassDirty;
        var currVal_193 = nodeValue(_v, 1100).ngClassValid;
        var currVal_194 = nodeValue(_v, 1100).ngClassInvalid;
        var currVal_195 = nodeValue(_v, 1100).ngClassPending;
        _ck(_v, 1094, 0, currVal_188, currVal_189, currVal_190, currVal_191, currVal_192, currVal_193, currVal_194, currVal_195);
        var currVal_197 = nodeValue(_v, 1107).className;
        _ck(_v, 1106, 0, currVal_197);
        var currVal_198 = nodeValue(_v, 1114).isHostClass;
        var currVal_199 = nodeValue(_v, 1118).ngClassUntouched;
        var currVal_200 = nodeValue(_v, 1118).ngClassTouched;
        var currVal_201 = nodeValue(_v, 1118).ngClassPristine;
        var currVal_202 = nodeValue(_v, 1118).ngClassDirty;
        var currVal_203 = nodeValue(_v, 1118).ngClassValid;
        var currVal_204 = nodeValue(_v, 1118).ngClassInvalid;
        var currVal_205 = nodeValue(_v, 1118).ngClassPending;
        _ck(_v, 1112, 0, currVal_198, currVal_199, currVal_200, currVal_201, currVal_202, currVal_203, currVal_204, currVal_205);
        var currVal_207 = nodeValue(_v, 1127).isHostClass;
        var currVal_208 = nodeValue(_v, 1127).role;
        var currVal_209 = nodeValue(_v, 1127).classDenseList;
        var currVal_210 = nodeValue(_v, 1127).classTwoline;
        var currVal_211 = nodeValue(_v, 1127).classAvatarList;
        _ck(_v, 1125, 0, currVal_207, currVal_208, currVal_209, currVal_210, currVal_211);
        var currVal_216 = nodeValue(_v, 1133).isHostClass;
        var currVal_217 = nodeValue(_v, 1133).role;
        _ck(_v, 1131, 0, currVal_216, currVal_217);
        var currVal_218 = nodeValue(_v, 1137).isHostClass;
        var currVal_219 = nodeValue(_v, 1138).isHostClass;
        _ck(_v, 1135, 0, currVal_218, currVal_219);
        var currVal_221 = nodeValue(_v, 1144).isHostClass;
        var currVal_222 = nodeValue(_v, 1144).role;
        _ck(_v, 1142, 0, currVal_221, currVal_222);
        var currVal_223 = nodeValue(_v, 1148).isHostClass;
        var currVal_224 = nodeValue(_v, 1149).isHostClass;
        _ck(_v, 1146, 0, currVal_223, currVal_224);
        var currVal_226 = nodeValue(_v, 1155).isHostClass;
        var currVal_227 = nodeValue(_v, 1155).role;
        _ck(_v, 1153, 0, currVal_226, currVal_227);
        var currVal_228 = nodeValue(_v, 1159).isHostClass;
        var currVal_229 = nodeValue(_v, 1160).isHostClass;
        _ck(_v, 1157, 0, currVal_228, currVal_229);
        var currVal_233 = nodeValue(_v, 1175).isHostClass;
        var currVal_234 = nodeValue(_v, 1175).role;
        var currVal_235 = nodeValue(_v, 1175).classDenseList;
        var currVal_236 = nodeValue(_v, 1175).classTwoline;
        var currVal_237 = nodeValue(_v, 1175).classAvatarList;
        _ck(_v, 1173, 0, currVal_233, currVal_234, currVal_235, currVal_236, currVal_237);
        var currVal_242 = nodeValue(_v, 1181).isHostClass;
        var currVal_243 = nodeValue(_v, 1181).role;
        _ck(_v, 1179, 0, currVal_242, currVal_243);
        var currVal_244 = nodeValue(_v, 1185).isHostClass;
        var currVal_245 = nodeValue(_v, 1186).isHostClass;
        _ck(_v, 1183, 0, currVal_244, currVal_245);
        var currVal_247 = nodeValue(_v, 1192).isHostClass;
        var currVal_248 = nodeValue(_v, 1193).isHostClass;
        _ck(_v, 1189, 0, currVal_247, currVal_248);
        var currVal_249 = nodeValue(_v, 1198).isHostClass;
        var currVal_250 = nodeValue(_v, 1198).role;
        _ck(_v, 1196, 0, currVal_249, currVal_250);
        var currVal_251 = nodeValue(_v, 1202).isHostClass;
        var currVal_252 = nodeValue(_v, 1203).isHostClass;
        _ck(_v, 1200, 0, currVal_251, currVal_252);
        var currVal_254 = nodeValue(_v, 1209).isHostClass;
        var currVal_255 = nodeValue(_v, 1210).isHostClass;
        _ck(_v, 1206, 0, currVal_254, currVal_255);
        var currVal_256 = nodeValue(_v, 1215).isHostClass;
        var currVal_257 = nodeValue(_v, 1215).role;
        _ck(_v, 1213, 0, currVal_256, currVal_257);
        var currVal_258 = nodeValue(_v, 1219).isHostClass;
        var currVal_259 = nodeValue(_v, 1220).isHostClass;
        _ck(_v, 1217, 0, currVal_258, currVal_259);
        var currVal_261 = nodeValue(_v, 1226).isHostClass;
        var currVal_262 = nodeValue(_v, 1227).isHostClass;
        _ck(_v, 1223, 0, currVal_261, currVal_262);
        var currVal_267 = nodeValue(_v, 1455).isHostClass;
        var currVal_268 = nodeValue(_v, 1455).role;
        var currVal_269 = nodeValue(_v, 1455).classDenseList;
        var currVal_270 = nodeValue(_v, 1455).classTwoline;
        var currVal_271 = nodeValue(_v, 1455).classAvatarList;
        _ck(_v, 1453, 0, currVal_267, currVal_268, currVal_269, currVal_270, currVal_271);
        var currVal_273 = nodeValue(_v, 1460).isHostClass;
        var currVal_274 = nodeValue(_v, 1460).role;
        _ck(_v, 1458, 0, currVal_273, currVal_274);
        var currVal_275 = nodeValue(_v, 1463).isHostClass;
        var currVal_276 = nodeValue(_v, 1464).isHostClass;
        _ck(_v, 1462, 0, currVal_275, currVal_276);
        var currVal_277 = nodeValue(_v, 1468).isHostClass;
        var currVal_278 = nodeValue(_v, 1469).isHostClass;
        _ck(_v, 1467, 0, currVal_277, currVal_278);
        var currVal_279 = nodeValue(_v, 1475).isHostClass;
        var currVal_280 = nodeValue(_v, 1475).role;
        _ck(_v, 1473, 0, currVal_279, currVal_280);
        var currVal_281 = nodeValue(_v, 1478).isHostClass;
        var currVal_282 = nodeValue(_v, 1479).isHostClass;
        _ck(_v, 1477, 0, currVal_281, currVal_282);
        var currVal_283 = nodeValue(_v, 1483).isHostClass;
        var currVal_284 = nodeValue(_v, 1484).isHostClass;
        _ck(_v, 1482, 0, currVal_283, currVal_284);
        var currVal_285 = nodeValue(_v, 1490).isHostClass;
        var currVal_286 = nodeValue(_v, 1490).role;
        _ck(_v, 1488, 0, currVal_285, currVal_286);
        var currVal_287 = nodeValue(_v, 1493).isHostClass;
        var currVal_288 = nodeValue(_v, 1494).isHostClass;
        _ck(_v, 1492, 0, currVal_287, currVal_288);
        var currVal_289 = nodeValue(_v, 1498).isHostClass;
        var currVal_290 = nodeValue(_v, 1499).isHostClass;
        _ck(_v, 1497, 0, currVal_289, currVal_290);
        var currVal_295 = nodeValue(_v, 1707).isHostClass;
        _ck(_v, 1705, 0, currVal_295);
        var currVal_297 = nodeValue(_v, 1710).isHostClass;
        _ck(_v, 1709, 0, currVal_297);
        var currVal_298 = nodeValue(_v, 1714).isHostClass;
        var currVal_299 = nodeValue(_v, 1714).role;
        var currVal_300 = nodeValue(_v, 1714).classDenseList;
        var currVal_301 = nodeValue(_v, 1714).classTwoline;
        var currVal_302 = nodeValue(_v, 1714).classAvatarList;
        _ck(_v, 1713, 0, currVal_298, currVal_299, currVal_300, currVal_301, currVal_302);
        var currVal_303 = nodeValue(_v, 1719).isHostClass;
        var currVal_304 = nodeValue(_v, 1719).role;
        _ck(_v, 1717, 0, currVal_303, currVal_304);
        var currVal_305 = nodeValue(_v, 1722).isHostClass;
        var currVal_306 = nodeValue(_v, 1723).isHostClass;
        _ck(_v, 1721, 0, currVal_305, currVal_306);
        var currVal_307 = nodeValue(_v, 1727).isHostClass;
        var currVal_308 = nodeValue(_v, 1728).isHostClass;
        _ck(_v, 1726, 0, currVal_307, currVal_308);
        var currVal_309 = nodeValue(_v, 1734).isHostClass;
        var currVal_310 = nodeValue(_v, 1734).role;
        _ck(_v, 1732, 0, currVal_309, currVal_310);
        var currVal_311 = nodeValue(_v, 1737).isHostClass;
        var currVal_312 = nodeValue(_v, 1738).isHostClass;
        _ck(_v, 1736, 0, currVal_311, currVal_312);
        var currVal_313 = nodeValue(_v, 1742).isHostClass;
        var currVal_314 = nodeValue(_v, 1743).isHostClass;
        _ck(_v, 1741, 0, currVal_313, currVal_314);
        var currVal_315 = nodeValue(_v, 1749).isHostClass;
        var currVal_316 = nodeValue(_v, 1749).role;
        _ck(_v, 1747, 0, currVal_315, currVal_316);
        var currVal_317 = nodeValue(_v, 1752).isHostClass;
        var currVal_318 = nodeValue(_v, 1753).isHostClass;
        _ck(_v, 1751, 0, currVal_317, currVal_318);
        var currVal_319 = nodeValue(_v, 1757).isHostClass;
        var currVal_320 = nodeValue(_v, 1758).isHostClass;
        _ck(_v, 1756, 0, currVal_319, currVal_320);
        var currVal_321 = nodeValue(_v, 1767).isHostClass;
        _ck(_v, 1766, 0, currVal_321);
        var currVal_322 = nodeValue(_v, 1771).isHostClass;
        var currVal_323 = nodeValue(_v, 1771).role;
        var currVal_324 = nodeValue(_v, 1771).classDenseList;
        var currVal_325 = nodeValue(_v, 1771).classTwoline;
        var currVal_326 = nodeValue(_v, 1771).classAvatarList;
        _ck(_v, 1770, 0, currVal_322, currVal_323, currVal_324, currVal_325, currVal_326);
        var currVal_328 = nodeValue(_v, 1776).isHostClass;
        var currVal_329 = nodeValue(_v, 1776).role;
        _ck(_v, 1774, 0, currVal_328, currVal_329);
        var currVal_330 = nodeValue(_v, 1780).isHostClass;
        var currVal_331 = nodeValue(_v, 1781).isHostClass;
        _ck(_v, 1778, 0, currVal_330, currVal_331);
        var currVal_333 = nodeValue(_v, 1787).isHostClass;
        var currVal_334 = nodeValue(_v, 1787).role;
        _ck(_v, 1785, 0, currVal_333, currVal_334);
        var currVal_335 = nodeValue(_v, 1791).isHostClass;
        var currVal_336 = nodeValue(_v, 1792).isHostClass;
        _ck(_v, 1789, 0, currVal_335, currVal_336);
        var currVal_338 = nodeValue(_v, 1798).isHostClass;
        var currVal_339 = nodeValue(_v, 1798).role;
        _ck(_v, 1796, 0, currVal_338, currVal_339);
        var currVal_340 = nodeValue(_v, 1802).isHostClass;
        var currVal_341 = nodeValue(_v, 1803).isHostClass;
        _ck(_v, 1800, 0, currVal_340, currVal_341);
    });
}
function View_ListDemoComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1, 'list-demo', [], null, null, null, View_ListDemoComponent_0, RenderType_ListDemoComponent)),
        directiveDef(49152, null, 0, ListDemoComponent, [], null, null)], null, null);
}
var ListDemoComponentNgFactory = createComponentFactory('list-demo', ListDemoComponent, View_ListDemoComponent_Host_0, {}, {}, []);

/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
/* tslint:disable */
var styles_DrawerDemoComponent = [];
var RenderType_DrawerDemoComponent = createRendererType2({ encapsulation: 2,
    styles: styles_DrawerDemoComponent, data: {} });
function View_DrawerDemoComponent_0(_l) {
    return viewDef(0, [queryDef(402653184, 1, { temporaryDrawer: 0 }), queryDef(402653184, 2, { persistentDrawer: 0 }),
        (_l()(), elementDef(0, null, null, 694, 'div', [['class', 'mdc-padding'],
            ['fxLayout', 'column'], ['fxLayoutAlign', 'start start']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0,
                'layout'] }, null), directiveDef(737280, null, 0, LayoutAlignDirective, [MediaMonitor, ElementRef, Renderer2, [2, LayoutDirective]], { align: [0,
                'align'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 2, 'h1', [['mdc-typography-display1',
                '']], [[2, 'mdc-typography--display1', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['Drawers'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 2, 'div', [['mdc-typography-subheading2', '']], [[2, 'mdc-typography--subheading2',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, undefined, [], null, null),
        (_l()(), textDef(null, ['The MDC Drawer component is a spec-aligned drawer component adhering to the Material Design navigation drawer pattern. It implements permanent, persistent, and temporary drawers.'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 5, 'div', [['class', 'info-banner'], ['mdc-typography-subheading1', '']], [[2,
                'mdc-typography--subheading1', null]], null, null, null, null)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(),
            textDef(null, ['\n    '])), (_l()(), textDef(null, ['import { DrawerModule } from \'@angular-mdc/web\';'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 293, 'div', [['class', 'docs-api']], null, null, null, null, null)),
        directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers,
            KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0,
                'classBase'] }, null), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 61, 'table', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'thead', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Component'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-permanent-drawer'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Child Directives'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 28, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-permanent-drawer-spacer'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Optional. Add to node to provide the matching amount of space for toolbar.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-permanent-drawer-content'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Mandatory. Needs to be set on the container node for the drawer content.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-permanent-drawer-selected'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Optional. Highlights currently selected drawer item.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n\n    '])), (_l()(), elementDef(0, null, null, 112, 'table', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])),
        (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Component'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'tbody', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-persistent-drawer'])), (_l()(), textDef(null, ['\n        '])),
        (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])),
        (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Child Directives'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 46, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-persistent-drawer-spacer'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Optional. Add to provide the matching amount of space for toolbar.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-persistent-drawer-header'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Optional. Add to create a 16:9 drawer header.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-persistent-drawer-header-content'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Optional. Add content inside mdc-persistent-drawer-header.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-persistent-drawer-content'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Mandatory. Needs to be set as the container node for the drawer content.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-persistent-drawer-selected'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Optional. Highlights currently selected drawer item.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Events'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 19, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Output() opened'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Event dispatched on drawer open.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Output() closed'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Event dispatched on drawer close.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 112, 'table', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])),
        (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Component'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'tbody', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-temporary-drawer'])), (_l()(), textDef(null, ['\n        '])),
        (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])),
        (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Child Directives'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 46, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-temporary-drawer-spacer'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Optional. Add to provide the matching amount of space for toolbar.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-temporary-drawer-header'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Optional. Add to create a 16:9 drawer header.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-temporary-drawer-header-content'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Optional. Add content inside mdc-temporary-drawer-header.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-temporary-drawer-content'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Mandatory. Use for the drawer content.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-temporary-drawer-selected'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Optional. Highlights currently selected drawer item.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Events'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 19, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Output() opened'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Event dispatched on drawer open.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Output() closed'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Event dispatched on drawer close.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 2, 'span', [['mdc-typography-headline', '']], [[2,
                'mdc-typography--headline', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['Example - Permanent Drawer'])),
        (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 94, 'mdc-permanent-drawer', [], [[2, 'mdc-permanent-drawer', null],
            [1, 'role', 0]], null, null, View_PermanentDrawerComponent_0, RenderType_PermanentDrawerComponent)), directiveDef(49152, null, 0, material_es5_35, [ElementRef], null, null), (_l()(), textDef(0, ['\n      '])),
        (_l()(), elementDef(0, null, 0, 90, 'mdc-permanent-drawer-content', [], [[2, 'mdc-permanent-drawer__content', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_33, [ElementRef], null, null), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 86, 'mdc-list-group', [], [[2, 'mdc-list-group', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [ElementRef], null, null), (_l()(), textDef(null, ['\n            '])),
        (_l()(), elementDef(0, null, null, 44, 'mdc-list', [], [[2,
                'mdc-list', null], [1, 'role', 0], [2, 'mdc-list--dense', null],
            [2, 'mdc-list--two-line', null], [2, 'mdc-list--avatar-list', null]], null, null, View_ListComponent_0, RenderType_ListComponent)),
        directiveDef(573440, null, 1, material_es5_58, [ElementRef], null, null), queryDef(603979776, 3, { listItems: 1 }), (_l()(), textDef(0, ['\n              '])),
        (_l()(), elementDef(0, null, 0, 9, 'a', [['href', '#/drawer-demo'], ['mdc-list-item',
                ''], ['mdc-permanent-drawer-selected', '']], [[2, 'mdc-permanent-drawer--selected',
                null], [2, 'mdc-list-item', null], [1, 'role', 0]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_34, [ElementRef], null, null),
        providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef,
            undefined]), directiveDef(4734976, [[3, 4]], 0, material_es5_59, [ElementRef, material_es5_74,
            material_es5_58], null, null), (_l()(), textDef(null, ['\n                  '])), (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon', ''], ['mdc-list-item-start', '']], [[2, 'mdc-list-item__start-detail',
                null], [2, 'material-icons', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['home'])), (_l()(), textDef(null, ['Home\n                '])), (_l()(),
            textDef(0, ['\n              '])), (_l()(), elementDef(0, null, 0, 8, 'a', [['href', '#/drawer-demo'], ['mdc-list-item', '']], [[2, 'mdc-list-item', null],
            [1, 'role', 0]], null, null, null, null)),
        providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef,
            undefined]), directiveDef(4734976, [[3, 4]], 0, material_es5_59, [ElementRef, material_es5_74,
            material_es5_58], null, null), (_l()(), textDef(null, ['\n                  '])), (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon', ''], ['mdc-list-item-start', '']], [[2, 'mdc-list-item__start-detail',
                null], [2, 'material-icons', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['star'])), (_l()(), textDef(null, ['Star\n                '])), (_l()(),
            textDef(0, ['\n              '])), (_l()(), elementDef(0, null, 0, 8, 'a', [['href', '#/drawer-demo'], ['mdc-list-item', '']], [[2, 'mdc-list-item', null],
            [1, 'role', 0]], null, null, null, null)),
        providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef,
            undefined]), directiveDef(4734976, [[3, 4]], 0, material_es5_59, [ElementRef, material_es5_74,
            material_es5_58], null, null), (_l()(), textDef(null, ['\n                  '])), (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon', ''], ['mdc-list-item-start', '']], [[2, 'mdc-list-item__start-detail',
                null], [2, 'material-icons', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['send'])), (_l()(), textDef(null, ['Sent Mail\n                '])),
        (_l()(), textDef(0, ['\n              '])), (_l()(), elementDef(0, null, 0, 8, 'a', [['href', '#/drawer-demo'], ['mdc-list-item', '']], [[2, 'mdc-list-item',
                null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2,
            ElementRef, undefined]), directiveDef(4734976, [[3, 4]], 0, material_es5_59, [ElementRef,
            material_es5_74, material_es5_58], null, null), (_l()(), textDef(null, ['\n                  '])), (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon', ''], ['mdc-list-item-start', '']], [[2, 'mdc-list-item__start-detail',
                null], [2, 'material-icons', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['drafts'])), (_l()(), textDef(null, ['Drafts\n                '])),
        (_l()(), textDef(0, ['\n            '])), (_l()(), textDef(null, ['\n            '])),
        (_l()(), elementDef(0, null, null, 1, 'mdc-list-divider', [], null, null, null, View_ɵd_0, RenderType_ɵd)),
        directiveDef(49152, null, 0, undefined, [ElementRef, Renderer2], null, null), (_l()(), textDef(null, ['\n            '])), (_l()(),
            elementDef(0, null, null, 33, 'mdc-list', [], [[2, 'mdc-list',
                    null], [1, 'role', 0], [2, 'mdc-list--dense', null], [2, 'mdc-list--two-line',
                    null], [2, 'mdc-list--avatar-list', null]], null, null, View_ListComponent_0, RenderType_ListComponent)),
        directiveDef(573440, null, 1, material_es5_58, [ElementRef], null, null), queryDef(603979776, 4, { listItems: 1 }), (_l()(), textDef(0, ['\n              '])),
        (_l()(), elementDef(0, null, 0, 8, 'a', [['href', '#/drawer-demo'], ['mdc-list-item',
                '']], [[2, 'mdc-list-item', null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4734976, [[4, 4]], 0, material_es5_59, [ElementRef, material_es5_74, material_es5_58], null, null),
        (_l()(), textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 3, 'i', [['href', '#/drawer-demo'], ['material-icon', ''], ['mdc-list-item-start',
                '']], [[2, 'mdc-list-item__start-detail', null], [2, 'material-icons',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['email'])), (_l()(),
            textDef(null, ['All Mail\n              '])), (_l()(), textDef(0, ['\n              '])),
        (_l()(), elementDef(0, null, 0, 8, 'a', [['href', '#/drawer-demo'], ['mdc-list-item',
                '']], [[2, 'mdc-list-item', null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4734976, [[4, 4]], 0, material_es5_59, [ElementRef, material_es5_74, material_es5_58], null, null),
        (_l()(), textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 3, 'i', [['href', '#/drawer-demo'], ['material-icon', ''], ['mdc-list-item-start',
                '']], [[2, 'mdc-list-item__start-detail', null], [2, 'material-icons',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['delete'])),
        (_l()(), textDef(null, ['Trash\n              '])), (_l()(), textDef(0, ['\n              '])), (_l()(), elementDef(0, null, 0, 8, 'a', [['href',
                '#/drawer-demo'], ['mdc-list-item', '']], [[2, 'mdc-list-item', null],
            [1, 'role', 0]], null, null, null, null)),
        providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef,
            undefined]), directiveDef(4734976, [[4, 4]], 0, material_es5_59, [ElementRef, material_es5_74,
            material_es5_58], null, null), (_l()(), textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon', ''], ['mdc-list-item-start', '']], [[2, 'mdc-list-item__start-detail',
                null], [2, 'material-icons', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['report'])), (_l()(), textDef(null, ['Spam\n              '])), (_l()(),
            textDef(0, ['\n            '])), (_l()(), textDef(null, ['\n          '])),
        (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(0, ['\n    '])),
        (_l()(), textDef(null, ['\n\n  '])), (_l()(), elementDef(0, null, null, 118, 'div', [['class', 'mdc-padding'], ['fxLayout', 'column'], ['fxLayoutAlign',
                'start start']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor,
            ElementRef, Renderer2], { layout: [0, 'layout'] }, null), directiveDef(737280, null, 0, LayoutAlignDirective, [MediaMonitor, ElementRef, Renderer2,
            [2, LayoutDirective]], { align: [0, 'align'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers,
            ElementRef, Renderer, Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 2, 'span', [['mdc-typography-headline', ''], ['style',
                'margin-top: 20px;']], [[2, 'mdc-typography--headline', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(),
            textDef(null, ['Example - Temporary Drawer'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 3, 'button', [['mdc-button',
                '']], [[8, 'tabIndex', 0], [1, 'type', 0], [2, 'mdc-button', null], [2, 'mdc-button--raised',
                null], [2, 'mdc-button--primary', null], [2, 'mdc-button--accent',
                null], [2, 'mdc-button--dense', null], [2, 'mdc-button--compact',
                null], [2, 'mdc-card__action', null]], [[null, 'click'],
            [null, 'keypress'], [null, 'blur']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('keypress' === en)) {
                var pd_0 = (nodeValue(_v, 428).onkeypress($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 428).blur($event) !== false);
                ad = (pd_1 && ad);
            }
            if (('click' === en)) {
                var pd_2 = (_co.handleTemporary() !== false);
                ad = (pd_2 && ad);
            }
            return ad;
        }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], { raised: [0, 'raised'],
            primary: [1, 'primary'] }, null), (_l()(), textDef(0, ['Open Temporary Drawer'])),
        (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 103, 'mdc-temporary-drawer', [], [[2, 'mdc-temporary-drawer', null]], null, null, View_TemporaryDrawerComponent_0, RenderType_TemporaryDrawerComponent)),
        directiveDef(4374528, [[1, 4], ['temporary', 4]], 0, material_es5_42, [Renderer2,
            ElementRef, undefined], null, null), (_l()(), textDef(0, ['\n      '])),
        (_l()(), elementDef(0, null, 0, 7, 'mdc-temporary-drawer-header', [['class',
                'mdc-theme--primary-bg mdc-theme--text-primary-on-primary']], [[2, 'mdc-temporary-drawer__header',
                null]], null, null, null, null)),
        directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers,
            KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0,
                'classBase'] }, null), directiveDef(16384, null, 0, material_es5_39, [ElementRef], null, null), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 2, 'mdc-temporary-drawer-header-content', [], [[2, 'mdc-temporary-drawer__header-content', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_40, [ElementRef], null, null), (_l()(), textDef(null, ['\n          Header goes here\n        '])),
        (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(0, ['\n      '])),
        (_l()(), elementDef(0, null, 0, 90, 'mdc-temporary-drawer-content', [], [[2, 'mdc-temporary-drawer__content', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_38, [ElementRef], null, null), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 86, 'mdc-list-group', [], [[2, 'mdc-list-group', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [ElementRef], null, null), (_l()(), textDef(null, ['\n            '])),
        (_l()(), elementDef(0, null, null, 44, 'mdc-list', [], [[2,
                'mdc-list', null], [1, 'role', 0], [2, 'mdc-list--dense', null],
            [2, 'mdc-list--two-line', null], [2, 'mdc-list--avatar-list', null]], null, null, View_ListComponent_0, RenderType_ListComponent)),
        directiveDef(573440, null, 1, material_es5_58, [ElementRef], null, null), queryDef(603979776, 5, { listItems: 1 }), (_l()(), textDef(0, ['\n              '])),
        (_l()(), elementDef(0, null, 0, 9, 'a', [['href', '#/drawer-demo'], ['mdc-list-item',
                ''], ['mdc-temporary-drawer-selected', '']], [[2, 'mdc-temporary-drawer--selected',
                null], [2, 'mdc-list-item', null], [1, 'role', 0]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_41, [ElementRef], null, null),
        providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef,
            undefined]), directiveDef(4734976, [[5, 4]], 0, material_es5_59, [ElementRef, material_es5_74,
            material_es5_58], null, null), (_l()(), textDef(null, ['\n                  '])), (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon', ''], ['mdc-list-item-start', '']], [[2, 'mdc-list-item__start-detail',
                null], [2, 'material-icons', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['home'])), (_l()(), textDef(null, ['Home\n                '])), (_l()(),
            textDef(0, ['\n              '])), (_l()(), elementDef(0, null, 0, 8, 'a', [['href', '#/drawer-demo'], ['mdc-list-item', '']], [[2, 'mdc-list-item', null],
            [1, 'role', 0]], null, null, null, null)),
        providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef,
            undefined]), directiveDef(4734976, [[5, 4]], 0, material_es5_59, [ElementRef, material_es5_74,
            material_es5_58], null, null), (_l()(), textDef(null, ['\n                  '])), (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon', ''], ['mdc-list-item-start', '']], [[2, 'mdc-list-item__start-detail',
                null], [2, 'material-icons', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['star'])), (_l()(), textDef(null, ['Star\n                '])), (_l()(),
            textDef(0, ['\n              '])), (_l()(), elementDef(0, null, 0, 8, 'a', [['href', '#/drawer-demo'], ['mdc-list-item', '']], [[2, 'mdc-list-item', null],
            [1, 'role', 0]], null, null, null, null)),
        providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef,
            undefined]), directiveDef(4734976, [[5, 4]], 0, material_es5_59, [ElementRef, material_es5_74,
            material_es5_58], null, null), (_l()(), textDef(null, ['\n                  '])), (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon', ''], ['mdc-list-item-start', '']], [[2, 'mdc-list-item__start-detail',
                null], [2, 'material-icons', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['send'])), (_l()(), textDef(null, ['Sent Mail\n                '])),
        (_l()(), textDef(0, ['\n              '])), (_l()(), elementDef(0, null, 0, 8, 'a', [['href', '#/drawer-demo'], ['mdc-list-item', '']], [[2, 'mdc-list-item',
                null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2,
            ElementRef, undefined]), directiveDef(4734976, [[5, 4]], 0, material_es5_59, [ElementRef,
            material_es5_74, material_es5_58], null, null), (_l()(), textDef(null, ['\n                  '])), (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon', ''], ['mdc-list-item-start', '']], [[2, 'mdc-list-item__start-detail',
                null], [2, 'material-icons', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['drafts'])), (_l()(), textDef(null, ['Drafts\n                '])),
        (_l()(), textDef(0, ['\n            '])), (_l()(), textDef(null, ['\n            '])),
        (_l()(), elementDef(0, null, null, 1, 'mdc-list-divider', [], null, null, null, View_ɵd_0, RenderType_ɵd)),
        directiveDef(49152, null, 0, undefined, [ElementRef, Renderer2], null, null), (_l()(), textDef(null, ['\n            '])), (_l()(),
            elementDef(0, null, null, 33, 'mdc-list', [], [[2, 'mdc-list',
                    null], [1, 'role', 0], [2, 'mdc-list--dense', null], [2, 'mdc-list--two-line',
                    null], [2, 'mdc-list--avatar-list', null]], null, null, View_ListComponent_0, RenderType_ListComponent)),
        directiveDef(573440, null, 1, material_es5_58, [ElementRef], null, null), queryDef(603979776, 6, { listItems: 1 }), (_l()(), textDef(0, ['\n              '])),
        (_l()(), elementDef(0, null, 0, 8, 'a', [['href', '#/drawer-demo'], ['mdc-list-item',
                '']], [[2, 'mdc-list-item', null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4734976, [[6, 4]], 0, material_es5_59, [ElementRef, material_es5_74, material_es5_58], null, null),
        (_l()(), textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 3, 'i', [['href', '#/drawer-demo'], ['material-icon', ''], ['mdc-list-item-start',
                '']], [[2, 'mdc-list-item__start-detail', null], [2, 'material-icons',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['email'])), (_l()(),
            textDef(null, ['All Mail\n              '])), (_l()(), textDef(0, ['\n              '])),
        (_l()(), elementDef(0, null, 0, 8, 'a', [['href', '#/drawer-demo'], ['mdc-list-item',
                '']], [[2, 'mdc-list-item', null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4734976, [[6, 4]], 0, material_es5_59, [ElementRef, material_es5_74, material_es5_58], null, null),
        (_l()(), textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 3, 'i', [['href', '#/drawer-demo'], ['material-icon', ''], ['mdc-list-item-start',
                '']], [[2, 'mdc-list-item__start-detail', null], [2, 'material-icons',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['delete'])),
        (_l()(), textDef(null, ['Trash\n              '])), (_l()(), textDef(0, ['\n              '])), (_l()(), elementDef(0, null, 0, 8, 'a', [['href',
                '#/drawer-demo'], ['mdc-list-item', '']], [[2, 'mdc-list-item', null],
            [1, 'role', 0]], null, null, null, null)),
        providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef,
            undefined]), directiveDef(4734976, [[6, 4]], 0, material_es5_59, [ElementRef, material_es5_74,
            material_es5_58], null, null), (_l()(), textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon', ''], ['mdc-list-item-start', '']], [[2, 'mdc-list-item__start-detail',
                null], [2, 'material-icons', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['report'])), (_l()(), textDef(null, ['Spam\n              '])), (_l()(),
            textDef(0, ['\n            '])), (_l()(), textDef(null, ['\n          '])),
        (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(0, ['\n    '])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n\n  '])),
        (_l()(), elementDef(0, null, null, 158, 'div', [['class', 'mdc-padding'],
            ['fxLayout', 'column'], ['fxLayoutAlign', 'start start']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0,
                'layout'] }, null), directiveDef(737280, null, 0, LayoutAlignDirective, [MediaMonitor, ElementRef, Renderer2, [2, LayoutDirective]], { align: [0,
                'align'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 2, 'span', [['mdc-typography-headline',
                ''], ['style', 'margin-top: 20px;']], [[2, 'mdc-typography--headline', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(),
            textDef(null, ['Example - Persistent Drawer'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 3, 'button', [['mdc-button',
                '']], [[8, 'tabIndex', 0], [1, 'type', 0], [2, 'mdc-button', null], [2, 'mdc-button--raised',
                null], [2, 'mdc-button--primary', null], [2, 'mdc-button--accent',
                null], [2, 'mdc-button--dense', null], [2, 'mdc-button--compact',
                null], [2, 'mdc-card__action', null]], [[null, 'click'],
            [null, 'keypress'], [null, 'blur']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('keypress' === en)) {
                var pd_0 = (nodeValue(_v, 548).onkeypress($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 548).blur($event) !== false);
                ad = (pd_1 && ad);
            }
            if (('click' === en)) {
                var pd_2 = (_co.handlePersistent() !== false);
                ad = (pd_2 && ad);
            }
            return ad;
        }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], { raised: [0, 'raised'],
            primary: [1, 'primary'] }, null), (_l()(), textDef(0, ['Open Persistent Drawer'])),
        (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 143, 'div', [['class', 'mdc-padding'], ['fxLayout', 'row']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0,
                'layout'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 93, 'mdc-persistent-drawer', [], [[2, 'mdc-persistent-drawer', null]], null, null, View_PersistentDrawerComponent_0, RenderType_PersistentDrawerComponent)),
        directiveDef(4374528, [[2, 4], ['persistent', 4]], 0, material_es5_49, [Renderer2,
            ElementRef, undefined], null, null), (_l()(), textDef(0, ['\n        '])),
        (_l()(), elementDef(0, null, 0, 1, 'mdc-persistent-drawer-spacer', [], [[2, 'mdc-persistent-drawer__toolbar-spacer', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_44, [ElementRef], null, null),
        (_l()(), textDef(0, ['\n          '])), (_l()(), elementDef(0, null, 0, 86, 'mdc-list-group', [], [[2, 'mdc-list-group', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [ElementRef], null, null), (_l()(), textDef(null, ['\n            '])),
        (_l()(), elementDef(0, null, null, 44, 'mdc-list', [], [[2,
                'mdc-list', null], [1, 'role', 0], [2, 'mdc-list--dense', null],
            [2, 'mdc-list--two-line', null], [2, 'mdc-list--avatar-list', null]], null, null, View_ListComponent_0, RenderType_ListComponent)),
        directiveDef(573440, null, 1, material_es5_58, [ElementRef], null, null), queryDef(603979776, 7, { listItems: 1 }), (_l()(), textDef(0, ['\n              '])),
        (_l()(), elementDef(0, null, 0, 9, 'a', [['href', '#/drawer-demo'], ['mdc-list-item',
                ''], ['mdc-persistent-drawer-selected', '']], [[2, 'mdc-persistent-drawer--selected',
                null], [2, 'mdc-list-item', null], [1, 'role', 0]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_48, [ElementRef], null, null),
        providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef,
            undefined]), directiveDef(4734976, [[7, 4]], 0, material_es5_59, [ElementRef, material_es5_74,
            material_es5_58], null, null), (_l()(), textDef(null, ['\n                  '])), (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon', ''], ['mdc-list-item-start', '']], [[2, 'mdc-list-item__start-detail',
                null], [2, 'material-icons', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['home'])), (_l()(), textDef(null, ['Home\n                '])), (_l()(),
            textDef(0, ['\n              '])), (_l()(), elementDef(0, null, 0, 8, 'a', [['href', '#/drawer-demo'], ['mdc-list-item', '']], [[2, 'mdc-list-item', null],
            [1, 'role', 0]], null, null, null, null)),
        providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef,
            undefined]), directiveDef(4734976, [[7, 4]], 0, material_es5_59, [ElementRef, material_es5_74,
            material_es5_58], null, null), (_l()(), textDef(null, ['\n                  '])), (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon', ''], ['mdc-list-item-start', '']], [[2, 'mdc-list-item__start-detail',
                null], [2, 'material-icons', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['star'])), (_l()(), textDef(null, ['Star\n                '])), (_l()(),
            textDef(0, ['\n              '])), (_l()(), elementDef(0, null, 0, 8, 'a', [['href', '#/drawer-demo'], ['mdc-list-item', '']], [[2, 'mdc-list-item', null],
            [1, 'role', 0]], null, null, null, null)),
        providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef,
            undefined]), directiveDef(4734976, [[7, 4]], 0, material_es5_59, [ElementRef, material_es5_74,
            material_es5_58], null, null), (_l()(), textDef(null, ['\n                  '])), (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon', ''], ['mdc-list-item-start', '']], [[2, 'mdc-list-item__start-detail',
                null], [2, 'material-icons', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['send'])), (_l()(), textDef(null, ['Sent Mail\n                '])),
        (_l()(), textDef(0, ['\n              '])), (_l()(), elementDef(0, null, 0, 8, 'a', [['href', '#/drawer-demo'], ['mdc-list-item', '']], [[2, 'mdc-list-item',
                null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2,
            ElementRef, undefined]), directiveDef(4734976, [[7, 4]], 0, material_es5_59, [ElementRef,
            material_es5_74, material_es5_58], null, null), (_l()(), textDef(null, ['\n                  '])), (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon', ''], ['mdc-list-item-start', '']], [[2, 'mdc-list-item__start-detail',
                null], [2, 'material-icons', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['drafts'])), (_l()(), textDef(null, ['Drafts\n                '])),
        (_l()(), textDef(0, ['\n            '])), (_l()(), textDef(null, ['\n            '])),
        (_l()(), elementDef(0, null, null, 1, 'mdc-list-divider', [], null, null, null, View_ɵd_0, RenderType_ɵd)),
        directiveDef(49152, null, 0, undefined, [ElementRef, Renderer2], null, null), (_l()(), textDef(null, ['\n            '])), (_l()(),
            elementDef(0, null, null, 33, 'mdc-list', [], [[2, 'mdc-list',
                    null], [1, 'role', 0], [2, 'mdc-list--dense', null], [2, 'mdc-list--two-line',
                    null], [2, 'mdc-list--avatar-list', null]], null, null, View_ListComponent_0, RenderType_ListComponent)),
        directiveDef(573440, null, 1, material_es5_58, [ElementRef], null, null), queryDef(603979776, 8, { listItems: 1 }), (_l()(), textDef(0, ['\n              '])),
        (_l()(), elementDef(0, null, 0, 8, 'a', [['href', '#/drawer-demo'], ['mdc-list-item',
                '']], [[2, 'mdc-list-item', null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4734976, [[8, 4]], 0, material_es5_59, [ElementRef, material_es5_74, material_es5_58], null, null),
        (_l()(), textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 3, 'i', [['href', '#/drawer-demo'], ['material-icon', ''], ['mdc-list-item-start',
                '']], [[2, 'mdc-list-item__start-detail', null], [2, 'material-icons',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['email'])), (_l()(),
            textDef(null, ['All Mail\n              '])), (_l()(), textDef(0, ['\n              '])),
        (_l()(), elementDef(0, null, 0, 8, 'a', [['href', '#/drawer-demo'], ['mdc-list-item',
                '']], [[2, 'mdc-list-item', null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4734976, [[8, 4]], 0, material_es5_59, [ElementRef, material_es5_74, material_es5_58], null, null),
        (_l()(), textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 3, 'i', [['href', '#/drawer-demo'], ['material-icon', ''], ['mdc-list-item-start',
                '']], [[2, 'mdc-list-item__start-detail', null], [2, 'material-icons',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['delete'])),
        (_l()(), textDef(null, ['Trash\n              '])), (_l()(), textDef(0, ['\n              '])), (_l()(), elementDef(0, null, 0, 8, 'a', [['href',
                '#/drawer-demo'], ['mdc-list-item', '']], [[2, 'mdc-list-item', null],
            [1, 'role', 0]], null, null, null, null)),
        providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef,
            undefined]), directiveDef(4734976, [[8, 4]], 0, material_es5_59, [ElementRef, material_es5_74,
            material_es5_58], null, null), (_l()(), textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon', ''], ['mdc-list-item-start', '']], [[2, 'mdc-list-item__start-detail',
                null], [2, 'material-icons', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['report'])), (_l()(), textDef(null, ['Spam\n              '])), (_l()(),
            textDef(0, ['\n            '])), (_l()(), textDef(null, ['\n          '])),
        (_l()(), textDef(0, ['\n      '])), (_l()(), textDef(null, ['\n      '])),
        (_l()(), elementDef(0, null, null, 43, 'div', [['style', 'width: 300px;']], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 40, 'mdc-toolbar', [], [[2, 'mdc-toolbar', null],
            [2, 'mdc-toolbar--fixed', null], [2, 'mdc-toolbar--waterfall', null],
            [2, 'mdc-toolbar--flexible', null], [2, 'mdc-toolbar--fixed-lastrow-only',
                null], [2, 'mdc-toolbar--flexible-default-behavior', null]], null, null, View_ToolbarComponent_0, RenderType_ToolbarComponent)),
        directiveDef(4374528, null, 2, material_es5_101, [Renderer2, ElementRef,
            undefined], null, null), queryDef(335544320, 9, { mdcFirstRow: 0 }),
        queryDef(335544320, 10, { mdcTitle: 0 }), (_l()(), textDef(0, ['\n            '])), (_l()(),
            elementDef(0, null, 0, 34, 'mdc-toolbar-row', [], [[2, 'mdc-toolbar__row',
                    null]], null, null, null, null)),
        directiveDef(16384, [[9, 4]], 0, material_es5_102, [ElementRef], null, null), (_l()(), textDef(null, ['\n                '])), (_l()(),
            elementDef(0, null, null, 11, 'mdc-toolbar-section', [], [[2, 'mdc-toolbar__section', null], [2, 'mdc-toolbar__section--align-start',
                    null], [2, 'mdc-toolbar__section--align-end', null],
                [2, 'mdc-toolbar__section--shrink-to-fit', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_103, [], { alignStart: [0, 'alignStart'] }, null), (_l()(), textDef(null, ['\n                    '])),
        (_l()(), elementDef(0, null, null, 3, 'button', [['material-icon', ''],
            ['mdc-toolbar-icon-menu', '']], [[2, 'material-icons', null], [2, 'mdc-toolbar__icon--menu',
                null]], [[null, 'click']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('click' === en)) {
                var pd_0 = (_co.handlePersistent() !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, null, null)), directiveDef(16384, null, 0, material_es5_65, [], null, null), directiveDef(16384, null, 0, material_es5_107, [ElementRef], null, null),
        (_l()(), textDef(null, ['menu'])), (_l()(), textDef(null, ['\n                    '])),
        (_l()(), elementDef(0, null, null, 2, 'span', [['mdc-toolbar-title',
                '']], [[2, 'mdc-toolbar__title', null]], null, null, null, null)), directiveDef(16384, [[10, 4]], 0, material_es5_104, [ElementRef], null, null), (_l()(), textDef(null, ['App'])), (_l()(), textDef(null, ['\n                '])), (_l()(),
            textDef(null, ['\n                '])), (_l()(), elementDef(0, null, null, 17, 'mdc-toolbar-section', [], [[2, 'mdc-toolbar__section',
                null], [2, 'mdc-toolbar__section--align-start', null],
            [2, 'mdc-toolbar__section--align-end', null], [2, 'mdc-toolbar__section--shrink-to-fit',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_103, [], { alignEnd: [0,
                'alignEnd'] }, null), (_l()(), textDef(null, ['\n                    '])),
        (_l()(), elementDef(0, null, null, 3, 'a', [['href', '#/drawer-demo'],
            ['material-icon', ''], ['mdc-toolbar-icon', '']], [[2, 'material-icons', null],
            [2, 'mdc-toolbar__icon', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_65, [], null, null), directiveDef(16384, null, 0, material_es5_106, [ElementRef], null, null), (_l()(), textDef(null, ['file_download'])), (_l()(), textDef(null, ['\n                    '])),
        (_l()(), elementDef(0, null, null, 3, 'a', [['href', '#/drawer-demo'],
            ['material-icon', ''], ['mdc-toolbar-icon', '']], [[2, 'material-icons', null],
            [2, 'mdc-toolbar__icon', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_65, [], null, null), directiveDef(16384, null, 0, material_es5_106, [ElementRef], null, null), (_l()(), textDef(null, ['print'])), (_l()(), textDef(null, ['\n                    '])), (_l()(),
            elementDef(0, null, null, 3, 'a', [['href', '#/drawer-demo'], ['material-icon',
                    ''], ['mdc-toolbar-icon', '']], [[2, 'material-icons', null], [2,
                    'mdc-toolbar__icon', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_65, [], null, null), directiveDef(16384, null, 0, material_es5_106, [ElementRef], null, null), (_l()(), textDef(null, ['bookmark'])), (_l()(), textDef(null, ['\n                '])), (_l()(),
            textDef(null, ['\n            '])), (_l()(), textDef(0, ['\n        '])),
        (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n']))], function (_ck, _v) {
        var currVal_0 = 'column';
        _ck(_v, 3, 0, currVal_0);
        var currVal_1 = 'start start';
        _ck(_v, 4, 0, currVal_1);
        var currVal_2 = 'mdc-padding';
        _ck(_v, 5, 0, currVal_2);
        var currVal_6 = 'info-banner';
        _ck(_v, 16, 0, currVal_6);
        var currVal_7 = 'docs-api';
        _ck(_v, 23, 0, currVal_7);
        var currVal_52 = 'column';
        _ck(_v, 418, 0, currVal_52);
        var currVal_53 = 'start start';
        _ck(_v, 419, 0, currVal_53);
        var currVal_54 = 'mdc-padding';
        _ck(_v, 420, 0, currVal_54);
        var currVal_65 = true;
        var currVal_66 = true;
        _ck(_v, 428, 0, currVal_65, currVal_66);
        var currVal_69 = 'mdc-theme--primary-bg mdc-theme--text-primary-on-primary';
        _ck(_v, 435, 0, currVal_69);
        var currVal_112 = 'column';
        _ck(_v, 538, 0, currVal_112);
        var currVal_113 = 'start start';
        _ck(_v, 539, 0, currVal_113);
        var currVal_114 = 'mdc-padding';
        _ck(_v, 540, 0, currVal_114);
        var currVal_125 = true;
        var currVal_126 = true;
        _ck(_v, 548, 0, currVal_125, currVal_126);
        var currVal_127 = 'row';
        _ck(_v, 552, 0, currVal_127);
        var currVal_128 = 'mdc-padding';
        _ck(_v, 553, 0, currVal_128);
        var currVal_182 = true;
        _ck(_v, 661, 0, currVal_182);
        var currVal_190 = true;
        _ck(_v, 674, 0, currVal_190);
    }, function (_ck, _v) {
        var currVal_3 = nodeValue(_v, 8).isHostClass;
        _ck(_v, 7, 0, currVal_3);
        var currVal_4 = nodeValue(_v, 12).isHostClass;
        _ck(_v, 11, 0, currVal_4);
        var currVal_5 = nodeValue(_v, 17).isHostClass;
        _ck(_v, 15, 0, currVal_5);
        var currVal_8 = nodeValue(_v, 318).isHostClass;
        _ck(_v, 317, 0, currVal_8);
        var currVal_9 = nodeValue(_v, 322).isHostClass;
        var currVal_10 = nodeValue(_v, 322).role;
        _ck(_v, 321, 0, currVal_9, currVal_10);
        var currVal_11 = nodeValue(_v, 325).isHostClass;
        _ck(_v, 324, 0, currVal_11);
        var currVal_12 = nodeValue(_v, 328).isHostClass;
        _ck(_v, 327, 0, currVal_12);
        var currVal_13 = nodeValue(_v, 331).isHostClass;
        var currVal_14 = nodeValue(_v, 331).role;
        var currVal_15 = nodeValue(_v, 331).classDenseList;
        var currVal_16 = nodeValue(_v, 331).classTwoline;
        var currVal_17 = nodeValue(_v, 331).classAvatarList;
        _ck(_v, 330, 0, currVal_13, currVal_14, currVal_15, currVal_16, currVal_17);
        var currVal_18 = nodeValue(_v, 335).isHostClass;
        var currVal_19 = nodeValue(_v, 337).isHostClass;
        var currVal_20 = nodeValue(_v, 337).role;
        _ck(_v, 334, 0, currVal_18, currVal_19, currVal_20);
        var currVal_21 = nodeValue(_v, 340).isHostClass;
        var currVal_22 = nodeValue(_v, 341).isHostClass;
        _ck(_v, 339, 0, currVal_21, currVal_22);
        var currVal_23 = nodeValue(_v, 347).isHostClass;
        var currVal_24 = nodeValue(_v, 347).role;
        _ck(_v, 345, 0, currVal_23, currVal_24);
        var currVal_25 = nodeValue(_v, 350).isHostClass;
        var currVal_26 = nodeValue(_v, 351).isHostClass;
        _ck(_v, 349, 0, currVal_25, currVal_26);
        var currVal_27 = nodeValue(_v, 357).isHostClass;
        var currVal_28 = nodeValue(_v, 357).role;
        _ck(_v, 355, 0, currVal_27, currVal_28);
        var currVal_29 = nodeValue(_v, 360).isHostClass;
        var currVal_30 = nodeValue(_v, 361).isHostClass;
        _ck(_v, 359, 0, currVal_29, currVal_30);
        var currVal_31 = nodeValue(_v, 367).isHostClass;
        var currVal_32 = nodeValue(_v, 367).role;
        _ck(_v, 365, 0, currVal_31, currVal_32);
        var currVal_33 = nodeValue(_v, 370).isHostClass;
        var currVal_34 = nodeValue(_v, 371).isHostClass;
        _ck(_v, 369, 0, currVal_33, currVal_34);
        var currVal_35 = nodeValue(_v, 380).isHostClass;
        var currVal_36 = nodeValue(_v, 380).role;
        var currVal_37 = nodeValue(_v, 380).classDenseList;
        var currVal_38 = nodeValue(_v, 380).classTwoline;
        var currVal_39 = nodeValue(_v, 380).classAvatarList;
        _ck(_v, 379, 0, currVal_35, currVal_36, currVal_37, currVal_38, currVal_39);
        var currVal_40 = nodeValue(_v, 385).isHostClass;
        var currVal_41 = nodeValue(_v, 385).role;
        _ck(_v, 383, 0, currVal_40, currVal_41);
        var currVal_42 = nodeValue(_v, 388).isHostClass;
        var currVal_43 = nodeValue(_v, 389).isHostClass;
        _ck(_v, 387, 0, currVal_42, currVal_43);
        var currVal_44 = nodeValue(_v, 395).isHostClass;
        var currVal_45 = nodeValue(_v, 395).role;
        _ck(_v, 393, 0, currVal_44, currVal_45);
        var currVal_46 = nodeValue(_v, 398).isHostClass;
        var currVal_47 = nodeValue(_v, 399).isHostClass;
        _ck(_v, 397, 0, currVal_46, currVal_47);
        var currVal_48 = nodeValue(_v, 405).isHostClass;
        var currVal_49 = nodeValue(_v, 405).role;
        _ck(_v, 403, 0, currVal_48, currVal_49);
        var currVal_50 = nodeValue(_v, 408).isHostClass;
        var currVal_51 = nodeValue(_v, 409).isHostClass;
        _ck(_v, 407, 0, currVal_50, currVal_51);
        var currVal_55 = nodeValue(_v, 423).isHostClass;
        _ck(_v, 422, 0, currVal_55);
        var currVal_56 = nodeValue(_v, 428).tabindex;
        var currVal_57 = nodeValue(_v, 428).attrType;
        var currVal_58 = nodeValue(_v, 428).isHostClass;
        var currVal_59 = nodeValue(_v, 428).classRaised;
        var currVal_60 = nodeValue(_v, 428).classPrimary;
        var currVal_61 = nodeValue(_v, 428).classAccent;
        var currVal_62 = nodeValue(_v, 428).classDense;
        var currVal_63 = nodeValue(_v, 428).classCompact;
        var currVal_64 = nodeValue(_v, 428).classCardAction;
        _ck(_v, 426, 0, currVal_56, currVal_57, currVal_58, currVal_59, currVal_60, currVal_61, currVal_62, currVal_63, currVal_64);
        var currVal_67 = nodeValue(_v, 432).isHostClass;
        _ck(_v, 431, 0, currVal_67);
        var currVal_68 = nodeValue(_v, 436).isHostClass;
        _ck(_v, 434, 0, currVal_68);
        var currVal_70 = nodeValue(_v, 439).isHostClass;
        _ck(_v, 438, 0, currVal_70);
        var currVal_71 = nodeValue(_v, 444).isHostClass;
        _ck(_v, 443, 0, currVal_71);
        var currVal_72 = nodeValue(_v, 447).isHostClass;
        _ck(_v, 446, 0, currVal_72);
        var currVal_73 = nodeValue(_v, 450).isHostClass;
        var currVal_74 = nodeValue(_v, 450).role;
        var currVal_75 = nodeValue(_v, 450).classDenseList;
        var currVal_76 = nodeValue(_v, 450).classTwoline;
        var currVal_77 = nodeValue(_v, 450).classAvatarList;
        _ck(_v, 449, 0, currVal_73, currVal_74, currVal_75, currVal_76, currVal_77);
        var currVal_78 = nodeValue(_v, 454).isHostClass;
        var currVal_79 = nodeValue(_v, 456).isHostClass;
        var currVal_80 = nodeValue(_v, 456).role;
        _ck(_v, 453, 0, currVal_78, currVal_79, currVal_80);
        var currVal_81 = nodeValue(_v, 459).isHostClass;
        var currVal_82 = nodeValue(_v, 460).isHostClass;
        _ck(_v, 458, 0, currVal_81, currVal_82);
        var currVal_83 = nodeValue(_v, 466).isHostClass;
        var currVal_84 = nodeValue(_v, 466).role;
        _ck(_v, 464, 0, currVal_83, currVal_84);
        var currVal_85 = nodeValue(_v, 469).isHostClass;
        var currVal_86 = nodeValue(_v, 470).isHostClass;
        _ck(_v, 468, 0, currVal_85, currVal_86);
        var currVal_87 = nodeValue(_v, 476).isHostClass;
        var currVal_88 = nodeValue(_v, 476).role;
        _ck(_v, 474, 0, currVal_87, currVal_88);
        var currVal_89 = nodeValue(_v, 479).isHostClass;
        var currVal_90 = nodeValue(_v, 480).isHostClass;
        _ck(_v, 478, 0, currVal_89, currVal_90);
        var currVal_91 = nodeValue(_v, 486).isHostClass;
        var currVal_92 = nodeValue(_v, 486).role;
        _ck(_v, 484, 0, currVal_91, currVal_92);
        var currVal_93 = nodeValue(_v, 489).isHostClass;
        var currVal_94 = nodeValue(_v, 490).isHostClass;
        _ck(_v, 488, 0, currVal_93, currVal_94);
        var currVal_95 = nodeValue(_v, 499).isHostClass;
        var currVal_96 = nodeValue(_v, 499).role;
        var currVal_97 = nodeValue(_v, 499).classDenseList;
        var currVal_98 = nodeValue(_v, 499).classTwoline;
        var currVal_99 = nodeValue(_v, 499).classAvatarList;
        _ck(_v, 498, 0, currVal_95, currVal_96, currVal_97, currVal_98, currVal_99);
        var currVal_100 = nodeValue(_v, 504).isHostClass;
        var currVal_101 = nodeValue(_v, 504).role;
        _ck(_v, 502, 0, currVal_100, currVal_101);
        var currVal_102 = nodeValue(_v, 507).isHostClass;
        var currVal_103 = nodeValue(_v, 508).isHostClass;
        _ck(_v, 506, 0, currVal_102, currVal_103);
        var currVal_104 = nodeValue(_v, 514).isHostClass;
        var currVal_105 = nodeValue(_v, 514).role;
        _ck(_v, 512, 0, currVal_104, currVal_105);
        var currVal_106 = nodeValue(_v, 517).isHostClass;
        var currVal_107 = nodeValue(_v, 518).isHostClass;
        _ck(_v, 516, 0, currVal_106, currVal_107);
        var currVal_108 = nodeValue(_v, 524).isHostClass;
        var currVal_109 = nodeValue(_v, 524).role;
        _ck(_v, 522, 0, currVal_108, currVal_109);
        var currVal_110 = nodeValue(_v, 527).isHostClass;
        var currVal_111 = nodeValue(_v, 528).isHostClass;
        _ck(_v, 526, 0, currVal_110, currVal_111);
        var currVal_115 = nodeValue(_v, 543).isHostClass;
        _ck(_v, 542, 0, currVal_115);
        var currVal_116 = nodeValue(_v, 548).tabindex;
        var currVal_117 = nodeValue(_v, 548).attrType;
        var currVal_118 = nodeValue(_v, 548).isHostClass;
        var currVal_119 = nodeValue(_v, 548).classRaised;
        var currVal_120 = nodeValue(_v, 548).classPrimary;
        var currVal_121 = nodeValue(_v, 548).classAccent;
        var currVal_122 = nodeValue(_v, 548).classDense;
        var currVal_123 = nodeValue(_v, 548).classCompact;
        var currVal_124 = nodeValue(_v, 548).classCardAction;
        _ck(_v, 546, 0, currVal_116, currVal_117, currVal_118, currVal_119, currVal_120, currVal_121, currVal_122, currVal_123, currVal_124);
        var currVal_129 = nodeValue(_v, 556).isHostClass;
        _ck(_v, 555, 0, currVal_129);
        var currVal_130 = nodeValue(_v, 559).isHostClass;
        _ck(_v, 558, 0, currVal_130);
        var currVal_131 = nodeValue(_v, 562).isHostClass;
        _ck(_v, 561, 0, currVal_131);
        var currVal_132 = nodeValue(_v, 565).isHostClass;
        var currVal_133 = nodeValue(_v, 565).role;
        var currVal_134 = nodeValue(_v, 565).classDenseList;
        var currVal_135 = nodeValue(_v, 565).classTwoline;
        var currVal_136 = nodeValue(_v, 565).classAvatarList;
        _ck(_v, 564, 0, currVal_132, currVal_133, currVal_134, currVal_135, currVal_136);
        var currVal_137 = nodeValue(_v, 569).isHostClass;
        var currVal_138 = nodeValue(_v, 571).isHostClass;
        var currVal_139 = nodeValue(_v, 571).role;
        _ck(_v, 568, 0, currVal_137, currVal_138, currVal_139);
        var currVal_140 = nodeValue(_v, 574).isHostClass;
        var currVal_141 = nodeValue(_v, 575).isHostClass;
        _ck(_v, 573, 0, currVal_140, currVal_141);
        var currVal_142 = nodeValue(_v, 581).isHostClass;
        var currVal_143 = nodeValue(_v, 581).role;
        _ck(_v, 579, 0, currVal_142, currVal_143);
        var currVal_144 = nodeValue(_v, 584).isHostClass;
        var currVal_145 = nodeValue(_v, 585).isHostClass;
        _ck(_v, 583, 0, currVal_144, currVal_145);
        var currVal_146 = nodeValue(_v, 591).isHostClass;
        var currVal_147 = nodeValue(_v, 591).role;
        _ck(_v, 589, 0, currVal_146, currVal_147);
        var currVal_148 = nodeValue(_v, 594).isHostClass;
        var currVal_149 = nodeValue(_v, 595).isHostClass;
        _ck(_v, 593, 0, currVal_148, currVal_149);
        var currVal_150 = nodeValue(_v, 601).isHostClass;
        var currVal_151 = nodeValue(_v, 601).role;
        _ck(_v, 599, 0, currVal_150, currVal_151);
        var currVal_152 = nodeValue(_v, 604).isHostClass;
        var currVal_153 = nodeValue(_v, 605).isHostClass;
        _ck(_v, 603, 0, currVal_152, currVal_153);
        var currVal_154 = nodeValue(_v, 614).isHostClass;
        var currVal_155 = nodeValue(_v, 614).role;
        var currVal_156 = nodeValue(_v, 614).classDenseList;
        var currVal_157 = nodeValue(_v, 614).classTwoline;
        var currVal_158 = nodeValue(_v, 614).classAvatarList;
        _ck(_v, 613, 0, currVal_154, currVal_155, currVal_156, currVal_157, currVal_158);
        var currVal_159 = nodeValue(_v, 619).isHostClass;
        var currVal_160 = nodeValue(_v, 619).role;
        _ck(_v, 617, 0, currVal_159, currVal_160);
        var currVal_161 = nodeValue(_v, 622).isHostClass;
        var currVal_162 = nodeValue(_v, 623).isHostClass;
        _ck(_v, 621, 0, currVal_161, currVal_162);
        var currVal_163 = nodeValue(_v, 629).isHostClass;
        var currVal_164 = nodeValue(_v, 629).role;
        _ck(_v, 627, 0, currVal_163, currVal_164);
        var currVal_165 = nodeValue(_v, 632).isHostClass;
        var currVal_166 = nodeValue(_v, 633).isHostClass;
        _ck(_v, 631, 0, currVal_165, currVal_166);
        var currVal_167 = nodeValue(_v, 639).isHostClass;
        var currVal_168 = nodeValue(_v, 639).role;
        _ck(_v, 637, 0, currVal_167, currVal_168);
        var currVal_169 = nodeValue(_v, 642).isHostClass;
        var currVal_170 = nodeValue(_v, 643).isHostClass;
        _ck(_v, 641, 0, currVal_169, currVal_170);
        var currVal_171 = nodeValue(_v, 653).isHostClass;
        var currVal_172 = nodeValue(_v, 653).classFixedToolbar;
        var currVal_173 = nodeValue(_v, 653).classWaterfallToolbar;
        var currVal_174 = nodeValue(_v, 653).classFlexibleToolbar;
        var currVal_175 = nodeValue(_v, 653).classFixedLastrow;
        var currVal_176 = nodeValue(_v, 653).classFlexibleDefaultBehavior;
        _ck(_v, 652, 0, currVal_171, currVal_172, currVal_173, currVal_174, currVal_175, currVal_176);
        var currVal_177 = nodeValue(_v, 658).isHostClass;
        _ck(_v, 657, 0, currVal_177);
        var currVal_178 = nodeValue(_v, 661).isHostClass;
        var currVal_179 = nodeValue(_v, 661).classAlignStart;
        var currVal_180 = nodeValue(_v, 661).classAlignEnd;
        var currVal_181 = nodeValue(_v, 661).classShrinkToFit;
        _ck(_v, 660, 0, currVal_178, currVal_179, currVal_180, currVal_181);
        var currVal_183 = nodeValue(_v, 664).isHostClass;
        var currVal_184 = nodeValue(_v, 665).isHostClass;
        _ck(_v, 663, 0, currVal_183, currVal_184);
        var currVal_185 = nodeValue(_v, 669).isHostClass;
        _ck(_v, 668, 0, currVal_185);
        var currVal_186 = nodeValue(_v, 674).isHostClass;
        var currVal_187 = nodeValue(_v, 674).classAlignStart;
        var currVal_188 = nodeValue(_v, 674).classAlignEnd;
        var currVal_189 = nodeValue(_v, 674).classShrinkToFit;
        _ck(_v, 673, 0, currVal_186, currVal_187, currVal_188, currVal_189);
        var currVal_191 = nodeValue(_v, 677).isHostClass;
        var currVal_192 = nodeValue(_v, 678).isHostClass;
        _ck(_v, 676, 0, currVal_191, currVal_192);
        var currVal_193 = nodeValue(_v, 682).isHostClass;
        var currVal_194 = nodeValue(_v, 683).isHostClass;
        _ck(_v, 681, 0, currVal_193, currVal_194);
        var currVal_195 = nodeValue(_v, 687).isHostClass;
        var currVal_196 = nodeValue(_v, 688).isHostClass;
        _ck(_v, 686, 0, currVal_195, currVal_196);
    });
}
function View_DrawerDemoComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1, 'drawer-demo', [], null, null, null, View_DrawerDemoComponent_0, RenderType_DrawerDemoComponent)), directiveDef(49152, null, 0, DrawerDemoComponent, [], null, null)], null, null);
}
var DrawerDemoComponentNgFactory = createComponentFactory('drawer-demo', DrawerDemoComponent, View_DrawerDemoComponent_Host_0, {}, {}, []);

/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
/* tslint:disable */
var styles_DialogDemoComponent = [];
var RenderType_DialogDemoComponent = createRendererType2({ encapsulation: 2,
    styles: styles_DialogDemoComponent, data: {} });
function View_DialogDemoComponent_0(_l) {
    return viewDef(0, [queryDef(402653184, 1, { dialog: 0 }), queryDef(402653184, 2, { dialogScroll: 0 }),
        (_l()(), elementDef(0, null, null, 764, 'div', [['class', 'mdc-padding'],
            ['fxLayout', 'column'], ['fxLayoutAlign', 'start start']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0,
                'layout'] }, null), directiveDef(737280, null, 0, LayoutAlignDirective, [MediaMonitor, ElementRef, Renderer2, [2, LayoutDirective]], { align: [0,
                'align'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 2, 'h1', [['mdc-typography-display1',
                '']], [[2, 'mdc-typography--display1', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['Dialog'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 2, 'div', [['mdc-typography-subheading2', '']], [[2, 'mdc-typography--subheading2',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, undefined, [], null, null),
        (_l()(), textDef(null, ['Dialogs inform users about a specific task, require decisions, or involve multiple tasks.'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 5, 'div', [['class', 'info-banner'], ['mdc-typography-subheading1', '']], [[2,
                'mdc-typography--subheading1', null]], null, null, null, null)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(),
            textDef(null, ['\n    '])), (_l()(), textDef(null, ['import { DialogModule } from \'@angular-mdc/web\';'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 150, 'div', [['class', 'docs-api']], null, null, null, null, null)),
        directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers,
            KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0,
                'classBase'] }, null), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 97, 'table', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'thead', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Component'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-dialog'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['The main component which is composed of mdc-dialog elements.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Methods'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Parameters'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 28, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['open()'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Opens the dialog, registers appropriate event listeners, sets aria attributes, focuses elements.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['isOpen()'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Returns true if the dialog is open, false otherwise.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['close()'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Closes the dialog, deregisters appropriate event listeners, resets aria attributes, focuses elements.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Events'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 19, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['accept'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Broadcast when a user accepts the dialog.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['cancel'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Broadcast when a user cancels the dialog.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 47, 'table', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])),
        (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Directive'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 35, 'tbody', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-dialog-header'])), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Defines the header content block.'])), (_l()(), textDef(null, ['\n        '])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-dialog-header-title'])), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['A header title block.'])), (_l()(), textDef(null, ['\n        '])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 6, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-dialog-body'])), (_l()(), textDef(null, ['\n          '])), (_l()(),
            elementDef(0, null, null, 0, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(),
            elementDef(0, null, null, 6, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc-dialog-footer'])), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 0, 'td', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 591, 'div', [['class', 'mdc-padding'], ['fxLayout', 'column'], ['fxLayoutAlign',
                'start start'], ['fxLayoutGap', '20px']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0, 'layout'] }, null),
        directiveDef(1720320, null, 0, LayoutGapDirective, [MediaMonitor, ElementRef,
            Renderer2, [2, LayoutDirective]], { gap: [0, 'gap'] }, null), directiveDef(737280, null, 0, LayoutAlignDirective, [MediaMonitor, ElementRef, Renderer2,
            [2, LayoutDirective]], { align: [0, 'align'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers,
            ElementRef, Renderer, Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 3, 'button', [['mdc-button', '']], [[8, 'tabIndex',
                0], [1, 'type', 0], [2, 'mdc-button', null], [2, 'mdc-button--raised',
                null], [2, 'mdc-button--primary', null], [2, 'mdc-button--accent',
                null], [2, 'mdc-button--dense', null], [2, 'mdc-button--compact',
                null], [2, 'mdc-card__action', null]], [[null,
                'click'], [null, 'keypress'], [null, 'blur']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('keypress' === en)) {
                var pd_0 = (nodeValue(_v, 182).onkeypress($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 182).blur($event) !== false);
                ad = (pd_1 && ad);
            }
            if (('click' === en)) {
                var pd_2 = (_co.showDialog() !== false);
                ad = (pd_2 && ad);
            }
            return ad;
        }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], { raised: [0, 'raised'], primary: [1, 'primary'] }, null), (_l()(), textDef(0, ['Show Dialog'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 3, 'button', [['mdc-button', '']], [[8, 'tabIndex',
                0], [1, 'type', 0], [2, 'mdc-button', null], [2, 'mdc-button--raised',
                null], [2, 'mdc-button--primary', null], [2, 'mdc-button--accent',
                null], [2, 'mdc-button--dense', null], [2, 'mdc-button--compact',
                null], [2, 'mdc-card__action', null]], [[null,
                'click'], [null, 'keypress'], [null, 'blur']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('keypress' === en)) {
                var pd_0 = (nodeValue(_v, 187).onkeypress($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 187).blur($event) !== false);
                ad = (pd_1 && ad);
            }
            if (('click' === en)) {
                var pd_2 = (_co.showDialogScroll() !== false);
                ad = (pd_2 && ad);
            }
            return ad;
        }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], { raised: [0, 'raised'], primary: [1, 'primary'] }, null), (_l()(), textDef(0, ['Show Scrolling Dialog'])), (_l()(), textDef(null, ['\n\n'])), (_l()(),
            elementDef(0, null, null, 2, 'span', [['mdc-typography-headline',
                    '']], [[2, 'mdc-typography--headline', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['Dialog'])),
        (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 119, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 9, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-dialog'])), (_l()(), textDef(null, [' #'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['dialog'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-dialog-header'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-dialog-header-title'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n      Use Google\'s location service?\n    '])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-dialog-header-title'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-dialog-header'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-dialog-body'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n    Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.\n  '])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-dialog-body'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-dialog-footer'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 10, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-button'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-dialog-button-cancel'])), (_l()(), textDef(null, ['>'])), (_l()(),
            textDef(null, ['Decline'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, ['>'])),
        (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 10, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['button'])), (_l()(), textDef(null, [' '])),
        (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc-button'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-dialog-button-accept'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Accept'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-dialog-footer'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-dialog'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n\n'])), (_l()(), elementDef(0, null, null, 2, 'span', [['mdc-typography-headline', '']], [[2, 'mdc-typography--headline',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, undefined, [], null, null),
        (_l()(), textDef(null, ['Scrolling Dialog'])), (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 317, 'pre', [['style',
                'background:#000;color:#f8f8f8']], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 9, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-dialog'])),
        (_l()(), textDef(null, [' #'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['dialogscroll'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-dialog-header'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-dialog-header-title'])), (_l()(), textDef(null, ['>'])), (_l()(),
            textDef(null, ['\n      Choose a Ringtone\n    '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-dialog-header-title'])), (_l()(), textDef(null, ['>'])), (_l()(),
            textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-dialog-header'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 12, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-dialog-body'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['scrollable'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['None'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Callisto'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Ganymede'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Luna'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Marimba'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Schwifty'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Callisto'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Ganymede'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Luna'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Marimba'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Schwifty'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list-item'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-list'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-dialog-body'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-dialog-footer'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 10, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])),
        (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-button'])),
        (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-dialog-button-cancel'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Decline'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 10, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])),
        (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-button'])),
        (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-dialog-button-accept'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Accept'])),
        (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['button'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-dialog-footer'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, [' \n'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-dialog'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 32, 'mdc-dialog', [], [[2, 'mdc-dialog', null],
            [1, 'role', 0], [1, 'aria-hidden', 0]], null, null, View_DialogComponent_0, RenderType_DialogComponent)), directiveDef(4374528, [[1, 4], ['dialog', 4]], 2, material_es5_30, [Renderer2, ElementRef, undefined], null, null), queryDef(335544320, 3, { dialogAcceptButton: 0 }), queryDef(335544320, 4, { dialogBody: 0 }), (_l()(), textDef(0, ['\n  '])), (_l()(), elementDef(0, null, 0, 6, 'mdc-dialog-header', [], [[2, 'mdc-dialog__header', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_23, [ElementRef], null, null), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 2, 'mdc-dialog-header-title', [], [[2, 'mdc-dialog__header__title', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_24, [ElementRef], null, null), (_l()(), textDef(null, ['\n      Use Google\'s location service?\n    '])), (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(0, ['\n  '])), (_l()(), elementDef(0, null, 0, 2, 'mdc-dialog-body', [], [[2, 'mdc-dialog__body', null],
            [2, 'mdc-dialog__body--scrollable', null]], null, null, null, null)), directiveDef(16384, [[4, 4]], 0, material_es5_25, [ElementRef], null, null), (_l()(), textDef(null, ['\n    Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.\n  '])),
        (_l()(), textDef(0, ['\n  '])), (_l()(), elementDef(0, null, 0, 14, 'mdc-dialog-footer', [], [[2, 'mdc-dialog__footer', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_26, [ElementRef], null, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 4, 'button', [['mdc-button',
                ''], ['mdc-dialog-button-cancel', '']], [[8, 'tabIndex', 0], [1, 'type', 0], [2, 'mdc-button',
                null], [2, 'mdc-button--raised', null], [2, 'mdc-button--primary',
                null], [2, 'mdc-button--accent', null], [2, 'mdc-button--dense',
                null], [2, 'mdc-button--compact', null], [2, 'mdc-card__action',
                null], [2, 'mdc-dialog__footer__button--cancel', null], [2,
                'mdc-dialog__footer__button', null]], [[null, 'keypress'],
            [null, 'blur']], function (_v, en, $event) {
            var ad = true;
            if (('keypress' === en)) {
                var pd_0 = (nodeValue(_v, 660).onkeypress($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 660).blur($event) !== false);
                ad = (pd_1 && ad);
            }
            return ad;
        }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], null, null), directiveDef(16384, null, 0, material_es5_29, [ElementRef], null, null), (_l()(), textDef(0, ['Decline'])),
        (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 4, 'button', [['mdc-button', ''], ['mdc-dialog-button-accept', '']], [[8, 'tabIndex',
                0], [1, 'type', 0], [2, 'mdc-button', null], [2, 'mdc-button--raised',
                null], [2, 'mdc-button--primary', null], [2, 'mdc-button--accent',
                null], [2, 'mdc-button--dense', null], [2, 'mdc-button--compact',
                null], [2, 'mdc-card__action', null], [2, 'mdc-dialog__footer__button--accept',
                null], [2, 'mdc-dialog__footer__button', null]], [[null,
                'keypress'], [null, 'blur']], function (_v, en, $event) {
            var ad = true;
            if (('keypress' === en)) {
                var pd_0 = (nodeValue(_v, 666).onkeypress($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 666).blur($event) !== false);
                ad = (pd_1 && ad);
            }
            return ad;
        }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], null, null), directiveDef(16384, [[3, 4]], 0, material_es5_28, [ElementRef], null, null), (_l()(), textDef(0, ['Accept'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(0, ['\n'])), (_l()(),
            textDef(null, ['\n\n'])), (_l()(), elementDef(0, null, null, 92, 'mdc-dialog', [], [[2, 'mdc-dialog', null], [1, 'role',
                0], [1, 'aria-hidden', 0]], null, null, View_DialogComponent_0, RenderType_DialogComponent)), directiveDef(4374528, [[2, 4], ['dialogscroll', 4]], 2, material_es5_30, [Renderer2, ElementRef, undefined], null, null),
        queryDef(335544320, 5, { dialogAcceptButton: 0 }), queryDef(335544320, 6, { dialogBody: 0 }),
        (_l()(), textDef(0, ['\n  '])), (_l()(), elementDef(0, null, 0, 6, 'mdc-dialog-header', [], [[2, 'mdc-dialog__header', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_23, [ElementRef], null, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 2, 'mdc-dialog-header-title', [], [[2, 'mdc-dialog__header__title', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_24, [ElementRef], null, null),
        (_l()(), textDef(null, ['\n      Choose a Ringtone\n    '])), (_l()(),
            textDef(null, ['\n  '])), (_l()(), textDef(0, ['\n  '])), (_l()(), elementDef(0, null, 0, 62, 'mdc-dialog-body', [], [[2, 'mdc-dialog__body',
                null], [2, 'mdc-dialog__body--scrollable', null]], null, null, null, null)), directiveDef(16384, [[6, 4]], 0, material_es5_25, [ElementRef], { scrollable: [0, 'scrollable'] }, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 58, 'mdc-list', [], [[2, 'mdc-list', null], [1, 'role', 0], [2, 'mdc-list--dense',
                null], [2, 'mdc-list--two-line', null], [2, 'mdc-list--avatar-list',
                null]], null, null, View_ListComponent_0, RenderType_ListComponent)), directiveDef(573440, null, 1, material_es5_58, [ElementRef], null, null), queryDef(603979776, 7, { listItems: 1 }),
        (_l()(), textDef(0, ['\n      '])), (_l()(), elementDef(0, null, 0, 3, 'mdc-list-item', [], [[2, 'mdc-list-item', null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4734976, [[7, 4]], 0, material_es5_59, [ElementRef, material_es5_74, material_es5_58], null, null), (_l()(), textDef(null, ['None'])), (_l()(),
            textDef(0, ['\n      '])), (_l()(), elementDef(0, null, 0, 3, 'mdc-list-item', [], [[2, 'mdc-list-item', null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4734976, [[7, 4]], 0, material_es5_59, [ElementRef, material_es5_74, material_es5_58], null, null), (_l()(), textDef(null, ['Callisto'])),
        (_l()(), textDef(0, ['\n      '])), (_l()(), elementDef(0, null, 0, 3, 'mdc-list-item', [], [[2, 'mdc-list-item', null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4734976, [[7, 4]], 0, material_es5_59, [ElementRef, material_es5_74, material_es5_58], null, null), (_l()(), textDef(null, ['Ganymede'])),
        (_l()(), textDef(0, ['\n      '])), (_l()(), elementDef(0, null, 0, 3, 'mdc-list-item', [], [[2, 'mdc-list-item', null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4734976, [[7, 4]], 0, material_es5_59, [ElementRef, material_es5_74, material_es5_58], null, null), (_l()(), textDef(null, ['Luna'])), (_l()(),
            textDef(0, ['\n      '])), (_l()(), elementDef(0, null, 0, 3, 'mdc-list-item', [], [[2, 'mdc-list-item', null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4734976, [[7, 4]], 0, material_es5_59, [ElementRef, material_es5_74, material_es5_58], null, null), (_l()(), textDef(null, ['Marimba'])),
        (_l()(), textDef(0, ['\n      '])), (_l()(), elementDef(0, null, 0, 3, 'mdc-list-item', [], [[2, 'mdc-list-item', null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4734976, [[7, 4]], 0, material_es5_59, [ElementRef, material_es5_74, material_es5_58], null, null), (_l()(), textDef(null, ['Schwifty'])),
        (_l()(), textDef(0, ['\n      '])), (_l()(), elementDef(0, null, 0, 3, 'mdc-list-item', [], [[2, 'mdc-list-item', null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4734976, [[7, 4]], 0, material_es5_59, [ElementRef, material_es5_74, material_es5_58], null, null), (_l()(), textDef(null, ['Callisto'])),
        (_l()(), textDef(0, ['\n      '])), (_l()(), elementDef(0, null, 0, 3, 'mdc-list-item', [], [[2, 'mdc-list-item', null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4734976, [[7, 4]], 0, material_es5_59, [ElementRef, material_es5_74, material_es5_58], null, null), (_l()(), textDef(null, ['Ganymede'])),
        (_l()(), textDef(0, ['\n      '])), (_l()(), elementDef(0, null, 0, 3, 'mdc-list-item', [], [[2, 'mdc-list-item', null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4734976, [[7, 4]], 0, material_es5_59, [ElementRef, material_es5_74, material_es5_58], null, null), (_l()(), textDef(null, ['Luna'])), (_l()(),
            textDef(0, ['\n      '])), (_l()(), elementDef(0, null, 0, 3, 'mdc-list-item', [], [[2, 'mdc-list-item', null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4734976, [[7, 4]], 0, material_es5_59, [ElementRef, material_es5_74, material_es5_58], null, null), (_l()(), textDef(null, ['Marimba'])),
        (_l()(), textDef(0, ['\n      '])), (_l()(), elementDef(0, null, 0, 3, 'mdc-list-item', [], [[2, 'mdc-list-item', null], [1, 'role', 0]], null, null, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4734976, [[7, 4]], 0, material_es5_59, [ElementRef, material_es5_74, material_es5_58], null, null), (_l()(), textDef(null, ['Schwifty'])),
        (_l()(), textDef(0, ['\n    '])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            textDef(0, ['\n  '])), (_l()(), elementDef(0, null, 0, 14, 'mdc-dialog-footer', [], [[2, 'mdc-dialog__footer', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_26, [ElementRef], null, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 4, 'button', [['mdc-button',
                ''], ['mdc-dialog-button-cancel', '']], [[8, 'tabIndex', 0], [1, 'type', 0], [2, 'mdc-button',
                null], [2, 'mdc-button--raised', null], [2, 'mdc-button--primary',
                null], [2, 'mdc-button--accent', null], [2, 'mdc-button--dense',
                null], [2, 'mdc-button--compact', null], [2, 'mdc-card__action',
                null], [2, 'mdc-dialog__footer__button--cancel', null], [2,
                'mdc-dialog__footer__button', null]], [[null, 'keypress'],
            [null, 'blur']], function (_v, en, $event) {
            var ad = true;
            if (('keypress' === en)) {
                var pd_0 = (nodeValue(_v, 754).onkeypress($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 754).blur($event) !== false);
                ad = (pd_1 && ad);
            }
            return ad;
        }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], null, null), directiveDef(16384, null, 0, material_es5_29, [ElementRef], null, null), (_l()(), textDef(0, ['Decline'])),
        (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 4, 'button', [['mdc-button', ''], ['mdc-dialog-button-accept', '']], [[8, 'tabIndex',
                0], [1, 'type', 0], [2, 'mdc-button', null], [2, 'mdc-button--raised',
                null], [2, 'mdc-button--primary', null], [2, 'mdc-button--accent',
                null], [2, 'mdc-button--dense', null], [2, 'mdc-button--compact',
                null], [2, 'mdc-card__action', null], [2, 'mdc-dialog__footer__button--accept',
                null], [2, 'mdc-dialog__footer__button', null]], [[null,
                'keypress'], [null, 'blur']], function (_v, en, $event) {
            var ad = true;
            if (('keypress' === en)) {
                var pd_0 = (nodeValue(_v, 760).onkeypress($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 760).blur($event) !== false);
                ad = (pd_1 && ad);
            }
            return ad;
        }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], null, null), directiveDef(16384, [[5, 4]], 0, material_es5_28, [ElementRef], null, null), (_l()(), textDef(0, ['Accept'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(0, [' \n'])), (_l()(),
            textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n']))], function (_ck, _v) {
        var currVal_0 = 'column';
        _ck(_v, 3, 0, currVal_0);
        var currVal_1 = 'start start';
        _ck(_v, 4, 0, currVal_1);
        var currVal_2 = 'mdc-padding';
        _ck(_v, 5, 0, currVal_2);
        var currVal_6 = 'info-banner';
        _ck(_v, 16, 0, currVal_6);
        var currVal_7 = 'docs-api';
        _ck(_v, 23, 0, currVal_7);
        var currVal_8 = 'column';
        _ck(_v, 175, 0, currVal_8);
        var currVal_9 = '20px';
        _ck(_v, 176, 0, currVal_9);
        var currVal_10 = 'start start';
        _ck(_v, 177, 0, currVal_10);
        var currVal_11 = 'mdc-padding';
        _ck(_v, 178, 0, currVal_11);
        var currVal_21 = true;
        var currVal_22 = true;
        _ck(_v, 182, 0, currVal_21, currVal_22);
        var currVal_32 = true;
        var currVal_33 = true;
        _ck(_v, 187, 0, currVal_32, currVal_33);
        var currVal_73 = true;
        _ck(_v, 686, 0, currVal_73);
    }, function (_ck, _v) {
        var currVal_3 = nodeValue(_v, 8).isHostClass;
        _ck(_v, 7, 0, currVal_3);
        var currVal_4 = nodeValue(_v, 12).isHostClass;
        _ck(_v, 11, 0, currVal_4);
        var currVal_5 = nodeValue(_v, 17).isHostClass;
        _ck(_v, 15, 0, currVal_5);
        var currVal_12 = nodeValue(_v, 182).tabindex;
        var currVal_13 = nodeValue(_v, 182).attrType;
        var currVal_14 = nodeValue(_v, 182).isHostClass;
        var currVal_15 = nodeValue(_v, 182).classRaised;
        var currVal_16 = nodeValue(_v, 182).classPrimary;
        var currVal_17 = nodeValue(_v, 182).classAccent;
        var currVal_18 = nodeValue(_v, 182).classDense;
        var currVal_19 = nodeValue(_v, 182).classCompact;
        var currVal_20 = nodeValue(_v, 182).classCardAction;
        _ck(_v, 180, 0, currVal_12, currVal_13, currVal_14, currVal_15, currVal_16, currVal_17, currVal_18, currVal_19, currVal_20);
        var currVal_23 = nodeValue(_v, 187).tabindex;
        var currVal_24 = nodeValue(_v, 187).attrType;
        var currVal_25 = nodeValue(_v, 187).isHostClass;
        var currVal_26 = nodeValue(_v, 187).classRaised;
        var currVal_27 = nodeValue(_v, 187).classPrimary;
        var currVal_28 = nodeValue(_v, 187).classAccent;
        var currVal_29 = nodeValue(_v, 187).classDense;
        var currVal_30 = nodeValue(_v, 187).classCompact;
        var currVal_31 = nodeValue(_v, 187).classCardAction;
        _ck(_v, 185, 0, currVal_23, currVal_24, currVal_25, currVal_26, currVal_27, currVal_28, currVal_29, currVal_30, currVal_31);
        var currVal_34 = nodeValue(_v, 191).isHostClass;
        _ck(_v, 190, 0, currVal_34);
        var currVal_35 = nodeValue(_v, 316).isHostClass;
        _ck(_v, 315, 0, currVal_35);
        var currVal_36 = nodeValue(_v, 639).isHostClass;
        var currVal_37 = nodeValue(_v, 639).role;
        var currVal_38 = nodeValue(_v, 639).ariaHidden;
        _ck(_v, 638, 0, currVal_36, currVal_37, currVal_38);
        var currVal_39 = nodeValue(_v, 644).isHostClass;
        _ck(_v, 643, 0, currVal_39);
        var currVal_40 = nodeValue(_v, 647).isHostClass;
        _ck(_v, 646, 0, currVal_40);
        var currVal_41 = nodeValue(_v, 652).isHostClass;
        var currVal_42 = nodeValue(_v, 652).classScrollable;
        _ck(_v, 651, 0, currVal_41, currVal_42);
        var currVal_43 = nodeValue(_v, 656).isHostClass;
        _ck(_v, 655, 0, currVal_43);
        var currVal_44 = nodeValue(_v, 660).tabindex;
        var currVal_45 = nodeValue(_v, 660).attrType;
        var currVal_46 = nodeValue(_v, 660).isHostClass;
        var currVal_47 = nodeValue(_v, 660).classRaised;
        var currVal_48 = nodeValue(_v, 660).classPrimary;
        var currVal_49 = nodeValue(_v, 660).classAccent;
        var currVal_50 = nodeValue(_v, 660).classDense;
        var currVal_51 = nodeValue(_v, 660).classCompact;
        var currVal_52 = nodeValue(_v, 660).classCardAction;
        var currVal_53 = nodeValue(_v, 661).isHostClass;
        var currVal_54 = nodeValue(_v, 661).isFooterButton;
        _ck(_v, 658, 1, [currVal_44, currVal_45, currVal_46, currVal_47, currVal_48, currVal_49,
            currVal_50, currVal_51, currVal_52, currVal_53, currVal_54]);
        var currVal_55 = nodeValue(_v, 666).tabindex;
        var currVal_56 = nodeValue(_v, 666).attrType;
        var currVal_57 = nodeValue(_v, 666).isHostClass;
        var currVal_58 = nodeValue(_v, 666).classRaised;
        var currVal_59 = nodeValue(_v, 666).classPrimary;
        var currVal_60 = nodeValue(_v, 666).classAccent;
        var currVal_61 = nodeValue(_v, 666).classDense;
        var currVal_62 = nodeValue(_v, 666).classCompact;
        var currVal_63 = nodeValue(_v, 666).classCardAction;
        var currVal_64 = nodeValue(_v, 667).isHostClass;
        var currVal_65 = nodeValue(_v, 667).isFooterButton;
        _ck(_v, 664, 1, [currVal_55, currVal_56, currVal_57, currVal_58, currVal_59, currVal_60,
            currVal_61, currVal_62, currVal_63, currVal_64, currVal_65]);
        var currVal_66 = nodeValue(_v, 673).isHostClass;
        var currVal_67 = nodeValue(_v, 673).role;
        var currVal_68 = nodeValue(_v, 673).ariaHidden;
        _ck(_v, 672, 0, currVal_66, currVal_67, currVal_68);
        var currVal_69 = nodeValue(_v, 678).isHostClass;
        _ck(_v, 677, 0, currVal_69);
        var currVal_70 = nodeValue(_v, 681).isHostClass;
        _ck(_v, 680, 0, currVal_70);
        var currVal_71 = nodeValue(_v, 686).isHostClass;
        var currVal_72 = nodeValue(_v, 686).classScrollable;
        _ck(_v, 685, 0, currVal_71, currVal_72);
        var currVal_74 = nodeValue(_v, 689).isHostClass;
        var currVal_75 = nodeValue(_v, 689).role;
        var currVal_76 = nodeValue(_v, 689).classDenseList;
        var currVal_77 = nodeValue(_v, 689).classTwoline;
        var currVal_78 = nodeValue(_v, 689).classAvatarList;
        _ck(_v, 688, 0, currVal_74, currVal_75, currVal_76, currVal_77, currVal_78);
        var currVal_79 = nodeValue(_v, 694).isHostClass;
        var currVal_80 = nodeValue(_v, 694).role;
        _ck(_v, 692, 0, currVal_79, currVal_80);
        var currVal_81 = nodeValue(_v, 699).isHostClass;
        var currVal_82 = nodeValue(_v, 699).role;
        _ck(_v, 697, 0, currVal_81, currVal_82);
        var currVal_83 = nodeValue(_v, 704).isHostClass;
        var currVal_84 = nodeValue(_v, 704).role;
        _ck(_v, 702, 0, currVal_83, currVal_84);
        var currVal_85 = nodeValue(_v, 709).isHostClass;
        var currVal_86 = nodeValue(_v, 709).role;
        _ck(_v, 707, 0, currVal_85, currVal_86);
        var currVal_87 = nodeValue(_v, 714).isHostClass;
        var currVal_88 = nodeValue(_v, 714).role;
        _ck(_v, 712, 0, currVal_87, currVal_88);
        var currVal_89 = nodeValue(_v, 719).isHostClass;
        var currVal_90 = nodeValue(_v, 719).role;
        _ck(_v, 717, 0, currVal_89, currVal_90);
        var currVal_91 = nodeValue(_v, 724).isHostClass;
        var currVal_92 = nodeValue(_v, 724).role;
        _ck(_v, 722, 0, currVal_91, currVal_92);
        var currVal_93 = nodeValue(_v, 729).isHostClass;
        var currVal_94 = nodeValue(_v, 729).role;
        _ck(_v, 727, 0, currVal_93, currVal_94);
        var currVal_95 = nodeValue(_v, 734).isHostClass;
        var currVal_96 = nodeValue(_v, 734).role;
        _ck(_v, 732, 0, currVal_95, currVal_96);
        var currVal_97 = nodeValue(_v, 739).isHostClass;
        var currVal_98 = nodeValue(_v, 739).role;
        _ck(_v, 737, 0, currVal_97, currVal_98);
        var currVal_99 = nodeValue(_v, 744).isHostClass;
        var currVal_100 = nodeValue(_v, 744).role;
        _ck(_v, 742, 0, currVal_99, currVal_100);
        var currVal_101 = nodeValue(_v, 750).isHostClass;
        _ck(_v, 749, 0, currVal_101);
        var currVal_102 = nodeValue(_v, 754).tabindex;
        var currVal_103 = nodeValue(_v, 754).attrType;
        var currVal_104 = nodeValue(_v, 754).isHostClass;
        var currVal_105 = nodeValue(_v, 754).classRaised;
        var currVal_106 = nodeValue(_v, 754).classPrimary;
        var currVal_107 = nodeValue(_v, 754).classAccent;
        var currVal_108 = nodeValue(_v, 754).classDense;
        var currVal_109 = nodeValue(_v, 754).classCompact;
        var currVal_110 = nodeValue(_v, 754).classCardAction;
        var currVal_111 = nodeValue(_v, 755).isHostClass;
        var currVal_112 = nodeValue(_v, 755).isFooterButton;
        _ck(_v, 752, 1, [currVal_102, currVal_103, currVal_104, currVal_105, currVal_106,
            currVal_107, currVal_108, currVal_109, currVal_110, currVal_111, currVal_112]);
        var currVal_113 = nodeValue(_v, 760).tabindex;
        var currVal_114 = nodeValue(_v, 760).attrType;
        var currVal_115 = nodeValue(_v, 760).isHostClass;
        var currVal_116 = nodeValue(_v, 760).classRaised;
        var currVal_117 = nodeValue(_v, 760).classPrimary;
        var currVal_118 = nodeValue(_v, 760).classAccent;
        var currVal_119 = nodeValue(_v, 760).classDense;
        var currVal_120 = nodeValue(_v, 760).classCompact;
        var currVal_121 = nodeValue(_v, 760).classCardAction;
        var currVal_122 = nodeValue(_v, 761).isHostClass;
        var currVal_123 = nodeValue(_v, 761).isFooterButton;
        _ck(_v, 758, 1, [currVal_113, currVal_114, currVal_115, currVal_116, currVal_117,
            currVal_118, currVal_119, currVal_120, currVal_121, currVal_122, currVal_123]);
    });
}
function View_DialogDemoComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1, 'dialog-demo', [], null, null, null, View_DialogDemoComponent_0, RenderType_DialogDemoComponent)), directiveDef(49152, null, 0, DialogDemoComponent, [], null, null)], null, null);
}
var DialogDemoComponentNgFactory = createComponentFactory('dialog-demo', DialogDemoComponent, View_DialogDemoComponent_Host_0, {}, {}, []);

/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
/* tslint:disable */
var styles_TabDemoComponent = [];
var RenderType_TabDemoComponent = createRendererType2({ encapsulation: 2,
    styles: styles_TabDemoComponent, data: {} });
function View_TabDemoComponent_1(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 9, 'a', [['mdc-tab',
                '']], [[2, 'mdc-tab', null], [1, 'role', 0], [2, 'mdc-tab--with-icon-and-text',
                null], [2, 'mdc-tab--active', null], [1, 'target', 0], [8, 'href',
                4]], [[null, 'click']], function (_v, en, $event) {
            var ad = true;
            if (('click' === en)) {
                var pd_0 = (nodeValue(_v, 5).onClick($event.button, $event.ctrlKey, $event.metaKey, $event.shiftKey) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, View_TabComponent_0, RenderType_TabComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[36,
                4]], 2, material_es5_83, [Renderer2, ElementRef, undefined, material_es5_74], { active: [0,
                'active'] }, null), queryDef(335544320, 37, { tabIcon: 0 }), queryDef(335544320, 38, { tabIconText: 0 }), directiveDef(671744, null, 0, RouterLinkWithHref, [Router,
            ActivatedRoute, LocationStrategy], { routerLink: [0, 'routerLink'] }, null),
        pureObjectDef({ taboutlet: 0 }), pureObjectDef({ outlets: 0 }), pureArrayDef(1), (_l()(), textDef(0, ['',
            '']))], function (_ck, _v) {
        var currVal_6 = _v.context.$implicit.active;
        _ck(_v, 2, 0, currVal_6);
        var currVal_7 = _ck(_v, 8, 0, _ck(_v, 7, 0, _ck(_v, 6, 0, _v.context.$implicit.link)));
        _ck(_v, 5, 0, currVal_7);
    }, function (_ck, _v) {
        var currVal_0 = nodeValue(_v, 2).isHostClass;
        var currVal_1 = nodeValue(_v, 2).role;
        var currVal_2 = nodeValue(_v, 2).classIconText;
        var currVal_3 = nodeValue(_v, 2).classActive;
        var currVal_4 = nodeValue(_v, 5).target;
        var currVal_5 = nodeValue(_v, 5).href;
        _ck(_v, 0, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5);
        var currVal_8 = _v.context.$implicit.label;
        _ck(_v, 9, 0, currVal_8);
    });
}
function View_TabDemoComponent_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1879, 'div', [['class',
                'mdc-padding'], ['fxLayout', 'column'], ['fxLayoutAlign', 'start start']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0,
                'layout'] }, null), directiveDef(737280, null, 0, LayoutAlignDirective, [MediaMonitor, ElementRef, Renderer2, [2, LayoutDirective]], { align: [0,
                'align'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 2, 'h1', [['mdc-typography-display1',
                '']], [[2, 'mdc-typography--display1', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['Tabs'])), (_l()(),
            textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 2, 'div', [['mdc-typography-subheading2', '']], [[2, 'mdc-typography--subheading2',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, undefined, [], null, null),
        (_l()(), textDef(null, ['Tabs enable content organization at a high level, such as switching between views, data sets, or functional aspects of an app.'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 5, 'div', [['class', 'info-banner'], ['mdc-typography-subheading1', '']], [[2,
                'mdc-typography--subheading1', null]], null, null, null, null)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(),
            textDef(null, ['\n    '])), (_l()(), textDef(null, ['import { TabModule } from \'@angular-mdc/web\';'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 278, 'div', [['class', 'docs-api']], null, null, null, null, null)),
        directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers,
            KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0,
                'classBase'] }, null), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 82, 'table', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'thead', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Directive'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-tab-bar'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['The main component which is composed of mdc-tab elements.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Properties'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 19, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() primaryColor: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Sets indicator bar line to use app primary color.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() accentColor: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Sets indicator bar line to use app accent color.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Events'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 13, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 10, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 4, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n'])), (_l()(),
            elementDef(0, null, null, 2, 'pre', [], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 1, 'code', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Output() change\nEventEmitter<{ activeTabIndex: number }'])), (_l()(),
            textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Broadcast when a user actions on a tab, resulting in a change in the selected tab.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 115, 'table', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])),
        (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Directive'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 43, 'tbody', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 10, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 4, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 2, 'pre', [], null, null, null, null, null)),
        (_l()(), elementDef(0, null, null, 1, 'code', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-tab\na[mdc-tab]'])), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['The individual tab elements.'])), (_l()(), textDef(null, ['\n        '])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() active: boolean'])), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Whether or not the tab is active. Setting this makes the tab active.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() preventsDefaultOnClick: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Whether or not the tab will call preventDefault() on an event. Setting this makes the tab call preventDefault() on events.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 10, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Input() disableRipple: boolean'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 4, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n'])), (_l()(),
            elementDef(0, null, null, 2, 'pre', [], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 1, 'code', [], null, null, null, null, null)), (_l()(), textDef(null, ['Disable the ink ripple.\nExample: disableRipple="true" or disableRipple'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Events'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 13, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 10, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 4, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n'])), (_l()(),
            elementDef(0, null, null, 2, 'pre', [], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 1, 'code', [], null, null, null, null, null)), (_l()(), textDef(null, ['@Output() select\nEventEmitter<{ tab: TabComponent }>'])), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Broadcast when a user actions on the tab.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Child Directives'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 19, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-tab-icon'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Add icon to the tab.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-tab-icon-text'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Text and icon are centered horizontally in the tab.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 73, 'table', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 7, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])),
        (_l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['Directive'])), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'tbody', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-tab-bar-scroller'])), (_l()(), textDef(null, ['\n          '])),
        (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['The component which controls the horizontal scrolling behavior of an mdc-tab-bar that overflows its container.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 10, 'thead', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Child Directives'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)), (_l()(), textDef(null, ['Description'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 37, 'tbody', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-tab-bar-scroll-frame'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['The scroll frame is the parent element of the tab bar, and serves to mask the tabs in the tab bar when they overflow the available width.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-tab-bar-scroll-back'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Scrolls the tab bar such that the leftmost tab traverses the scroll frame.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-tab-bar-scroll-forward'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Scrolls the tab bar such that the rightmost tab traverses the scroll frame.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-tab-bar-scroll-button'])),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)), (_l()(), textDef(null, ['Use to add a button to either [mdc-tab-bar-scroll-back] or [mdc-tab-bar-scroll-forward] directives.'])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 1578, 'div', [['class', 'mdc-padding'], ['fxLayout', 'column'],
            ['fxLayoutAlign', 'start start'], ['fxLayoutGap', '20px']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0, 'layout'] }, null), directiveDef(1720320, null, 0, LayoutGapDirective, [MediaMonitor, ElementRef, Renderer2, [2, LayoutDirective]], { gap: [0,
                'gap'] }, null), directiveDef(737280, null, 0, LayoutAlignDirective, [MediaMonitor, ElementRef, Renderer2, [2, LayoutDirective]], { align: [0,
                'align'] }, null), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 2, 'span', [['mdc-typography-headline',
                '']], [[2, 'mdc-typography--headline', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['Simple Tab Bar with text labels'])),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 24, 'mdc-tab-bar', [], [[2, 'mdc-tab-bar', null],
            [2, 'mdc-tab-bar-scroller__scroll-frame__tabs', null], [1, 'role',
                0], [2, 'mdc-tab-bar--indicator-primary', null], [2, 'mdc-tab-bar--indicator-accent',
                null], [2, 'mdc-tab-bar--icon-tab-bar', null], [2,
                'mdc-tab-bar--icons-with-text', null]], null, null, null, null)), directiveDef(4341760, null, 1, material_es5_84, [Renderer2, ElementRef, undefined], null, null), queryDef(603979776, 1, { tabs: 1 }), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 5, 'a', [['href', '#/tab-demo'], ['mdc-tab', '']], [[2, 'mdc-tab', null], [1, 'role', 0], [2, 'mdc-tab--with-icon-and-text',
                null], [2, 'mdc-tab--active', null]], null, null, View_TabComponent_0, RenderType_TabComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[1, 4]], 2, material_es5_83, [Renderer2, ElementRef, undefined, material_es5_74], { active: [0,
                'active'] }, null), queryDef(335544320, 2, { tabIcon: 0 }), queryDef(335544320, 3, { tabIconText: 0 }), (_l()(), textDef(0, ['Home'])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 5, 'a', [['href',
                '#/tab-demo'], ['mdc-tab', '']], [[2, 'mdc-tab', null], [1, 'role', 0],
            [2, 'mdc-tab--with-icon-and-text', null], [2, 'mdc-tab--active', null]], null, null, View_TabComponent_0, RenderType_TabComponent)),
        providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef,
            undefined]), directiveDef(4374528, [[1, 4]], 2, material_es5_83, [Renderer2, ElementRef,
            undefined, material_es5_74], null, null), queryDef(335544320, 4, { tabIcon: 0 }),
        queryDef(335544320, 5, { tabIconText: 0 }), (_l()(), textDef(0, ['Merchandise'])), (_l()(),
            textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 5, 'a', [['href', '#/tab-demo'], ['mdc-tab', '']], [[2, 'mdc-tab', null],
            [1, 'role', 0], [2, 'mdc-tab--with-icon-and-text', null], [2, 'mdc-tab--active',
                null]], null, null, View_TabComponent_0, RenderType_TabComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[1, 4]], 2, material_es5_83, [Renderer2, ElementRef, undefined, material_es5_74], null, null),
        queryDef(335544320, 6, { tabIcon: 0 }), queryDef(335544320, 7, { tabIconText: 0 }), (_l()(),
            textDef(0, ['About Us'])), (_l()(), textDef(null, ['\n      '])), (_l()(),
            textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 85, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-bar'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 19, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['a'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-tab'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['active'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['href'])), (_l()(), textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"#/tab-demo"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Home'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['a'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 13, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['a'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-tab'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['href'])), (_l()(), textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"#/tab-demo"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Merchandise'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['a'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 13, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['a'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-tab'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['href'])), (_l()(), textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"#/tab-demo"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['About Us'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['a'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-bar'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n\n      '])), (_l()(), elementDef(0, null, null, 2, 'span', [['mdc-typography-headline', '']], [[2, 'mdc-typography--headline', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(),
            textDef(null, ['Tab Bar with icon labels'])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 39, 'mdc-tab-bar', [], [[2, 'mdc-tab-bar', null], [2, 'mdc-tab-bar-scroller__scroll-frame__tabs',
                null], [1, 'role', 0], [2, 'mdc-tab-bar--indicator-primary', null],
            [2, 'mdc-tab-bar--indicator-accent', null], [2, 'mdc-tab-bar--icon-tab-bar',
                null], [2, 'mdc-tab-bar--icons-with-text', null]], null, null, null, null)), directiveDef(4341760, null, 1, material_es5_84, [Renderer2, ElementRef, undefined], { primaryColor: [0,
                'primaryColor'] }, null), queryDef(603979776, 8, { tabs: 1 }), (_l()(),
            textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 10, 'mdc-tab', [], [[2, 'mdc-tab', null], [1, 'role', 0], [2,
                'mdc-tab--with-icon-and-text', null], [2, 'mdc-tab--active', null]], null, null, View_TabComponent_0, RenderType_TabComponent)),
        providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef,
            undefined]), directiveDef(4374528, [[8, 4]], 2, material_es5_83, [Renderer2, ElementRef,
            undefined, material_es5_74], { active: [0, 'active'] }, null), queryDef(335544320, 9, { tabIcon: 0 }), queryDef(335544320, 10, { tabIconText: 0 }), (_l()(), textDef(0, ['\n          '])),
        (_l()(), elementDef(0, null, 0, 3, 'mdc-tab-icon', [['material-icon', '']], [[2,
                'material-icons', null], [2, 'mdc-tab__icon', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_65, [], null, null), directiveDef(16384, [[9, 4]], 0, material_es5_81, [ElementRef], null, null),
        (_l()(), textDef(null, ['phone'])), (_l()(), textDef(0, ['\n        '])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 10, 'mdc-tab', [], [[2, 'mdc-tab', null], [1,
                'role', 0], [2, 'mdc-tab--with-icon-and-text', null], [2, 'mdc-tab--active',
                null]], null, null, View_TabComponent_0, RenderType_TabComponent)),
        providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef,
            undefined]), directiveDef(4374528, [[8, 4]], 2, material_es5_83, [Renderer2, ElementRef,
            undefined, material_es5_74], null, null), queryDef(335544320, 11, { tabIcon: 0 }),
        queryDef(335544320, 12, { tabIconText: 0 }), (_l()(), textDef(0, ['\n          '])), (_l()(),
            elementDef(0, null, 0, 3, 'mdc-tab-icon', [['material-icon', '']], [[2, 'material-icons',
                    null], [2, 'mdc-tab__icon', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_65, [], null, null), directiveDef(16384, [[11, 4]], 0, material_es5_81, [ElementRef], null, null), (_l()(), textDef(null, ['favorite'])), (_l()(), textDef(0, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 10, 'mdc-tab', [], [[2, 'mdc-tab', null], [1, 'role', 0], [2, 'mdc-tab--with-icon-and-text',
                null], [2, 'mdc-tab--active', null]], null, null, View_TabComponent_0, RenderType_TabComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[8, 4]], 2, material_es5_83, [Renderer2, ElementRef, undefined, material_es5_74], null, null), queryDef(335544320, 13, { tabIcon: 0 }), queryDef(335544320, 14, { tabIconText: 0 }),
        (_l()(), textDef(0, ['\n          '])), (_l()(), elementDef(0, null, 0, 3, 'mdc-tab-icon', [['material-icon', '']], [[2, 'material-icons', null], [2, 'mdc-tab__icon',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_65, [], null, null),
        directiveDef(16384, [[13, 4]], 0, material_es5_81, [ElementRef], null, null),
        (_l()(), textDef(null, ['person_pin'])), (_l()(), textDef(0, ['\n        '])),
        (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n'])),
        (_l()(), elementDef(0, null, null, 133, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)),
        (_l()(), elementDef(0, null, null, 12, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-tab-bar'])), (_l()(), textDef(null, [' ['])),
        (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['primaryColor'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 12, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['active'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 9, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-icon'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['material-icon'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['phone'])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-tab-icon'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 9, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-icon'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['material-icon'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['favorite'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-icon'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 9, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-icon'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['material-icon'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['person_pin'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-icon'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-bar'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n\n      '])), (_l()(), elementDef(0, null, null, 2, 'span', [['mdc-typography-headline', '']], [[2, 'mdc-typography--headline', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(),
            textDef(null, ['Tab Bar with icon and text labels'])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 51, 'mdc-tab-bar', [], [[2, 'mdc-tab-bar', null], [2, 'mdc-tab-bar-scroller__scroll-frame__tabs',
                null], [1, 'role', 0], [2, 'mdc-tab-bar--indicator-primary', null],
            [2, 'mdc-tab-bar--indicator-accent', null], [2, 'mdc-tab-bar--icon-tab-bar',
                null], [2, 'mdc-tab-bar--icons-with-text', null]], null, null, null, null)), directiveDef(4341760, null, 1, material_es5_84, [Renderer2, ElementRef, undefined], null, null), queryDef(603979776, 15, { tabs: 1 }), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 14, 'mdc-tab', [], [[2, 'mdc-tab', null], [1, 'role', 0], [2, 'mdc-tab--with-icon-and-text',
                null], [2, 'mdc-tab--active', null]], null, null, View_TabComponent_0, RenderType_TabComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[15, 4]], 2, material_es5_83, [Renderer2, ElementRef, undefined, material_es5_74], { active: [0, 'active'] }, null), queryDef(335544320, 16, { tabIcon: 0 }), queryDef(335544320, 17, { tabIconText: 0 }), (_l()(), textDef(0, ['\n          '])), (_l()(), elementDef(0, null, 0, 3, 'mdc-tab-icon', [['material-icon', '']], [[2, 'material-icons',
                null], [2, 'mdc-tab__icon', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_65, [], null, null), directiveDef(16384, [[16, 4]], 0, material_es5_81, [ElementRef], null, null), (_l()(), textDef(null, ['phone'])), (_l()(), textDef(0, ['\n          '])), (_l()(), elementDef(0, null, 0, 2, 'mdc-tab-icon-text', [], [[2, 'mdc-tab__icon-text', null]], null, null, null, null)), directiveDef(16384, [[17, 4]], 0, material_es5_82, [ElementRef], null, null),
        (_l()(), textDef(null, ['Recents'])), (_l()(), textDef(0, ['\n        '])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 14, 'mdc-tab', [], [[2, 'mdc-tab', null], [1,
                'role', 0], [2, 'mdc-tab--with-icon-and-text', null], [2, 'mdc-tab--active',
                null]], null, null, View_TabComponent_0, RenderType_TabComponent)),
        providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef,
            undefined]), directiveDef(4374528, [[15, 4]], 2, material_es5_83, [Renderer2, ElementRef,
            undefined, material_es5_74], null, null), queryDef(335544320, 18, { tabIcon: 0 }),
        queryDef(335544320, 19, { tabIconText: 0 }), (_l()(), textDef(0, ['\n          '])), (_l()(),
            elementDef(0, null, 0, 3, 'mdc-tab-icon', [['material-icon', '']], [[2, 'material-icons',
                    null], [2, 'mdc-tab__icon', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_65, [], null, null), directiveDef(16384, [[18, 4]], 0, material_es5_81, [ElementRef], null, null), (_l()(), textDef(null, ['favorite'])), (_l()(), textDef(0, ['\n          '])), (_l()(), elementDef(0, null, 0, 2, 'mdc-tab-icon-text', [], [[2, 'mdc-tab__icon-text', null]], null, null, null, null)), directiveDef(16384, [[19, 4]], 0, material_es5_82, [ElementRef], null, null),
        (_l()(), textDef(null, ['Favorites'])), (_l()(), textDef(0, ['\n        '])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 14, 'mdc-tab', [], [[2, 'mdc-tab', null], [1,
                'role', 0], [2, 'mdc-tab--with-icon-and-text', null], [2, 'mdc-tab--active',
                null]], null, null, View_TabComponent_0, RenderType_TabComponent)),
        providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef,
            undefined]), directiveDef(4374528, [[15, 4]], 2, material_es5_83, [Renderer2, ElementRef,
            undefined, material_es5_74], null, null), queryDef(335544320, 20, { tabIcon: 0 }),
        queryDef(335544320, 21, { tabIconText: 0 }), (_l()(), textDef(0, ['\n          '])), (_l()(),
            elementDef(0, null, 0, 3, 'mdc-tab-icon', [['material-icon', '']], [[2, 'material-icons',
                    null], [2, 'mdc-tab__icon', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_65, [], null, null), directiveDef(16384, [[20, 4]], 0, material_es5_81, [ElementRef], null, null), (_l()(), textDef(null, ['person_pin'])), (_l()(), textDef(0, ['\n          '])), (_l()(), elementDef(0, null, 0, 2, 'mdc-tab-icon-text', [], [[2, 'mdc-tab__icon-text',
                null]], null, null, null, null)),
        directiveDef(16384, [[21, 4]], 0, material_es5_82, [ElementRef], null, null), (_l()(), textDef(null, ['Nearby'])), (_l()(), textDef(0, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 175, 'pre', [['style',
                'background:#000;color:#f8f8f8']], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-bar'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 12, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-tab'])), (_l()(), textDef(null, [' ['])),
        (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['active'])), (_l()(), textDef(null, [']='])),
        (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)),
        (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])),
        (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 9, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-icon'])),
        (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['material-icon'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['phone'])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-tab-icon'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-icon-text'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Recents'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-icon-text'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-tab'])), (_l()(), textDef(null, ['>'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 9, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-tab-icon'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['material-icon'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['favorite'])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-tab-icon'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-icon-text'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Favorites'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-icon-text'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-tab'])), (_l()(), textDef(null, ['>'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 9, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-tab-icon'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['material-icon'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['person_pin'])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-tab-icon'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-icon-text'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Nearby'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-icon-text'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-tab'])), (_l()(), textDef(null, ['>'])),
        (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-bar'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])),
        (_l()(), textDef(null, ['\n\n      '])), (_l()(), elementDef(0, null, null, 2, 'span', [['mdc-typography-headline', '']], [[2, 'mdc-typography--headline',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, undefined, [], null, null),
        (_l()(), textDef(null, ['Accent Color Indicator'])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 51, 'mdc-tab-bar', [], [[2, 'mdc-tab-bar', null], [2, 'mdc-tab-bar-scroller__scroll-frame__tabs',
                null], [1, 'role', 0], [2, 'mdc-tab-bar--indicator-primary', null],
            [2, 'mdc-tab-bar--indicator-accent', null], [2, 'mdc-tab-bar--icon-tab-bar',
                null], [2, 'mdc-tab-bar--icons-with-text', null]], null, null, null, null)), directiveDef(4341760, null, 1, material_es5_84, [Renderer2, ElementRef, undefined], { accentColor: [0,
                'accentColor'] }, null), queryDef(603979776, 22, { tabs: 1 }), (_l()(),
            textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 14, 'a', [['href', '#/tab-demo'], ['mdc-tab', '']], [[2, 'mdc-tab', null],
            [1, 'role', 0], [2, 'mdc-tab--with-icon-and-text', null], [2, 'mdc-tab--active',
                null]], null, null, View_TabComponent_0, RenderType_TabComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[22, 4]], 2, material_es5_83, [Renderer2, ElementRef, undefined, material_es5_74], { active: [0, 'active'] }, null),
        queryDef(335544320, 23, { tabIcon: 0 }), queryDef(335544320, 24, { tabIconText: 0 }), (_l()(),
            textDef(0, ['\n          '])), (_l()(), elementDef(0, null, 0, 3, 'mdc-tab-icon', [['material-icon', '']], [[2, 'material-icons', null], [2, 'mdc-tab__icon',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_65, [], null, null),
        directiveDef(16384, [[23, 4]], 0, material_es5_81, [ElementRef], null, null),
        (_l()(), textDef(null, ['phone'])), (_l()(), textDef(0, ['\n          '])),
        (_l()(), elementDef(0, null, 0, 2, 'mdc-tab-icon-text', [], [[2, 'mdc-tab__icon-text',
                null]], null, null, null, null)),
        directiveDef(16384, [[24, 4]], 0, material_es5_82, [ElementRef], null, null), (_l()(), textDef(null, ['Recents'])), (_l()(), textDef(0, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(),
            elementDef(0, null, null, 14, 'a', [['href', '#/tab-demo'], ['mdc-tab',
                    '']], [[2, 'mdc-tab', null], [1, 'role', 0], [2, 'mdc-tab--with-icon-and-text',
                    null], [2, 'mdc-tab--active', null]], null, null, View_TabComponent_0, RenderType_TabComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[22, 4]], 2, material_es5_83, [Renderer2, ElementRef, undefined, material_es5_74], null, null), queryDef(335544320, 25, { tabIcon: 0 }), queryDef(335544320, 26, { tabIconText: 0 }), (_l()(), textDef(0, ['\n          '])), (_l()(), elementDef(0, null, 0, 3, 'mdc-tab-icon', [['material-icon', '']], [[2, 'material-icons',
                null], [2, 'mdc-tab__icon', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_65, [], null, null), directiveDef(16384, [[25, 4]], 0, material_es5_81, [ElementRef], null, null), (_l()(), textDef(null, ['favorite'])), (_l()(), textDef(0, ['\n          '])), (_l()(), elementDef(0, null, 0, 2, 'mdc-tab-icon-text', [], [[2, 'mdc-tab__icon-text', null]], null, null, null, null)), directiveDef(16384, [[26, 4]], 0, material_es5_82, [ElementRef], null, null),
        (_l()(), textDef(null, ['Favorites'])), (_l()(), textDef(0, ['\n        '])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 14, 'a', [['href', '#/tab-demo'], ['mdc-tab', '']], [[2, 'mdc-tab',
                null], [1, 'role', 0], [2, 'mdc-tab--with-icon-and-text', null],
            [2, 'mdc-tab--active', null]], null, null, View_TabComponent_0, RenderType_TabComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[22, 4]], 2, material_es5_83, [Renderer2, ElementRef, undefined, material_es5_74], null, null),
        queryDef(335544320, 27, { tabIcon: 0 }), queryDef(335544320, 28, { tabIconText: 0 }), (_l()(),
            textDef(0, ['\n          '])), (_l()(), elementDef(0, null, 0, 3, 'mdc-tab-icon', [['material-icon', '']], [[2, 'material-icons', null], [2, 'mdc-tab__icon',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_65, [], null, null),
        directiveDef(16384, [[27, 4]], 0, material_es5_81, [ElementRef], null, null),
        (_l()(), textDef(null, ['person_pin'])), (_l()(), textDef(0, ['\n          '])),
        (_l()(), elementDef(0, null, 0, 2, 'mdc-tab-icon-text', [], [[2, 'mdc-tab__icon-text',
                null]], null, null, null, null)),
        directiveDef(16384, [[28, 4]], 0, material_es5_82, [ElementRef], null, null), (_l()(), textDef(null, ['Nearby'])), (_l()(), textDef(0, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 196, 'pre', [['style',
                'background:#000;color:#f8f8f8']], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 12, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-bar'])),
        (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['accentColor'])),
        (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 19, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['a'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-tab'])),
        (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['active'])),
        (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])),
        (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['href'])), (_l()(),
            textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"#/tab-demo"'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 9, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-tab-icon'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['material-icon'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['phone'])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-tab-icon'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-icon-text'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Recents'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-icon-text'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['a'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 13, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['a'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-tab'])),
        (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['href'])), (_l()(),
            textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"#/tab-demo"'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 9, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-tab-icon'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['material-icon'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['favorite'])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-tab-icon'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-icon-text'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Favorites'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-icon-text'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['a'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 13, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['a'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-tab'])),
        (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['href'])), (_l()(),
            textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"#/tab-demo"'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 9, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-tab-icon'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['material-icon'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['person_pin'])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-tab-icon'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-icon-text'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Nearby'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-icon-text'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['a'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(),
            elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-tab-bar'])), (_l()(), textDef(null, ['>'])),
        (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n\n      '])),
        (_l()(), elementDef(0, null, null, 2, 'span', [['mdc-typography-headline',
                '']], [[2, 'mdc-typography--headline', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['Dark Themed'])),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 52, 'mdc-tab-bar', [], [[2, 'mdc-tab-bar', null],
            [2, 'mdc-tab-bar-scroller__scroll-frame__tabs', null], [1, 'role',
                0], [2, 'mdc-tab-bar--indicator-primary', null], [2, 'mdc-tab-bar--indicator-accent',
                null], [2, 'mdc-tab-bar--icon-tab-bar', null], [2,
                'mdc-tab-bar--icons-with-text', null]], null, null, null, null)), directiveDef(4341760, null, 1, material_es5_84, [Renderer2, ElementRef, undefined], { accentColor: [0, 'accentColor'] }, null),
        queryDef(603979776, 29, { tabs: 1 }), directiveDef(540672, null, 0, material_es5_99, [Renderer2,
            ElementRef], { mdcThemeDark: [0, 'mdcThemeDark'] }, null), (_l()(),
            textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 14, 'a', [['href', '#/tab-demo'], ['mdc-tab', '']], [[2, 'mdc-tab', null],
            [1, 'role', 0], [2, 'mdc-tab--with-icon-and-text', null], [2, 'mdc-tab--active',
                null]], null, null, View_TabComponent_0, RenderType_TabComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[29, 4]], 2, material_es5_83, [Renderer2, ElementRef, undefined, material_es5_74], { active: [0, 'active'] }, null),
        queryDef(335544320, 30, { tabIcon: 0 }), queryDef(335544320, 31, { tabIconText: 0 }), (_l()(),
            textDef(0, ['\n          '])), (_l()(), elementDef(0, null, 0, 3, 'mdc-tab-icon', [['material-icon', '']], [[2, 'material-icons', null], [2, 'mdc-tab__icon',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_65, [], null, null),
        directiveDef(16384, [[30, 4]], 0, material_es5_81, [ElementRef], null, null),
        (_l()(), textDef(null, ['phone'])), (_l()(), textDef(0, ['\n          '])),
        (_l()(), elementDef(0, null, 0, 2, 'mdc-tab-icon-text', [], [[2, 'mdc-tab__icon-text',
                null]], null, null, null, null)),
        directiveDef(16384, [[31, 4]], 0, material_es5_82, [ElementRef], null, null), (_l()(), textDef(null, ['Recents'])), (_l()(), textDef(0, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(),
            elementDef(0, null, null, 14, 'a', [['href', '#/tab-demo'], ['mdc-tab',
                    '']], [[2, 'mdc-tab', null], [1, 'role', 0], [2, 'mdc-tab--with-icon-and-text',
                    null], [2, 'mdc-tab--active', null]], null, null, View_TabComponent_0, RenderType_TabComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[29, 4]], 2, material_es5_83, [Renderer2, ElementRef, undefined, material_es5_74], null, null), queryDef(335544320, 32, { tabIcon: 0 }), queryDef(335544320, 33, { tabIconText: 0 }), (_l()(), textDef(0, ['\n          '])), (_l()(), elementDef(0, null, 0, 3, 'mdc-tab-icon', [['material-icon', '']], [[2, 'material-icons',
                null], [2, 'mdc-tab__icon', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_65, [], null, null), directiveDef(16384, [[32, 4]], 0, material_es5_81, [ElementRef], null, null), (_l()(), textDef(null, ['favorite'])), (_l()(), textDef(0, ['\n          '])), (_l()(), elementDef(0, null, 0, 2, 'mdc-tab-icon-text', [], [[2, 'mdc-tab__icon-text', null]], null, null, null, null)), directiveDef(16384, [[33, 4]], 0, material_es5_82, [ElementRef], null, null),
        (_l()(), textDef(null, ['Favorites'])), (_l()(), textDef(0, ['\n        '])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 14, 'a', [['href', '#/tab-demo'], ['mdc-tab', '']], [[2, 'mdc-tab',
                null], [1, 'role', 0], [2, 'mdc-tab--with-icon-and-text', null],
            [2, 'mdc-tab--active', null]], null, null, View_TabComponent_0, RenderType_TabComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[29, 4]], 2, material_es5_83, [Renderer2, ElementRef, undefined, material_es5_74], null, null),
        queryDef(335544320, 34, { tabIcon: 0 }), queryDef(335544320, 35, { tabIconText: 0 }), (_l()(),
            textDef(0, ['\n          '])), (_l()(), elementDef(0, null, 0, 3, 'mdc-tab-icon', [['material-icon', '']], [[2, 'material-icons', null], [2, 'mdc-tab__icon',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_65, [], null, null),
        directiveDef(16384, [[34, 4]], 0, material_es5_81, [ElementRef], null, null),
        (_l()(), textDef(null, ['person_pin'])), (_l()(), textDef(0, ['\n          '])),
        (_l()(), elementDef(0, null, 0, 2, 'mdc-tab-icon-text', [], [[2, 'mdc-tab__icon-text',
                null]], null, null, null, null)),
        directiveDef(16384, [[35, 4]], 0, material_es5_82, [ElementRef], null, null), (_l()(), textDef(null, ['Nearby'])), (_l()(), textDef(0, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 202, 'pre', [['style',
                'background:#000;color:#f8f8f8']], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 18, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-bar'])),
        (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['accentColor'])),
        (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])),
        (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-theme-dark'])),
        (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 19, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['a'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-tab'])),
        (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['active'])),
        (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])),
        (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['href'])), (_l()(),
            textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"#/tab-demo"'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 9, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-tab-icon'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['material-icon'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['phone'])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-tab-icon'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-icon-text'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Recents'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-icon-text'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['a'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 13, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['a'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-tab'])),
        (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['href'])), (_l()(),
            textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"#/tab-demo"'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 9, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-tab-icon'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['material-icon'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['favorite'])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-tab-icon'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-icon-text'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Favorites'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-icon-text'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['a'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 13, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['a'])), (_l()(),
            textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc-tab'])),
        (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['href'])), (_l()(),
            textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"#/tab-demo"'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 9, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-tab-icon'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['material-icon'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['person_pin'])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-tab-icon'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-icon-text'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Nearby'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-icon-text'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['a'])), (_l()(),
            textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(),
            elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-tab-bar'])), (_l()(), textDef(null, ['>'])),
        (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n\n      '])),
        (_l()(), elementDef(0, null, null, 97, 'div', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 2, 'span', [['mdc-typography-headline',
                '']], [[2, 'mdc-typography--headline', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['Dynamic view switching'])),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 6, 'mdc-tab-bar', [], [[2, 'mdc-tab-bar', null],
            [2, 'mdc-tab-bar-scroller__scroll-frame__tabs', null], [1, 'role',
                0], [2, 'mdc-tab-bar--indicator-primary', null], [2, 'mdc-tab-bar--indicator-accent',
                null], [2, 'mdc-tab-bar--icon-tab-bar', null], [2,
                'mdc-tab-bar--icons-with-text', null]], null, null, null, null)), directiveDef(4341760, null, 1, material_es5_84, [Renderer2, ElementRef, undefined], null, null), queryDef(603979776, 36, { tabs: 1 }), (_l()(), textDef(null, ['\n        '])), (_l()(), anchorDef(16777216, null, null, 1, null, View_TabDemoComponent_1)), directiveDef(802816, null, 0, NgForOf, [ViewContainerRef, TemplateRef, IterableDiffers], { ngForOf: [0, 'ngForOf'] }, null), (_l()(), textDef(null, ['\n      '])),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 8, 'section', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])),
        (_l()(), elementDef(0, null, null, 5, 'div', [['class', 'panels']], null, null, null, null, null)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers,
            ElementRef, Renderer, Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['\n          '])), (_l()(),
            elementDef(16777216, null, null, 1, 'router-outlet', [['name',
                    'taboutlet']], null, null, null, null, null)), directiveDef(212992, null, 0, RouterOutlet, [ChildrenOutletContexts,
            ViewContainerRef, ComponentFactoryResolver, [8, 'taboutlet'], ChangeDetectorRef], null, null), (_l()(), textDef(null, ['\n        '])),
        (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n'])),
        (_l()(), elementDef(0, null, null, 73, 'pre', [['style', 'background:#000;color:#f8f8f8']], null, null, null, null, null)),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-tab-bar'])), (_l()(), textDef(null, ['>'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 28, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['a'])), (_l()(), textDef(null, [' '])),
        (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc-tab'])), (_l()(), textDef(null, [' ['])),
        (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)),
        (_l()(), textDef(null, ['active'])), (_l()(), textDef(null, [']='])),
        (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)),
        (_l()(), textDef(null, ['"tabLink.active"'])), (_l()(), textDef(null, ['\n   *'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['ngFor'])), (_l()(), textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"let tabLink of tabLinks"'])),
        (_l()(), textDef(null, ['\n   ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['routerLink'])),
        (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"['])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#daefa3']], null, null, null, null, null)),
        (_l()(), textDef(null, ['{outlets: {taboutlet: tabLink.link}}'])), (_l()(),
            textDef(null, [']"'])), (_l()(), textDef(null, ['>'])), (_l()(),
            textDef(null, ['tabLink.label'])), (_l()(), elementDef(0, null, null, 4, 'span', [['style', 'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#e0c589']], null, null, null, null, null)), (_l()(), textDef(null, ['a'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-bar'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 12, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['router'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-outlet'])), (_l()(), textDef(null, [' '])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['name'])), (_l()(), textDef(null, ['='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"taboutlet"'])), (_l()(),
            textDef(null, ['>'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['router'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-outlet'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])),
        (_l()(), textDef(null, ['\n\n    '])), (_l()(), elementDef(0, null, null, 132, 'div', [], null, null, null, null, null)), (_l()(), textDef(null, ['\n      '])),
        (_l()(), elementDef(0, null, null, 2, 'span', [['mdc-typography-headline',
                '']], [[2, 'mdc-typography--headline', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['Tab Bar Scoller'])),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 125, 'mdc-tab-bar-scroller', [['fxLayout', 'row'], ['style', 'width: 30%;']], [[2, 'mdc-tab-bar-scoller', null]], null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor,
            ElementRef, Renderer2], { layout: [0, 'layout'] }, null), directiveDef(4341760, null, 3, material_es5_89, [Renderer2, ElementRef, undefined], null, null), queryDef(335544320, 39, { scrollFrame: 0 }), queryDef(335544320, 40, { scrollBack: 0 }), queryDef(335544320, 41, { scrollForward: 0 }), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'mdc-tab-bar-scroll-back', [], [[2, 'mdc-tab-bar-scroller__indicator', null], [2, 'mdc-tab-bar-scroller__indicator--back',
                null]], null, null, null, null)),
        directiveDef(16384, [[40, 4]], 0, material_es5_86, [ElementRef], null, null), (_l()(), textDef(null, ['\n          '])), (_l()(),
            elementDef(0, null, null, 3, 'mdc-tab-bar-scroll-button', [['material-icon',
                    '']], [[2, 'material-icons', null], [2, 'mdc-tab-bar-scroller__indicator__inner',
                    null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_65, [], null, null),
        directiveDef(16384, null, 0, material_es5_85, [ElementRef], null, null), (_l()(), textDef(null, ['\n            navigate_before\n          '])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 99, 'mdc-tab-bar-scroll-frame', [], [[2, 'mdc-tab-bar-scroller__scroll-frame', null]], null, null, null, null)), directiveDef(1064960, [[39, 4]], 1, material_es5_88, [ElementRef], null, null), queryDef(335544320, 42, { tabBar: 0 }),
        (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 94, 'mdc-tab-bar', [], [[2, 'mdc-tab-bar', null],
            [2, 'mdc-tab-bar-scroller__scroll-frame__tabs', null], [1, 'role',
                0], [2, 'mdc-tab-bar--indicator-primary', null], [2, 'mdc-tab-bar--indicator-accent',
                null], [2, 'mdc-tab-bar--icon-tab-bar', null], [2,
                'mdc-tab-bar--icons-with-text', null]], null, null, null, null)), directiveDef(4341760, [[42, 4]], 1, material_es5_84, [Renderer2, ElementRef, undefined], { accentColor: [0, 'accentColor'] }, null),
        queryDef(603979776, 43, { tabs: 1 }), (_l()(), textDef(null, ['\n            '])),
        (_l()(), elementDef(0, null, null, 5, 'mdc-tab', [], [[2,
                'mdc-tab', null], [1, 'role', 0], [2, 'mdc-tab--with-icon-and-text', null],
            [2, 'mdc-tab--active', null]], null, null, View_TabComponent_0, RenderType_TabComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[43, 4]], 2, material_es5_83, [Renderer2, ElementRef, undefined, material_es5_74], { active: [0, 'active'] }, null),
        queryDef(335544320, 44, { tabIcon: 0 }), queryDef(335544320, 45, { tabIconText: 0 }), (_l()(),
            textDef(0, ['Item One'])), (_l()(), textDef(null, ['\n            '])),
        (_l()(), elementDef(0, null, null, 5, 'mdc-tab', [], [[2,
                'mdc-tab', null], [1, 'role', 0], [2, 'mdc-tab--with-icon-and-text', null],
            [2, 'mdc-tab--active', null]], null, null, View_TabComponent_0, RenderType_TabComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[43, 4]], 2, material_es5_83, [Renderer2, ElementRef, undefined, material_es5_74], null, null),
        queryDef(335544320, 46, { tabIcon: 0 }), queryDef(335544320, 47, { tabIconText: 0 }), (_l()(),
            textDef(0, ['Item Two'])), (_l()(), textDef(null, ['\n            '])),
        (_l()(), elementDef(0, null, null, 5, 'mdc-tab', [], [[2,
                'mdc-tab', null], [1, 'role', 0], [2, 'mdc-tab--with-icon-and-text', null],
            [2, 'mdc-tab--active', null]], null, null, View_TabComponent_0, RenderType_TabComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[43, 4]], 2, material_es5_83, [Renderer2, ElementRef, undefined, material_es5_74], null, null),
        queryDef(335544320, 48, { tabIcon: 0 }), queryDef(335544320, 49, { tabIconText: 0 }), (_l()(),
            textDef(0, ['Item Three'])), (_l()(), textDef(null, ['\n            '])),
        (_l()(), elementDef(0, null, null, 5, 'mdc-tab', [], [[2,
                'mdc-tab', null], [1, 'role', 0], [2, 'mdc-tab--with-icon-and-text', null],
            [2, 'mdc-tab--active', null]], null, null, View_TabComponent_0, RenderType_TabComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[43, 4]], 2, material_es5_83, [Renderer2, ElementRef, undefined, material_es5_74], null, null),
        queryDef(335544320, 50, { tabIcon: 0 }), queryDef(335544320, 51, { tabIconText: 0 }), (_l()(),
            textDef(0, ['Item Four'])), (_l()(), textDef(null, ['\n            '])),
        (_l()(), elementDef(0, null, null, 5, 'mdc-tab', [], [[2,
                'mdc-tab', null], [1, 'role', 0], [2, 'mdc-tab--with-icon-and-text', null],
            [2, 'mdc-tab--active', null]], null, null, View_TabComponent_0, RenderType_TabComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[43, 4]], 2, material_es5_83, [Renderer2, ElementRef, undefined, material_es5_74], null, null),
        queryDef(335544320, 52, { tabIcon: 0 }), queryDef(335544320, 53, { tabIconText: 0 }), (_l()(),
            textDef(0, ['Item Five'])), (_l()(), textDef(null, ['\n            '])),
        (_l()(), elementDef(0, null, null, 5, 'mdc-tab', [], [[2,
                'mdc-tab', null], [1, 'role', 0], [2, 'mdc-tab--with-icon-and-text', null],
            [2, 'mdc-tab--active', null]], null, null, View_TabComponent_0, RenderType_TabComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[43, 4]], 2, material_es5_83, [Renderer2, ElementRef, undefined, material_es5_74], null, null),
        queryDef(335544320, 54, { tabIcon: 0 }), queryDef(335544320, 55, { tabIconText: 0 }), (_l()(),
            textDef(0, ['Item Six'])), (_l()(), textDef(null, ['\n            '])),
        (_l()(), elementDef(0, null, null, 5, 'mdc-tab', [], [[2,
                'mdc-tab', null], [1, 'role', 0], [2, 'mdc-tab--with-icon-and-text', null],
            [2, 'mdc-tab--active', null]], null, null, View_TabComponent_0, RenderType_TabComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[43, 4]], 2, material_es5_83, [Renderer2, ElementRef, undefined, material_es5_74], null, null),
        queryDef(335544320, 56, { tabIcon: 0 }), queryDef(335544320, 57, { tabIconText: 0 }), (_l()(),
            textDef(0, ['Item Seven'])), (_l()(), textDef(null, ['\n            '])),
        (_l()(), elementDef(0, null, null, 5, 'mdc-tab', [], [[2,
                'mdc-tab', null], [1, 'role', 0], [2, 'mdc-tab--with-icon-and-text', null],
            [2, 'mdc-tab--active', null]], null, null, View_TabComponent_0, RenderType_TabComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[43, 4]], 2, material_es5_83, [Renderer2, ElementRef, undefined, material_es5_74], null, null),
        queryDef(335544320, 58, { tabIcon: 0 }), queryDef(335544320, 59, { tabIconText: 0 }), (_l()(),
            textDef(0, ['Item Eight'])), (_l()(), textDef(null, ['\n            '])),
        (_l()(), elementDef(0, null, null, 5, 'mdc-tab', [], [[2,
                'mdc-tab', null], [1, 'role', 0], [2, 'mdc-tab--with-icon-and-text', null],
            [2, 'mdc-tab--active', null]], null, null, View_TabComponent_0, RenderType_TabComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[43, 4]], 2, material_es5_83, [Renderer2, ElementRef, undefined, material_es5_74], null, null),
        queryDef(335544320, 60, { tabIcon: 0 }), queryDef(335544320, 61, { tabIconText: 0 }), (_l()(),
            textDef(0, ['Item Nine'])), (_l()(), textDef(null, ['\n            '])),
        (_l()(), elementDef(0, null, null, 5, 'mdc-tab', [], [[2,
                'mdc-tab', null], [1, 'role', 0], [2, 'mdc-tab--with-icon-and-text', null],
            [2, 'mdc-tab--active', null]], null, null, View_TabComponent_0, RenderType_TabComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[43, 4]], 2, material_es5_83, [Renderer2, ElementRef, undefined, material_es5_74], null, null),
        queryDef(335544320, 62, { tabIcon: 0 }), queryDef(335544320, 63, { tabIconText: 0 }), (_l()(),
            textDef(0, ['Item Ten'])), (_l()(), textDef(null, ['\n            '])),
        (_l()(), elementDef(0, null, null, 5, 'mdc-tab', [], [[2,
                'mdc-tab', null], [1, 'role', 0], [2, 'mdc-tab--with-icon-and-text', null],
            [2, 'mdc-tab--active', null]], null, null, View_TabComponent_0, RenderType_TabComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[43, 4]], 2, material_es5_83, [Renderer2, ElementRef, undefined, material_es5_74], null, null),
        queryDef(335544320, 64, { tabIcon: 0 }), queryDef(335544320, 65, { tabIconText: 0 }), (_l()(),
            textDef(0, ['Item Eleven'])), (_l()(), textDef(null, ['\n            '])),
        (_l()(), elementDef(0, null, null, 5, 'mdc-tab', [], [[2,
                'mdc-tab', null], [1, 'role', 0], [2, 'mdc-tab--with-icon-and-text', null],
            [2, 'mdc-tab--active', null]], null, null, View_TabComponent_0, RenderType_TabComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[43, 4]], 2, material_es5_83, [Renderer2, ElementRef, undefined, material_es5_74], null, null),
        queryDef(335544320, 66, { tabIcon: 0 }), queryDef(335544320, 67, { tabIconText: 0 }), (_l()(),
            textDef(0, ['Item Tweleve'])), (_l()(), textDef(null, ['\n            '])),
        (_l()(), elementDef(0, null, null, 5, 'mdc-tab', [], [[2,
                'mdc-tab', null], [1, 'role', 0], [2, 'mdc-tab--with-icon-and-text', null],
            [2, 'mdc-tab--active', null]], null, null, View_TabComponent_0, RenderType_TabComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4374528, [[43, 4]], 2, material_es5_83, [Renderer2, ElementRef, undefined, material_es5_74], null, null),
        queryDef(335544320, 68, { tabIcon: 0 }), queryDef(335544320, 69, { tabIconText: 0 }), (_l()(),
            textDef(0, ['Item Thirteen'])), (_l()(), textDef(null, ['\n          '])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 7, 'mdc-tab-bar-scroll-forward', [], [[2, 'mdc-tab-bar-scroller__indicator', null], [2, 'mdc-tab-bar-scroller__indicator--forward',
                null]], null, null, null, null)),
        directiveDef(16384, [[41, 4]], 0, material_es5_87, [ElementRef], null, null), (_l()(), textDef(null, ['\n          '])), (_l()(),
            elementDef(0, null, null, 3, 'mdc-tab-bar-scroll-button', [['material-icon',
                    '']], [[2, 'material-icons', null], [2, 'mdc-tab-bar-scroller__indicator__inner',
                    null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_65, [], null, null),
        directiveDef(16384, null, 0, material_es5_85, [ElementRef], null, null), (_l()(), textDef(null, ['\n            navigate_next\n          '])),
        (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n      '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 290, 'pre', [['style',
                'background:#000;color:#f8f8f8']], null, null, null, null, null)), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-bar-scroller'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-tab-bar-scroll-back'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 9, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-bar-scroll-button'])), (_l()(), textDef(null, [' '])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['material-icon'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n      navigate_before\n    '])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-tab-bar-scroll-button'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-bar-scroll-back'])), (_l()(), textDef(null, ['>'])), (_l()(),
            textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-bar-scroll-frame'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 12, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-tab-bar'])), (_l()(), textDef(null, [' ['])),
        (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['accentColor'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 12, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab'])), (_l()(), textDef(null, [' ['])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['active'])), (_l()(), textDef(null, [']='])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#65b042']], null, null, null, null, null)), (_l()(), textDef(null, ['"true"'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Item One'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Item Two'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Item Three'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Item Four'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Item Five'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Item Six'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Item Seven'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Item Eight'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Item Nine'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['Item Ten'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-bar'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-bar-scroll-frame'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-tab-bar-scroll-forward'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 9, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['<'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-bar-scroll-button'])), (_l()(), textDef(null, [' '])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['material-icon'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n      navigate_next\n    '])),
        (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['-tab-bar-scroll-button'])), (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style',
                'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-bar-scroll-forward'])), (_l()(), textDef(null, ['>'])), (_l()(),
            textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 6, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['</'])), (_l()(),
            elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)),
        (_l()(), textDef(null, ['mdc'])), (_l()(), elementDef(0, null, null, 1, 'span', [['style', 'color:#89bdff']], null, null, null, null, null)), (_l()(), textDef(null, ['-tab-bar-scroller'])),
        (_l()(), textDef(null, ['>'])), (_l()(), textDef(null, ['\n'])),
        (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n']))], function (_ck, _v) {
        var _co = _v.component;
        var currVal_0 = 'column';
        _ck(_v, 1, 0, currVal_0);
        var currVal_1 = 'start start';
        _ck(_v, 2, 0, currVal_1);
        var currVal_2 = 'mdc-padding';
        _ck(_v, 3, 0, currVal_2);
        var currVal_6 = 'info-banner';
        _ck(_v, 14, 0, currVal_6);
        var currVal_7 = 'docs-api';
        _ck(_v, 21, 0, currVal_7);
        var currVal_8 = 'column';
        _ck(_v, 301, 0, currVal_8);
        var currVal_9 = '20px';
        _ck(_v, 302, 0, currVal_9);
        var currVal_10 = 'start start';
        _ck(_v, 303, 0, currVal_10);
        var currVal_11 = 'mdc-padding';
        _ck(_v, 304, 0, currVal_11);
        var currVal_24 = true;
        _ck(_v, 316, 0, currVal_24);
        var currVal_41 = true;
        _ck(_v, 428, 0, currVal_41);
        var currVal_46 = true;
        _ck(_v, 433, 0, currVal_46);
        var currVal_73 = true;
        _ck(_v, 613, 0, currVal_73);
        var currVal_99 = true;
        _ck(_v, 842, 0, currVal_99);
        var currVal_104 = true;
        _ck(_v, 847, 0, currVal_104);
        var currVal_130 = true;
        _ck(_v, 1097, 0, currVal_130);
        var currVal_131 = true;
        _ck(_v, 1099, 0, currVal_131);
        var currVal_136 = true;
        _ck(_v, 1103, 0, currVal_136);
        var currVal_162 = _co.tabLinks;
        _ck(_v, 1365, 0, currVal_162);
        var currVal_163 = 'panels';
        _ck(_v, 1371, 0, currVal_163);
        _ck(_v, 1374, 0);
        var currVal_166 = 'row';
        _ck(_v, 1460, 0, currVal_166);
        var currVal_179 = true;
        _ck(_v, 1480, 0, currVal_179);
        var currVal_184 = true;
        _ck(_v, 1485, 0, currVal_184);
    }, function (_ck, _v) {
        var currVal_3 = nodeValue(_v, 6).isHostClass;
        _ck(_v, 5, 0, currVal_3);
        var currVal_4 = nodeValue(_v, 10).isHostClass;
        _ck(_v, 9, 0, currVal_4);
        var currVal_5 = nodeValue(_v, 15).isHostClass;
        _ck(_v, 13, 0, currVal_5);
        var currVal_12 = nodeValue(_v, 307).isHostClass;
        _ck(_v, 306, 0, currVal_12);
        var currVal_13 = nodeValue(_v, 311).isHostClass;
        var currVal_14 = nodeValue(_v, 311).scrollFrameContent;
        var currVal_15 = nodeValue(_v, 311).role;
        var currVal_16 = nodeValue(_v, 311).classIndicatorPrimary;
        var currVal_17 = nodeValue(_v, 311).classIndicatorAccent;
        var currVal_18 = nodeValue(_v, 311).classTabIcon;
        var currVal_19 = nodeValue(_v, 311).classTabIconText;
        _ck(_v, 310, 0, currVal_13, currVal_14, currVal_15, currVal_16, currVal_17, currVal_18, currVal_19);
        var currVal_20 = nodeValue(_v, 316).isHostClass;
        var currVal_21 = nodeValue(_v, 316).role;
        var currVal_22 = nodeValue(_v, 316).classIconText;
        var currVal_23 = nodeValue(_v, 316).classActive;
        _ck(_v, 314, 0, currVal_20, currVal_21, currVal_22, currVal_23);
        var currVal_25 = nodeValue(_v, 323).isHostClass;
        var currVal_26 = nodeValue(_v, 323).role;
        var currVal_27 = nodeValue(_v, 323).classIconText;
        var currVal_28 = nodeValue(_v, 323).classActive;
        _ck(_v, 321, 0, currVal_25, currVal_26, currVal_27, currVal_28);
        var currVal_29 = nodeValue(_v, 330).isHostClass;
        var currVal_30 = nodeValue(_v, 330).role;
        var currVal_31 = nodeValue(_v, 330).classIconText;
        var currVal_32 = nodeValue(_v, 330).classActive;
        _ck(_v, 328, 0, currVal_29, currVal_30, currVal_31, currVal_32);
        var currVal_33 = nodeValue(_v, 424).isHostClass;
        _ck(_v, 423, 0, currVal_33);
        var currVal_34 = nodeValue(_v, 428).isHostClass;
        var currVal_35 = nodeValue(_v, 428).scrollFrameContent;
        var currVal_36 = nodeValue(_v, 428).role;
        var currVal_37 = nodeValue(_v, 428).classIndicatorPrimary;
        var currVal_38 = nodeValue(_v, 428).classIndicatorAccent;
        var currVal_39 = nodeValue(_v, 428).classTabIcon;
        var currVal_40 = nodeValue(_v, 428).classTabIconText;
        _ck(_v, 427, 0, currVal_34, currVal_35, currVal_36, currVal_37, currVal_38, currVal_39, currVal_40);
        var currVal_42 = nodeValue(_v, 433).isHostClass;
        var currVal_43 = nodeValue(_v, 433).role;
        var currVal_44 = nodeValue(_v, 433).classIconText;
        var currVal_45 = nodeValue(_v, 433).classActive;
        _ck(_v, 431, 0, currVal_42, currVal_43, currVal_44, currVal_45);
        var currVal_47 = nodeValue(_v, 438).isHostClass;
        var currVal_48 = nodeValue(_v, 439).isHostClass;
        _ck(_v, 437, 0, currVal_47, currVal_48);
        var currVal_49 = nodeValue(_v, 445).isHostClass;
        var currVal_50 = nodeValue(_v, 445).role;
        var currVal_51 = nodeValue(_v, 445).classIconText;
        var currVal_52 = nodeValue(_v, 445).classActive;
        _ck(_v, 443, 0, currVal_49, currVal_50, currVal_51, currVal_52);
        var currVal_53 = nodeValue(_v, 450).isHostClass;
        var currVal_54 = nodeValue(_v, 451).isHostClass;
        _ck(_v, 449, 0, currVal_53, currVal_54);
        var currVal_55 = nodeValue(_v, 457).isHostClass;
        var currVal_56 = nodeValue(_v, 457).role;
        var currVal_57 = nodeValue(_v, 457).classIconText;
        var currVal_58 = nodeValue(_v, 457).classActive;
        _ck(_v, 455, 0, currVal_55, currVal_56, currVal_57, currVal_58);
        var currVal_59 = nodeValue(_v, 462).isHostClass;
        var currVal_60 = nodeValue(_v, 463).isHostClass;
        _ck(_v, 461, 0, currVal_59, currVal_60);
        var currVal_61 = nodeValue(_v, 604).isHostClass;
        _ck(_v, 603, 0, currVal_61);
        var currVal_62 = nodeValue(_v, 608).isHostClass;
        var currVal_63 = nodeValue(_v, 608).scrollFrameContent;
        var currVal_64 = nodeValue(_v, 608).role;
        var currVal_65 = nodeValue(_v, 608).classIndicatorPrimary;
        var currVal_66 = nodeValue(_v, 608).classIndicatorAccent;
        var currVal_67 = nodeValue(_v, 608).classTabIcon;
        var currVal_68 = nodeValue(_v, 608).classTabIconText;
        _ck(_v, 607, 0, currVal_62, currVal_63, currVal_64, currVal_65, currVal_66, currVal_67, currVal_68);
        var currVal_69 = nodeValue(_v, 613).isHostClass;
        var currVal_70 = nodeValue(_v, 613).role;
        var currVal_71 = nodeValue(_v, 613).classIconText;
        var currVal_72 = nodeValue(_v, 613).classActive;
        _ck(_v, 611, 0, currVal_69, currVal_70, currVal_71, currVal_72);
        var currVal_74 = nodeValue(_v, 618).isHostClass;
        var currVal_75 = nodeValue(_v, 619).isHostClass;
        _ck(_v, 617, 0, currVal_74, currVal_75);
        var currVal_76 = nodeValue(_v, 623).isHostClass;
        _ck(_v, 622, 0, currVal_76);
        var currVal_77 = nodeValue(_v, 629).isHostClass;
        var currVal_78 = nodeValue(_v, 629).role;
        var currVal_79 = nodeValue(_v, 629).classIconText;
        var currVal_80 = nodeValue(_v, 629).classActive;
        _ck(_v, 627, 0, currVal_77, currVal_78, currVal_79, currVal_80);
        var currVal_81 = nodeValue(_v, 634).isHostClass;
        var currVal_82 = nodeValue(_v, 635).isHostClass;
        _ck(_v, 633, 0, currVal_81, currVal_82);
        var currVal_83 = nodeValue(_v, 639).isHostClass;
        _ck(_v, 638, 0, currVal_83);
        var currVal_84 = nodeValue(_v, 645).isHostClass;
        var currVal_85 = nodeValue(_v, 645).role;
        var currVal_86 = nodeValue(_v, 645).classIconText;
        var currVal_87 = nodeValue(_v, 645).classActive;
        _ck(_v, 643, 0, currVal_84, currVal_85, currVal_86, currVal_87);
        var currVal_88 = nodeValue(_v, 650).isHostClass;
        var currVal_89 = nodeValue(_v, 651).isHostClass;
        _ck(_v, 649, 0, currVal_88, currVal_89);
        var currVal_90 = nodeValue(_v, 655).isHostClass;
        _ck(_v, 654, 0, currVal_90);
        var currVal_91 = nodeValue(_v, 838).isHostClass;
        _ck(_v, 837, 0, currVal_91);
        var currVal_92 = nodeValue(_v, 842).isHostClass;
        var currVal_93 = nodeValue(_v, 842).scrollFrameContent;
        var currVal_94 = nodeValue(_v, 842).role;
        var currVal_95 = nodeValue(_v, 842).classIndicatorPrimary;
        var currVal_96 = nodeValue(_v, 842).classIndicatorAccent;
        var currVal_97 = nodeValue(_v, 842).classTabIcon;
        var currVal_98 = nodeValue(_v, 842).classTabIconText;
        _ck(_v, 841, 0, currVal_92, currVal_93, currVal_94, currVal_95, currVal_96, currVal_97, currVal_98);
        var currVal_100 = nodeValue(_v, 847).isHostClass;
        var currVal_101 = nodeValue(_v, 847).role;
        var currVal_102 = nodeValue(_v, 847).classIconText;
        var currVal_103 = nodeValue(_v, 847).classActive;
        _ck(_v, 845, 0, currVal_100, currVal_101, currVal_102, currVal_103);
        var currVal_105 = nodeValue(_v, 852).isHostClass;
        var currVal_106 = nodeValue(_v, 853).isHostClass;
        _ck(_v, 851, 0, currVal_105, currVal_106);
        var currVal_107 = nodeValue(_v, 857).isHostClass;
        _ck(_v, 856, 0, currVal_107);
        var currVal_108 = nodeValue(_v, 863).isHostClass;
        var currVal_109 = nodeValue(_v, 863).role;
        var currVal_110 = nodeValue(_v, 863).classIconText;
        var currVal_111 = nodeValue(_v, 863).classActive;
        _ck(_v, 861, 0, currVal_108, currVal_109, currVal_110, currVal_111);
        var currVal_112 = nodeValue(_v, 868).isHostClass;
        var currVal_113 = nodeValue(_v, 869).isHostClass;
        _ck(_v, 867, 0, currVal_112, currVal_113);
        var currVal_114 = nodeValue(_v, 873).isHostClass;
        _ck(_v, 872, 0, currVal_114);
        var currVal_115 = nodeValue(_v, 879).isHostClass;
        var currVal_116 = nodeValue(_v, 879).role;
        var currVal_117 = nodeValue(_v, 879).classIconText;
        var currVal_118 = nodeValue(_v, 879).classActive;
        _ck(_v, 877, 0, currVal_115, currVal_116, currVal_117, currVal_118);
        var currVal_119 = nodeValue(_v, 884).isHostClass;
        var currVal_120 = nodeValue(_v, 885).isHostClass;
        _ck(_v, 883, 0, currVal_119, currVal_120);
        var currVal_121 = nodeValue(_v, 889).isHostClass;
        _ck(_v, 888, 0, currVal_121);
        var currVal_122 = nodeValue(_v, 1093).isHostClass;
        _ck(_v, 1092, 0, currVal_122);
        var currVal_123 = nodeValue(_v, 1097).isHostClass;
        var currVal_124 = nodeValue(_v, 1097).scrollFrameContent;
        var currVal_125 = nodeValue(_v, 1097).role;
        var currVal_126 = nodeValue(_v, 1097).classIndicatorPrimary;
        var currVal_127 = nodeValue(_v, 1097).classIndicatorAccent;
        var currVal_128 = nodeValue(_v, 1097).classTabIcon;
        var currVal_129 = nodeValue(_v, 1097).classTabIconText;
        _ck(_v, 1096, 0, currVal_123, currVal_124, currVal_125, currVal_126, currVal_127, currVal_128, currVal_129);
        var currVal_132 = nodeValue(_v, 1103).isHostClass;
        var currVal_133 = nodeValue(_v, 1103).role;
        var currVal_134 = nodeValue(_v, 1103).classIconText;
        var currVal_135 = nodeValue(_v, 1103).classActive;
        _ck(_v, 1101, 0, currVal_132, currVal_133, currVal_134, currVal_135);
        var currVal_137 = nodeValue(_v, 1108).isHostClass;
        var currVal_138 = nodeValue(_v, 1109).isHostClass;
        _ck(_v, 1107, 0, currVal_137, currVal_138);
        var currVal_139 = nodeValue(_v, 1113).isHostClass;
        _ck(_v, 1112, 0, currVal_139);
        var currVal_140 = nodeValue(_v, 1119).isHostClass;
        var currVal_141 = nodeValue(_v, 1119).role;
        var currVal_142 = nodeValue(_v, 1119).classIconText;
        var currVal_143 = nodeValue(_v, 1119).classActive;
        _ck(_v, 1117, 0, currVal_140, currVal_141, currVal_142, currVal_143);
        var currVal_144 = nodeValue(_v, 1124).isHostClass;
        var currVal_145 = nodeValue(_v, 1125).isHostClass;
        _ck(_v, 1123, 0, currVal_144, currVal_145);
        var currVal_146 = nodeValue(_v, 1129).isHostClass;
        _ck(_v, 1128, 0, currVal_146);
        var currVal_147 = nodeValue(_v, 1135).isHostClass;
        var currVal_148 = nodeValue(_v, 1135).role;
        var currVal_149 = nodeValue(_v, 1135).classIconText;
        var currVal_150 = nodeValue(_v, 1135).classActive;
        _ck(_v, 1133, 0, currVal_147, currVal_148, currVal_149, currVal_150);
        var currVal_151 = nodeValue(_v, 1140).isHostClass;
        var currVal_152 = nodeValue(_v, 1141).isHostClass;
        _ck(_v, 1139, 0, currVal_151, currVal_152);
        var currVal_153 = nodeValue(_v, 1145).isHostClass;
        _ck(_v, 1144, 0, currVal_153);
        var currVal_154 = nodeValue(_v, 1357).isHostClass;
        _ck(_v, 1356, 0, currVal_154);
        var currVal_155 = nodeValue(_v, 1361).isHostClass;
        var currVal_156 = nodeValue(_v, 1361).scrollFrameContent;
        var currVal_157 = nodeValue(_v, 1361).role;
        var currVal_158 = nodeValue(_v, 1361).classIndicatorPrimary;
        var currVal_159 = nodeValue(_v, 1361).classIndicatorAccent;
        var currVal_160 = nodeValue(_v, 1361).classTabIcon;
        var currVal_161 = nodeValue(_v, 1361).classTabIconText;
        _ck(_v, 1360, 0, currVal_155, currVal_156, currVal_157, currVal_158, currVal_159, currVal_160, currVal_161);
        var currVal_164 = nodeValue(_v, 1456).isHostClass;
        _ck(_v, 1455, 0, currVal_164);
        var currVal_165 = nodeValue(_v, 1461).isHostClass;
        _ck(_v, 1459, 0, currVal_165);
        var currVal_167 = nodeValue(_v, 1467).isHostClass;
        var currVal_168 = nodeValue(_v, 1467).isBackClass;
        _ck(_v, 1466, 0, currVal_167, currVal_168);
        var currVal_169 = nodeValue(_v, 1470).isHostClass;
        var currVal_170 = nodeValue(_v, 1471).isHostClass;
        _ck(_v, 1469, 0, currVal_169, currVal_170);
        var currVal_171 = nodeValue(_v, 1476).isHostClass;
        _ck(_v, 1475, 0, currVal_171);
        var currVal_172 = nodeValue(_v, 1480).isHostClass;
        var currVal_173 = nodeValue(_v, 1480).scrollFrameContent;
        var currVal_174 = nodeValue(_v, 1480).role;
        var currVal_175 = nodeValue(_v, 1480).classIndicatorPrimary;
        var currVal_176 = nodeValue(_v, 1480).classIndicatorAccent;
        var currVal_177 = nodeValue(_v, 1480).classTabIcon;
        var currVal_178 = nodeValue(_v, 1480).classTabIconText;
        _ck(_v, 1479, 0, currVal_172, currVal_173, currVal_174, currVal_175, currVal_176, currVal_177, currVal_178);
        var currVal_180 = nodeValue(_v, 1485).isHostClass;
        var currVal_181 = nodeValue(_v, 1485).role;
        var currVal_182 = nodeValue(_v, 1485).classIconText;
        var currVal_183 = nodeValue(_v, 1485).classActive;
        _ck(_v, 1483, 0, currVal_180, currVal_181, currVal_182, currVal_183);
        var currVal_185 = nodeValue(_v, 1492).isHostClass;
        var currVal_186 = nodeValue(_v, 1492).role;
        var currVal_187 = nodeValue(_v, 1492).classIconText;
        var currVal_188 = nodeValue(_v, 1492).classActive;
        _ck(_v, 1490, 0, currVal_185, currVal_186, currVal_187, currVal_188);
        var currVal_189 = nodeValue(_v, 1499).isHostClass;
        var currVal_190 = nodeValue(_v, 1499).role;
        var currVal_191 = nodeValue(_v, 1499).classIconText;
        var currVal_192 = nodeValue(_v, 1499).classActive;
        _ck(_v, 1497, 0, currVal_189, currVal_190, currVal_191, currVal_192);
        var currVal_193 = nodeValue(_v, 1506).isHostClass;
        var currVal_194 = nodeValue(_v, 1506).role;
        var currVal_195 = nodeValue(_v, 1506).classIconText;
        var currVal_196 = nodeValue(_v, 1506).classActive;
        _ck(_v, 1504, 0, currVal_193, currVal_194, currVal_195, currVal_196);
        var currVal_197 = nodeValue(_v, 1513).isHostClass;
        var currVal_198 = nodeValue(_v, 1513).role;
        var currVal_199 = nodeValue(_v, 1513).classIconText;
        var currVal_200 = nodeValue(_v, 1513).classActive;
        _ck(_v, 1511, 0, currVal_197, currVal_198, currVal_199, currVal_200);
        var currVal_201 = nodeValue(_v, 1520).isHostClass;
        var currVal_202 = nodeValue(_v, 1520).role;
        var currVal_203 = nodeValue(_v, 1520).classIconText;
        var currVal_204 = nodeValue(_v, 1520).classActive;
        _ck(_v, 1518, 0, currVal_201, currVal_202, currVal_203, currVal_204);
        var currVal_205 = nodeValue(_v, 1527).isHostClass;
        var currVal_206 = nodeValue(_v, 1527).role;
        var currVal_207 = nodeValue(_v, 1527).classIconText;
        var currVal_208 = nodeValue(_v, 1527).classActive;
        _ck(_v, 1525, 0, currVal_205, currVal_206, currVal_207, currVal_208);
        var currVal_209 = nodeValue(_v, 1534).isHostClass;
        var currVal_210 = nodeValue(_v, 1534).role;
        var currVal_211 = nodeValue(_v, 1534).classIconText;
        var currVal_212 = nodeValue(_v, 1534).classActive;
        _ck(_v, 1532, 0, currVal_209, currVal_210, currVal_211, currVal_212);
        var currVal_213 = nodeValue(_v, 1541).isHostClass;
        var currVal_214 = nodeValue(_v, 1541).role;
        var currVal_215 = nodeValue(_v, 1541).classIconText;
        var currVal_216 = nodeValue(_v, 1541).classActive;
        _ck(_v, 1539, 0, currVal_213, currVal_214, currVal_215, currVal_216);
        var currVal_217 = nodeValue(_v, 1548).isHostClass;
        var currVal_218 = nodeValue(_v, 1548).role;
        var currVal_219 = nodeValue(_v, 1548).classIconText;
        var currVal_220 = nodeValue(_v, 1548).classActive;
        _ck(_v, 1546, 0, currVal_217, currVal_218, currVal_219, currVal_220);
        var currVal_221 = nodeValue(_v, 1555).isHostClass;
        var currVal_222 = nodeValue(_v, 1555).role;
        var currVal_223 = nodeValue(_v, 1555).classIconText;
        var currVal_224 = nodeValue(_v, 1555).classActive;
        _ck(_v, 1553, 0, currVal_221, currVal_222, currVal_223, currVal_224);
        var currVal_225 = nodeValue(_v, 1562).isHostClass;
        var currVal_226 = nodeValue(_v, 1562).role;
        var currVal_227 = nodeValue(_v, 1562).classIconText;
        var currVal_228 = nodeValue(_v, 1562).classActive;
        _ck(_v, 1560, 0, currVal_225, currVal_226, currVal_227, currVal_228);
        var currVal_229 = nodeValue(_v, 1569).isHostClass;
        var currVal_230 = nodeValue(_v, 1569).role;
        var currVal_231 = nodeValue(_v, 1569).classIconText;
        var currVal_232 = nodeValue(_v, 1569).classActive;
        _ck(_v, 1567, 0, currVal_229, currVal_230, currVal_231, currVal_232);
        var currVal_233 = nodeValue(_v, 1577).isHostClass;
        var currVal_234 = nodeValue(_v, 1577).isFowardClass;
        _ck(_v, 1576, 0, currVal_233, currVal_234);
        var currVal_235 = nodeValue(_v, 1580).isHostClass;
        var currVal_236 = nodeValue(_v, 1581).isHostClass;
        _ck(_v, 1579, 0, currVal_235, currVal_236);
    });
}
function View_TabDemoComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1, 'tab-demo', [], null, null, null, View_TabDemoComponent_0, RenderType_TabDemoComponent)),
        directiveDef(49152, null, 0, TabDemoComponent, [], null, null)], null, null);
}
var TabDemoComponentNgFactory = createComponentFactory('tab-demo', TabDemoComponent, View_TabDemoComponent_Host_0, {}, {}, []);
var styles_ItemOneContent = [];
var RenderType_ItemOneContent = createRendererType2({ encapsulation: 2,
    styles: styles_ItemOneContent, data: {} });
function View_ItemOneContent_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 2, 'p', [['class',
                'panel'], ['role', 'tabpanel']], null, null, null, null, null)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor,
            IterableDiffers, KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['Item One']))], function (_ck, _v) {
        var currVal_0 = 'panel';
        _ck(_v, 1, 0, currVal_0);
    }, null);
}
function View_ItemOneContent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1, 'item-one-routed-content', [], null, null, null, View_ItemOneContent_0, RenderType_ItemOneContent)), directiveDef(49152, null, 0, ItemOneContent, [], null, null)], null, null);
}
var ItemOneContentNgFactory = createComponentFactory('item-one-routed-content', ItemOneContent, View_ItemOneContent_Host_0, {}, {}, []);
var styles_ItemTwoContent = [];
var RenderType_ItemTwoContent = createRendererType2({ encapsulation: 2,
    styles: styles_ItemTwoContent, data: {} });
function View_ItemTwoContent_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 2, 'p', [['class',
                'panel'], ['role', 'tabpanel']], null, null, null, null, null)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor,
            IterableDiffers, KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['Item Two']))], function (_ck, _v) {
        var currVal_0 = 'panel';
        _ck(_v, 1, 0, currVal_0);
    }, null);
}
function View_ItemTwoContent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1, 'item-two-routed-content', [], null, null, null, View_ItemTwoContent_0, RenderType_ItemTwoContent)), directiveDef(49152, null, 0, ItemTwoContent, [], null, null)], null, null);
}
var ItemTwoContentNgFactory = createComponentFactory('item-two-routed-content', ItemTwoContent, View_ItemTwoContent_Host_0, {}, {}, []);
var styles_ItemThreeContent = [];
var RenderType_ItemThreeContent = createRendererType2({ encapsulation: 2,
    styles: styles_ItemThreeContent, data: {} });
function View_ItemThreeContent_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 2, 'p', [['class',
                'panel'], ['role', 'tabpanel']], null, null, null, null, null)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor,
            IterableDiffers, KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0, 'classBase'] }, null), (_l()(), textDef(null, ['Item Three']))], function (_ck, _v) {
        var currVal_0 = 'panel';
        _ck(_v, 1, 0, currVal_0);
    }, null);
}
function View_ItemThreeContent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1, 'item-three-routed-content', [], null, null, null, View_ItemThreeContent_0, RenderType_ItemThreeContent)), directiveDef(49152, null, 0, ItemThreeContent, [], null, null)], null, null);
}
var ItemThreeContentNgFactory = createComponentFactory('item-three-routed-content', ItemThreeContent, View_ItemThreeContent_Host_0, {}, {}, []);

/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
/* tslint:disable */
var styles_HomeComponent = [];
var RenderType_HomeComponent = createRendererType2({ encapsulation: 2,
    styles: styles_HomeComponent, data: {} });
function View_HomeComponent_1(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 27, 'mdc-card', [['class',
                'home-card']], [[2, 'mdc-card', null], [2, 'mdc-card--theme-dark', null]], null, null, View_CardComponent_0, RenderType_CardComponent)),
        directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers,
            KeyValueDiffers, ElementRef, Renderer, Renderer2], { classBase: [0,
                'classBase'] }, null), directiveDef(49152, null, 0, material_es5_6, [], null, null), (_l()(), textDef(0, ['\n    '])),
        (_l()(), elementDef(0, null, 0, 6, 'mdc-card-primary', [], [[2, 'mdc-card__primary',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_7, [], null, null), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 2, 'h1', [['mdc-card-title', '']], [[2, 'mdc-card__title',
                null], [2, 'mdc-card__title--large', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_9, [], null, null), (_l()(),
            textDef(null, ['', ''])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), textDef(0, ['\n    '])), (_l()(), elementDef(0, null, 0, 2, 'mdc-card-supporting-text', [], [[2, 'mdc-card__supporting-text', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_8, [], null, null),
        (_l()(), textDef(null, ['\n      ', '\n    '])), (_l()(), textDef(0, ['\n    '])),
        (_l()(), elementDef(0, null, 0, 10, 'mdc-card-actions', [['fxLayoutAlign.xs',
                'end']], [[2, 'mdc-card__actions', null], [2, 'mdc-card__actions--vertical',
                null]], null, null, null, null)),
        directiveDef(737280, null, 0, LayoutAlignDirective, [MediaMonitor, ElementRef,
            Renderer2, [8, null]], { alignXs: [0, 'alignXs'] }, null), directiveDef(16384, null, 0, material_es5_11, [], null, null),
        (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 5, 'button', [['mdc-button', '']], [[8, 'tabIndex', 0], [1, 'type',
                0], [2, 'mdc-button', null], [2, 'mdc-button--raised', null],
            [2, 'mdc-button--primary', null], [2, 'mdc-button--accent', null],
            [2, 'mdc-button--dense', null], [2, 'mdc-button--compact', null],
            [2, 'mdc-card__action', null]], [[null, 'keypress'], [null,
                'blur'], [null, 'click']], function (_v, en, $event) {
            var ad = true;
            if (('keypress' === en)) {
                var pd_0 = (nodeValue(_v, 22).onkeypress($event) !== false);
                ad = (pd_0 && ad);
            }
            if (('blur' === en)) {
                var pd_1 = (nodeValue(_v, 22).blur($event) !== false);
                ad = (pd_1 && ad);
            }
            if (('click' === en)) {
                var pd_2 = (nodeValue(_v, 23).onClick() !== false);
                ad = (pd_2 && ad);
            }
            return ad;
        }, View_ButtonComponent_0, RenderType_ButtonComponent)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(573440, null, 0, material_es5_4, [Renderer2, ElementRef, material_es5_74], { cardAction: [0, 'cardAction'] }, null), directiveDef(16384, null, 0, RouterLink, [Router, ActivatedRoute, [8, null], Renderer2,
            ElementRef], { routerLink: [0, 'routerLink'] }, null), pureArrayDef(1),
        (_l()(), textDef(0, ['Explore'])), (_l()(), textDef(null, ['\n    '])), (_l()(),
            textDef(0, ['\n  ']))], function (_ck, _v) {
        var currVal_2 = 'home-card';
        _ck(_v, 1, 0, currVal_2);
        var currVal_11 = 'end';
        _ck(_v, 17, 0, currVal_11);
        var currVal_21 = true;
        _ck(_v, 22, 0, currVal_21);
        var currVal_22 = _ck(_v, 24, 0, _v.context.$implicit.route);
        _ck(_v, 23, 0, currVal_22);
    }, function (_ck, _v) {
        var currVal_0 = nodeValue(_v, 2).isHostClass;
        var currVal_1 = nodeValue(_v, 2).classDarkTheme;
        _ck(_v, 0, 0, currVal_0, currVal_1);
        var currVal_3 = nodeValue(_v, 5).isHostClass;
        _ck(_v, 4, 0, currVal_3);
        var currVal_4 = nodeValue(_v, 8).isHostClass;
        var currVal_5 = nodeValue(_v, 8).classTitleLarge;
        _ck(_v, 7, 0, currVal_4, currVal_5);
        var currVal_6 = _v.context.$implicit.name;
        _ck(_v, 9, 0, currVal_6);
        var currVal_7 = nodeValue(_v, 13).isHostClass;
        _ck(_v, 12, 0, currVal_7);
        var currVal_8 = _v.context.$implicit.desc;
        _ck(_v, 14, 0, currVal_8);
        var currVal_9 = nodeValue(_v, 18).isHostClass;
        var currVal_10 = nodeValue(_v, 18).classCardActionVertical;
        _ck(_v, 16, 0, currVal_9, currVal_10);
        var currVal_12 = nodeValue(_v, 22).tabindex;
        var currVal_13 = nodeValue(_v, 22).attrType;
        var currVal_14 = nodeValue(_v, 22).isHostClass;
        var currVal_15 = nodeValue(_v, 22).classRaised;
        var currVal_16 = nodeValue(_v, 22).classPrimary;
        var currVal_17 = nodeValue(_v, 22).classAccent;
        var currVal_18 = nodeValue(_v, 22).classDense;
        var currVal_19 = nodeValue(_v, 22).classCompact;
        var currVal_20 = nodeValue(_v, 22).classCardAction;
        _ck(_v, 20, 0, currVal_12, currVal_13, currVal_14, currVal_15, currVal_16, currVal_17, currVal_18, currVal_19, currVal_20);
    });
}
function View_HomeComponent_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 13, 'div', [['fxLayout',
                'column'], ['style', 'padding: 20px 0 15px; margin-left: 15px;']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0,
                'layout'] }, null), (_l()(), textDef(null, ['\n  '])), (_l()(),
            elementDef(0, null, null, 2, 'span', [['mdc-typography-headline', '']], [[2, 'mdc-typography--headline', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['Angular Material Design Components'])),
        (_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 5, 'span', [['mdc-typography-subheading1', '']], [[2, 'mdc-typography--subheading1',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, undefined, [], null, null),
        (_l()(), textDef(null, ['View on '])), (_l()(), elementDef(0, null, null, 2, 'a', [['alt', 'GitHub'], ['href', 'https://github.com/trimox/angular-mdc-web'],
            ['mdc-typography-subheading1', '']], [[2, 'mdc-typography--subheading1',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, undefined, [], null, null),
        (_l()(), textDef(null, ['GitHub'])), (_l()(), textDef(null, ['\n'])),
        (_l()(), textDef(null, ['\n'])), (_l()(), elementDef(0, null, null, 8, 'div', [['fxLayout', 'row'], ['fxLayoutAlign', 'center start'], ['fxLayoutGap',
                '10px'], ['fxLayoutWrap', '']], null, null, null, null, null)), directiveDef(737280, null, 0, LayoutDirective, [MediaMonitor, ElementRef, Renderer2], { layout: [0, 'layout'] }, null),
        directiveDef(737280, null, 0, LayoutWrapDirective, [MediaMonitor, ElementRef,
            Renderer2, [2, LayoutDirective]], { wrap: [0, 'wrap'] }, null), directiveDef(1720320, null, 0, LayoutGapDirective, [MediaMonitor, ElementRef, Renderer2,
            [2, LayoutDirective]], { gap: [0, 'gap'] }, null), directiveDef(737280, null, 0, LayoutAlignDirective, [MediaMonitor, ElementRef, Renderer2,
            [2, LayoutDirective]], { align: [0, 'align'] }, null), (_l()(), textDef(null, ['\n  '])), (_l()(), anchorDef(16777216, null, null, 1, null, View_HomeComponent_1)), directiveDef(802816, null, 0, NgForOf, [ViewContainerRef,
            TemplateRef, IterableDiffers], { ngForOf: [0, 'ngForOf'] }, null),
        (_l()(), textDef(null, ['\n'])), (_l()(), textDef(null, ['\n']))], function (_ck, _v) {
        var _co = _v.component;
        var currVal_0 = 'column';
        _ck(_v, 1, 0, currVal_0);
        var currVal_4 = 'row';
        _ck(_v, 16, 0, currVal_4);
        var currVal_5 = '';
        _ck(_v, 17, 0, currVal_5);
        var currVal_6 = '10px';
        _ck(_v, 18, 0, currVal_6);
        var currVal_7 = 'center start';
        _ck(_v, 19, 0, currVal_7);
        var currVal_8 = _co.navLinks;
        _ck(_v, 22, 0, currVal_8);
    }, function (_ck, _v) {
        var currVal_1 = nodeValue(_v, 4).isHostClass;
        _ck(_v, 3, 0, currVal_1);
        var currVal_2 = nodeValue(_v, 8).isHostClass;
        _ck(_v, 7, 0, currVal_2);
        var currVal_3 = nodeValue(_v, 11).isHostClass;
        _ck(_v, 10, 0, currVal_3);
    });
}
function View_HomeComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1, 'home', [], null, null, null, View_HomeComponent_0, RenderType_HomeComponent)),
        directiveDef(49152, null, 0, HomeComponent, [], null, null)], null, null);
}
var HomeComponentNgFactory = createComponentFactory('home', HomeComponent, View_HomeComponent_Host_0, {}, {}, []);

/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
/* tslint:disable */
var styles_NavbarComponent = [];
var RenderType_NavbarComponent = createRendererType2({ encapsulation: 2,
    styles: styles_NavbarComponent, data: {} });
function View_NavbarComponent_1(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 10, 'mdc-list-item', [], [[2, 'mdc-list-item', null], [1, 'role', 0]], [[null,
                'click']], function (_v, en, $event) {
            var ad = true;
            if (('click' === en)) {
                var pd_0 = (nodeValue(_v, 3).onClick() !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, null, null)), providerDef(131584, null, material_es5_74, material_es5_74, [Renderer2, ElementRef, undefined]), directiveDef(4734976, [[4, 4]], 0, material_es5_59, [ElementRef, material_es5_74, material_es5_58], null, null), directiveDef(16384, null, 0, RouterLink, [Router, ActivatedRoute, [8, null],
            Renderer2, ElementRef], { routerLink: [0, 'routerLink'] }, null),
        pureArrayDef(1), (_l()(), textDef(null, ['\n            '])), (_l()(), elementDef(0, null, null, 3, 'i', [['material-icon', ''], ['mdc-list-item-start',
                '']], [[2, 'mdc-list-item__start-detail', null], [2, 'material-icons',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_60, [ElementRef], null, null), directiveDef(16384, null, 0, material_es5_65, [], null, null), (_l()(), textDef(null, ['', ''])), (_l()(),
            textDef(null, ['', '\n        ']))], function (_ck, _v) {
        var currVal_2 = _ck(_v, 4, 0, _v.context.$implicit.route);
        _ck(_v, 3, 0, currVal_2);
    }, function (_ck, _v) {
        var currVal_0 = nodeValue(_v, 2).isHostClass;
        var currVal_1 = nodeValue(_v, 2).role;
        _ck(_v, 0, 0, currVal_0, currVal_1);
        var currVal_3 = nodeValue(_v, 7).isHostClass;
        var currVal_4 = nodeValue(_v, 8).isHostClass;
        _ck(_v, 6, 0, currVal_3, currVal_4);
        var currVal_5 = _v.context.$implicit.icon;
        _ck(_v, 9, 0, currVal_5);
        var currVal_6 = _v.context.$implicit.name;
        _ck(_v, 10, 0, currVal_6);
    });
}
function View_NavbarComponent_0(_l) {
    return viewDef(0, [queryDef(402653184, 1, { drawer: 0 }), (_l()(), elementDef(0, null, null, 37, 'mdc-toolbar', [], [[2, 'mdc-toolbar', null],
            [2, 'mdc-toolbar--fixed', null], [2, 'mdc-toolbar--waterfall', null],
            [2, 'mdc-toolbar--flexible', null], [2, 'mdc-toolbar--fixed-lastrow-only',
                null], [2, 'mdc-toolbar--flexible-default-behavior', null]], null, null, View_ToolbarComponent_0, RenderType_ToolbarComponent)),
        directiveDef(4374528, null, 2, material_es5_101, [Renderer2, ElementRef,
            undefined], { fixed: [0, 'fixed'] }, null), queryDef(335544320, 2, { mdcFirstRow: 0 }),
        queryDef(335544320, 3, { mdcTitle: 0 }), (_l()(), textDef(0, ['\n  '])), (_l()(), elementDef(0, null, 0, 31, 'mdc-toolbar-row', [], [[2, 'mdc-toolbar__row',
                null]], null, null, null, null)),
        directiveDef(16384, [[2, 4]], 0, material_es5_102, [ElementRef], null, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 11, 'mdc-toolbar-section', [], [[2, 'mdc-toolbar__section',
                null], [2, 'mdc-toolbar__section--align-start', null],
            [2, 'mdc-toolbar__section--align-end', null], [2, 'mdc-toolbar__section--shrink-to-fit',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_103, [], { alignStart: [0,
                'alignStart'] }, null), (_l()(), textDef(null, ['\n      '])),
        (_l()(), elementDef(0, null, null, 3, 'button', [['material-icon', ''],
            ['mdc-toolbar-icon-menu', '']], [[2, 'material-icons', null], [2, 'mdc-toolbar__icon--menu',
                null]], [[null, 'click']], function (_v, en, $event) {
            var ad = true;
            var _co = _v.component;
            if (('click' === en)) {
                var pd_0 = (_co.handleMenuClick() !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, null, null)), directiveDef(16384, null, 0, material_es5_65, [], null, null), directiveDef(16384, null, 0, material_es5_107, [ElementRef], null, null),
        (_l()(), textDef(null, ['menu'])), (_l()(), textDef(null, ['\n      '])),
        (_l()(), elementDef(0, null, null, 2, 'mdc-toolbar-title', [], [[2, 'mdc-toolbar__title', null]], null, null, null, null)), directiveDef(16384, [[3, 4]], 0, material_es5_104, [ElementRef], null, null), (_l()(), textDef(null, ['Angular MDC'])),
        (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n    '])),
        (_l()(), elementDef(0, null, null, 14, 'mdc-toolbar-section', [], [[2, 'mdc-toolbar__section', null], [2, 'mdc-toolbar__section--align-start',
                null], [2, 'mdc-toolbar__section--align-end', null], [2,
                'mdc-toolbar__section--shrink-to-fit', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_103, [], { alignEnd: [0, 'alignEnd'], shrinkToFit: [1,
                'shrinkToFit'] }, null), (_l()(), textDef(null, ['\n      '])),
        (_l()(), elementDef(0, null, null, 10, 'a', [['alt', 'GitHub'], ['class',
                'material-icons'], ['href', 'https://github.com/trimox/angular-mdc-web'], ['mdc-toolbar-icon',
                '']], [[2, 'mdc-toolbar__icon', null]], null, null, null, null)), directiveDef(933888, null, 0, ClassDirective, [MediaMonitor, IterableDiffers, KeyValueDiffers, ElementRef, Renderer,
            Renderer2], { classBase: [0, 'classBase'] }, null), directiveDef(16384, null, 0, material_es5_106, [ElementRef], null, null),
        (_l()(), textDef(null, ['\n        '])), (_l()(), elementDef(0, null, null, 6, ':svg:svg', [['height', '20'], ['viewBox', '0 0 20 20'], ['width',
                '20'], ['xmlns', 'http://www.w3.org/2000/svg']], null, null, null, null, null)), (_l()(), textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 1, ':svg:title', [], null, null, null, null, null)),
        (_l()(), textDef(null, ['github-circle-white-transparent'])), (_l()(),
            textDef(null, ['\n          '])), (_l()(), elementDef(0, null, null, 0, ':svg:path', [['d', 'M10 0C4.477 0 0 4.477 0 10c0 4.42 2.87 8.17 6.84 9.5.5.08.66-.23.66-.5v-1.69c-2.77.6-3.36-1.34-3.36-1.34-.46-1.16-1.11-1.47-1.11-1.47-.91-.62.07-.6.07-.6 1 .07 1.53 1.03 1.53 1.03.87 1.52 2.34 1.07 2.91.83.09-.65.35-1.09.63-1.34-2.22-.25-4.55-1.11-4.55-4.92 0-1.11.38-2 1.03-2.71-.1-.25-.45-1.29.1-2.64 0 0 .84-.27 2.75 1.02.79-.22 1.65-.33 2.5-.33.85 0 1.71.11 2.5.33 1.91-1.29 2.75-1.02 2.75-1.02.55 1.35.2 2.39.1 2.64.65.71 1.03 1.6 1.03 2.71 0 3.82-2.34 4.66-4.57 4.91.36.31.69.92.69 1.85V19c0 .27.16.59.67.5C17.14 18.16 20 14.42 20 10A10 10 0 0 0 10 0z'],
            ['fill', '#FFF'], ['fill-rule', 'evenodd']], null, null, null, null, null)), (_l()(), textDef(null, ['\n        '])), (_l()(), textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(0, ['\n'])), (_l()(), textDef(null, ['\n'])),
        (_l()(), elementDef(0, null, null, 22, 'mdc-temporary-drawer', [], [[2, 'mdc-temporary-drawer', null]], null, null, View_TemporaryDrawerComponent_0, RenderType_TemporaryDrawerComponent)), directiveDef(4374528, [[1, 4], ['drawer',
                4]], 0, material_es5_42, [Renderer2, ElementRef, undefined], null, null), (_l()(), textDef(0, ['\n  '])), (_l()(), elementDef(0, null, 0, 2, 'mdc-temporary-drawer-spacer', [], [[2, 'mdc-temporary-drawer__toolbar-spacer',
                null]], null, null, null, null)),
        directiveDef(16384, null, 0, material_es5_37, [ElementRef], null, null), (_l()(), textDef(null, ['Angular MDC'])),
        (_l()(), textDef(0, ['\n  '])), (_l()(), elementDef(0, null, 0, 14, 'mdc-temporary-drawer-content', [], [[2, 'mdc-temporary-drawer__content', null]], null, null, null, null)), directiveDef(16384, null, 0, material_es5_38, [ElementRef], null, null),
        (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 10, 'mdc-list-group', [], [[2, 'mdc-list-group', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [ElementRef], null, null), (_l()(), textDef(null, ['\n      '])), (_l()(), elementDef(0, null, null, 6, 'mdc-list', [], [[2, 'mdc-list', null], [1, 'role', 0], [2, 'mdc-list--dense',
                null], [2, 'mdc-list--two-line', null], [2, 'mdc-list--avatar-list',
                null]], null, null, View_ListComponent_0, RenderType_ListComponent)), directiveDef(573440, null, 1, material_es5_58, [ElementRef], null, null), queryDef(603979776, 4, { listItems: 1 }),
        (_l()(), textDef(0, ['\n        '])), (_l()(), anchorDef(16777216, null, 0, 1, null, View_NavbarComponent_1)), directiveDef(802816, null, 0, NgForOf, [ViewContainerRef, TemplateRef, IterableDiffers], { ngForOf: [0,
                'ngForOf'] }, null), (_l()(), textDef(0, ['\n      '])), (_l()(),
            textDef(null, ['\n    '])), (_l()(), textDef(null, ['\n  '])),
        (_l()(), textDef(0, ['\n'])), (_l()(), textDef(null, ['\n']))], function (_ck, _v) {
        var _co = _v.component;
        var currVal_6 = true;
        _ck(_v, 2, 0, currVal_6);
        var currVal_12 = true;
        _ck(_v, 10, 0, currVal_12);
        var currVal_20 = true;
        var currVal_21 = true;
        _ck(_v, 23, 0, currVal_20, currVal_21);
        var currVal_23 = 'material-icons';
        _ck(_v, 26, 0, currVal_23);
        var currVal_33 = _co.navLinks;
        _ck(_v, 58, 0, currVal_33);
    }, function (_ck, _v) {
        var currVal_0 = nodeValue(_v, 2).isHostClass;
        var currVal_1 = nodeValue(_v, 2).classFixedToolbar;
        var currVal_2 = nodeValue(_v, 2).classWaterfallToolbar;
        var currVal_3 = nodeValue(_v, 2).classFlexibleToolbar;
        var currVal_4 = nodeValue(_v, 2).classFixedLastrow;
        var currVal_5 = nodeValue(_v, 2).classFlexibleDefaultBehavior;
        _ck(_v, 1, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5);
        var currVal_7 = nodeValue(_v, 7).isHostClass;
        _ck(_v, 6, 0, currVal_7);
        var currVal_8 = nodeValue(_v, 10).isHostClass;
        var currVal_9 = nodeValue(_v, 10).classAlignStart;
        var currVal_10 = nodeValue(_v, 10).classAlignEnd;
        var currVal_11 = nodeValue(_v, 10).classShrinkToFit;
        _ck(_v, 9, 0, currVal_8, currVal_9, currVal_10, currVal_11);
        var currVal_13 = nodeValue(_v, 13).isHostClass;
        var currVal_14 = nodeValue(_v, 14).isHostClass;
        _ck(_v, 12, 0, currVal_13, currVal_14);
        var currVal_15 = nodeValue(_v, 18).isHostClass;
        _ck(_v, 17, 0, currVal_15);
        var currVal_16 = nodeValue(_v, 23).isHostClass;
        var currVal_17 = nodeValue(_v, 23).classAlignStart;
        var currVal_18 = nodeValue(_v, 23).classAlignEnd;
        var currVal_19 = nodeValue(_v, 23).classShrinkToFit;
        _ck(_v, 22, 0, currVal_16, currVal_17, currVal_18, currVal_19);
        var currVal_22 = nodeValue(_v, 27).isHostClass;
        _ck(_v, 25, 0, currVal_22);
        var currVal_24 = nodeValue(_v, 41).isHostClass;
        _ck(_v, 40, 0, currVal_24);
        var currVal_25 = nodeValue(_v, 44).isHostClass;
        _ck(_v, 43, 0, currVal_25);
        var currVal_26 = nodeValue(_v, 48).isHostClass;
        _ck(_v, 47, 0, currVal_26);
        var currVal_27 = nodeValue(_v, 51).isHostClass;
        _ck(_v, 50, 0, currVal_27);
        var currVal_28 = nodeValue(_v, 54).isHostClass;
        var currVal_29 = nodeValue(_v, 54).role;
        var currVal_30 = nodeValue(_v, 54).classDenseList;
        var currVal_31 = nodeValue(_v, 54).classTwoline;
        var currVal_32 = nodeValue(_v, 54).classAvatarList;
        _ck(_v, 53, 0, currVal_28, currVal_29, currVal_30, currVal_31, currVal_32);
    });
}
function View_NavbarComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1, 'navbar', [], null, null, null, View_NavbarComponent_0, RenderType_NavbarComponent)),
        directiveDef(49152, null, 0, NavbarComponent, [Router], null, null)], null, null);
}
var NavbarComponentNgFactory = createComponentFactory('navbar', NavbarComponent, View_NavbarComponent_Host_0, {}, {}, []);

/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
/* tslint:disable */
var styles_AppComponent = [];
var RenderType_AppComponent = createRendererType2({ encapsulation: 2, styles: styles_AppComponent,
    data: {} });
function View_AppComponent_0(_l) {
    return viewDef(0, [(_l()(), textDef(null, ['\n  '])), (_l()(), elementDef(0, null, null, 8, 'div', [['mdc-typography', '']], [[2, 'mdc-typography', null]], null, null, null, null)), directiveDef(16384, null, 0, undefined, [], null, null), (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(0, null, null, 1, 'navbar', [], null, null, null, View_NavbarComponent_0, RenderType_NavbarComponent)),
        directiveDef(49152, null, 0, NavbarComponent, [Router], null, null),
        (_l()(), textDef(null, ['\n    '])), (_l()(), elementDef(16777216, null, null, 1, 'router-outlet', [], null, null, null, null, null)), directiveDef(212992, null, 0, RouterOutlet, [ChildrenOutletContexts, ViewContainerRef, ComponentFactoryResolver,
            [8, null], ChangeDetectorRef], null, null),
        (_l()(), textDef(null, ['\n  '])), (_l()(), textDef(null, ['\n  ']))], function (_ck, _v) {
        _ck(_v, 8, 0);
    }, function (_ck, _v) {
        var currVal_0 = nodeValue(_v, 2).isHostClass;
        _ck(_v, 1, 0, currVal_0);
    });
}
function View_AppComponent_Host_0(_l) {
    return viewDef(0, [(_l()(), elementDef(0, null, null, 1, 'app-root', [], null, null, null, View_AppComponent_0, RenderType_AppComponent)),
        directiveDef(114688, null, 0, AppComponent, [Router], null, null)], function (_ck, _v) {
        _ck(_v, 1, 0);
    }, null);
}
var AppComponentNgFactory = createComponentFactory('app-root', AppComponent, View_AppComponent_Host_0, {}, {}, []);

/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
/* tslint:disable */
var AppModuleNgFactory = createNgModuleFactory(AppModule, [], function (_l) {
    return moduleDef([moduleProvideDef(512, ComponentFactoryResolver, CodegenComponentFactoryResolver, [[8, [ButtonDemoComponentNgFactory, CheckboxDemoComponentNgFactory, FabDemoComponentNgFactory,
                    SwitchDemoComponentNgFactory, SnackbarDemoComponentNgFactory, MenuDemoComponentNgFactory,
                    TextfieldDemoComponentNgFactory, ToolbarDemoComponentNgFactory,
                    LinearProgressDemoComponentNgFactory, TypographyDemoComponentNgFactory,
                    RadioDemoComponentNgFactory, CardDemoComponentNgFactory, ElevationDemoComponentNgFactory,
                    ListDemoComponentNgFactory, DrawerDemoComponentNgFactory, DialogDemoComponentNgFactory,
                    TabDemoComponentNgFactory, ItemOneContentNgFactory, ItemTwoContentNgFactory,
                    ItemThreeContentNgFactory, HomeComponentNgFactory, AppComponentNgFactory]],
            [3, ComponentFactoryResolver], NgModuleRef]), moduleProvideDef(5120, LOCALE_ID, _localeFactory, [[3, LOCALE_ID]]), moduleProvideDef(4608, NgLocalization, NgLocaleLocalization, [LOCALE_ID]), moduleProvideDef(5120, APP_ID, _appIdRandomProviderFactory, []), moduleProvideDef(5120, IterableDiffers, _iterableDiffersFactory, []), moduleProvideDef(5120, KeyValueDiffers, _keyValueDiffersFactory, []), moduleProvideDef(4608, DomSanitizer, DomSanitizerImpl, [DOCUMENT]),
        moduleProvideDef(6144, Sanitizer, null, [DomSanitizer]), moduleProvideDef(4608, HAMMER_GESTURE_CONFIG, HammerGestureConfig, []), moduleProvideDef(5120, EVENT_MANAGER_PLUGINS, function (p0_0, p1_0, p2_0, p2_1) {
            return [new DomEventsPlugin(p0_0), new KeyEventsPlugin(p1_0),
                new HammerGesturesPlugin(p2_0, p2_1)];
        }, [DOCUMENT, DOCUMENT, DOCUMENT, HAMMER_GESTURE_CONFIG]),
        moduleProvideDef(4608, EventManager, EventManager, [EVENT_MANAGER_PLUGINS,
            NgZone]), moduleProvideDef(135680, DomSharedStylesHost, DomSharedStylesHost, [DOCUMENT]), moduleProvideDef(4608, DomRendererFactory2, DomRendererFactory2, [EventManager, DomSharedStylesHost]), moduleProvideDef(6144, RendererFactory2, null, [DomRendererFactory2]), moduleProvideDef(6144, SharedStylesHost, null, [DomSharedStylesHost]), moduleProvideDef(4608, Testability, Testability, [NgZone]), moduleProvideDef(4608, Meta, Meta, [DOCUMENT]),
        moduleProvideDef(4608, Title, Title, [DOCUMENT]), moduleProvideDef(4608, RadioControlRegistry, RadioControlRegistry, []), moduleProvideDef(4608, BrowserXhr, BrowserXhr, []),
        moduleProvideDef(4608, ResponseOptions, BaseResponseOptions, []),
        moduleProvideDef(5120, XSRFStrategy, _createDefaultCookieXSRFStrategy, []), moduleProvideDef(4608, XHRBackend, XHRBackend, [BrowserXhr, ResponseOptions, XSRFStrategy]),
        moduleProvideDef(4608, RequestOptions, BaseRequestOptions, []), moduleProvideDef(5120, Http, httpFactory, [XHRBackend, RequestOptions]), moduleProvideDef(5120, BREAKPOINTS, DEFAULT_BREAKPOINTS_PROVIDER_FACTORY, []), moduleProvideDef(4608, BreakPointRegistry, BreakPointRegistry, [BREAKPOINTS]), moduleProvideDef(4608, MatchMedia, MatchMedia, [NgZone]), moduleProvideDef(5120, MediaMonitor, MEDIA_MONITOR_PROVIDER_FACTORY, [[3, MediaMonitor], BreakPointRegistry,
            MatchMedia]), moduleProvideDef(5120, ObservableMedia, OBSERVABLE_MEDIA_PROVIDER_FACTORY, [[3, ObservableMedia], MatchMedia, BreakPointRegistry]), moduleProvideDef(4608, undefined, undefined, []), moduleProvideDef(5120, ActivatedRoute, rootRoute, [Router]), moduleProvideDef(4608, NoPreloading, NoPreloading, []),
        moduleProvideDef(6144, PreloadingStrategy, null, [NoPreloading]), moduleProvideDef(135680, RouterPreloader, RouterPreloader, [Router, NgModuleFactoryLoader,
            Compiler, Injector, PreloadingStrategy]), moduleProvideDef(4608, PreloadAllModules, PreloadAllModules, []), moduleProvideDef(5120, ROUTER_INITIALIZER, getBootstrapListener, [RouterInitializer]), moduleProvideDef(5120, APP_BOOTSTRAP_LISTENER, function (p0_0) {
            return [p0_0];
        }, [ROUTER_INITIALIZER]), moduleProvideDef(512, CommonModule, CommonModule, []), moduleProvideDef(1024, ErrorHandler, errorHandler, []), moduleProvideDef(1024, NgProbeToken, function () {
            return [routerNgProbeToken()];
        }, []), moduleProvideDef(512, RouterInitializer, RouterInitializer, [Injector]), moduleProvideDef(1024, APP_INITIALIZER, function (p0_0, p0_1, p1_0) {
            return [_createNgProbe(p0_0, p0_1), getAppInitializer(p1_0)];
        }, [[2, NgProbeToken$1], [2, NgProbeToken], RouterInitializer]), moduleProvideDef(512, ApplicationInitStatus, ApplicationInitStatus, [[2, APP_INITIALIZER]]), moduleProvideDef(131584, ApplicationRef_, ApplicationRef_, [NgZone, Console, Injector, ErrorHandler, ComponentFactoryResolver,
            ApplicationInitStatus]), moduleProvideDef(2048, ApplicationRef, null, [ApplicationRef_]), moduleProvideDef(512, ApplicationModule, ApplicationModule, [ApplicationRef]),
        moduleProvideDef(512, BrowserModule, BrowserModule, [[3, BrowserModule]]),
        moduleProvideDef(512, InternalFormsSharedModule, InternalFormsSharedModule, []), moduleProvideDef(512, FormsModule, FormsModule, []), moduleProvideDef(512, HttpModule, HttpModule, []),
        moduleProvideDef(512, MediaQueriesModule, MediaQueriesModule, []),
        moduleProvideDef(512, FlexLayoutModule, FlexLayoutModule, []), moduleProvideDef(512, material_es5_3, material_es5_3, []), moduleProvideDef(512, material_es5_5, material_es5_5, []), moduleProvideDef(512, material_es5_15, material_es5_15, []), moduleProvideDef(512, material_es5_18, material_es5_18, []),
        moduleProvideDef(512, material_es5_21, material_es5_21, []), moduleProvideDef(512, material_es5_31, material_es5_31, []), moduleProvideDef(512, material_es5_50, material_es5_50, []), moduleProvideDef(512, material_es5_53, material_es5_53, []), moduleProvideDef(512, material_es5_55, material_es5_55, []), moduleProvideDef(512, material_es5_57, material_es5_57, []),
        moduleProvideDef(512, material_es5_64, material_es5_64, []),
        moduleProvideDef(512, material_es5_66, material_es5_66, []), moduleProvideDef(512, material_es5_70, material_es5_70, []), moduleProvideDef(512, material_es5_73, material_es5_73, []), moduleProvideDef(512, material_es5_75, material_es5_75, []),
        moduleProvideDef(512, material_es5_77, material_es5_77, []), moduleProvideDef(512, material_es5_80, material_es5_80, []), moduleProvideDef(512, material_es5_90, material_es5_90, []), moduleProvideDef(512, material_es5_98, material_es5_98, []), moduleProvideDef(512, material_es5_100, material_es5_100, []),
        moduleProvideDef(512, material_es5_108, material_es5_108, []), moduleProvideDef(512, material_es5_2, material_es5_2, []), moduleProvideDef(1024, ROUTER_FORROOT_GUARD, provideForRootGuard, [[3, Router]]), moduleProvideDef(512, UrlSerializer, DefaultUrlSerializer, []), moduleProvideDef(512, ChildrenOutletContexts, ChildrenOutletContexts, []), moduleProvideDef(256, ROUTER_CONFIGURATION, { useHash: true }, []),
        moduleProvideDef(1024, LocationStrategy, provideLocationStrategy, [PlatformLocation, [2, APP_BASE_HREF],
            ROUTER_CONFIGURATION]), moduleProvideDef(512, Location, Location, [LocationStrategy]),
        moduleProvideDef(512, Compiler, Compiler, []), moduleProvideDef(512, NgModuleFactoryLoader, SystemJsNgModuleLoader, [Compiler, [2, SystemJsNgModuleLoaderConfig]]),
        moduleProvideDef(1024, ROUTES, function () {
            return [[{ path: 'button-demo', component: ButtonDemoComponent }, { path: 'checkbox-demo',
                        component: CheckboxDemoComponent }, { path: 'fab-demo', component: FabDemoComponent },
                    { path: 'switch-demo', component: SwitchDemoComponent }, { path: 'snackbar-demo',
                        component: SnackbarDemoComponent }, { path: 'menu-demo', component: MenuDemoComponent },
                    { path: 'textfield-demo', component: TextfieldDemoComponent }, { path: 'toolbar-demo',
                        component: ToolbarDemoComponent }, { path: 'linear-progress-demo',
                        component: LinearProgressDemoComponent }, { path: 'typography-demo',
                        component: TypographyDemoComponent }, { path: 'radio-demo', component: RadioDemoComponent },
                    { path: 'card-demo', component: CardDemoComponent }, { path: 'elevation-demo',
                        component: ElevationDemoComponent }, { path: 'list-demo', component: ListDemoComponent },
                    { path: 'drawer-demo', component: DrawerDemoComponent }, { path: 'dialog-demo',
                        component: DialogDemoComponent }, { path: 'tab-demo', component: TabDemoComponent,
                        children: [{ path: '', component: ItemOneContent, outlet: 'taboutlet' },
                            { path: 'first-tab', component: ItemOneContent, outlet: 'taboutlet' },
                            { path: 'second-tab', component: ItemTwoContent, outlet: 'taboutlet' },
                            { path: 'third-tab', component: ItemThreeContent, outlet: 'taboutlet' }] },
                    { path: '', component: HomeComponent, pathMatch: 'full' }, { path: '**',
                        redirectTo: '' }]];
        }, []), moduleProvideDef(1024, Router, setupRouter, [ApplicationRef, UrlSerializer,
            ChildrenOutletContexts, Location, Injector, NgModuleFactoryLoader,
            Compiler, ROUTES, ROUTER_CONFIGURATION, [2, UrlHandlingStrategy],
            [2, RouteReuseStrategy]]), moduleProvideDef(512, RouterModule, RouterModule, [[2, ROUTER_FORROOT_GUARD], [2, Router]]), moduleProvideDef(512, AppModule, AppModule, [ApplicationRef])]);
});

enableProdMode();
platformBrowser().bootstrapModuleFactory(AppModuleNgFactory);

}());
//# sourceMappingURL=build.js.map
